commit f0c0d4b74d59809568f560001c8f88e8211334a4
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Fri Feb 28 14:59:42 2020 +0000

    arm64: entry: unmask IRQ in el0_sp()
    
    Currently, the EL0 SP alignment handler masks IRQs unnecessarily. It
    does so due to historic code sharing of the EL0 SP and PC alignment
    handlers, and branch predictor hardening applicable to the EL0 SP
    handler.
    
    We began masking IRQs in the EL0 SP alignment handler in commit:
    
      5dfc6ed27710c42c ("arm64: entry: Apply BP hardening for high-priority synchronous exception")
    
    ... as this shared code with the EL0 PC alignment handler, and branch
    predictor hardening made it necessary to disable IRQs for early parts of
    the EL0 PC alignment handler. It was not necessary to mask IRQs during
    EL0 SP alignment exceptions, but it was not considered harmful to do so.
    
    This masking was carried forward into C code in commit:
    
      582f95835a8fc812 ("arm64: entry: convert el0_sync to C")
    
    ... where the SP/PC cases were split into separate handlers, and the
    masking duplicated.
    
    Subsequently the EL0 PC alignment handler was refactored to perform
    branch predictor hardening before unmasking IRQs, in commit:
    
      bfe298745afc9548 ("arm64: entry-common: don't touch daif before bp-hardening")
    
    ... but the redundant masking of IRQs was not removed from the EL0 SP
    alignment handler.
    
    Let's do so now, and make it interruptible as with most other
    synchronous exception handlers.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Reviewed-by: James Morse <james.morse@arm.com>

diff --git a/arch/arm64/kernel/entry-common.c b/arch/arm64/kernel/entry-common.c
index fde59981445c..c839b5bf1904 100644
--- a/arch/arm64/kernel/entry-common.c
+++ b/arch/arm64/kernel/entry-common.c
@@ -175,7 +175,7 @@ NOKPROBE_SYMBOL(el0_pc);
 static void notrace el0_sp(struct pt_regs *regs, unsigned long esr)
 {
 	user_exit_irqoff();
-	local_daif_restore(DAIF_PROCCTX_NOIRQ);
+	local_daif_restore(DAIF_PROCCTX);
 	do_sp_pc_abort(regs->sp, esr, regs);
 }
 NOKPROBE_SYMBOL(el0_sp);