commit 33592274321eab2e35e2fdf01857c722431fcf8f
Author: Wenchao Hao <haowenchao2@huawei.com>
Date:   Tue Oct 10 17:20:47 2023 +0800

    scsi: scsi_debug: Set command result and sense data if error is injected
    
    If a fail command error is injected, set the command's status and sense
    data then finish this SCSI command.
    
    Set SCSI command's status and sense data format:
    
      +--------+------+-------------------------------------------------------+
      | Column | Type | Description                                           |
      +--------+------+-------------------------------------------------------+
      |   1    |  u8  | Error type, fixed to 0x2                              |
      +--------+------+-------------------------------------------------------+
      |   2    |  s32 | Error Count                                           |
      |        |      |  0: the rule will be ignored                          |
      |        |      |  positive: the rule will always take effect           |
      |        |      |  negative: the rule takes effect n times where -n is  |
      |        |      |            the value given. Ignored after n times     |
      +--------+------+-------------------------------------------------------+
      |   3    |  x8  | SCSI command opcode, 0xff for all commands            |
      +--------+------+-------------------------------------------------------+
      |   4    |  x8  | Host byte in scsi_cmd::status                         |
      |        |      | [scsi_cmd::status has 32 bits holding these 3 bytes]  |
      +--------+------+-------------------------------------------------------+
      |   5    |  x8  | Driver byte in scsi_cmd::status                       |
      +--------+------+-------------------------------------------------------+
      |   6    |  x8  | SCSI Status byte in scsi_cmd::status                  |
      +--------+------+-------------------------------------------------------+
      |   7    |  x8  | SCSI Sense Key in scsi_cmnd                           |
      +--------+------+-------------------------------------------------------+
      |   8    |  x8  | SCSI ASC in scsi_cmnd                                 |
      +--------+------+-------------------------------------------------------+
      |   9    |  x8  | SCSI ASCQ in scsi_cmnd                                |
      +--------+------+-------------------------------------------------------+
    
    Examples:
        error=/sys/kernel/debug/scsi_debug/0:0:0:1/error
        echo "2 -10 0x88 0 0 0x2 0x3 0x11 0x0" >${error}
    
    will make device's read command return with media error with additional
    sense of "Unrecovered read error" (UNC):
    
    Acked-by: Douglas Gilbert <dgilbert@interlog.com>
    Signed-off-by: Wenchao Hao <haowenchao2@huawei.com>
    Link: https://lore.kernel.org/r/20231010092051.608007-7-haowenchao2@huawei.com
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

diff --git a/drivers/scsi/scsi_debug.c b/drivers/scsi/scsi_debug.c
index efdd63dd6d25..d15d007f1317 100644
--- a/drivers/scsi/scsi_debug.c
+++ b/drivers/scsi/scsi_debug.c
@@ -7797,6 +7797,48 @@ static int sdebug_fail_queue_cmd(struct scsi_cmnd *cmnd)
 	return 0;
 }
 
+static int sdebug_fail_cmd(struct scsi_cmnd *cmnd, int *retval,
+			   struct sdebug_err_inject *info)
+{
+	struct scsi_device *sdp = cmnd->device;
+	struct sdebug_dev_info *devip = (struct sdebug_dev_info *)sdp->hostdata;
+	struct sdebug_err_inject *err;
+	unsigned char *cmd = cmnd->cmnd;
+	int ret = 0;
+	int result;
+
+	if (devip == NULL)
+		return 0;
+
+	rcu_read_lock();
+	list_for_each_entry_rcu(err, &devip->inject_err_list, list) {
+		if (err->type == ERR_FAIL_CMD &&
+		    (err->cmd == cmd[0] || err->cmd == 0xff)) {
+			if (!err->cnt) {
+				rcu_read_unlock();
+				return 0;
+			}
+
+			ret = !!err->cnt;
+			rcu_read_unlock();
+			goto out_handle;
+		}
+	}
+	rcu_read_unlock();
+
+	return 0;
+
+out_handle:
+	if (err->cnt < 0)
+		err->cnt++;
+	mk_sense_buffer(cmnd, err->sense_key, err->asc, err->asq);
+	result = err->status_byte | err->host_byte << 16 | err->driver_byte << 24;
+	*info = *err;
+	*retval = schedule_resp(cmnd, devip, result, NULL, 0, 0);
+
+	return ret;
+}
+
 static int scsi_debug_queuecommand(struct Scsi_Host *shost,
 				   struct scsi_cmnd *scp)
 {
@@ -7817,6 +7859,7 @@ static int scsi_debug_queuecommand(struct Scsi_Host *shost,
 	bool has_wlun_rl;
 	bool inject_now;
 	int ret = 0;
+	struct sdebug_err_inject err;
 
 	scsi_set_resid(scp, 0);
 	if (sdebug_statistics) {
@@ -7869,6 +7912,16 @@ static int scsi_debug_queuecommand(struct Scsi_Host *shost,
 		return ret;
 	}
 
+	if (sdebug_fail_cmd(scp, &ret, &err)) {
+		scmd_printk(KERN_INFO, scp,
+			"fail command 0x%x with hostbyte=0x%x, "
+			"driverbyte=0x%x, statusbyte=0x%x, "
+			"sense_key=0x%x, asc=0x%x, asq=0x%x\n",
+			opcode, err.host_byte, err.driver_byte,
+			err.status_byte, err.sense_key, err.asc, err.asq);
+		return ret;
+	}
+
 	if (unlikely(inject_now && !atomic_read(&sdeb_inject_pending)))
 		atomic_set(&sdeb_inject_pending, 1);