{
  "hash": "296990deb389c7da21c78030376ba244dc1badf5",
  "hash_short": "296990de",
  "subject": "mnt: Make propagate_umount less slow for overlapping mount propagation trees",
  "body": "Andrei Vagin pointed out that time to executue propagate_umount can go\nnon-linear (and take a ludicrious amount of time) when the mount\npropogation trees of the mounts to be unmunted by a lazy unmount\noverlap.\n\nMake the walk of the mount propagation trees nearly linear by\nremembering which mounts have already been visited, allowing\nsubsequent walks to detect when walking a mount propgation tree or a\nsubtree of a mount propgation tree would be duplicate work and to skip\nthem entirely.\n\nWalk the list of mounts whose propgatation trees need to be traversed\nfrom the mount highest in the mount tree to mounts lower in the mount\ntree so that odds are higher that the code will walk the largest trees\nfirst, allowing later tree walks to be skipped entirely.\n\nAdd cleanup_umount_visitation to remover the code's memory of which\nmounts have been visited.\n\nAdd the functions last_slave and skip_propagation_subtree to allow\nskipping appropriate parts of the mount propagation tree without\nneeding to change the logic of the rest of the code.\n\nA script to generate overlapping mount propagation trees:\n\n$ cat runs.h\nset -e\nmount -t tmpfs zdtm /mnt\nmkdir -p /mnt/1 /mnt/2\nmount -t tmpfs zdtm /mnt/1\nmount --make-shared /mnt/1\nmkdir /mnt/1/1\n\niteration=10\nif [ -n \"$1\" ] ; then\n\titeration=$1\nfi\n\nfor i in $(seq $iteration); do\n\tmount --bind /mnt/1/1 /mnt/1/1\ndone\n\nmount --rbind /mnt/1 /mnt/2\n\nTIMEFORMAT='%Rs'\nnr=$(( ( 2 ** ( $iteration + 1 ) ) + 1 ))\necho -n \"umount -l /mnt/1 -> $nr        \"\ntime umount -l /mnt/1\n\nnr=$(cat /proc/self/mountinfo | grep zdtm | wc -l )\ntime umount -l /mnt/2\n\n$ for i in $(seq 9 19); do echo $i; unshare -Urm bash ./run.sh $i; done\n\nHere are the performance numbers with and without the patch:\n\n     mhash |  8192   |  8192  | 1048576 | 1048576\n    mounts | before  | after  |  before | after\n    ------------------------------------------------\n      1025 |  0.040s | 0.016s |  0.038s | 0.019s\n      2049 |  0.094s | 0.017s |  0.080s | 0.018s\n      4097 |  0.243s | 0.019s |  0.206s | 0.023s\n      8193 |  1.202s | 0.028s |  1.562s | 0.032s\n     16385 |  9.635s | 0.036s |  9.952s | 0.041s\n     32769 | 60.928s | 0.063s | 44.321s | 0.064s\n     65537 |         | 0.097s |         | 0.097s\n    131073 |         | 0.233s |         | 0.176s\n    262145 |         | 0.653s |         | 0.344s\n    524289 |         | 2.305s |         | 0.735s\n   1048577 |         | 7.107s |         | 2.603s\n\nAndrei Vagin reports fixing the performance problem is part of the\nwork to fix CVE-2016-6213.\n\nCc: stable@vger.kernel.org\nFixes: a05964f3917c (\"[PATCH] shared mounts handling: umount\")\nReported-by: Andrei Vagin <avagin@openvz.org>\nReviewed-by: Andrei Vagin <avagin@virtuozzo.com>\nSigned-off-by: \"Eric W. Biederman\" <ebiederm@xmission.com>",
  "full_message": "mnt: Make propagate_umount less slow for overlapping mount propagation trees\n\nAndrei Vagin pointed out that time to executue propagate_umount can go\nnon-linear (and take a ludicrious amount of time) when the mount\npropogation trees of the mounts to be unmunted by a lazy unmount\noverlap.\n\nMake the walk of the mount propagation trees nearly linear by\nremembering which mounts have already been visited, allowing\nsubsequent walks to detect when walking a mount propgation tree or a\nsubtree of a mount propgation tree would be duplicate work and to skip\nthem entirely.\n\nWalk the list of mounts whose propgatation trees need to be traversed\nfrom the mount highest in the mount tree to mounts lower in the mount\ntree so that odds are higher that the code will walk the largest trees\nfirst, allowing later tree walks to be skipped entirely.\n\nAdd cleanup_umount_visitation to remover the code's memory of which\nmounts have been visited.\n\nAdd the functions last_slave and skip_propagation_subtree to allow\nskipping appropriate parts of the mount propagation tree without\nneeding to change the logic of the rest of the code.\n\nA script to generate overlapping mount propagation trees:\n\n$ cat runs.h\nset -e\nmount -t tmpfs zdtm /mnt\nmkdir -p /mnt/1 /mnt/2\nmount -t tmpfs zdtm /mnt/1\nmount --make-shared /mnt/1\nmkdir /mnt/1/1\n\niteration=10\nif [ -n \"$1\" ] ; then\n\titeration=$1\nfi\n\nfor i in $(seq $iteration); do\n\tmount --bind /mnt/1/1 /mnt/1/1\ndone\n\nmount --rbind /mnt/1 /mnt/2\n\nTIMEFORMAT='%Rs'\nnr=$(( ( 2 ** ( $iteration + 1 ) ) + 1 ))\necho -n \"umount -l /mnt/1 -> $nr        \"\ntime umount -l /mnt/1\n\nnr=$(cat /proc/self/mountinfo | grep zdtm | wc -l )\ntime umount -l /mnt/2\n\n$ for i in $(seq 9 19); do echo $i; unshare -Urm bash ./run.sh $i; done\n\nHere are the performance numbers with and without the patch:\n\n     mhash |  8192   |  8192  | 1048576 | 1048576\n    mounts | before  | after  |  before | after\n    ------------------------------------------------\n      1025 |  0.040s | 0.016s |  0.038s | 0.019s\n      2049 |  0.094s | 0.017s |  0.080s | 0.018s\n      4097 |  0.243s | 0.019s |  0.206s | 0.023s\n      8193 |  1.202s | 0.028s |  1.562s | 0.032s\n     16385 |  9.635s | 0.036s |  9.952s | 0.041s\n     32769 | 60.928s | 0.063s | 44.321s | 0.064s\n     65537 |         | 0.097s |         | 0.097s\n    131073 |         | 0.233s |         | 0.176s\n    262145 |         | 0.653s |         | 0.344s\n    524289 |         | 2.305s |         | 0.735s\n   1048577 |         | 7.107s |         | 2.603s\n\nAndrei Vagin reports fixing the performance problem is part of the\nwork to fix CVE-2016-6213.\n\nCc: stable@vger.kernel.org\nFixes: a05964f3917c (\"[PATCH] shared mounts handling: umount\")\nReported-by: Andrei Vagin <avagin@openvz.org>\nReviewed-by: Andrei Vagin <avagin@virtuozzo.com>\nSigned-off-by: \"Eric W. Biederman\" <ebiederm@xmission.com>",
  "author_name": "Eric W. Biederman",
  "author_email": "ebiederm@xmission.com",
  "author_date": "Mon Oct 24 17:25:19 2016 -0500",
  "author_date_iso": "2016-10-24T17:25:19-05:00",
  "committer_name": "Eric W. Biederman",
  "committer_email": "ebiederm@xmission.com",
  "committer_date": "Tue May 23 08:41:17 2017 -0500",
  "committer_date_iso": "2017-05-23T08:41:17-05:00",
  "files_changed": [
    "fs/pnode.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "fs/pnode.c",
      "insertions": 62,
      "deletions": 1
    }
  ],
  "total_insertions": 62,
  "total_deletions": 1,
  "total_changes": 63,
  "parents": [
    "99b19d16471e9c3faa85cad38abc9cbbe04c6d55"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.13",
    "v4.13-rc1",
    "v4.13-rc2",
    "v4.13-rc3",
    "v4.13-rc4",
    "v4.13-rc5",
    "v4.13-rc6",
    "v4.13-rc7",
    "v4.14",
    "v4.14-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2016-6213"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "fs/pnode.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}