{
  "hash": "4dbd80fb9176f23c78cecd0a8285001cd2066425",
  "hash_short": "4dbd80fb",
  "subject": "btrfs: Fix metadata underflow caused by btrfs_reloc_clone_csum error",
  "body": "[BUG]\nWhen btrfs_reloc_clone_csum() reports error, it can underflow metadata\nand leads to kernel assertion on outstanding extents in\nrun_delalloc_nocow() and cow_file_range().\n\n BTRFS info (device vdb5): relocating block group 12582912 flags data\n BTRFS info (device vdb5): found 1 extents\n assertion failed: inode->outstanding_extents >= num_extents, file: fs/btrfs//extent-tree.c, line: 5858\n\nCurrently, due to another bug blocking ordered extents, the bug is only\nreproducible under certain block group layout and using error injection.\n\na) Create one data block group with one 4K extent in it.\n   To avoid the bug that hangs btrfs due to ordered extent which never\n   finishes\nb) Make btrfs_reloc_clone_csum() always fail\nc) Relocate that block group\n\n[CAUSE]\nrun_delalloc_nocow() and cow_file_range() handles error from\nbtrfs_reloc_clone_csum() wrongly:\n\n(The ascii chart shows a more generic case of this bug other than the\nbug mentioned above)\n\n|<------------------ delalloc range --------------------------->|\n| OE 1 | OE 2 | ... | OE n |\n                    |<----------- cleanup range --------------->|\n|<-----------  ----------->|\n             \\/\n btrfs_finish_ordered_io() range\n\nSo error handler, which calls extent_clear_unlock_delalloc() with\nEXTENT_DELALLOC and EXTENT_DO_ACCOUNT bits, and btrfs_finish_ordered_io()\nwill both cover OE n, and free its metadata, causing metadata under flow.\n\n[Fix]\nThe fix is to ensure after calling btrfs_add_ordered_extent(), we only\ncall error handler after increasing the iteration offset, so that\ncleanup range won't cover any created ordered extent.\n\n|<------------------ delalloc range --------------------------->|\n| OE 1 | OE 2 | ... | OE n |\n|<-----------  ----------->|<---------- cleanup range --------->|\n             \\/\n btrfs_finish_ordered_io() range\n\nSigned-off-by: Qu Wenruo <quwenruo@cn.fujitsu.com>\nReviewed-by: Filipe Manana <fdmanana@suse.com>\nReviewed-by: Liu Bo <bo.li.liu@oracle.com>",
  "full_message": "btrfs: Fix metadata underflow caused by btrfs_reloc_clone_csum error\n\n[BUG]\nWhen btrfs_reloc_clone_csum() reports error, it can underflow metadata\nand leads to kernel assertion on outstanding extents in\nrun_delalloc_nocow() and cow_file_range().\n\n BTRFS info (device vdb5): relocating block group 12582912 flags data\n BTRFS info (device vdb5): found 1 extents\n assertion failed: inode->outstanding_extents >= num_extents, file: fs/btrfs//extent-tree.c, line: 5858\n\nCurrently, due to another bug blocking ordered extents, the bug is only\nreproducible under certain block group layout and using error injection.\n\na) Create one data block group with one 4K extent in it.\n   To avoid the bug that hangs btrfs due to ordered extent which never\n   finishes\nb) Make btrfs_reloc_clone_csum() always fail\nc) Relocate that block group\n\n[CAUSE]\nrun_delalloc_nocow() and cow_file_range() handles error from\nbtrfs_reloc_clone_csum() wrongly:\n\n(The ascii chart shows a more generic case of this bug other than the\nbug mentioned above)\n\n|<------------------ delalloc range --------------------------->|\n| OE 1 | OE 2 | ... | OE n |\n                    |<----------- cleanup range --------------->|\n|<-----------  ----------->|\n             \\/\n btrfs_finish_ordered_io() range\n\nSo error handler, which calls extent_clear_unlock_delalloc() with\nEXTENT_DELALLOC and EXTENT_DO_ACCOUNT bits, and btrfs_finish_ordered_io()\nwill both cover OE n, and free its metadata, causing metadata under flow.\n\n[Fix]\nThe fix is to ensure after calling btrfs_add_ordered_extent(), we only\ncall error handler after increasing the iteration offset, so that\ncleanup range won't cover any created ordered extent.\n\n|<------------------ delalloc range --------------------------->|\n| OE 1 | OE 2 | ... | OE n |\n|<-----------  ----------->|<---------- cleanup range --------->|\n             \\/\n btrfs_finish_ordered_io() range\n\nSigned-off-by: Qu Wenruo <quwenruo@cn.fujitsu.com>\nReviewed-by: Filipe Manana <fdmanana@suse.com>\nReviewed-by: Liu Bo <bo.li.liu@oracle.com>",
  "author_name": "Qu Wenruo",
  "author_email": "quwenruo@cn.fujitsu.com",
  "author_date": "Wed Mar 8 10:25:51 2017 +0800",
  "author_date_iso": "2017-03-08T10:25:51+08:00",
  "committer_name": "Filipe Manana",
  "committer_email": "fdmanana@suse.com",
  "committer_date": "Wed Apr 26 16:27:21 2017 +0100",
  "committer_date_iso": "2017-04-26T16:27:21+01:00",
  "files_changed": [
    "fs/btrfs/inode.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "fs/btrfs/inode.c",
      "insertions": 39,
      "deletions": 12
    }
  ],
  "total_insertions": 39,
  "total_deletions": 12,
  "total_changes": 51,
  "parents": [
    "a967efb30b3afa3d858edd6a17f544f9e9e46eea"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.12",
    "v4.12-rc1",
    "v4.12-rc2",
    "v4.12-rc3",
    "v4.12-rc4",
    "v4.12-rc5",
    "v4.12-rc6",
    "v4.12-rc7",
    "v4.13",
    "v4.13-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/btrfs/inode.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}