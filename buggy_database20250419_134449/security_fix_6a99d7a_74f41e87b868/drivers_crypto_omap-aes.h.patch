commit 6a99d7a2d73cbeaa0b93551fc8ec887295821bbe
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Tue Jul 7 09:31:53 2020 +0300

    crypto: omap-aes - permit asynchronous skcipher as fallback
    
    Even though the omap-aes driver implements asynchronous versions of
    ecb(aes), cbc(aes) and ctr(aes), the fallbacks it allocates are required
    to be synchronous. Given that SIMD based software implementations are
    usually asynchronous as well, even though they rarely complete
    asynchronously (this typically only happens in cases where the request was
    made from softirq context, while SIMD was already in use in the task
    context that it interrupted), these implementations are disregarded, and
    either the generic C version or another table based version implemented in
    assembler is selected instead.
    
    Since falling back to synchronous AES is not only a performance issue, but
    potentially a security issue as well (due to the fact that table based AES
    is not time invariant), let's fix this, by allocating an ordinary skcipher
    as the fallback, and invoke it with the completion routine that was given
    to the outer request.
    
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

diff --git a/drivers/crypto/omap-aes.h b/drivers/crypto/omap-aes.h
index 2d111bf906e1..23d073e87bb8 100644
--- a/drivers/crypto/omap-aes.h
+++ b/drivers/crypto/omap-aes.h
@@ -97,7 +97,7 @@ struct omap_aes_ctx {
 	int		keylen;
 	u32		key[AES_KEYSIZE_256 / sizeof(u32)];
 	u8		nonce[4];
-	struct crypto_sync_skcipher	*fallback;
+	struct crypto_skcipher	*fallback;
 };
 
 struct omap_aes_gcm_ctx {
@@ -110,6 +110,7 @@ struct omap_aes_reqctx {
 	unsigned long mode;
 	u8 iv[AES_BLOCK_SIZE];
 	u32 auth_tag[AES_BLOCK_SIZE / sizeof(u32)];
+	struct skcipher_request fallback_req;	// keep at the end
 };
 
 #define OMAP_AES_QUEUE_LENGTH	1