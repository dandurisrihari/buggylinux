{
  "hash": "76cd61739fd107a7f7ec4c24a045e98d8ee150f0",
  "hash_short": "76cd6173",
  "subject": "mm/error_inject: Fix allow_error_inject function signatures.",
  "body": "'static' and 'static noinline' function attributes make no guarantees that\ngcc/clang won't optimize them. The compiler may decide to inline 'static'\nfunction and in such case ALLOW_ERROR_INJECT becomes meaningless. The compiler\ncould have inlined __add_to_page_cache_locked() in one callsite and didn't\ninline in another. In such case injecting errors into it would cause\nunpredictable behavior. It's worse with 'static noinline' which won't be\ninlined, but it still can be optimized. Like the compiler may decide to remove\none argument or constant propagate the value depending on the callsite.\n\nTo avoid such issues make sure that these functions are global noinline.\n\nFixes: af3b854492f3 (\"mm/page_alloc.c: allow error injection\")\nFixes: cfcbfb1382db (\"mm/filemap.c: enable error injection at add_to_page_cache()\")\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nReviewed-by: Josef Bacik <josef@toxicpanda.com>\nLink: https://lore.kernel.org/bpf/20200827220114.69225-2-alexei.starovoitov@gmail.com",
  "full_message": "mm/error_inject: Fix allow_error_inject function signatures.\n\n'static' and 'static noinline' function attributes make no guarantees that\ngcc/clang won't optimize them. The compiler may decide to inline 'static'\nfunction and in such case ALLOW_ERROR_INJECT becomes meaningless. The compiler\ncould have inlined __add_to_page_cache_locked() in one callsite and didn't\ninline in another. In such case injecting errors into it would cause\nunpredictable behavior. It's worse with 'static noinline' which won't be\ninlined, but it still can be optimized. Like the compiler may decide to remove\none argument or constant propagate the value depending on the callsite.\n\nTo avoid such issues make sure that these functions are global noinline.\n\nFixes: af3b854492f3 (\"mm/page_alloc.c: allow error injection\")\nFixes: cfcbfb1382db (\"mm/filemap.c: enable error injection at add_to_page_cache()\")\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nReviewed-by: Josef Bacik <josef@toxicpanda.com>\nLink: https://lore.kernel.org/bpf/20200827220114.69225-2-alexei.starovoitov@gmail.com",
  "author_name": "Alexei Starovoitov",
  "author_email": "ast@kernel.org",
  "author_date": "Thu Aug 27 15:01:10 2020 -0700",
  "author_date_iso": "2020-08-27T15:01:10-07:00",
  "committer_name": "Daniel Borkmann",
  "committer_email": "daniel@iogearbox.net",
  "committer_date": "Fri Aug 28 21:20:32 2020 +0200",
  "committer_date_iso": "2020-08-28T21:20:32+02:00",
  "files_changed": [
    "mm/filemap.c",
    "mm/page_alloc.c"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "mm/filemap.c",
      "insertions": 4,
      "deletions": 4
    },
    {
      "file": "mm/page_alloc.c",
      "insertions": 1,
      "deletions": 1
    }
  ],
  "total_insertions": 5,
  "total_deletions": 5,
  "total_changes": 10,
  "parents": [
    "d557ea39a5f894630c403b78703ac92b08b7dd62"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "mm/filemap.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/page_alloc.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}