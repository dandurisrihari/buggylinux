{
  "hash": "342403bcb4dfe41324a0f6f4cb5a8d324f31c725",
  "hash_short": "342403bc",
  "subject": "Merge branches 'for-next/acpi', 'for-next/bpf', 'for-next/cpufeature', 'for-next/docs', 'for-next/kconfig', 'for-next/misc', 'for-next/perf', 'for-next/ptr-auth', 'for-next/sdei', 'for-next/smccc' and 'for-next/vdso' into for-next/core",
  "body": "ACPI and IORT updates\n(Lorenzo Pieralisi)\n* for-next/acpi:\n  ACPI/IORT: Remove the unused __get_pci_rid()\n  ACPI/IORT: Fix PMCG node single ID mapping handling\n  ACPI: IORT: Add comments for not calling acpi_put_table()\n  ACPI: GTDT: Put GTDT table after parsing\n  ACPI: IORT: Add extra message \"applying workaround\" for off-by-1 issue\n  ACPI/IORT: work around num_ids ambiguity\n  Revert \"ACPI/IORT: Fix 'Number of IDs' handling in iort_id_map()\"\n  ACPI/IORT: take _DMA methods into account for named components\n\nBPF JIT optimisations for immediate value generation\n(Luke Nelson)\n* for-next/bpf:\n  bpf, arm64: Optimize ADD,SUB,JMP BPF_K using arm64 add/sub immediates\n  bpf, arm64: Optimize AND,OR,XOR,JSET BPF_K using arm64 logical immediates\n  arm64: insn: Fix two bugs in encoding 32-bit logical immediates\n\nAddition of new CPU ID register fields and removal of some benign sanity checks\n(Anshuman Khandual and others)\n* for-next/cpufeature: (27 commits)\n  KVM: arm64: Check advertised Stage-2 page size capability\n  arm64/cpufeature: Add get_arm64_ftr_reg_nowarn()\n  arm64/cpuinfo: Add ID_MMFR4_EL1 into the cpuinfo_arm64 context\n  arm64/cpufeature: Add remaining feature bits in ID_AA64PFR1 register\n  arm64/cpufeature: Add remaining feature bits in ID_AA64PFR0 register\n  arm64/cpufeature: Add remaining feature bits in ID_AA64ISAR0 register\n  arm64/cpufeature: Add remaining feature bits in ID_MMFR4 register\n  arm64/cpufeature: Add remaining feature bits in ID_PFR0 register\n  arm64/cpufeature: Introduce ID_MMFR5 CPU register\n  arm64/cpufeature: Introduce ID_DFR1 CPU register\n  arm64/cpufeature: Introduce ID_PFR2 CPU register\n  arm64/cpufeature: Make doublelock a signed feature in ID_AA64DFR0\n  arm64/cpufeature: Drop TraceFilt feature exposure from ID_DFR0 register\n  arm64/cpufeature: Add explicit ftr_id_isar0[] for ID_ISAR0 register\n  arm64/cpufeature: Drop open encodings while extracting parange\n  arm64/cpufeature: Validate hypervisor capabilities during CPU hotplug\n  arm64: cpufeature: Group indexed system register definitions by name\n  arm64: cpufeature: Extend comment to describe absence of field info\n  arm64: drop duplicate definitions of ID_AA64MMFR0_TGRAN constants\n  arm64: cpufeature: Add an overview comment for the cpufeature framework\n  ...\n\nMinor documentation tweaks for silicon errata and booting requirements\n(Rob Herring and Will Deacon)\n* for-next/docs:\n  arm64: silicon-errata.rst: Sort the Cortex-A55 entries\n  arm64: docs: Mandate that the I-cache doesn't hold stale kernel text\n\nMinor Kconfig cleanups\n(Geert Uytterhoeven)\n* for-next/kconfig:\n  arm64: cpufeature: Add \"or\" to mitigations for multiple errata\n  arm64: Sort vendor-specific errata\n\nMiscellaneous updates\n(Ard Biesheuvel and others)\n* for-next/misc:\n  arm64: mm: Add asid_gen_match() helper\n  arm64: stacktrace: Factor out some common code into on_stack()\n  arm64: Call debug_traps_init() from trap_init() to help early kgdb\n  arm64: cacheflush: Fix KGDB trap detection\n  arm64/cpuinfo: Move device_initcall() near cpuinfo_regs_init()\n  arm64: kexec_file: print appropriate variable\n  arm: mm: use __pfn_to_section() to get mem_section\n  arm64: Reorder the macro arguments in the copy routines\n  efi/libstub/arm64: align PE/COFF sections to segment alignment\n  KVM: arm64: Drop PTE_S2_MEMATTR_MASK\n  arm64/kernel: Fix range on invalidating dcache for boot page tables\n  arm64: set TEXT_OFFSET to 0x0 in preparation for removing it entirely\n  arm64: lib: Consistently enable crc32 extension\n  arm64/mm: Use phys_to_page() to access pgtable memory\n  arm64: smp: Make cpus_stuck_in_kernel static\n  arm64: entry: remove unneeded semicolon in el1_sync_handler()\n  arm64/kernel: vmlinux.lds: drop redundant discard/keep macros\n  arm64: drop GZFLAGS definition and export\n  arm64: kexec_file: Avoid temp buffer for RNG seed\n  arm64: rename stext to primary_entry\n\nPerf PMU driver updates\n(Tang Bin and others)\n* for-next/perf:\n  pmu/smmuv3: Clear IRQ affinity hint on device removal\n  drivers/perf: hisi: Permit modular builds of HiSilicon uncore drivers\n  drivers/perf: hisi: Fix typo in events attribute array\n  drivers/perf: arm_spe_pmu: Avoid duplicate printouts\n  drivers/perf: arm_dsu_pmu: Avoid duplicate printouts\n\nPointer authentication updates and support for vmcoreinfo\n(Amit Daniel Kachhap and Mark Rutland)\n* for-next/ptr-auth:\n  Documentation/vmcoreinfo: Add documentation for 'KERNELPACMASK'\n  arm64/crash_core: Export KERNELPACMASK in vmcoreinfo\n  arm64: simplify ptrauth initialization\n  arm64: remove ptrauth_keys_install_kernel sync arg\n\nSDEI cleanup and non-critical fixes\n(James Morse and others)\n* for-next/sdei:\n  firmware: arm_sdei: Document the motivation behind these set_fs() calls\n  firmware: arm_sdei: remove unused interfaces\n  firmware: arm_sdei: Put the SDEI table after using it\n  firmware: arm_sdei: Drop check for /firmware/ node and always register driver\n\nSMCCC updates and refactoring\n(Sudeep Holla)\n* for-next/smccc:\n  firmware: smccc: Fix missing prototype warning for arm_smccc_version_init\n  firmware: smccc: Add function to fetch SMCCC version\n  firmware: smccc: Refactor SMCCC specific bits into separate file\n  firmware: smccc: Drop smccc_version enum and use ARM_SMCCC_VERSION_1_x instead\n  firmware: smccc: Add the definition for SMCCCv1.2 version/error codes\n  firmware: smccc: Update link to latest SMCCC specification\n  firmware: smccc: Add HAVE_ARM_SMCCC_DISCOVERY to identify SMCCC v1.1 and above\n\nvDSO cleanup and non-critical fixes\n(Mark Rutland and Vincenzo Frascino)\n* for-next/vdso:\n  arm64: vdso: Add --eh-frame-hdr to ldflags\n  arm64: vdso: use consistent 'map' nomenclature\n  arm64: vdso: use consistent 'abi' nomenclature\n  arm64: vdso: simplify arch_vdso_type ifdeffery\n  arm64: vdso: remove aarch32_vdso_pages[]\n  arm64: vdso: Add '-Bsymbolic' to ldflags",
  "full_message": "Merge branches 'for-next/acpi', 'for-next/bpf', 'for-next/cpufeature', 'for-next/docs', 'for-next/kconfig', 'for-next/misc', 'for-next/perf', 'for-next/ptr-auth', 'for-next/sdei', 'for-next/smccc' and 'for-next/vdso' into for-next/core\n\nACPI and IORT updates\n(Lorenzo Pieralisi)\n* for-next/acpi:\n  ACPI/IORT: Remove the unused __get_pci_rid()\n  ACPI/IORT: Fix PMCG node single ID mapping handling\n  ACPI: IORT: Add comments for not calling acpi_put_table()\n  ACPI: GTDT: Put GTDT table after parsing\n  ACPI: IORT: Add extra message \"applying workaround\" for off-by-1 issue\n  ACPI/IORT: work around num_ids ambiguity\n  Revert \"ACPI/IORT: Fix 'Number of IDs' handling in iort_id_map()\"\n  ACPI/IORT: take _DMA methods into account for named components\n\nBPF JIT optimisations for immediate value generation\n(Luke Nelson)\n* for-next/bpf:\n  bpf, arm64: Optimize ADD,SUB,JMP BPF_K using arm64 add/sub immediates\n  bpf, arm64: Optimize AND,OR,XOR,JSET BPF_K using arm64 logical immediates\n  arm64: insn: Fix two bugs in encoding 32-bit logical immediates\n\nAddition of new CPU ID register fields and removal of some benign sanity checks\n(Anshuman Khandual and others)\n* for-next/cpufeature: (27 commits)\n  KVM: arm64: Check advertised Stage-2 page size capability\n  arm64/cpufeature: Add get_arm64_ftr_reg_nowarn()\n  arm64/cpuinfo: Add ID_MMFR4_EL1 into the cpuinfo_arm64 context\n  arm64/cpufeature: Add remaining feature bits in ID_AA64PFR1 register\n  arm64/cpufeature: Add remaining feature bits in ID_AA64PFR0 register\n  arm64/cpufeature: Add remaining feature bits in ID_AA64ISAR0 register\n  arm64/cpufeature: Add remaining feature bits in ID_MMFR4 register\n  arm64/cpufeature: Add remaining feature bits in ID_PFR0 register\n  arm64/cpufeature: Introduce ID_MMFR5 CPU register\n  arm64/cpufeature: Introduce ID_DFR1 CPU register\n  arm64/cpufeature: Introduce ID_PFR2 CPU register\n  arm64/cpufeature: Make doublelock a signed feature in ID_AA64DFR0\n  arm64/cpufeature: Drop TraceFilt feature exposure from ID_DFR0 register\n  arm64/cpufeature: Add explicit ftr_id_isar0[] for ID_ISAR0 register\n  arm64/cpufeature: Drop open encodings while extracting parange\n  arm64/cpufeature: Validate hypervisor capabilities during CPU hotplug\n  arm64: cpufeature: Group indexed system register definitions by name\n  arm64: cpufeature: Extend comment to describe absence of field info\n  arm64: drop duplicate definitions of ID_AA64MMFR0_TGRAN constants\n  arm64: cpufeature: Add an overview comment for the cpufeature framework\n  ...\n\nMinor documentation tweaks for silicon errata and booting requirements\n(Rob Herring and Will Deacon)\n* for-next/docs:\n  arm64: silicon-errata.rst: Sort the Cortex-A55 entries\n  arm64: docs: Mandate that the I-cache doesn't hold stale kernel text\n\nMinor Kconfig cleanups\n(Geert Uytterhoeven)\n* for-next/kconfig:\n  arm64: cpufeature: Add \"or\" to mitigations for multiple errata\n  arm64: Sort vendor-specific errata\n\nMiscellaneous updates\n(Ard Biesheuvel and others)\n* for-next/misc:\n  arm64: mm: Add asid_gen_match() helper\n  arm64: stacktrace: Factor out some common code into on_stack()\n  arm64: Call debug_traps_init() from trap_init() to help early kgdb\n  arm64: cacheflush: Fix KGDB trap detection\n  arm64/cpuinfo: Move device_initcall() near cpuinfo_regs_init()\n  arm64: kexec_file: print appropriate variable\n  arm: mm: use __pfn_to_section() to get mem_section\n  arm64: Reorder the macro arguments in the copy routines\n  efi/libstub/arm64: align PE/COFF sections to segment alignment\n  KVM: arm64: Drop PTE_S2_MEMATTR_MASK\n  arm64/kernel: Fix range on invalidating dcache for boot page tables\n  arm64: set TEXT_OFFSET to 0x0 in preparation for removing it entirely\n  arm64: lib: Consistently enable crc32 extension\n  arm64/mm: Use phys_to_page() to access pgtable memory\n  arm64: smp: Make cpus_stuck_in_kernel static\n  arm64: entry: remove unneeded semicolon in el1_sync_handler()\n  arm64/kernel: vmlinux.lds: drop redundant discard/keep macros\n  arm64: drop GZFLAGS definition and export\n  arm64: kexec_file: Avoid temp buffer for RNG seed\n  arm64: rename stext to primary_entry\n\nPerf PMU driver updates\n(Tang Bin and others)\n* for-next/perf:\n  pmu/smmuv3: Clear IRQ affinity hint on device removal\n  drivers/perf: hisi: Permit modular builds of HiSilicon uncore drivers\n  drivers/perf: hisi: Fix typo in events attribute array\n  drivers/perf: arm_spe_pmu: Avoid duplicate printouts\n  drivers/perf: arm_dsu_pmu: Avoid duplicate printouts\n\nPointer authentication updates and support for vmcoreinfo\n(Amit Daniel Kachhap and Mark Rutland)\n* for-next/ptr-auth:\n  Documentation/vmcoreinfo: Add documentation for 'KERNELPACMASK'\n  arm64/crash_core: Export KERNELPACMASK in vmcoreinfo\n  arm64: simplify ptrauth initialization\n  arm64: remove ptrauth_keys_install_kernel sync arg\n\nSDEI cleanup and non-critical fixes\n(James Morse and others)\n* for-next/sdei:\n  firmware: arm_sdei: Document the motivation behind these set_fs() calls\n  firmware: arm_sdei: remove unused interfaces\n  firmware: arm_sdei: Put the SDEI table after using it\n  firmware: arm_sdei: Drop check for /firmware/ node and always register driver\n\nSMCCC updates and refactoring\n(Sudeep Holla)\n* for-next/smccc:\n  firmware: smccc: Fix missing prototype warning for arm_smccc_version_init\n  firmware: smccc: Add function to fetch SMCCC version\n  firmware: smccc: Refactor SMCCC specific bits into separate file\n  firmware: smccc: Drop smccc_version enum and use ARM_SMCCC_VERSION_1_x instead\n  firmware: smccc: Add the definition for SMCCCv1.2 version/error codes\n  firmware: smccc: Update link to latest SMCCC specification\n  firmware: smccc: Add HAVE_ARM_SMCCC_DISCOVERY to identify SMCCC v1.1 and above\n\nvDSO cleanup and non-critical fixes\n(Mark Rutland and Vincenzo Frascino)\n* for-next/vdso:\n  arm64: vdso: Add --eh-frame-hdr to ldflags\n  arm64: vdso: use consistent 'map' nomenclature\n  arm64: vdso: use consistent 'abi' nomenclature\n  arm64: vdso: simplify arch_vdso_type ifdeffery\n  arm64: vdso: remove aarch32_vdso_pages[]\n  arm64: vdso: Add '-Bsymbolic' to ldflags",
  "author_name": "Will Deacon",
  "author_email": "will@kernel.org",
  "author_date": "Thu May 28 17:47:34 2020 +0100",
  "author_date_iso": "2020-05-28T17:47:34+01:00",
  "committer_name": "Will Deacon",
  "committer_email": "will@kernel.org",
  "committer_date": "Thu May 28 17:47:34 2020 +0100",
  "committer_date_iso": "2020-05-28T17:47:34+01:00",
  "files_changed": [
    "arch/arm64/kernel/cpuinfo.c",
    "arch/arm64/kernel/head.S",
    "arch/arm64/kernel/smp.c"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "Documentation/admin-guide/kdump/vmcoreinfo.rst",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "Documentation/arm64/booting.rst",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "Documentation/arm64/silicon-errata.rst",
      "insertions": 4,
      "deletions": 4
    },
    {
      "file": "MAINTAINERS",
      "insertions": 9,
      "deletions": 0
    },
    {
      "file": "arch/arm64/Kconfig",
      "insertions": 36,
      "deletions": 36
    },
    {
      "file": "arch/arm64/Makefile",
      "insertions": 2,
      "deletions": 3
    },
    {
      "file": "arch/arm64/include/asm/asm_pointer_auth.h",
      "insertions": 38,
      "deletions": 5
    },
    {
      "file": "arch/arm64/include/asm/cacheflush.h",
      "insertions": 3,
      "deletions": 3
    },
    {
      "file": "arch/arm64/include/asm/compiler.h",
      "insertions": 0,
      "deletions": 4
    },
    {
      "file": "arch/arm64/include/asm/cpu.h",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/cpucaps.h",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "arch/arm64/include/asm/cpufeature.h",
      "insertions": 25,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/debug-monitors.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/kvm_host.h",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/arm64/include/asm/kvm_mmu.h",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/arm64/include/asm/pgtable-hwdef.h",
      "insertions": 0,
      "deletions": 1
    },
    {
      "file": "arch/arm64/include/asm/pgtable.h",
      "insertions": 4,
      "deletions": 3
    },
    {
      "file": "arch/arm64/include/asm/smp.h",
      "insertions": 0,
      "deletions": 11
    },
    {
      "file": "arch/arm64/include/asm/stacktrace.h",
      "insertions": 14,
      "deletions": 26
    },
    {
      "file": "arch/arm64/include/asm/sysreg.h",
      "insertions": 62,
      "deletions": 12
    },
    {
      "file": "arch/arm64/kernel/asm-offsets.c",
      "insertions": 0,
      "deletions": 3
    },
    {
      "file": "arch/arm64/kernel/cpu_errata.c",
      "insertions": 3,
      "deletions": 3
    },
    {
      "file": "arch/arm64/kernel/cpufeature.c",
      "insertions": 346,
      "deletions": 72
    },
    {
      "file": "arch/arm64/kernel/cpuinfo.c",
      "insertions": 6,
      "deletions": 2
    },
    {
      "file": "arch/arm64/kernel/crash_core.c",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "arch/arm64/kernel/debug-monitors.c",
      "insertions": 1,
      "deletions": 3
    },
    {
      "file": "arch/arm64/kernel/efi-entry.S",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/arm64/kernel/efi-header.S",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/arm64/kernel/entry-common.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/arm64/kernel/entry.S",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm64/kernel/head.S",
      "insertions": 28,
      "deletions": 15
    },
    {
      "file": "arch/arm64/kernel/image-vars.h",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/arm64/kernel/insn.c",
      "insertions": 7,
      "deletions": 7
    },
    {
      "file": "arch/arm64/kernel/machine_kexec_file.c",
      "insertions": 7,
      "deletions": 7
    },
    {
      "file": "arch/arm64/kernel/paravirt.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/arm64/kernel/sdei.c",
      "insertions": 2,
      "deletions": 26
    },
    {
      "file": "arch/arm64/kernel/sleep.S",
      "insertions": 0,
      "deletions": 1
    },
    {
      "file": "arch/arm64/kernel/smp.c",
      "insertions": 1,
      "deletions": 9
    },
    {
      "file": "arch/arm64/kernel/traps.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/arm64/kernel/vdso.c",
      "insertions": 68,
      "deletions": 81
    },
    {
      "file": "arch/arm64/kernel/vdso/Makefile",
      "insertions": 5,
      "deletions": 3
    },
    {
      "file": "arch/arm64/kernel/vmlinux.lds.S",
      "insertions": 7,
      "deletions": 11
    },
    {
      "file": "arch/arm64/kvm/reset.c",
      "insertions": 50,
      "deletions": 15
    },
    {
      "file": "arch/arm64/kvm/sys_regs.c",
      "insertions": 3,
      "deletions": 3
    },
    {
      "file": "arch/arm64/lib/copy_from_user.S",
      "insertions": 16,
      "deletions": 16
    },
    {
      "file": "arch/arm64/lib/copy_in_user.S",
      "insertions": 16,
      "deletions": 16
    },
    {
      "file": "arch/arm64/lib/copy_to_user.S",
      "insertions": 16,
      "deletions": 16
    },
    {
      "file": "arch/arm64/lib/crc32.S",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/arm64/lib/memcpy.S",
      "insertions": 16,
      "deletions": 16
    },
    {
      "file": "arch/arm64/mm/context.c",
      "insertions": 5,
      "deletions": 3
    },
    {
      "file": "arch/arm64/mm/init.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/arm64/mm/proc.S",
      "insertions": 1,
      "deletions": 45
    },
    {
      "file": "arch/arm64/net/bpf_jit.h",
      "insertions": 22,
      "deletions": 0
    },
    {
      "file": "arch/arm64/net/bpf_jit_comp.c",
      "insertions": 59,
      "deletions": 14
    },
    {
      "file": "drivers/firmware/Kconfig",
      "insertions": 2,
      "deletions": 4
    },
    {
      "file": "drivers/firmware/Makefile",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "drivers/firmware/arm_sdei.c",
      "insertions": 21,
      "deletions": 28
    },
    {
      "file": "drivers/firmware/psci/psci.c",
      "insertions": 5,
      "deletions": 16
    },
    {
      "file": "drivers/firmware/smccc/Kconfig",
      "insertions": 16,
      "deletions": 0
    },
    {
      "file": "drivers/firmware/smccc/Makefile",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "drivers/firmware/smccc/smccc.c",
      "insertions": 31,
      "deletions": 0
    },
    {
      "file": "drivers/perf/Kconfig",
      "insertions": 2,
      "deletions": 7
    },
    {
      "file": "drivers/perf/arm_dsu_pmu.c",
      "insertions": 1,
      "deletions": 3
    },
    {
      "file": "drivers/perf/arm_smmuv3_pmu.c",
      "insertions": 4,
      "deletions": 1
    },
    {
      "file": "drivers/perf/arm_spe_pmu.c",
      "insertions": 1,
      "deletions": 3
    },
    {
      "file": "drivers/perf/hisilicon/Kconfig",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "drivers/perf/hisilicon/Makefile",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "drivers/perf/hisilicon/hisi_uncore_ddrc_pmu.c",
      "insertions": 6,
      "deletions": 4
    },
    {
      "file": "drivers/perf/hisilicon/hisi_uncore_hha_pmu.c",
      "insertions": 7,
      "deletions": 5
    },
    {
      "file": "drivers/perf/hisilicon/hisi_uncore_l3c_pmu.c",
      "insertions": 6,
      "deletions": 4
    },
    {
      "file": "drivers/perf/hisilicon/hisi_uncore_pmu.c",
      "insertions": 21,
      "deletions": 2
    },
    {
      "file": "include/linux/arm-smccc.h",
      "insertions": 23,
      "deletions": 2
    },
    {
      "file": "include/linux/psci.h",
      "insertions": 0,
      "deletions": 7
    },
    {
      "file": "virt/kvm/arm/arm.c",
      "insertions": 1,
      "deletions": 3
    }
  ],
  "total_insertions": 1075,
  "total_deletions": 600,
  "total_changes": 1675,
  "parents": [
    "09cda9a71350e61d8803058470697b95f3d3b4cb",
    "fd868f14818901821699988fdac680ebd80cd360",
    "b130a8f70cbbf907c399799bd1073a78763ca0e7",
    "184dbc152e398d7136dabd59ed3f5c5521935712",
    "357dd8a2aff25270971e11a37ddec807f37488e9",
    "4fc92254bf86b19ac1ef81f61f4e690fccfcba4a",
    "10f6cd2af21bb44faab31a50ec3361d7649e5a39",
    "c0fc00ec6304a8e2e438ca1688b243815084dc50",
    "472de63b0b8383565e103f809f5df37d1c4390ab",
    "269fd61e15d785b9e20786672765400732dde8a0",
    "7e9f5e6629f62865e67b8a02a5b522dd9af890bd"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "auth"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/arm64/kernel/cpuinfo.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/head.S",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/smp.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}