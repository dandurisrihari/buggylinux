{
  "hash": "cff06a799dbe81f3a697ae7c805eaf88d30c2308",
  "hash_short": "cff06a79",
  "subject": "Merge patch series \"smartpqi updates\"",
  "body": "Don Brace <don.brace@microchip.com> says:\n\nThese patches are based on Martin Petersen's 6.12/scsi-queue tree\n  https://git.kernel.org/pub/scm/linux/kernel/git/mkp/scsi.git\n  6.12/scsi-queue\n\nThere are two functional changes:\n    smartpqi-add-fw-log-to-kdump\n    smartpqi-add-counter-for-parity-write-stream-requests\n\nThere are three minor bug fixes:\n    smartpqi-fix-stream-detection\n    smartpqi-fix-rare-system-hang-during-LUN-reset\n    smartpqi-fix-volume-size-updates\n\nThe other two patches add PCI-IDs for new controllers and change the\ndriver version.\n\nThis set of changes consists of:\n* smartpqi-add-fw-log-to-kdump\n\n  During a kdump, the driver tells the controller to copy its logging\n  information to some pre-allocated buffers that can be analyzed\n  later.\n\n  This is a \"feature\" driven capability and is backward compatible\n  with existing controller FW.\n\n  This patch renames some prefixes for OFA (Online-Firmware Activation\n  ofa_*) buffers to host_memory_*. So, not a lot of actual functional\n  changes to smartpqi_init.c, mainly determining the memory size\n  allocation.\n\n  We added a function to notify the controller to copy debug data into\n  host memory before continuing kdump.\n\n  Most of the functional changes are in smartpqi_sis.c where the\n  actual handshaking is done.\n\n* smartpqi-fix-stream-detection\n\n  Correct some false write-stream detections. The data structure used\n  to check for write-streams was not initialized to all 0's causing\n  some false write stream detections. The driver sends down streamed\n  requests to the raid engine instead of using AIO bypass for some\n  extra performance.  (Potential full-stripe write verses Read Modify\n  Write).\n\n  False detections have not caused any data corruption.  Found by\n  internal testing. No known externally reported bugs.\n\n* smartpqi-add-counter-for-parity-write-stream-requests\n\n  Adding some counters for raid_bypass and write streams. These two\n  counters are related because write stream detection is only checked\n  if an I/O request is eligible for bypass (AIO).\n\n  The bypass counter (raid_bypass_cnt) was moved into a common\n  structure (pqi_raid_io_stats) and changed to type __percpu. The\n  write stream counter is (write_stream_cnt) has been added to this\n  same structure.\n\n  These counters are __percpu counters for performance. We added a\n  sysfs entry to show the write stream count. The raid bypass counter\n  sysfs entry already exists.\n\n  Useful for checking streaming writes. The change in the sysfs entry\n  write_stream_cnt can be checked during AIO eligible write\n  operations.\n\n* smartpqi-add-new-controller-PCI-IDs\n\n  Adding support for new controller HW.  No functional changes.\n\n* smartpqi-fix-rare-system-hang-during-LUN-reset\n\n  We found a rare race condition that can occur during a LUN reset. We\n  were not emptying our internal queue completely.\n\n  There have been some rare conditions where our internal request\n  queue has requests for multiple LUNs and a reset comes in for one of\n  the LUNs. The driver waits for this internal queue to empty. We were\n  only clearing out the requests for the LUN being reset so the\n  request queue was never empty causing a hang.\n\n  The Fix:\n\n     For all requests in our internal request queue:\n\n        Complete requests with DID_RESET for queued requests for the\n        device undergoing a reset.\n\n        Complete requests with DID_REQUEUE for all other queued requests.\n\n  Found by internal testing. No known externally reported bugs.\n\n* smartpqi-fix-volume-size-updates\n\n  The current code only checks for a size change if there is also a\n  queue depth change.  We are separating the check for queue depth and\n  the size changes.\n\n  Found by internal testing. No known bugs were filed.\n\n* smartpqi-update-version-to-2.1.30-031\n  No functional changes.\n\nLink: https://lore.kernel.org/r/20240827185501.692804-1-don.brace@microchip.com\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
  "full_message": "Merge patch series \"smartpqi updates\"\n\nDon Brace <don.brace@microchip.com> says:\n\nThese patches are based on Martin Petersen's 6.12/scsi-queue tree\n  https://git.kernel.org/pub/scm/linux/kernel/git/mkp/scsi.git\n  6.12/scsi-queue\n\nThere are two functional changes:\n    smartpqi-add-fw-log-to-kdump\n    smartpqi-add-counter-for-parity-write-stream-requests\n\nThere are three minor bug fixes:\n    smartpqi-fix-stream-detection\n    smartpqi-fix-rare-system-hang-during-LUN-reset\n    smartpqi-fix-volume-size-updates\n\nThe other two patches add PCI-IDs for new controllers and change the\ndriver version.\n\nThis set of changes consists of:\n* smartpqi-add-fw-log-to-kdump\n\n  During a kdump, the driver tells the controller to copy its logging\n  information to some pre-allocated buffers that can be analyzed\n  later.\n\n  This is a \"feature\" driven capability and is backward compatible\n  with existing controller FW.\n\n  This patch renames some prefixes for OFA (Online-Firmware Activation\n  ofa_*) buffers to host_memory_*. So, not a lot of actual functional\n  changes to smartpqi_init.c, mainly determining the memory size\n  allocation.\n\n  We added a function to notify the controller to copy debug data into\n  host memory before continuing kdump.\n\n  Most of the functional changes are in smartpqi_sis.c where the\n  actual handshaking is done.\n\n* smartpqi-fix-stream-detection\n\n  Correct some false write-stream detections. The data structure used\n  to check for write-streams was not initialized to all 0's causing\n  some false write stream detections. The driver sends down streamed\n  requests to the raid engine instead of using AIO bypass for some\n  extra performance.  (Potential full-stripe write verses Read Modify\n  Write).\n\n  False detections have not caused any data corruption.  Found by\n  internal testing. No known externally reported bugs.\n\n* smartpqi-add-counter-for-parity-write-stream-requests\n\n  Adding some counters for raid_bypass and write streams. These two\n  counters are related because write stream detection is only checked\n  if an I/O request is eligible for bypass (AIO).\n\n  The bypass counter (raid_bypass_cnt) was moved into a common\n  structure (pqi_raid_io_stats) and changed to type __percpu. The\n  write stream counter is (write_stream_cnt) has been added to this\n  same structure.\n\n  These counters are __percpu counters for performance. We added a\n  sysfs entry to show the write stream count. The raid bypass counter\n  sysfs entry already exists.\n\n  Useful for checking streaming writes. The change in the sysfs entry\n  write_stream_cnt can be checked during AIO eligible write\n  operations.\n\n* smartpqi-add-new-controller-PCI-IDs\n\n  Adding support for new controller HW.  No functional changes.\n\n* smartpqi-fix-rare-system-hang-during-LUN-reset\n\n  We found a rare race condition that can occur during a LUN reset. We\n  were not emptying our internal queue completely.\n\n  There have been some rare conditions where our internal request\n  queue has requests for multiple LUNs and a reset comes in for one of\n  the LUNs. The driver waits for this internal queue to empty. We were\n  only clearing out the requests for the LUN being reset so the\n  request queue was never empty causing a hang.\n\n  The Fix:\n\n     For all requests in our internal request queue:\n\n        Complete requests with DID_RESET for queued requests for the\n        device undergoing a reset.\n\n        Complete requests with DID_REQUEUE for all other queued requests.\n\n  Found by internal testing. No known externally reported bugs.\n\n* smartpqi-fix-volume-size-updates\n\n  The current code only checks for a size change if there is also a\n  queue depth change.  We are separating the check for queue depth and\n  the size changes.\n\n  Found by internal testing. No known bugs were filed.\n\n* smartpqi-update-version-to-2.1.30-031\n  No functional changes.\n\nLink: https://lore.kernel.org/r/20240827185501.692804-1-don.brace@microchip.com\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
  "author_name": "Martin K. Petersen",
  "author_email": "martin.petersen@oracle.com",
  "author_date": "Wed Aug 28 22:16:33 2024 -0400",
  "author_date_iso": "2024-08-28T22:16:33-04:00",
  "committer_name": "Martin K. Petersen",
  "committer_email": "martin.petersen@oracle.com",
  "committer_date": "Wed Aug 28 22:16:33 2024 -0400",
  "committer_date_iso": "2024-08-28T22:16:33-04:00",
  "files_changed": [],
  "files_changed_count": 0,
  "stats": [
    {
      "file": "drivers/scsi/smartpqi/smartpqi.h",
      "insertions": 27,
      "deletions": 12
    },
    {
      "file": "drivers/scsi/smartpqi/smartpqi_init.c",
      "insertions": 232,
      "deletions": 120
    },
    {
      "file": "drivers/scsi/smartpqi/smartpqi_sis.c",
      "insertions": 60,
      "deletions": 0
    },
    {
      "file": "drivers/scsi/smartpqi/smartpqi_sis.h",
      "insertions": 3,
      "deletions": 0
    }
  ],
  "total_insertions": 322,
  "total_deletions": 132,
  "total_changes": 454,
  "parents": [
    "d5a4b0d64242574bc12f7864809e03aa2863b83b",
    "bda1c931e2993cbd43515dccec8bdd200a39cbf0"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "bypass"
    ]
  },
  "fix_type": "security",
  "file_results": []
}