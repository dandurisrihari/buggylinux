{
  "hash": "e7b60c5a0c4b9c02fa3b471f8d5edb4989ebdf60",
  "hash_short": "e7b60c5a",
  "subject": "perf inject: Do not load map/dso when injecting build-id",
  "body": "No need to load symbols in a DSO when injecting build-id.  I guess the\nreason was to check the DSO is a special file like anon files.  Use some\nhelper functions in map.c to check them before reading build-id.  Also\npass sample event's cpumode to a new build-id event.\n\nIt brought a speedup in the benchmark of 25 -> 21 msec on my laptop.\nAlso the memory usage (Max RSS) went down by ~200 KB.\n\n  # Running 'internals/inject-build-id' benchmark:\n    Average build-id injection took: 21.389 msec (+- 0.138 msec)\n    Average time per event: 2.097 usec (+- 0.014 usec)\n    Average memory usage: 8225 KB (+- 0 KB)\n\nCommitter notes:\n\nBefore:\n\n  $ perf stat -r5 perf bench internals inject-build-id > /dev/null\n\n   Performance counter stats for 'perf bench internals inject-build-id' (5 runs):\n\n            4,020.56 msec task-clock:u              #    1.271 CPUs utilized            ( +-  0.74% )\n                   0      context-switches:u        #    0.000 K/sec\n                   0      cpu-migrations:u          #    0.000 K/sec\n             123,354      page-faults:u             #    0.031 M/sec                    ( +-  0.81% )\n       7,119,951,568      cycles:u                  #    1.771 GHz                      ( +-  1.74% )  (83.27%)\n         230,086,969      stalled-cycles-frontend:u #    3.23% frontend cycles idle     ( +-  1.97% )  (83.41%)\n       1,168,298,765      stalled-cycles-backend:u  #   16.41% backend cycles idle      ( +-  1.13% )  (83.44%)\n      11,173,083,669      instructions:u            #    1.57  insn per cycle\n                                                    #    0.10  stalled cycles per insn  ( +-  1.58% )  (83.31%)\n       2,413,908,936      branches:u                #  600.392 M/sec                    ( +-  1.69% )  (83.26%)\n          46,576,289      branch-misses:u           #    1.93% of all branches          ( +-  2.20% )  (83.31%)\n\n              3.1638 +- 0.0309 seconds time elapsed  ( +-  0.98% )\n\n  $\n\nAfter:\n\n  $ perf stat -r5 perf bench internals inject-build-id > /dev/null\n\n   Performance counter stats for 'perf bench internals inject-build-id' (5 runs):\n\n            2,379.94 msec task-clock:u              #    1.473 CPUs utilized            ( +-  0.18% )\n                   0      context-switches:u        #    0.000 K/sec\n                   0      cpu-migrations:u          #    0.000 K/sec\n              62,584      page-faults:u             #    0.026 M/sec                    ( +-  0.07% )\n       2,372,389,668      cycles:u                  #    0.997 GHz                      ( +-  0.29% )  (83.14%)\n         106,937,862      stalled-cycles-frontend:u #    4.51% frontend cycles idle     ( +-  4.89% )  (83.20%)\n         581,697,915      stalled-cycles-backend:u  #   24.52% backend cycles idle      ( +-  0.71% )  (83.47%)\n       3,659,692,199      instructions:u            #    1.54  insn per cycle\n                                                    #    0.16  stalled cycles per insn  ( +-  0.10% )  (83.63%)\n         791,372,961      branches:u                #  332.518 M/sec                    ( +-  0.27% )  (83.39%)\n          10,648,083      branch-misses:u           #    1.35% of all branches          ( +-  0.22% )  (83.16%)\n\n             1.61570 +- 0.00172 seconds time elapsed  ( +-  0.11% )\n\n  $\n\nSigned-off-by: Namhyung Kim <namhyung@kernel.org>\nOriginal-patch-by: Stephane Eranian <eranian@google.com>\nTested-by: Arnaldo Carvalho de Melo <acme@redhat.com>\nAcked-by: Jiri Olsa <jolsa@redhat.com>\nLink: https://lore.kernel.org/r/20201012070214.2074921-5-namhyung@kernel.org\nSigned-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>",
  "full_message": "perf inject: Do not load map/dso when injecting build-id\n\nNo need to load symbols in a DSO when injecting build-id.  I guess the\nreason was to check the DSO is a special file like anon files.  Use some\nhelper functions in map.c to check them before reading build-id.  Also\npass sample event's cpumode to a new build-id event.\n\nIt brought a speedup in the benchmark of 25 -> 21 msec on my laptop.\nAlso the memory usage (Max RSS) went down by ~200 KB.\n\n  # Running 'internals/inject-build-id' benchmark:\n    Average build-id injection took: 21.389 msec (+- 0.138 msec)\n    Average time per event: 2.097 usec (+- 0.014 usec)\n    Average memory usage: 8225 KB (+- 0 KB)\n\nCommitter notes:\n\nBefore:\n\n  $ perf stat -r5 perf bench internals inject-build-id > /dev/null\n\n   Performance counter stats for 'perf bench internals inject-build-id' (5 runs):\n\n            4,020.56 msec task-clock:u              #    1.271 CPUs utilized            ( +-  0.74% )\n                   0      context-switches:u        #    0.000 K/sec\n                   0      cpu-migrations:u          #    0.000 K/sec\n             123,354      page-faults:u             #    0.031 M/sec                    ( +-  0.81% )\n       7,119,951,568      cycles:u                  #    1.771 GHz                      ( +-  1.74% )  (83.27%)\n         230,086,969      stalled-cycles-frontend:u #    3.23% frontend cycles idle     ( +-  1.97% )  (83.41%)\n       1,168,298,765      stalled-cycles-backend:u  #   16.41% backend cycles idle      ( +-  1.13% )  (83.44%)\n      11,173,083,669      instructions:u            #    1.57  insn per cycle\n                                                    #    0.10  stalled cycles per insn  ( +-  1.58% )  (83.31%)\n       2,413,908,936      branches:u                #  600.392 M/sec                    ( +-  1.69% )  (83.26%)\n          46,576,289      branch-misses:u           #    1.93% of all branches          ( +-  2.20% )  (83.31%)\n\n              3.1638 +- 0.0309 seconds time elapsed  ( +-  0.98% )\n\n  $\n\nAfter:\n\n  $ perf stat -r5 perf bench internals inject-build-id > /dev/null\n\n   Performance counter stats for 'perf bench internals inject-build-id' (5 runs):\n\n            2,379.94 msec task-clock:u              #    1.473 CPUs utilized            ( +-  0.18% )\n                   0      context-switches:u        #    0.000 K/sec\n                   0      cpu-migrations:u          #    0.000 K/sec\n              62,584      page-faults:u             #    0.026 M/sec                    ( +-  0.07% )\n       2,372,389,668      cycles:u                  #    0.997 GHz                      ( +-  0.29% )  (83.14%)\n         106,937,862      stalled-cycles-frontend:u #    4.51% frontend cycles idle     ( +-  4.89% )  (83.20%)\n         581,697,915      stalled-cycles-backend:u  #   24.52% backend cycles idle      ( +-  0.71% )  (83.47%)\n       3,659,692,199      instructions:u            #    1.54  insn per cycle\n                                                    #    0.16  stalled cycles per insn  ( +-  0.10% )  (83.63%)\n         791,372,961      branches:u                #  332.518 M/sec                    ( +-  0.27% )  (83.39%)\n          10,648,083      branch-misses:u           #    1.35% of all branches          ( +-  0.22% )  (83.16%)\n\n             1.61570 +- 0.00172 seconds time elapsed  ( +-  0.11% )\n\n  $\n\nSigned-off-by: Namhyung Kim <namhyung@kernel.org>\nOriginal-patch-by: Stephane Eranian <eranian@google.com>\nTested-by: Arnaldo Carvalho de Melo <acme@redhat.com>\nAcked-by: Jiri Olsa <jolsa@redhat.com>\nLink: https://lore.kernel.org/r/20201012070214.2074921-5-namhyung@kernel.org\nSigned-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>",
  "author_name": "Namhyung Kim",
  "author_email": "namhyung@kernel.org",
  "author_date": "Mon Oct 12 16:02:12 2020 +0900",
  "author_date_iso": "2020-10-12T16:02:12+09:00",
  "committer_name": "Arnaldo Carvalho de Melo",
  "committer_email": "acme@redhat.com",
  "committer_date": "Tue Oct 13 11:01:37 2020 -0300",
  "committer_date_iso": "2020-10-13T11:01:37-03:00",
  "files_changed": [
    "tools/perf/builtin-inject.c",
    "tools/perf/util/map.c",
    "tools/perf/util/map.h"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "tools/perf/builtin-inject.c",
      "insertions": 12,
      "deletions": 21
    },
    {
      "file": "tools/perf/util/map.c",
      "insertions": 1,
      "deletions": 16
    },
    {
      "file": "tools/perf/util/map.h",
      "insertions": 14,
      "deletions": 0
    }
  ],
  "total_insertions": 27,
  "total_deletions": 37,
  "total_changes": 64,
  "parents": [
    "336c95b297e8127705e590bbd25f5c627bfcb782"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "inject"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "tools/perf/builtin-inject.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "tools/perf/util/map.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "tools/perf/util/map.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}