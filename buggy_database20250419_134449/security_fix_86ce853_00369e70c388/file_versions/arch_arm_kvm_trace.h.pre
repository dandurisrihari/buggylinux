commit d5d8184d35c990b1324d9b30bcd0e4e8aa08f56d
Author: Christoffer Dall <c.dall@virtualopensystems.com>
Date:   Sun Jan 20 18:28:07 2013 -0500

    KVM: ARM: Memory virtualization setup
    
    This commit introduces the framework for guest memory management
    through the use of 2nd stage translation. Each VM has a pointer
    to a level-1 table (the pgd field in struct kvm_arch) which is
    used for the 2nd stage translations. Entries are added when handling
    guest faults (later patch) and the table itself can be allocated and
    freed through the following functions implemented in
    arch/arm/kvm/arm_mmu.c:
     - kvm_alloc_stage2_pgd(struct kvm *kvm);
     - kvm_free_stage2_pgd(struct kvm *kvm);
    
    Each entry in TLBs and caches are tagged with a VMID identifier in
    addition to ASIDs. The VMIDs are assigned consecutively to VMs in the
    order that VMs are executed, and caches and tlbs are invalidated when
    the VMID space has been used to allow for more than 255 simultaenously
    running guests.
    
    The 2nd stage pgd is allocated in kvm_arch_init_vm(). The table is
    freed in kvm_arch_destroy_vm(). Both functions are called from the main
    KVM code.
    
    We pre-allocate page table memory to be able to synchronize using a
    spinlock and be called under rcu_read_lock from the MMU notifiers.  We
    steal the mmu_memory_cache implementation from x86 and adapt for our
    specific usage.
    
    We support MMU notifiers (thanks to Marc Zyngier) through
    kvm_unmap_hva and kvm_set_spte_hva.
    
    Finally, define kvm_phys_addr_ioremap() to map a device at a guest IPA,
    which is used by VGIC support to map the virtual CPU interface registers
    to the guest. This support is added by Marc Zyngier.
    
    Reviewed-by: Will Deacon <will.deacon@arm.com>
    Reviewed-by: Marcelo Tosatti <mtosatti@redhat.com>
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>
    Signed-off-by: Christoffer Dall <c.dall@virtualopensystems.com>

diff --git a/arch/arm/kvm/trace.h b/arch/arm/kvm/trace.h
index f8869c19c0a3..862b2cc12fbe 100644
--- a/arch/arm/kvm/trace.h
+++ b/arch/arm/kvm/trace.h
@@ -39,7 +39,53 @@ TRACE_EVENT(kvm_exit,
 	TP_printk("PC: 0x%08lx", __entry->vcpu_pc)
 );
 
+TRACE_EVENT(kvm_unmap_hva,
+	TP_PROTO(unsigned long hva),
+	TP_ARGS(hva),
 
+	TP_STRUCT__entry(
+		__field(	unsigned long,	hva		)
+	),
+
+	TP_fast_assign(
+		__entry->hva		= hva;
+	),
+
+	TP_printk("mmu notifier unmap hva: %#08lx", __entry->hva)
+);
+
+TRACE_EVENT(kvm_unmap_hva_range,
+	TP_PROTO(unsigned long start, unsigned long end),
+	TP_ARGS(start, end),
+
+	TP_STRUCT__entry(
+		__field(	unsigned long,	start		)
+		__field(	unsigned long,	end		)
+	),
+
+	TP_fast_assign(
+		__entry->start		= start;
+		__entry->end		= end;
+	),
+
+	TP_printk("mmu notifier unmap range: %#08lx -- %#08lx",
+		  __entry->start, __entry->end)
+);
+
+TRACE_EVENT(kvm_set_spte_hva,
+	TP_PROTO(unsigned long hva),
+	TP_ARGS(hva),
+
+	TP_STRUCT__entry(
+		__field(	unsigned long,	hva		)
+	),
+
+	TP_fast_assign(
+		__entry->hva		= hva;
+	),
+
+	TP_printk("mmu notifier set pte hva: %#08lx", __entry->hva)
+);
 
 #endif /* _TRACE_KVM_H */