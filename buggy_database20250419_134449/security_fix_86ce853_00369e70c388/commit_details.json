{
  "hash": "86ce85352f0da7e1431ad8efcb04323819a620e7",
  "hash_short": "86ce8535",
  "subject": "KVM: ARM: Inject IRQs and FIQs from userspace",
  "body": "All interrupt injection is now based on the VM ioctl KVM_IRQ_LINE.  This\nworks semantically well for the GIC as we in fact raise/lower a line on\na machine component (the gic).  The IOCTL uses the follwing struct.\n\nstruct kvm_irq_level {\n\tunion {\n\t\t__u32 irq;     /* GSI */\n\t\t__s32 status;  /* not used for KVM_IRQ_LEVEL */\n\t};\n\t__u32 level;           /* 0 or 1 */\n};\n\nARM can signal an interrupt either at the CPU level, or at the in-kernel irqchip\n(GIC), and for in-kernel irqchip can tell the GIC to use PPIs designated for\nspecific cpus.  The irq field is interpreted like this:\n\n \u00a0bits:  | 31 ... 24 | 23  ... 16 | 15    ...    0 |\n  field: | irq_type  | vcpu_index |   irq_number   |\n\nThe irq_type field has the following values:\n- irq_type[0]: out-of-kernel GIC: irq_number 0 is IRQ, irq_number 1 is FIQ\n- irq_type[1]: in-kernel GIC: SPI, irq_number between 32 and 1019 (incl.)\n               (the vcpu_index field is ignored)\n- irq_type[2]: in-kernel GIC: PPI, irq_number between 16 and 31 (incl.)\n\nThe irq_number thus corresponds to the irq ID in as in the GICv2 specs.\n\nThis is documented in Documentation/kvm/api.txt.\n\nReviewed-by: Will Deacon <will.deacon@arm.com>\nReviewed-by: Marcelo Tosatti <mtosatti@redhat.com>\nSigned-off-by: Christoffer Dall <c.dall@virtualopensystems.com>",
  "full_message": "KVM: ARM: Inject IRQs and FIQs from userspace\n\nAll interrupt injection is now based on the VM ioctl KVM_IRQ_LINE.  This\nworks semantically well for the GIC as we in fact raise/lower a line on\na machine component (the gic).  The IOCTL uses the follwing struct.\n\nstruct kvm_irq_level {\n\tunion {\n\t\t__u32 irq;     /* GSI */\n\t\t__s32 status;  /* not used for KVM_IRQ_LEVEL */\n\t};\n\t__u32 level;           /* 0 or 1 */\n};\n\nARM can signal an interrupt either at the CPU level, or at the in-kernel irqchip\n(GIC), and for in-kernel irqchip can tell the GIC to use PPIs designated for\nspecific cpus.  The irq field is interpreted like this:\n\n \u00a0bits:  | 31 ... 24 | 23  ... 16 | 15    ...    0 |\n  field: | irq_type  | vcpu_index |   irq_number   |\n\nThe irq_type field has the following values:\n- irq_type[0]: out-of-kernel GIC: irq_number 0 is IRQ, irq_number 1 is FIQ\n- irq_type[1]: in-kernel GIC: SPI, irq_number between 32 and 1019 (incl.)\n               (the vcpu_index field is ignored)\n- irq_type[2]: in-kernel GIC: PPI, irq_number between 16 and 31 (incl.)\n\nThe irq_number thus corresponds to the irq ID in as in the GICv2 specs.\n\nThis is documented in Documentation/kvm/api.txt.\n\nReviewed-by: Will Deacon <will.deacon@arm.com>\nReviewed-by: Marcelo Tosatti <mtosatti@redhat.com>\nSigned-off-by: Christoffer Dall <c.dall@virtualopensystems.com>",
  "author_name": "Christoffer Dall",
  "author_email": "cdall@cs.columbia.edu",
  "author_date": "Sun Jan 20 18:28:08 2013 -0500",
  "author_date_iso": "2013-01-20T18:28:08-05:00",
  "committer_name": "Christoffer Dall",
  "committer_email": "c.dall@virtualopensystems.com",
  "committer_date": "Wed Jan 23 13:29:12 2013 -0500",
  "committer_date_iso": "2013-01-23T13:29:12-05:00",
  "files_changed": [
    "Documentation/virtual/kvm/api.txt",
    "arch/arm/include/asm/kvm_arm.h",
    "arch/arm/include/uapi/asm/kvm.h",
    "arch/arm/kvm/arm.c",
    "arch/arm/kvm/trace.h",
    "include/uapi/linux/kvm.h"
  ],
  "files_changed_count": 6,
  "stats": [
    {
      "file": "Documentation/virtual/kvm/api.txt",
      "insertions": 21,
      "deletions": 4
    },
    {
      "file": "arch/arm/include/asm/kvm_arm.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/arm/include/uapi/asm/kvm.h",
      "insertions": 21,
      "deletions": 0
    },
    {
      "file": "arch/arm/kvm/arm.c",
      "insertions": 65,
      "deletions": 0
    },
    {
      "file": "arch/arm/kvm/trace.h",
      "insertions": 25,
      "deletions": 0
    },
    {
      "file": "include/uapi/linux/kvm.h",
      "insertions": 1,
      "deletions": 0
    }
  ],
  "total_insertions": 134,
  "total_deletions": 4,
  "total_changes": 138,
  "parents": [
    "d5d8184d35c990b1324d9b30bcd0e4e8aa08f56d"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v3.10",
    "v3.10-rc1",
    "v3.10-rc2",
    "v3.10-rc3",
    "v3.10-rc4",
    "v3.10-rc5",
    "v3.10-rc6",
    "v3.10-rc7",
    "v3.11",
    "v3.11-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "Inject"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/arm/kvm/trace.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm/include/uapi/asm/kvm.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "Documentation/virtual/kvm/api.txt",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm/kvm/arm.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm/include/asm/kvm_arm.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/uapi/linux/kvm.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}