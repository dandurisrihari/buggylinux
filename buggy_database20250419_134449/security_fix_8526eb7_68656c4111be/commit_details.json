{
  "hash": "8526eb7fc75abcd09d8bd061610215baf0ca948a",
  "hash_short": "8526eb7f",
  "subject": "thermal: intel: powerclamp: Use powercap idle-inject feature",
  "body": "There are two idle injection implementation in the Linux kernel. One\nvia intel_powerclamp and the other using powercap/idle_inject. Both\nimplementation end up in calling play_idle* function from a FIFO\npriority thread. Both can't be used at the same time.\n\nIt is better to use one idle injection framework for better\nmaintainability. In this way, there is only one caller for play_idle.\n\nHere powercap/idle_inject can be used for both per-core and for system\nwide idle injection. This framework has a well defined interface which\nallow registry for per-core or for all CPUs (system wide).\n\nThis reduces code complexity in the intel powerclamp driver as all the\nper CPU kthreads, delayed work and calls to play_idle can be removed.\n\nThe changes include:\n - Remove unneeded include files\n - Remove per CPU kthread workers: balancing_work and idle_injection_work.\n - Reuse the compensation related code by moving from previous worker\n   thread to idle_injection callback.\n - Adjust the idle_duration and runtime by using powercap/idle_inject\n   interface.\n - Remove all variables, which are not required once powercap/idle_inject\n   is used.\n - Add mutex to avoid race during removal of idle injection during module\n   unload and user action to change idle inject percent. Also for\n   protection during dynamic adjustment of run and idle time from\n   update() callback.\n - Remove online/offline callbacks to designate control CPU\n - Use cpu_present_mask global variable for CPU mask\n - Remove hot plug locks\n\nSigned-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>\nSigned-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>",
  "full_message": "thermal: intel: powerclamp: Use powercap idle-inject feature\n\nThere are two idle injection implementation in the Linux kernel. One\nvia intel_powerclamp and the other using powercap/idle_inject. Both\nimplementation end up in calling play_idle* function from a FIFO\npriority thread. Both can't be used at the same time.\n\nIt is better to use one idle injection framework for better\nmaintainability. In this way, there is only one caller for play_idle.\n\nHere powercap/idle_inject can be used for both per-core and for system\nwide idle injection. This framework has a well defined interface which\nallow registry for per-core or for all CPUs (system wide).\n\nThis reduces code complexity in the intel powerclamp driver as all the\nper CPU kthreads, delayed work and calls to play_idle can be removed.\n\nThe changes include:\n - Remove unneeded include files\n - Remove per CPU kthread workers: balancing_work and idle_injection_work.\n - Reuse the compensation related code by moving from previous worker\n   thread to idle_injection callback.\n - Adjust the idle_duration and runtime by using powercap/idle_inject\n   interface.\n - Remove all variables, which are not required once powercap/idle_inject\n   is used.\n - Add mutex to avoid race during removal of idle injection during module\n   unload and user action to change idle inject percent. Also for\n   protection during dynamic adjustment of run and idle time from\n   update() callback.\n - Remove online/offline callbacks to designate control CPU\n - Use cpu_present_mask global variable for CPU mask\n - Remove hot plug locks\n\nSigned-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>\nSigned-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>",
  "author_name": "Srinivas Pandruvada",
  "author_email": "srinivas.pandruvada@linux.intel.com",
  "author_date": "Wed Feb 1 10:28:53 2023 -0800",
  "author_date_iso": "2023-02-01T10:28:53-08:00",
  "committer_name": "Rafael J. Wysocki",
  "committer_email": "rafael.j.wysocki@intel.com",
  "committer_date": "Fri Feb 3 14:48:34 2023 +0100",
  "committer_date_iso": "2023-02-03T14:48:34+01:00",
  "files_changed": [
    "drivers/thermal/intel/Kconfig",
    "drivers/thermal/intel/intel_powerclamp.c"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "drivers/thermal/intel/Kconfig",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "drivers/thermal/intel/intel_powerclamp.c",
      "insertions": 156,
      "deletions": 223
    }
  ],
  "total_insertions": 159,
  "total_deletions": 223,
  "total_changes": 382,
  "parents": [
    "acbc661032b8aa0e8359ac77074769ade34a176c"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "inject"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/thermal/intel/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/thermal/intel/intel_powerclamp.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}