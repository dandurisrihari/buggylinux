{
  "hash": "ca6a6f93867a9763bdf8685c788e2e558d10975f",
  "hash_short": "ca6a6f93",
  "subject": "tcp: Add sysctl to configure TIME-WAIT reuse delay",
  "body": "Today we have a hardcoded delay of 1 sec before a TIME-WAIT socket can be\nreused by reopening a connection. This is a safe choice based on an\nassumption that the other TCP timestamp clock frequency, which is unknown\nto us, may be as low as 1 Hz (RFC 7323, section 5.4).\n\nHowever, this means that in the presence of short lived connections with an\nRTT of couple of milliseconds, the time during which a 4-tuple is blocked\nfrom reuse can be orders of magnitude longer that the connection lifetime.\nCombined with a reduced pool of ephemeral ports, when using\nIP_LOCAL_PORT_RANGE to share an egress IP address between hosts [1], the\nlong TIME-WAIT reuse delay can lead to port exhaustion, where all available\n4-tuples are tied up in TIME-WAIT state.\n\nTurn the reuse delay into a per-netns setting so that sysadmins can make\nmore aggressive assumptions about remote TCP timestamp clock frequency and\nshorten the delay in order to allow connections to reincarnate faster.\n\nNote that applications can completely bypass the TIME-WAIT delay protection\nalready today by locking the local port with bind() before connecting. Such\nimmediate connection reuse may result in PAWS failing to detect old\nduplicate segments, leaving us with just the sequence number check as a\nsafety net.\n\nThis new configurable offers a trade off where the sysadmin can balance\nbetween the risk of PAWS detection failing to act versus exhausting ports\nby having sockets tied up in TIME-WAIT state for too long.\n\n[1] https://lpc.events/event/16/contributions/1349/\n\nSigned-off-by: Jakub Sitnicki <jakub@cloudflare.com>\nReviewed-by: Eric Dumazet <edumazet@google.com>\nReviewed-by: Jason Xing <kerneljasonxing@gmail.com>\nLink: https://patch.msgid.link/20241209-jakub-krn-909-poc-msec-tw-tstamp-v2-2-66aca0eed03e@cloudflare.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
  "full_message": "tcp: Add sysctl to configure TIME-WAIT reuse delay\n\nToday we have a hardcoded delay of 1 sec before a TIME-WAIT socket can be\nreused by reopening a connection. This is a safe choice based on an\nassumption that the other TCP timestamp clock frequency, which is unknown\nto us, may be as low as 1 Hz (RFC 7323, section 5.4).\n\nHowever, this means that in the presence of short lived connections with an\nRTT of couple of milliseconds, the time during which a 4-tuple is blocked\nfrom reuse can be orders of magnitude longer that the connection lifetime.\nCombined with a reduced pool of ephemeral ports, when using\nIP_LOCAL_PORT_RANGE to share an egress IP address between hosts [1], the\nlong TIME-WAIT reuse delay can lead to port exhaustion, where all available\n4-tuples are tied up in TIME-WAIT state.\n\nTurn the reuse delay into a per-netns setting so that sysadmins can make\nmore aggressive assumptions about remote TCP timestamp clock frequency and\nshorten the delay in order to allow connections to reincarnate faster.\n\nNote that applications can completely bypass the TIME-WAIT delay protection\nalready today by locking the local port with bind() before connecting. Such\nimmediate connection reuse may result in PAWS failing to detect old\nduplicate segments, leaving us with just the sequence number check as a\nsafety net.\n\nThis new configurable offers a trade off where the sysadmin can balance\nbetween the risk of PAWS detection failing to act versus exhausting ports\nby having sockets tied up in TIME-WAIT state for too long.\n\n[1] https://lpc.events/event/16/contributions/1349/\n\nSigned-off-by: Jakub Sitnicki <jakub@cloudflare.com>\nReviewed-by: Eric Dumazet <edumazet@google.com>\nReviewed-by: Jason Xing <kerneljasonxing@gmail.com>\nLink: https://patch.msgid.link/20241209-jakub-krn-909-poc-msec-tw-tstamp-v2-2-66aca0eed03e@cloudflare.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
  "author_name": "Jakub Sitnicki",
  "author_email": "jakub@cloudflare.com",
  "author_date": "Mon Dec 9 20:38:04 2024 +0100",
  "author_date_iso": "2024-12-09T20:38:04+01:00",
  "committer_name": "Jakub Kicinski",
  "committer_email": "kuba@kernel.org",
  "committer_date": "Wed Dec 11 20:17:33 2024 -0800",
  "committer_date_iso": "2024-12-11T20:17:33-08:00",
  "files_changed": [
    "Documentation/networking/ip-sysctl.rst",
    "Documentation/networking/net_cachelines/netns_ipv4_sysctl.rst",
    "include/net/netns/ipv4.h",
    "net/ipv4/sysctl_net_ipv4.c",
    "net/ipv4/tcp_ipv4.c"
  ],
  "files_changed_count": 5,
  "stats": [
    {
      "file": "Documentation/networking/ip-sysctl.rst",
      "insertions": 14,
      "deletions": 0
    },
    {
      "file": "Documentation/networking/net_cachelines/netns_ipv4_sysctl.rst",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "include/net/netns/ipv4.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "net/ipv4/sysctl_net_ipv4.c",
      "insertions": 10,
      "deletions": 0
    },
    {
      "file": "net/ipv4/tcp_ipv4.c",
      "insertions": 3,
      "deletions": 1
    }
  ],
  "total_insertions": 29,
  "total_deletions": 1,
  "total_changes": 30,
  "parents": [
    "19ce8cd3046587efbd2c6253947be7c22dfccc18"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "bypass"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "Documentation/networking/ip-sysctl.rst",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "Documentation/networking/net_cachelines/netns_ipv4_sysctl.rst",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/net/netns/ipv4.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/ipv4/sysctl_net_ipv4.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/ipv4/tcp_ipv4.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}