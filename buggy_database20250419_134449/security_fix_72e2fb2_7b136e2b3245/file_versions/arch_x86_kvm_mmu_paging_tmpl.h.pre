commit 20ba462dfda6a95cb3bfb5577da813acf3dc4b40
Author: Sean Christopherson <seanjc@google.com>
Date:   Fri Jul 28 17:47:17 2023 -0700

    KVM: x86/mmu: Convert "runtime" WARN_ON() assertions to WARN_ON_ONCE()
    
    Convert all "runtime" assertions, i.e. assertions that can be triggered
    while running vCPUs, from WARN_ON() to WARN_ON_ONCE().  Every WARN in the
    MMU that is tied to running vCPUs, i.e. not contained to loading and
    initializing KVM, is likely to fire _a lot_ when it does trigger.  E.g. if
    KVM ends up with a bug that causes a root to be invalidated before the
    page fault handler is invoked, pretty much _every_ page fault VM-Exit
    triggers the WARN.
    
    If a WARN is triggered frequently, the resulting spam usually causes a lot
    of damage of its own, e.g. consumes resources to log the WARN and pollutes
    the kernel log, often to the point where other useful information can be
    lost.  In many case, the damage caused by the spam is actually worse than
    the bug itself, e.g. KVM can almost always recover from an unexpectedly
    invalid root.
    
    On the flip side, warning every time is rarely helpful for debug and
    triage, i.e. a single splat is usually sufficient to point a debugger in
    the right direction, and automated testing, e.g. syzkaller, typically runs
    with warn_on_panic=1, i.e. will never get past the first WARN anyways.
    
    Lastly, when an assertions fails multiple times, the stack traces in KVM
    are almost always identical, i.e. the full splat only needs to be captured
    once.  And _if_ there is value in captruing information about the failed
    assert, a ratelimited printk() is sufficient and less likely to rack up a
    large amount of collateral damage.
    
    Link: https://lore.kernel.org/r/20230729004722.1056172-8-seanjc@google.com
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

diff --git a/arch/x86/kvm/mmu/paging_tmpl.h b/arch/x86/kvm/mmu/paging_tmpl.h
index 7a97f769a7cb..a3fc7c1a7f8d 100644
--- a/arch/x86/kvm/mmu/paging_tmpl.h
+++ b/arch/x86/kvm/mmu/paging_tmpl.h
@@ -633,7 +633,7 @@ static int FNAME(fetch)(struct kvm_vcpu *vcpu, struct kvm_page_fault *fault,
 	if (FNAME(gpte_changed)(vcpu, gw, top_level))
 		goto out_gpte_changed;
 
-	if (WARN_ON(!VALID_PAGE(vcpu->arch.mmu->root.hpa)))
+	if (WARN_ON_ONCE(!VALID_PAGE(vcpu->arch.mmu->root.hpa)))
 		goto out_gpte_changed;
 
 	for_each_shadow_entry(vcpu, fault->addr, it) {
@@ -830,7 +830,7 @@ static gpa_t FNAME(get_level1_sp_gpa)(struct kvm_mmu_page *sp)
 {
 	int offset = 0;
 
-	WARN_ON(sp->role.level != PG_LEVEL_4K);
+	WARN_ON_ONCE(sp->role.level != PG_LEVEL_4K);
 
 	if (PTTYPE == 32)
 		offset = sp->role.quadrant << SPTE_LEVEL_BITS;