commit 45239ba39a5279e9efc671774e2eef29df4d2484
Author: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
Date:   Fri Oct 25 12:14:58 2024 -0500

    x86/cpu: Add CPU type to struct cpuinfo_topology
    
    Sometimes it is required to take actions based on if a CPU is a performance or
    efficiency core. As an example, intel_pstate driver uses the Intel core-type
    to determine CPU scaling. Also, some CPU vulnerabilities only affect
    a specific CPU type, like RFDS only affects Intel Atom. Hybrid systems that
    have variants P+E, P-only(Core) and E-only(Atom), it is not straightforward to
    identify which variant is affected by a type specific vulnerability.
    
    Such processors do have CPUID field that can uniquely identify them. Like,
    P+E, P-only and E-only enumerates CPUID.1A.CORE_TYPE identification, while P+E
    additionally enumerates CPUID.7.HYBRID. Based on this information, it is
    possible for boot CPU to identify if a system has mixed CPU types.
    
    Add a new field hw_cpu_type to struct cpuinfo_topology that stores the
    hardware specific CPU type. This saves the overhead of IPIs to get the CPU
    type of a different CPU. CPU type is populated early in the boot process,
    before vulnerabilities are enumerated.
    
    Signed-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>
    Co-developed-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Borislav Petkov (AMD) <bp@alien8.de>
    Acked-by: Dave Hansen <dave.hansen@linux.intel.com>
    Link: https://lore.kernel.org/r/20241025171459.1093-5-mario.limonciello@amd.com

diff --git a/arch/x86/kernel/cpu/debugfs.c b/arch/x86/kernel/cpu/debugfs.c
index 3baf3e435834..10719aba6276 100644
--- a/arch/x86/kernel/cpu/debugfs.c
+++ b/arch/x86/kernel/cpu/debugfs.c
@@ -22,6 +22,7 @@ static int cpu_debug_show(struct seq_file *m, void *p)
 	seq_printf(m, "die_id:              %u\n", c->topo.die_id);
 	seq_printf(m, "cu_id:               %u\n", c->topo.cu_id);
 	seq_printf(m, "core_id:             %u\n", c->topo.core_id);
+	seq_printf(m, "cpu_type:            %s\n", get_topology_cpu_type_name(c));
 	seq_printf(m, "logical_pkg_id:      %u\n", c->topo.logical_pkg_id);
 	seq_printf(m, "logical_die_id:      %u\n", c->topo.logical_die_id);
 	seq_printf(m, "llc_id:              %u\n", c->topo.llc_id);