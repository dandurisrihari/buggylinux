{
  "hash": "45239ba39a5279e9efc671774e2eef29df4d2484",
  "hash_short": "45239ba3",
  "subject": "x86/cpu: Add CPU type to struct cpuinfo_topology",
  "body": "Sometimes it is required to take actions based on if a CPU is a performance or\nefficiency core. As an example, intel_pstate driver uses the Intel core-type\nto determine CPU scaling. Also, some CPU vulnerabilities only affect\na specific CPU type, like RFDS only affects Intel Atom. Hybrid systems that\nhave variants P+E, P-only(Core) and E-only(Atom), it is not straightforward to\nidentify which variant is affected by a type specific vulnerability.\n\nSuch processors do have CPUID field that can uniquely identify them. Like,\nP+E, P-only and E-only enumerates CPUID.1A.CORE_TYPE identification, while P+E\nadditionally enumerates CPUID.7.HYBRID. Based on this information, it is\npossible for boot CPU to identify if a system has mixed CPU types.\n\nAdd a new field hw_cpu_type to struct cpuinfo_topology that stores the\nhardware specific CPU type. This saves the overhead of IPIs to get the CPU\ntype of a different CPU. CPU type is populated early in the boot process,\nbefore vulnerabilities are enumerated.\n\nSigned-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>\nCo-developed-by: Mario Limonciello <mario.limonciello@amd.com>\nSigned-off-by: Mario Limonciello <mario.limonciello@amd.com>\nSigned-off-by: Borislav Petkov (AMD) <bp@alien8.de>\nAcked-by: Dave Hansen <dave.hansen@linux.intel.com>\nLink: https://lore.kernel.org/r/20241025171459.1093-5-mario.limonciello@amd.com",
  "full_message": "x86/cpu: Add CPU type to struct cpuinfo_topology\n\nSometimes it is required to take actions based on if a CPU is a performance or\nefficiency core. As an example, intel_pstate driver uses the Intel core-type\nto determine CPU scaling. Also, some CPU vulnerabilities only affect\na specific CPU type, like RFDS only affects Intel Atom. Hybrid systems that\nhave variants P+E, P-only(Core) and E-only(Atom), it is not straightforward to\nidentify which variant is affected by a type specific vulnerability.\n\nSuch processors do have CPUID field that can uniquely identify them. Like,\nP+E, P-only and E-only enumerates CPUID.1A.CORE_TYPE identification, while P+E\nadditionally enumerates CPUID.7.HYBRID. Based on this information, it is\npossible for boot CPU to identify if a system has mixed CPU types.\n\nAdd a new field hw_cpu_type to struct cpuinfo_topology that stores the\nhardware specific CPU type. This saves the overhead of IPIs to get the CPU\ntype of a different CPU. CPU type is populated early in the boot process,\nbefore vulnerabilities are enumerated.\n\nSigned-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>\nCo-developed-by: Mario Limonciello <mario.limonciello@amd.com>\nSigned-off-by: Mario Limonciello <mario.limonciello@amd.com>\nSigned-off-by: Borislav Petkov (AMD) <bp@alien8.de>\nAcked-by: Dave Hansen <dave.hansen@linux.intel.com>\nLink: https://lore.kernel.org/r/20241025171459.1093-5-mario.limonciello@amd.com",
  "author_name": "Pawan Gupta",
  "author_email": "pawan.kumar.gupta@linux.intel.com",
  "author_date": "Fri Oct 25 12:14:58 2024 -0500",
  "author_date_iso": "2024-10-25T12:14:58-05:00",
  "committer_name": "Borislav Petkov (AMD)",
  "committer_email": "bp@alien8.de",
  "committer_date": "Fri Oct 25 20:44:26 2024 +0200",
  "committer_date_iso": "2024-10-25T20:44:26+02:00",
  "files_changed": [
    "arch/x86/include/asm/intel-family.h",
    "arch/x86/include/asm/processor.h",
    "arch/x86/include/asm/topology.h",
    "arch/x86/kernel/cpu/debugfs.c",
    "arch/x86/kernel/cpu/topology_amd.c",
    "arch/x86/kernel/cpu/topology_common.c"
  ],
  "files_changed_count": 6,
  "stats": [
    {
      "file": "arch/x86/include/asm/intel-family.h",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/processor.h",
      "insertions": 18,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/topology.h",
      "insertions": 9,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/cpu/debugfs.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/cpu/topology_amd.c",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/cpu/topology_common.c",
      "insertions": 34,
      "deletions": 0
    }
  ],
  "total_insertions": 71,
  "total_deletions": 0,
  "total_changes": 71,
  "parents": [
    "b0979e53645825a38f814ca5d3d09aed2745911d"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "vulnerability"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/include/asm/topology.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/cpu/topology_common.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/intel-family.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/cpu/debugfs.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/processor.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/cpu/topology_amd.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}