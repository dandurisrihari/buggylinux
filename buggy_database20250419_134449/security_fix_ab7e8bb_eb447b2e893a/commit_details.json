{
  "hash": "ab7e8bb6e077a55ae5ac1a4bb4ebba85470d47e5",
  "hash_short": "ab7e8bb6",
  "subject": "nvdimm/btt: replace deprecated strncpy with strscpy",
  "body": "Found with grep.\n\nstrncpy() is deprecated for use on NUL-terminated destination strings\n[1] and as such we should prefer more robust and less ambiguous string\ninterfaces.\n\nWe expect super->signature to be NUL-terminated based on its usage with\nmemcmp against a NUL-term'd buffer:\nbtt_devs.c:\n253 | if (memcmp(super->signature, BTT_SIG, BTT_SIG_LEN) != 0)\nbtt.h:\n13  | #define BTT_SIG \"BTT_ARENA_INFO\\0\"\n\nNUL-padding is not required as `super` is already zero-allocated:\nbtt.c:\n985 | super = kzalloc(sizeof(struct btt_sb), GFP_NOIO);\n... rendering any additional NUL-padding superfluous.\n\nConsidering the above, a suitable replacement is `strscpy` [2] due to\nthe fact that it guarantees NUL-termination on the destination buffer\nwithout unnecessarily NUL-padding.\n\nLet's also use the more idiomatic strscpy usage of (dest, src,\nsizeof(dest)) instead of (dest, src, XYZ_LEN) for buffers that the\ncompiler can determine the size of. This more tightly correlates the\ndestination buffer to the amount of bytes copied.\n\nSide note, this pattern of memcmp() on two NUL-terminated strings should\nreally be changed to just a strncmp(), if i'm not mistaken? I see\nmultiple instances of this pattern in this system:\n\n|       if (memcmp(super->signature, BTT_SIG, BTT_SIG_LEN) != 0)\n|               return false;\n\nwhere BIT_SIG is defined (weirdly) as a double NUL-terminated string:\n\n|       #define BTT_SIG \"BTT_ARENA_INFO\\0\"\n\nLink: https://www.kernel.org/doc/html/latest/process/deprecated.html#strncpy-on-nul-terminated-strings [1]\nLink: https://manpages.debian.org/testing/linux-manual-4.8/strscpy.9.en.html [2]\nLink: https://github.com/KSPP/linux/issues/90\nCc: linux-hardening@vger.kernel.org\nSigned-off-by: Justin Stitt <justinstitt@google.com>\nReviewed-by: Kees Cook <keescook@chromium.org>\nLink: https://lore.kernel.org/r/20231019-strncpy-drivers-nvdimm-btt-c-v2-1-366993878cf0@google.com\nSigned-off-by: Kees Cook <keescook@chromium.org>",
  "full_message": "nvdimm/btt: replace deprecated strncpy with strscpy\n\nFound with grep.\n\nstrncpy() is deprecated for use on NUL-terminated destination strings\n[1] and as such we should prefer more robust and less ambiguous string\ninterfaces.\n\nWe expect super->signature to be NUL-terminated based on its usage with\nmemcmp against a NUL-term'd buffer:\nbtt_devs.c:\n253 | if (memcmp(super->signature, BTT_SIG, BTT_SIG_LEN) != 0)\nbtt.h:\n13  | #define BTT_SIG \"BTT_ARENA_INFO\\0\"\n\nNUL-padding is not required as `super` is already zero-allocated:\nbtt.c:\n985 | super = kzalloc(sizeof(struct btt_sb), GFP_NOIO);\n... rendering any additional NUL-padding superfluous.\n\nConsidering the above, a suitable replacement is `strscpy` [2] due to\nthe fact that it guarantees NUL-termination on the destination buffer\nwithout unnecessarily NUL-padding.\n\nLet's also use the more idiomatic strscpy usage of (dest, src,\nsizeof(dest)) instead of (dest, src, XYZ_LEN) for buffers that the\ncompiler can determine the size of. This more tightly correlates the\ndestination buffer to the amount of bytes copied.\n\nSide note, this pattern of memcmp() on two NUL-terminated strings should\nreally be changed to just a strncmp(), if i'm not mistaken? I see\nmultiple instances of this pattern in this system:\n\n|       if (memcmp(super->signature, BTT_SIG, BTT_SIG_LEN) != 0)\n|               return false;\n\nwhere BIT_SIG is defined (weirdly) as a double NUL-terminated string:\n\n|       #define BTT_SIG \"BTT_ARENA_INFO\\0\"\n\nLink: https://www.kernel.org/doc/html/latest/process/deprecated.html#strncpy-on-nul-terminated-strings [1]\nLink: https://manpages.debian.org/testing/linux-manual-4.8/strscpy.9.en.html [2]\nLink: https://github.com/KSPP/linux/issues/90\nCc: linux-hardening@vger.kernel.org\nSigned-off-by: Justin Stitt <justinstitt@google.com>\nReviewed-by: Kees Cook <keescook@chromium.org>\nLink: https://lore.kernel.org/r/20231019-strncpy-drivers-nvdimm-btt-c-v2-1-366993878cf0@google.com\nSigned-off-by: Kees Cook <keescook@chromium.org>",
  "author_name": "Justin Stitt",
  "author_email": "justinstitt@google.com",
  "author_date": "Thu Oct 19 17:54:15 2023 +0000",
  "author_date_iso": "2023-10-19T17:54:15+00:00",
  "committer_name": "Kees Cook",
  "committer_email": "keescook@chromium.org",
  "committer_date": "Fri Dec 1 09:51:43 2023 -0800",
  "committer_date_iso": "2023-12-01T09:51:43-08:00",
  "files_changed": [
    "drivers/nvdimm/btt.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "drivers/nvdimm/btt.c",
      "insertions": 1,
      "deletions": 1
    }
  ],
  "total_insertions": 1,
  "total_deletions": 1,
  "total_changes": 2,
  "parents": [
    "576b75f93b3d3c408235808f689453f1ed891486"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/nvdimm/btt.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}