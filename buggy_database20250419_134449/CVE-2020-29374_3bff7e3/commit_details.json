{
  "hash": "3bff7e3f1f16dc7305d12905c51c278b54970f0e",
  "hash_short": "3bff7e3f",
  "subject": "mm/huge_memory: streamline COW logic in do_huge_pmd_wp_page()",
  "body": "We currently have a different COW logic for anon THP than we have for\nordinary anon pages in do_wp_page(): the effect is that the issue reported\nin CVE-2020-29374 is currently still possible for anon THP: an unintended\ninformation leak from the parent to the child.\n\nLet's apply the same logic (page_count() == 1), with similar optimizations\nto remove additional references first as we really want to avoid\nPTE-mapping the THP and copying individual pages best we can.\n\nIf we end up with a page that has page_count() != 1, we'll have to PTE-map\nthe THP and fallback to do_wp_page(), which will always copy the page.\n\nNote that KSM does not apply to THP.\n\nI. Interaction with the swapcache and writeback\n\nWhile a THP is in the swapcache, the swapcache holds one reference on each\nsubpage of the THP.  So with PageSwapCache() set, we expect as many\nadditional references as we have subpages.  If we manage to remove the THP\nfrom the swapcache, all these references will be gone.\n\nUsually, a THP is not split when entered into the swapcache and stays a\ncompound page.  However, try_to_unmap() will PTE-map the THP and use PTE\nswap entries.  There are no PMD swap entries for that purpose,\nconsequently, we always only swapin subpages into PTEs.\n\nRemoving a page from the swapcache can fail either when there are\nremaining swap entries (in which case COW is the right thing to do) or if\nthe page is currently under writeback.\n\nHaving a locked, R/O PMD-mapped THP that is in the swapcache seems to be\npossible only in corner cases, for example, if try_to_unmap() failed after\nadding the page to the swapcache.  However, it's comparatively easy to\nhandle.\n\nAs we have to fully unmap a THP before starting writeback, and swapin is\nalways done on the PTE level, we shouldn't find a R/O PMD-mapped THP in\nthe swapcache that is under writeback.  This should at least leave\nwriteback out of the picture.\n\nII. Interaction with GUP references\n\nHaving a R/O PMD-mapped THP with GUP references (i.e., R/O references)\nwill result in PTE-mapping the THP on a write fault.  Similar to ordinary\nanon pages, do_wp_page() will have to copy sub-pages and result in a\ndisconnect between the GUP references and the pages actually mapped into\nthe page tables.  To improve the situation in the future, we'll need\nadditional handling to mark anonymous pages as definitely exclusive to a\nsingle process, only allow GUP pins on exclusive anon pages, and disallow\nsharing of exclusive anon pages with GUP pins e.g., during fork().\n\nIII. Interaction with references from LRU pagevecs\n\nThere is no need to try draining the (local) LRU pagevecs in case we would\nstumble over a !PageLRU() page: folio_add_lru() and friends will always\nflush the affected pagevec after adding a compound page to it immediately\n-- pagevec_add_and_need_flush() always returns \"true\" for them.  Note that\nthe LRU pagevecs will hold a reference on the compound page for a very\nshort time, between adding the page to the pagevec and draining it\nimmediately afterwards.\n\nIV. Interaction with speculative/temporary references\n\nSimilar to ordinary anon pages, other speculative/temporary references on\nthe THP, for example, from the pagecache or page migration code, will\ndisallow exclusive reuse of the page.  We'll have to PTE-map the THP.\n\nLink: https://lkml.kernel.org/r/20220131162940.210846-6-david@redhat.com\nSigned-off-by: David Hildenbrand <david@redhat.com>\nAcked-by: Vlastimil Babka <vbabka@suse.cz>\nCc: Andrea Arcangeli <aarcange@redhat.com>\nCc: Christoph Hellwig <hch@lst.de>\nCc: David Rientjes <rientjes@google.com>\nCc: Don Dutile <ddutile@redhat.com>\nCc: Hugh Dickins <hughd@google.com>\nCc: Jan Kara <jack@suse.cz>\nCc: Jann Horn <jannh@google.com>\nCc: Jason Gunthorpe <jgg@nvidia.com>\nCc: John Hubbard <jhubbard@nvidia.com>\nCc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>\nCc: Liang Zhang <zhangliang5@huawei.com>\nCc: Matthew Wilcox (Oracle) <willy@infradead.org>\nCc: Michal Hocko <mhocko@kernel.org>\nCc: Mike Kravetz <mike.kravetz@oracle.com>\nCc: Mike Rapoport <rppt@linux.ibm.com>\nCc: Nadav Amit <nadav.amit@gmail.com>\nCc: Oleg Nesterov <oleg@redhat.com>\nCc: Peter Xu <peterx@redhat.com>\nCc: Rik van Riel <riel@surriel.com>\nCc: Roman Gushchin <roman.gushchin@linux.dev>\nCc: Shakeel Butt <shakeelb@google.com>\nCc: Yang Shi <shy828301@gmail.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "full_message": "mm/huge_memory: streamline COW logic in do_huge_pmd_wp_page()\n\nWe currently have a different COW logic for anon THP than we have for\nordinary anon pages in do_wp_page(): the effect is that the issue reported\nin CVE-2020-29374 is currently still possible for anon THP: an unintended\ninformation leak from the parent to the child.\n\nLet's apply the same logic (page_count() == 1), with similar optimizations\nto remove additional references first as we really want to avoid\nPTE-mapping the THP and copying individual pages best we can.\n\nIf we end up with a page that has page_count() != 1, we'll have to PTE-map\nthe THP and fallback to do_wp_page(), which will always copy the page.\n\nNote that KSM does not apply to THP.\n\nI. Interaction with the swapcache and writeback\n\nWhile a THP is in the swapcache, the swapcache holds one reference on each\nsubpage of the THP.  So with PageSwapCache() set, we expect as many\nadditional references as we have subpages.  If we manage to remove the THP\nfrom the swapcache, all these references will be gone.\n\nUsually, a THP is not split when entered into the swapcache and stays a\ncompound page.  However, try_to_unmap() will PTE-map the THP and use PTE\nswap entries.  There are no PMD swap entries for that purpose,\nconsequently, we always only swapin subpages into PTEs.\n\nRemoving a page from the swapcache can fail either when there are\nremaining swap entries (in which case COW is the right thing to do) or if\nthe page is currently under writeback.\n\nHaving a locked, R/O PMD-mapped THP that is in the swapcache seems to be\npossible only in corner cases, for example, if try_to_unmap() failed after\nadding the page to the swapcache.  However, it's comparatively easy to\nhandle.\n\nAs we have to fully unmap a THP before starting writeback, and swapin is\nalways done on the PTE level, we shouldn't find a R/O PMD-mapped THP in\nthe swapcache that is under writeback.  This should at least leave\nwriteback out of the picture.\n\nII. Interaction with GUP references\n\nHaving a R/O PMD-mapped THP with GUP references (i.e., R/O references)\nwill result in PTE-mapping the THP on a write fault.  Similar to ordinary\nanon pages, do_wp_page() will have to copy sub-pages and result in a\ndisconnect between the GUP references and the pages actually mapped into\nthe page tables.  To improve the situation in the future, we'll need\nadditional handling to mark anonymous pages as definitely exclusive to a\nsingle process, only allow GUP pins on exclusive anon pages, and disallow\nsharing of exclusive anon pages with GUP pins e.g., during fork().\n\nIII. Interaction with references from LRU pagevecs\n\nThere is no need to try draining the (local) LRU pagevecs in case we would\nstumble over a !PageLRU() page: folio_add_lru() and friends will always\nflush the affected pagevec after adding a compound page to it immediately\n-- pagevec_add_and_need_flush() always returns \"true\" for them.  Note that\nthe LRU pagevecs will hold a reference on the compound page for a very\nshort time, between adding the page to the pagevec and draining it\nimmediately afterwards.\n\nIV. Interaction with speculative/temporary references\n\nSimilar to ordinary anon pages, other speculative/temporary references on\nthe THP, for example, from the pagecache or page migration code, will\ndisallow exclusive reuse of the page.  We'll have to PTE-map the THP.\n\nLink: https://lkml.kernel.org/r/20220131162940.210846-6-david@redhat.com\nSigned-off-by: David Hildenbrand <david@redhat.com>\nAcked-by: Vlastimil Babka <vbabka@suse.cz>\nCc: Andrea Arcangeli <aarcange@redhat.com>\nCc: Christoph Hellwig <hch@lst.de>\nCc: David Rientjes <rientjes@google.com>\nCc: Don Dutile <ddutile@redhat.com>\nCc: Hugh Dickins <hughd@google.com>\nCc: Jan Kara <jack@suse.cz>\nCc: Jann Horn <jannh@google.com>\nCc: Jason Gunthorpe <jgg@nvidia.com>\nCc: John Hubbard <jhubbard@nvidia.com>\nCc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>\nCc: Liang Zhang <zhangliang5@huawei.com>\nCc: Matthew Wilcox (Oracle) <willy@infradead.org>\nCc: Michal Hocko <mhocko@kernel.org>\nCc: Mike Kravetz <mike.kravetz@oracle.com>\nCc: Mike Rapoport <rppt@linux.ibm.com>\nCc: Nadav Amit <nadav.amit@gmail.com>\nCc: Oleg Nesterov <oleg@redhat.com>\nCc: Peter Xu <peterx@redhat.com>\nCc: Rik van Riel <riel@surriel.com>\nCc: Roman Gushchin <roman.gushchin@linux.dev>\nCc: Shakeel Butt <shakeelb@google.com>\nCc: Yang Shi <shy828301@gmail.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "author_name": "David Hildenbrand",
  "author_email": "david@redhat.com",
  "author_date": "Thu Mar 24 18:13:43 2022 -0700",
  "author_date_iso": "2022-03-24T18:13:43-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Thu Mar 24 19:06:50 2022 -0700",
  "committer_date_iso": "2022-03-24T19:06:50-07:00",
  "files_changed": [
    "mm/huge_memory.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "mm/huge_memory.c",
      "insertions": 9,
      "deletions": 4
    }
  ],
  "total_insertions": 9,
  "total_deletions": 4,
  "total_changes": 13,
  "parents": [
    "c145e0b47c77ebeefdfd73dbb344577b2fc9b065"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2020-29374"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "mm/huge_memory.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}