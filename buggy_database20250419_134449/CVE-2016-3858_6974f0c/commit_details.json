{
  "hash": "6974f0c4555e285ab217cee58b6e874f776ff409",
  "hash_short": "6974f0c4",
  "subject": "include/linux/string.h: add the option of fortified string.h functions",
  "body": "This adds support for compiling with a rough equivalent to the glibc\n_FORTIFY_SOURCE=1 feature, providing compile-time and runtime buffer\noverflow checks for string.h functions when the compiler determines the\nsize of the source or destination buffer at compile-time.  Unlike glibc,\nit covers buffer reads in addition to writes.\n\nGNU C __builtin_*_chk intrinsics are avoided because they would force a\nmuch more complex implementation.  They aren't designed to detect read\noverflows and offer no real benefit when using an implementation based\non inline checks.  Inline checks don't add up to much code size and\nallow full use of the regular string intrinsics while avoiding the need\nfor a bunch of _chk functions and per-arch assembly to avoid wrapper\noverhead.\n\nThis detects various overflows at compile-time in various drivers and\nsome non-x86 core kernel code.  There will likely be issues caught in\nregular use at runtime too.\n\nFuture improvements left out of initial implementation for simplicity,\nas it's all quite optional and can be done incrementally:\n\n* Some of the fortified string functions (strncpy, strcat), don't yet\n  place a limit on reads from the source based on __builtin_object_size of\n  the source buffer.\n\n* Extending coverage to more string functions like strlcat.\n\n* It should be possible to optionally use __builtin_object_size(x, 1) for\n  some functions (C strings) to detect intra-object overflows (like\n  glibc's _FORTIFY_SOURCE=2), but for now this takes the conservative\n  approach to avoid likely compatibility issues.\n\n* The compile-time checks should be made available via a separate config\n  option which can be enabled by default (or always enabled) once enough\n  time has passed to get the issues it catches fixed.\n\nKees said:\n \"This is great to have. While it was out-of-tree code, it would have\n  blocked at least CVE-2016-3858 from being exploitable (improper size\n  argument to strlcpy()). I've sent a number of fixes for\n  out-of-bounds-reads that this detected upstream already\"\n\n[arnd@arndb.de: x86: fix fortified memcpy]\n  Link: http://lkml.kernel.org/r/20170627150047.660360-1-arnd@arndb.de\n[keescook@chromium.org: avoid panic() in favor of BUG()]\n  Link: http://lkml.kernel.org/r/20170626235122.GA25261@beast\n[keescook@chromium.org: move from -mm, add ARCH_HAS_FORTIFY_SOURCE, tweak Kconfig help]\nLink: http://lkml.kernel.org/r/20170526095404.20439-1-danielmicay@gmail.com\nLink: http://lkml.kernel.org/r/1497903987-21002-8-git-send-email-keescook@chromium.org\nSigned-off-by: Daniel Micay <danielmicay@gmail.com>\nSigned-off-by: Kees Cook <keescook@chromium.org>\nSigned-off-by: Arnd Bergmann <arnd@arndb.de>\nAcked-by: Kees Cook <keescook@chromium.org>\nCc: Mark Rutland <mark.rutland@arm.com>\nCc: Daniel Axtens <dja@axtens.net>\nCc: Rasmus Villemoes <linux@rasmusvillemoes.dk>\nCc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>\nCc: Chris Metcalf <cmetcalf@ezchip.com>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: \"H. Peter Anvin\" <hpa@zytor.com>\nCc: Ingo Molnar <mingo@elte.hu>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "full_message": "include/linux/string.h: add the option of fortified string.h functions\n\nThis adds support for compiling with a rough equivalent to the glibc\n_FORTIFY_SOURCE=1 feature, providing compile-time and runtime buffer\noverflow checks for string.h functions when the compiler determines the\nsize of the source or destination buffer at compile-time.  Unlike glibc,\nit covers buffer reads in addition to writes.\n\nGNU C __builtin_*_chk intrinsics are avoided because they would force a\nmuch more complex implementation.  They aren't designed to detect read\noverflows and offer no real benefit when using an implementation based\non inline checks.  Inline checks don't add up to much code size and\nallow full use of the regular string intrinsics while avoiding the need\nfor a bunch of _chk functions and per-arch assembly to avoid wrapper\noverhead.\n\nThis detects various overflows at compile-time in various drivers and\nsome non-x86 core kernel code.  There will likely be issues caught in\nregular use at runtime too.\n\nFuture improvements left out of initial implementation for simplicity,\nas it's all quite optional and can be done incrementally:\n\n* Some of the fortified string functions (strncpy, strcat), don't yet\n  place a limit on reads from the source based on __builtin_object_size of\n  the source buffer.\n\n* Extending coverage to more string functions like strlcat.\n\n* It should be possible to optionally use __builtin_object_size(x, 1) for\n  some functions (C strings) to detect intra-object overflows (like\n  glibc's _FORTIFY_SOURCE=2), but for now this takes the conservative\n  approach to avoid likely compatibility issues.\n\n* The compile-time checks should be made available via a separate config\n  option which can be enabled by default (or always enabled) once enough\n  time has passed to get the issues it catches fixed.\n\nKees said:\n \"This is great to have. While it was out-of-tree code, it would have\n  blocked at least CVE-2016-3858 from being exploitable (improper size\n  argument to strlcpy()). I've sent a number of fixes for\n  out-of-bounds-reads that this detected upstream already\"\n\n[arnd@arndb.de: x86: fix fortified memcpy]\n  Link: http://lkml.kernel.org/r/20170627150047.660360-1-arnd@arndb.de\n[keescook@chromium.org: avoid panic() in favor of BUG()]\n  Link: http://lkml.kernel.org/r/20170626235122.GA25261@beast\n[keescook@chromium.org: move from -mm, add ARCH_HAS_FORTIFY_SOURCE, tweak Kconfig help]\nLink: http://lkml.kernel.org/r/20170526095404.20439-1-danielmicay@gmail.com\nLink: http://lkml.kernel.org/r/1497903987-21002-8-git-send-email-keescook@chromium.org\nSigned-off-by: Daniel Micay <danielmicay@gmail.com>\nSigned-off-by: Kees Cook <keescook@chromium.org>\nSigned-off-by: Arnd Bergmann <arnd@arndb.de>\nAcked-by: Kees Cook <keescook@chromium.org>\nCc: Mark Rutland <mark.rutland@arm.com>\nCc: Daniel Axtens <dja@axtens.net>\nCc: Rasmus Villemoes <linux@rasmusvillemoes.dk>\nCc: Andy Shevchenko <andriy.shevchenko@linux.intel.com>\nCc: Chris Metcalf <cmetcalf@ezchip.com>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: \"H. Peter Anvin\" <hpa@zytor.com>\nCc: Ingo Molnar <mingo@elte.hu>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "author_name": "Daniel Micay",
  "author_email": "danielmicay@gmail.com",
  "author_date": "Wed Jul 12 14:36:10 2017 -0700",
  "author_date_iso": "2017-07-12T14:36:10-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Wed Jul 12 16:26:03 2017 -0700",
  "committer_date_iso": "2017-07-12T16:26:03-07:00",
  "files_changed": [
    "arch/Kconfig",
    "arch/arm64/Kconfig",
    "arch/arm64/include/asm/string.h",
    "arch/powerpc/Kconfig",
    "arch/x86/Kconfig",
    "arch/x86/boot/compressed/misc.c",
    "arch/x86/include/asm/string_32.h",
    "arch/x86/include/asm/string_64.h",
    "arch/x86/lib/memcpy_32.c",
    "include/linux/string.h",
    "lib/string.c",
    "security/Kconfig"
  ],
  "files_changed_count": 12,
  "stats": [
    {
      "file": "arch/Kconfig",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "arch/arm64/Kconfig",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/string.h",
      "insertions": 5,
      "deletions": 0
    },
    {
      "file": "arch/powerpc/Kconfig",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/Kconfig",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/boot/compressed/misc.c",
      "insertions": 5,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/string_32.h",
      "insertions": 9,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/string_64.h",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "arch/x86/lib/memcpy_32.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "include/linux/string.h",
      "insertions": 200,
      "deletions": 0
    },
    {
      "file": "lib/string.c",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "security/Kconfig",
      "insertions": 7,
      "deletions": 0
    }
  ],
  "total_insertions": 250,
  "total_deletions": 1,
  "total_changes": 251,
  "parents": [
    "c69a48cdb301a18697bc8c9935baf4f32861cf9e"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.13",
    "v4.13-rc1",
    "v4.13-rc2",
    "v4.13-rc3",
    "v4.13-rc4",
    "v4.13-rc5",
    "v4.13-rc6",
    "v4.13-rc7",
    "v4.14",
    "v4.14-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2016-3858"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "arch/powerpc/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/boot/compressed/misc.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/string_32.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/string_64.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/asm/string.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/lib/memcpy_32.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/string.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "lib/string.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "security/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}