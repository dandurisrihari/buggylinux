{
  "hash": "5628b8de1228436d47491c662dc521bc138a3d43",
  "hash_short": "5628b8de",
  "subject": "Merge tag 'random-5.18-rc1-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/crng/random",
  "body": "Pull random number generator updates from Jason Donenfeld:\n \"There have been a few important changes to the RNG's crypto, but the\n  intent for 5.18 has been to shore up the existing design as much as\n  possible with modern cryptographic functions and proven constructions,\n  rather than actually changing up anything fundamental to the RNG's\n  design.\n\n  So it's still the same old RNG at its core as before: it still counts\n  entropy bits, and collects from the various sources with the same\n  heuristics as before, and so forth. However, the cryptographic\n  algorithms that transform that entropic data into safe random numbers\n  have been modernized.\n\n  Just as important, if not more, is that the code has been cleaned up\n  and re-documented. As one of the first drivers in Linux, going back to\n  1.3.30, its general style and organization was showing its age and\n  becoming both a maintenance burden and an auditability impediment.\n\n  Hopefully this provides a more solid foundation to build on for the\n  future. I encourage you to open up the file in full, and maybe you'll\n  remark, \"oh, that's what it's doing,\" and enjoy reading it. That, at\n  least, is the eventual goal, which this pull begins working toward.\n\n  Here's a summary of the various patches in this pull:\n\n   - /dev/urandom and /dev/random now do the same thing, per the patch\n     we discussed on the list. I think this is worth trying out. If it\n     does appear problematic, I've made sure to keep it standalone and\n     revertible without any conflicts.\n\n   - Fixes and cleanups for numerous integer type problems, locking\n     issues, and general code quality concerns.\n\n   - The input pool's LFSR has been replaced with a cryptographically\n     secure hash function, which has security and performance benefits\n     alike, and consequently allows us to count entropy bits linearly.\n\n   - The pre-init injection now uses a real hash function too, instead\n     of an LFSR or vanilla xor.\n\n   - The interrupt handler's fast_mix() function now uses one round of\n     SipHash, rather than the fake crypto that was there before.\n\n   - All additions of RDRAND and RDSEED now go through the input pool's\n     hash function, in part to mitigate ridiculous hypothetical CPU\n     backdoors, but more so to have a consistent interface for ingesting\n     entropy that's easy to analyze, making everything happen one way,\n     instead of a potpourri of different ways.\n\n   - The crng now works on per-cpu data, while also being in accordance\n     with the actual \"fast key erasure RNG\" design. This allows us to\n     fix several boot-time race complications associated with the prior\n     dynamically allocated model, eliminates much locking, and makes our\n     backtrack protection more robust.\n\n   - Batched entropy now erases doled out values so that it's backtrack\n     resistant.\n\n   - Working closely with Sebastian, the interrupt handler no longer\n     needs to take any locks at all, as we punt the\n     synchronized/expensive operations to a workqueue. This is\n     especially nice for PREEMPT_RT, where taking spinlocks in irq\n     context is problematic. It also makes the handler faster for the\n     rest of us.\n\n   - Also working with Sebastian, we now do the right thing on CPU\n     hotplug, so that we don't use stale entropy or fail to accumulate\n     new entropy when CPUs come back online.\n\n   - We handle virtual machines that fork / clone / snapshot, using the\n     \"vmgenid\" ACPI specification for retrieving a unique new RNG seed,\n     which we can use to also make WireGuard (and in the future, other\n     things) safe across VM forks.\n\n   - Around boot time, we now try to reseed more often if enough entropy\n     is available, before settling on the usual 5 minute schedule.\n\n   - Last, but certainly not least, the documentation in the file has\n     been updated considerably\"\n\n* tag 'random-5.18-rc1-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/crng/random: (60 commits)\n  random: check for signal and try earlier when generating entropy\n  random: reseed more often immediately after booting\n  random: make consistent usage of crng_ready()\n  random: use SipHash as interrupt entropy accumulator\n  wireguard: device: clear keys on VM fork\n  random: provide notifier for VM fork\n  random: replace custom notifier chain with standard one\n  random: do not export add_vmfork_randomness() unless needed\n  virt: vmgenid: notify RNG of VM fork and supply generation ID\n  ACPI: allow longer device IDs\n  random: add mechanism for VM forks to reinitialize crng\n  random: don't let 644 read-only sysctls be written to\n  random: give sysctl_random_min_urandom_seed a more sensible value\n  random: block in /dev/urandom\n  random: do crng pre-init loading in worker rather than irq\n  random: unify cycles_t and jiffies usage and types\n  random: cleanup UUID handling\n  random: only wake up writers after zap if threshold was passed\n  random: round-robin registers as ulong, not u32\n  random: clear fast pool, crng, and batches in cpuhp bring up\n  ...",
  "full_message": "Merge tag 'random-5.18-rc1-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/crng/random\n\nPull random number generator updates from Jason Donenfeld:\n \"There have been a few important changes to the RNG's crypto, but the\n  intent for 5.18 has been to shore up the existing design as much as\n  possible with modern cryptographic functions and proven constructions,\n  rather than actually changing up anything fundamental to the RNG's\n  design.\n\n  So it's still the same old RNG at its core as before: it still counts\n  entropy bits, and collects from the various sources with the same\n  heuristics as before, and so forth. However, the cryptographic\n  algorithms that transform that entropic data into safe random numbers\n  have been modernized.\n\n  Just as important, if not more, is that the code has been cleaned up\n  and re-documented. As one of the first drivers in Linux, going back to\n  1.3.30, its general style and organization was showing its age and\n  becoming both a maintenance burden and an auditability impediment.\n\n  Hopefully this provides a more solid foundation to build on for the\n  future. I encourage you to open up the file in full, and maybe you'll\n  remark, \"oh, that's what it's doing,\" and enjoy reading it. That, at\n  least, is the eventual goal, which this pull begins working toward.\n\n  Here's a summary of the various patches in this pull:\n\n   - /dev/urandom and /dev/random now do the same thing, per the patch\n     we discussed on the list. I think this is worth trying out. If it\n     does appear problematic, I've made sure to keep it standalone and\n     revertible without any conflicts.\n\n   - Fixes and cleanups for numerous integer type problems, locking\n     issues, and general code quality concerns.\n\n   - The input pool's LFSR has been replaced with a cryptographically\n     secure hash function, which has security and performance benefits\n     alike, and consequently allows us to count entropy bits linearly.\n\n   - The pre-init injection now uses a real hash function too, instead\n     of an LFSR or vanilla xor.\n\n   - The interrupt handler's fast_mix() function now uses one round of\n     SipHash, rather than the fake crypto that was there before.\n\n   - All additions of RDRAND and RDSEED now go through the input pool's\n     hash function, in part to mitigate ridiculous hypothetical CPU\n     backdoors, but more so to have a consistent interface for ingesting\n     entropy that's easy to analyze, making everything happen one way,\n     instead of a potpourri of different ways.\n\n   - The crng now works on per-cpu data, while also being in accordance\n     with the actual \"fast key erasure RNG\" design. This allows us to\n     fix several boot-time race complications associated with the prior\n     dynamically allocated model, eliminates much locking, and makes our\n     backtrack protection more robust.\n\n   - Batched entropy now erases doled out values so that it's backtrack\n     resistant.\n\n   - Working closely with Sebastian, the interrupt handler no longer\n     needs to take any locks at all, as we punt the\n     synchronized/expensive operations to a workqueue. This is\n     especially nice for PREEMPT_RT, where taking spinlocks in irq\n     context is problematic. It also makes the handler faster for the\n     rest of us.\n\n   - Also working with Sebastian, we now do the right thing on CPU\n     hotplug, so that we don't use stale entropy or fail to accumulate\n     new entropy when CPUs come back online.\n\n   - We handle virtual machines that fork / clone / snapshot, using the\n     \"vmgenid\" ACPI specification for retrieving a unique new RNG seed,\n     which we can use to also make WireGuard (and in the future, other\n     things) safe across VM forks.\n\n   - Around boot time, we now try to reseed more often if enough entropy\n     is available, before settling on the usual 5 minute schedule.\n\n   - Last, but certainly not least, the documentation in the file has\n     been updated considerably\"\n\n* tag 'random-5.18-rc1-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/crng/random: (60 commits)\n  random: check for signal and try earlier when generating entropy\n  random: reseed more often immediately after booting\n  random: make consistent usage of crng_ready()\n  random: use SipHash as interrupt entropy accumulator\n  wireguard: device: clear keys on VM fork\n  random: provide notifier for VM fork\n  random: replace custom notifier chain with standard one\n  random: do not export add_vmfork_randomness() unless needed\n  virt: vmgenid: notify RNG of VM fork and supply generation ID\n  ACPI: allow longer device IDs\n  random: add mechanism for VM forks to reinitialize crng\n  random: don't let 644 read-only sysctls be written to\n  random: give sysctl_random_min_urandom_seed a more sensible value\n  random: block in /dev/urandom\n  random: do crng pre-init loading in worker rather than irq\n  random: unify cycles_t and jiffies usage and types\n  random: cleanup UUID handling\n  random: only wake up writers after zap if threshold was passed\n  random: round-robin registers as ulong, not u32\n  random: clear fast pool, crng, and batches in cpuhp bring up\n  ...",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Mon Mar 21 14:55:32 2022 -0700",
  "author_date_iso": "2022-03-21T14:55:32-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Mon Mar 21 14:55:32 2022 -0700",
  "committer_date_iso": "2022-03-21T14:55:32-07:00",
  "files_changed": [
    "MAINTAINERS",
    "include/linux/cpuhotplug.h"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "Documentation/admin-guide/sysctl/kernel.rst",
      "insertions": 5,
      "deletions": 11
    },
    {
      "file": "MAINTAINERS",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "drivers/char/hw_random/core.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "drivers/char/mem.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "drivers/char/random.c",
      "insertions": 1220,
      "deletions": 1719
    },
    {
      "file": "drivers/net/wireguard/device.c",
      "insertions": 27,
      "deletions": 11
    },
    {
      "file": "drivers/virt/Kconfig",
      "insertions": 11,
      "deletions": 0
    },
    {
      "file": "drivers/virt/Makefile",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "drivers/virt/vmgenid.c",
      "insertions": 100,
      "deletions": 0
    },
    {
      "file": "include/linux/cpuhotplug.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "include/linux/hw_random.h",
      "insertions": 0,
      "deletions": 2
    },
    {
      "file": "include/linux/mod_devicetable.h",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "include/linux/random.h",
      "insertions": 25,
      "deletions": 18
    },
    {
      "file": "include/trace/events/random.h",
      "insertions": 0,
      "deletions": 233
    },
    {
      "file": "kernel/cpu.c",
      "insertions": 11,
      "deletions": 0
    },
    {
      "file": "lib/random32.c",
      "insertions": 7,
      "deletions": 7
    },
    {
      "file": "lib/vsprintf.c",
      "insertions": 6,
      "deletions": 4
    }
  ],
  "total_insertions": 1419,
  "total_deletions": 2007,
  "total_changes": 3426,
  "parents": [
    "f400bea2d44beec76f7e7f45e5372ef790336a4d",
    "3e504d2026eb6c8762cd6040ae57db166516824a"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "MAINTAINERS",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/cpuhotplug.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}