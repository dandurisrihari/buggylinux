{
  "hash": "a34b024448eb71b0e51ad011fa1862236e366034",
  "hash_short": "a34b0244",
  "subject": "block, bfq: consider also past I/O in soft real-time detection",
  "body": "BFQ privileges the I/O of soft real-time applications, such as video\nplayers, to guarantee to these application a high bandwidth and a low\nlatency. In this respect, it is not easy to correctly detect when an\napplication is soft real-time. A particularly nasty false positive is\nthat of an I/O-bound application that occasionally happens to meet all\nrequirements to be deemed as soft real-time. After being detected as\nsoft real-time, such an application monopolizes the device. Fortunately,\nBFQ will realize soon that the application is actually not soft\nreal-time and suspend every privilege. Yet, the application may happen\nagain to be wrongly detected as soft real-time, and so on.\n\nAs highlighted by our tests, this problem causes BFQ to occasionally\nfail to guarantee a high responsiveness, in the presence of heavy\nbackground I/O workloads. The reason is that the background workload\nhappens to be detected as soft real-time, more or less frequently,\nduring the execution of the interactive task under test. To give an\nidea, because of this problem, Libreoffice Writer occasionally takes 8\nseconds, instead of 3, to start up, if there are sequential reads and\nwrites in the background, on a Kingston SSDNow V300.\n\nThis commit addresses this issue by leveraging the following facts.\n\nThe reason why some applications are detected as soft real-time despite\nall BFQ checks to avoid false positives, is simply that, during high\nCPU or storage-device load, I/O-bound applications may happen to do\nI/O slowly enough to meet all soft real-time requirements, and pass\nall BFQ extra checks. Yet, this happens only for limited time periods:\nslow-speed time intervals are usually interspersed between other time\nintervals during which these applications do I/O at a very high speed.\nTo exploit these facts, this commit introduces a little change, in the\ndetection of soft real-time behavior, to systematically consider also\nthe recent past: the higher the speed was in the recent past, the\nlater next I/O should arrive for the application to be considered as\nsoft real-time. At the beginning of a slow-speed interval, the minimum\narrival time allowed for the next I/O usually happens to still be so\nhigh, to fall *after* the end of the slow-speed period itself. As a\nconsequence, the application does not risk to be deemed as soft\nreal-time during the slow-speed interval. Then, during the next\nhigh-speed interval, the application cannot, evidently, be deemed as\nsoft real-time (exactly because of its speed), and so on.\n\nThis extra filtering proved to be rather effective: in the above test,\nthe frequency of false positives became so low that the start-up time\nwas 3 seconds in all iterations (apart from occasional outliers,\ncaused by page-cache-management issues, which are out of the scope of\nthis commit, and cannot be solved by an I/O scheduler).\n\nTested-by: Lee Tibbert <lee.tibbert@gmail.com>\nSigned-off-by: Paolo Valente <paolo.valente@linaro.org>\nSigned-off-by: Angelo Ruocco <angeloruocco90@gmail.com>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
  "full_message": "block, bfq: consider also past I/O in soft real-time detection\n\nBFQ privileges the I/O of soft real-time applications, such as video\nplayers, to guarantee to these application a high bandwidth and a low\nlatency. In this respect, it is not easy to correctly detect when an\napplication is soft real-time. A particularly nasty false positive is\nthat of an I/O-bound application that occasionally happens to meet all\nrequirements to be deemed as soft real-time. After being detected as\nsoft real-time, such an application monopolizes the device. Fortunately,\nBFQ will realize soon that the application is actually not soft\nreal-time and suspend every privilege. Yet, the application may happen\nagain to be wrongly detected as soft real-time, and so on.\n\nAs highlighted by our tests, this problem causes BFQ to occasionally\nfail to guarantee a high responsiveness, in the presence of heavy\nbackground I/O workloads. The reason is that the background workload\nhappens to be detected as soft real-time, more or less frequently,\nduring the execution of the interactive task under test. To give an\nidea, because of this problem, Libreoffice Writer occasionally takes 8\nseconds, instead of 3, to start up, if there are sequential reads and\nwrites in the background, on a Kingston SSDNow V300.\n\nThis commit addresses this issue by leveraging the following facts.\n\nThe reason why some applications are detected as soft real-time despite\nall BFQ checks to avoid false positives, is simply that, during high\nCPU or storage-device load, I/O-bound applications may happen to do\nI/O slowly enough to meet all soft real-time requirements, and pass\nall BFQ extra checks. Yet, this happens only for limited time periods:\nslow-speed time intervals are usually interspersed between other time\nintervals during which these applications do I/O at a very high speed.\nTo exploit these facts, this commit introduces a little change, in the\ndetection of soft real-time behavior, to systematically consider also\nthe recent past: the higher the speed was in the recent past, the\nlater next I/O should arrive for the application to be considered as\nsoft real-time. At the beginning of a slow-speed interval, the minimum\narrival time allowed for the next I/O usually happens to still be so\nhigh, to fall *after* the end of the slow-speed period itself. As a\nconsequence, the application does not risk to be deemed as soft\nreal-time during the slow-speed interval. Then, during the next\nhigh-speed interval, the application cannot, evidently, be deemed as\nsoft real-time (exactly because of its speed), and so on.\n\nThis extra filtering proved to be rather effective: in the above test,\nthe frequency of false positives became so low that the start-up time\nwas 3 seconds in all iterations (apart from occasional outliers,\ncaused by page-cache-management issues, which are out of the scope of\nthis commit, and cannot be solved by an I/O scheduler).\n\nTested-by: Lee Tibbert <lee.tibbert@gmail.com>\nSigned-off-by: Paolo Valente <paolo.valente@linaro.org>\nSigned-off-by: Angelo Ruocco <angeloruocco90@gmail.com>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
  "author_name": "Paolo Valente",
  "author_email": "paolo.valente@linaro.org",
  "author_date": "Fri Dec 15 07:23:12 2017 +0100",
  "author_date_iso": "2017-12-15T07:23:12+01:00",
  "committer_name": "Jens Axboe",
  "committer_email": "axboe@kernel.dk",
  "committer_date": "Fri Jan 5 09:31:19 2018 -0700",
  "committer_date_iso": "2018-01-05T09:31:19-07:00",
  "files_changed": [
    "block/bfq-iosched.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "block/bfq-iosched.c",
      "insertions": 81,
      "deletions": 34
    }
  ],
  "total_insertions": 81,
  "total_deletions": 34,
  "total_changes": 115,
  "parents": [
    "4403e4e467c365b4189e3e3d3ad35cf67b8c36ed"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.16",
    "v4.16-rc1",
    "v4.16-rc2",
    "v4.16-rc3",
    "v4.16-rc4",
    "v4.16-rc5",
    "v4.16-rc6",
    "v4.16-rc7",
    "v4.17",
    "v4.17-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "block/bfq-iosched.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}