{
  "hash": "e3e4d5019c2dd0f91600f6df377b215a73d506fe",
  "hash_short": "e3e4d501",
  "subject": "x86/kprobes: Stop calling fixup_exception() from kprobe_fault_handler()",
  "body": "This removes the call into exception fixup that was added in commit\nc28f896634f2 (\"[PATCH] kprobes: fix broken fault handling for x86_64\").\n\nOn X86, kprobe_fault_handler() is called from two places:\ndo_general_protection() (for #GP) and kprobes_fault() (for #PF).  In both\npaths, the fixup_exception() call in the kprobe fault handler is redundant.\n\nIn case of #GP, fixup_exception() is called immediately before\nkprobe_fault_handler() is invoked, so no need to try that again. This\nassumes that the kprobe's fault handler isn't going to do something crazy\nlike changing RIP so that it suddenly points to an instruction that does\nuserspace access.\n\nFor #PF on a kernel address from kernel space, after the kprobe fault\nhandler has run, no_context() is invoked, which calls fixup_exception().\n\nSigned-off-by: Jann Horn <jannh@google.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nTested-by: Kees Cook <keescook@chromium.org>\nAcked-by: Masami Hiramatsu <mhiramat@kernel.org>\nCc: Andy Lutomirski <luto@kernel.org>\nCc: kernel-hardening@lists.openwall.com\nCc: linux-kernel@vger.kernel.org\nCc: dvyukov@google.com\nCc: \"Naveen N. Rao\" <naveen.n.rao@linux.vnet.ibm.com>\nCc: Anil S Keshavamurthy <anil.s.keshavamurthy@intel.com>\nCc: \"David S. Miller\" <davem@davemloft.net>\nCc: Alexander Viro <viro@zeniv.linux.org.uk>\nCc: linux-fsdevel@vger.kernel.org\nCc: Borislav Petkov <bp@alien8.de>\nLink: https://lkml.kernel.org/r/20180828201421.157735-4-jannh@google.com",
  "full_message": "x86/kprobes: Stop calling fixup_exception() from kprobe_fault_handler()\n\nThis removes the call into exception fixup that was added in commit\nc28f896634f2 (\"[PATCH] kprobes: fix broken fault handling for x86_64\").\n\nOn X86, kprobe_fault_handler() is called from two places:\ndo_general_protection() (for #GP) and kprobes_fault() (for #PF).  In both\npaths, the fixup_exception() call in the kprobe fault handler is redundant.\n\nIn case of #GP, fixup_exception() is called immediately before\nkprobe_fault_handler() is invoked, so no need to try that again. This\nassumes that the kprobe's fault handler isn't going to do something crazy\nlike changing RIP so that it suddenly points to an instruction that does\nuserspace access.\n\nFor #PF on a kernel address from kernel space, after the kprobe fault\nhandler has run, no_context() is invoked, which calls fixup_exception().\n\nSigned-off-by: Jann Horn <jannh@google.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nTested-by: Kees Cook <keescook@chromium.org>\nAcked-by: Masami Hiramatsu <mhiramat@kernel.org>\nCc: Andy Lutomirski <luto@kernel.org>\nCc: kernel-hardening@lists.openwall.com\nCc: linux-kernel@vger.kernel.org\nCc: dvyukov@google.com\nCc: \"Naveen N. Rao\" <naveen.n.rao@linux.vnet.ibm.com>\nCc: Anil S Keshavamurthy <anil.s.keshavamurthy@intel.com>\nCc: \"David S. Miller\" <davem@davemloft.net>\nCc: Alexander Viro <viro@zeniv.linux.org.uk>\nCc: linux-fsdevel@vger.kernel.org\nCc: Borislav Petkov <bp@alien8.de>\nLink: https://lkml.kernel.org/r/20180828201421.157735-4-jannh@google.com",
  "author_name": "Jann Horn",
  "author_email": "jannh@google.com",
  "author_date": "Tue Aug 28 22:14:17 2018 +0200",
  "author_date_iso": "2018-08-28T22:14:17+02:00",
  "committer_name": "Thomas Gleixner",
  "committer_email": "tglx@linutronix.de",
  "committer_date": "Mon Sep 3 15:12:08 2018 +0200",
  "committer_date_iso": "2018-09-03T15:12:08+02:00",
  "files_changed": [
    "arch/x86/kernel/kprobes/core.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/x86/kernel/kprobes/core.c",
      "insertions": 0,
      "deletions": 9
    }
  ],
  "total_insertions": 0,
  "total_deletions": 9,
  "total_changes": 9,
  "parents": [
    "76dee4a72849561f6ffacc357cfd0aa33336081a"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.20",
    "v4.20-rc1",
    "v4.20-rc2",
    "v4.20-rc3",
    "v4.20-rc4",
    "v4.20-rc5",
    "v4.20-rc6",
    "v4.20-rc7",
    "v5.0",
    "v5.0-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/kernel/kprobes/core.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}