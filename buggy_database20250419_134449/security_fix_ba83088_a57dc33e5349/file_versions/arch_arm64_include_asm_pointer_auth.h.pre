commit ccc43810827f9feb5e588e4b7098dc55b1d972f8
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Fri Dec 7 18:39:27 2018 +0000

    arm64: perf: strip PAC when unwinding userspace
    
    When the kernel is unwinding userspace callchains, we can't expect that
    the userspace consumer of these callchains has the data necessary to
    strip the PAC from the stored LR.
    
    This patch has the kernel strip the PAC from user stackframes when the
    in-kernel unwinder is used. This only affects the LR value, and not the
    FP.
    
    This only affects the in-kernel unwinder. When userspace performs
    unwinding, it is up to userspace to strip PACs as necessary (which can
    be determined from DWARF information).
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Kristina Martsenko <kristina.martsenko@arm.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Ramana Radhakrishnan <ramana.radhakrishnan@arm.com>
    Cc: Will Deacon <will.deacon@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

diff --git a/arch/arm64/include/asm/pointer_auth.h b/arch/arm64/include/asm/pointer_auth.h
index 2a22c03c1540..5ccf49b4dac3 100644
--- a/arch/arm64/include/asm/pointer_auth.h
+++ b/arch/arm64/include/asm/pointer_auth.h
@@ -69,6 +69,12 @@ static inline void ptrauth_keys_switch(struct ptrauth_keys *keys)
  */
 #define ptrauth_user_pac_mask()	GENMASK(54, vabits_user)
 
+/* Only valid for EL0 TTBR0 instruction pointers */
+static inline unsigned long ptrauth_strip_insn_pac(unsigned long ptr)
+{
+	return ptr & ~ptrauth_user_pac_mask();
+}
+
 #define ptrauth_thread_init_user(tsk)					\
 do {									\
 	struct task_struct *__ptiu_tsk = (tsk);				\
@@ -80,6 +86,7 @@ do {									\
 	ptrauth_keys_switch(&(tsk)->thread_info.keys_user)
 
 #else /* CONFIG_ARM64_PTR_AUTH */
+#define ptrauth_strip_insn_pac(lr)	(lr)
 #define ptrauth_thread_init_user(tsk)
 #define ptrauth_thread_switch(tsk)
 #endif /* CONFIG_ARM64_PTR_AUTH */