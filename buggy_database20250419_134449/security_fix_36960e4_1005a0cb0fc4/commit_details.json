{
  "hash": "36960e440ccf94349c09fb944930d3bfe4bc473f",
  "hash_short": "36960e44",
  "subject": "cifs: fix potential buffer overrun in cifs.idmap handling code",
  "body": "The userspace cifs.idmap program generally works with the wbclient libs\nto generate binary SIDs in userspace. That program defines the struct\nthat holds these values as having a max of 15 subauthorities. The kernel\nidmapping code however limits that value to 5.\n\nWhen the kernel copies those values around though, it doesn't sanity\ncheck the num_subauths value handed back from userspace or from the\nserver. It's possible therefore for userspace to hand us back a bogus\nnum_subauths value (or one that's valid, but greater than 5) that could\ncause the kernel to walk off the end of the cifs_sid->sub_auths array.\n\nFix this by defining a new routine for copying sids and using that in\nall of the places that copy it. If we end up with a sid that's longer\nthan expected then this approach will just lop off the \"extra\" subauths,\nbut that's basically what the code does today already. Better approaches\nmight be to fix this code to reject SIDs with >5 subauths, or fix it\nto handle the subauths array dynamically.\n\nAt the same time, change the kernel to check the length of the data\nreturned by userspace. If it's shorter than struct cifs_sid, reject it\nand return -EIO. If that happens we'll end up with fields that are\nbasically uninitialized.\n\nLong term, it might make sense to redefine cifs_sid using a flexarray at\nthe end, to allow for variable-length subauth lists, and teach the code\nto handle the case where the subauths array being passed in from\nuserspace is shorter than 5 elements.\n\nNote too, that I don't consider this a security issue since you'd need\na compromised cifs.idmap program. If you have that, you can do all sorts\nof nefarious stuff. Still, this is probably reasonable for stable.\n\nCc: stable@kernel.org\nReviewed-by: Shirish Pargaonkar <shirishpargaonkar@gmail.com>\nSigned-off-by: Jeff Layton <jlayton@redhat.com>",
  "full_message": "cifs: fix potential buffer overrun in cifs.idmap handling code\n\nThe userspace cifs.idmap program generally works with the wbclient libs\nto generate binary SIDs in userspace. That program defines the struct\nthat holds these values as having a max of 15 subauthorities. The kernel\nidmapping code however limits that value to 5.\n\nWhen the kernel copies those values around though, it doesn't sanity\ncheck the num_subauths value handed back from userspace or from the\nserver. It's possible therefore for userspace to hand us back a bogus\nnum_subauths value (or one that's valid, but greater than 5) that could\ncause the kernel to walk off the end of the cifs_sid->sub_auths array.\n\nFix this by defining a new routine for copying sids and using that in\nall of the places that copy it. If we end up with a sid that's longer\nthan expected then this approach will just lop off the \"extra\" subauths,\nbut that's basically what the code does today already. Better approaches\nmight be to fix this code to reject SIDs with >5 subauths, or fix it\nto handle the subauths array dynamically.\n\nAt the same time, change the kernel to check the length of the data\nreturned by userspace. If it's shorter than struct cifs_sid, reject it\nand return -EIO. If that happens we'll end up with fields that are\nbasically uninitialized.\n\nLong term, it might make sense to redefine cifs_sid using a flexarray at\nthe end, to allow for variable-length subauth lists, and teach the code\nto handle the case where the subauths array being passed in from\nuserspace is shorter than 5 elements.\n\nNote too, that I don't consider this a security issue since you'd need\na compromised cifs.idmap program. If you have that, you can do all sorts\nof nefarious stuff. Still, this is probably reasonable for stable.\n\nCc: stable@kernel.org\nReviewed-by: Shirish Pargaonkar <shirishpargaonkar@gmail.com>\nSigned-off-by: Jeff Layton <jlayton@redhat.com>",
  "author_name": "Jeff Layton",
  "author_email": "jlayton@redhat.com",
  "author_date": "Sat Nov 3 09:37:28 2012 -0400",
  "author_date_iso": "2012-11-03T09:37:28-04:00",
  "committer_name": "Jeff Layton",
  "committer_email": "jlayton@redhat.com",
  "committer_date": "Sat Nov 3 09:37:28 2012 -0400",
  "committer_date_iso": "2012-11-03T09:37:28-04:00",
  "files_changed": [
    "fs/cifs/cifsacl.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "fs/cifs/cifsacl.c",
      "insertions": 20,
      "deletions": 29
    }
  ],
  "total_insertions": 20,
  "total_deletions": 29,
  "total_changes": 49,
  "parents": [
    "0f89a5733a8d28174c7adeb1fdc20ac11439e766"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v3.10",
    "v3.10-rc1",
    "v3.10-rc2",
    "v3.10-rc3",
    "v3.10-rc4",
    "v3.10-rc5",
    "v3.10-rc6",
    "v3.10-rc7",
    "v3.11",
    "v3.11-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "security issue"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/cifs/cifsacl.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}