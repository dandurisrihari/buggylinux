{
  "hash": "acbc661032b8aa0e8359ac77074769ade34a176c",
  "hash_short": "acbc6610",
  "subject": "powercap: idle_inject: Add update callback",
  "body": "The powercap/idle_inject core uses play_idle_precise() to inject idle\ntime. But play_idle_precise() can't ensure that the CPU is fully idle\nfor the specified duration because of wakeups due to interrupts. To\ncompensate for the reduced idle time due to these wakes, the caller\ncan adjust requested idle time for the next cycle.\n\nThe goal of idle injection is to keep system at some idle percent on\naverage, so this is fine to overshoot or undershoot instantaneous idle\ntimes.\n\nThe idle inject core provides an interface idle_inject_set_duration()\nto set idle and runtime duration.\n\nSome architectures provide interface to get actual idle time observed\nby the hardware. So, the effective idle percent can be adjusted using\nthe hardware feedback. For example, Intel CPUs provides package idle\ncounters, which is currently used by Intel powerclamp driver to\nreadjust runtime duration.\n\nWhen the caller's desired idle time over a period is less or greater\nthan the actual CPU idle time observed by the hardware, caller can\nreadjust idle and runtime duration for the next cycle.\n\nThe only way this can be done currently is by monitoring hardware idle\ntime from a different software thread and readjust idle and runtime\nduration using idle_inject_set_duration().\n\nThis can be avoided by adding a callback which callers can register and\nreadjust from this callback function.\n\nAdd a capability to register an optional update() callback, which can be\ncalled from the idle inject core before waking up CPUs for idle injection.\nThis callback can be registered via a new interface:\nidle_inject_register_full().\n\nDuring this process of constantly adjusting idle and runtime duration\nthere can be some cases where actual idle time is more than the desired.\nIn this case idle inject can be skipped for a cycle. If update() callback\nreturns false, then the idle inject core skips waking up CPUs for the\nidle injection.\n\nSigned-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>\nSigned-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>",
  "full_message": "powercap: idle_inject: Add update callback\n\nThe powercap/idle_inject core uses play_idle_precise() to inject idle\ntime. But play_idle_precise() can't ensure that the CPU is fully idle\nfor the specified duration because of wakeups due to interrupts. To\ncompensate for the reduced idle time due to these wakes, the caller\ncan adjust requested idle time for the next cycle.\n\nThe goal of idle injection is to keep system at some idle percent on\naverage, so this is fine to overshoot or undershoot instantaneous idle\ntimes.\n\nThe idle inject core provides an interface idle_inject_set_duration()\nto set idle and runtime duration.\n\nSome architectures provide interface to get actual idle time observed\nby the hardware. So, the effective idle percent can be adjusted using\nthe hardware feedback. For example, Intel CPUs provides package idle\ncounters, which is currently used by Intel powerclamp driver to\nreadjust runtime duration.\n\nWhen the caller's desired idle time over a period is less or greater\nthan the actual CPU idle time observed by the hardware, caller can\nreadjust idle and runtime duration for the next cycle.\n\nThe only way this can be done currently is by monitoring hardware idle\ntime from a different software thread and readjust idle and runtime\nduration using idle_inject_set_duration().\n\nThis can be avoided by adding a callback which callers can register and\nreadjust from this callback function.\n\nAdd a capability to register an optional update() callback, which can be\ncalled from the idle inject core before waking up CPUs for idle injection.\nThis callback can be registered via a new interface:\nidle_inject_register_full().\n\nDuring this process of constantly adjusting idle and runtime duration\nthere can be some cases where actual idle time is more than the desired.\nIn this case idle inject can be skipped for a cycle. If update() callback\nreturns false, then the idle inject core skips waking up CPUs for the\nidle injection.\n\nSigned-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>\nSigned-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>",
  "author_name": "Srinivas Pandruvada",
  "author_email": "srinivas.pandruvada@linux.intel.com",
  "author_date": "Wed Feb 1 10:28:52 2023 -0800",
  "author_date_iso": "2023-02-01T10:28:52-08:00",
  "committer_name": "Rafael J. Wysocki",
  "committer_email": "rafael.j.wysocki@intel.com",
  "committer_date": "Thu Feb 2 21:08:32 2023 +0100",
  "committer_date_iso": "2023-02-02T21:08:32+01:00",
  "files_changed": [
    "drivers/powercap/idle_inject.c",
    "include/linux/idle_inject.h"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "drivers/powercap/idle_inject.c",
      "insertions": 46,
      "deletions": 6
    },
    {
      "file": "include/linux/idle_inject.h",
      "insertions": 3,
      "deletions": 0
    }
  ],
  "total_insertions": 49,
  "total_deletions": 6,
  "total_changes": 55,
  "parents": [
    "bbfc3349c4e77a27ea83c765bf593d935f8f5599"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "inject"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/powercap/idle_inject.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/idle_inject.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}