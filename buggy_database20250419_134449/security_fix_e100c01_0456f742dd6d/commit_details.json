{
  "hash": "e100c01efa85c8a0ee7527bf28ef7ea7c3ca57e1",
  "hash_short": "e100c01e",
  "subject": "scsi: lpfc: Replace deprecated strncpy() with strscpy()",
  "body": "strncpy() is deprecated for use on NUL-terminated destination strings [1]\nand as such we should prefer more robust and less ambiguous string\ninterfaces.\n\nWe expect ae->value_string to be NUL-terminated because there's a comment\nthat says as much; these attr strings are also used with other string APIs,\nfurther cementing the fact.\n\nNow, the question of whether or not to NUL-pad the destination buffer:\nlpfc_fdmi_rprt_defer() initializes vports (all zero-initialized), then we\ncall lpfc_fdmi_cmd() with each vport and a mask. Then, inside of\nlpfc_fdmi_cmd() we check each bit in the mask to invoke the proper\ncallback. Importantly, the zero-initialized vport is passed in as the\n\"attr\" parameter. Seeing this:\n|\tstruct lpfc_fdmi_attr_string *ae = attr;\n... we can tell that ae->value_string is entirely zero-initialized. Due\nto this, NUL-padding is _not_ required as it would be redundant.\n\nConsidering the above, a suitable replacement is strscpy() [2].\n\nLink: https://www.kernel.org/doc/html/latest/process/deprecated.html#strncpy-on-nul-terminated-strings [1]\nLink: https://manpages.debian.org/testing/linux-manual-4.8/strscpy.9.en.html [2]\nLink: https://github.com/KSPP/linux/issues/90\nCc: linux-hardening@vger.kernel.org\nSigned-off-by: Justin Stitt <justinstitt@google.com>\nLink: https://lore.kernel.org/r/20240226-strncpy-drivers-scsi-lpfc-lpfc_ct-c-v2-1-2df2e46569b9@google.com\nReviewed-by: Kees Cook <keescook@chromium.org>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
  "full_message": "scsi: lpfc: Replace deprecated strncpy() with strscpy()\n\nstrncpy() is deprecated for use on NUL-terminated destination strings [1]\nand as such we should prefer more robust and less ambiguous string\ninterfaces.\n\nWe expect ae->value_string to be NUL-terminated because there's a comment\nthat says as much; these attr strings are also used with other string APIs,\nfurther cementing the fact.\n\nNow, the question of whether or not to NUL-pad the destination buffer:\nlpfc_fdmi_rprt_defer() initializes vports (all zero-initialized), then we\ncall lpfc_fdmi_cmd() with each vport and a mask. Then, inside of\nlpfc_fdmi_cmd() we check each bit in the mask to invoke the proper\ncallback. Importantly, the zero-initialized vport is passed in as the\n\"attr\" parameter. Seeing this:\n|\tstruct lpfc_fdmi_attr_string *ae = attr;\n... we can tell that ae->value_string is entirely zero-initialized. Due\nto this, NUL-padding is _not_ required as it would be redundant.\n\nConsidering the above, a suitable replacement is strscpy() [2].\n\nLink: https://www.kernel.org/doc/html/latest/process/deprecated.html#strncpy-on-nul-terminated-strings [1]\nLink: https://manpages.debian.org/testing/linux-manual-4.8/strscpy.9.en.html [2]\nLink: https://github.com/KSPP/linux/issues/90\nCc: linux-hardening@vger.kernel.org\nSigned-off-by: Justin Stitt <justinstitt@google.com>\nLink: https://lore.kernel.org/r/20240226-strncpy-drivers-scsi-lpfc-lpfc_ct-c-v2-1-2df2e46569b9@google.com\nReviewed-by: Kees Cook <keescook@chromium.org>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
  "author_name": "Justin Stitt",
  "author_email": "justinstitt@google.com",
  "author_date": "Mon Feb 26 23:53:44 2024 +0000",
  "author_date_iso": "2024-02-26T23:53:44+00:00",
  "committer_name": "Martin K. Petersen",
  "committer_email": "martin.petersen@oracle.com",
  "committer_date": "Mon Feb 26 21:18:52 2024 -0500",
  "committer_date_iso": "2024-02-26T21:18:52-05:00",
  "files_changed": [
    "drivers/scsi/lpfc/lpfc_ct.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "drivers/scsi/lpfc/lpfc_ct.c",
      "insertions": 2,
      "deletions": 2
    }
  ],
  "total_insertions": 2,
  "total_deletions": 2,
  "total_changes": 4,
  "parents": [
    "37126399da15e1d53da93c0282aca539bccc891b"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/scsi/lpfc/lpfc_ct.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}