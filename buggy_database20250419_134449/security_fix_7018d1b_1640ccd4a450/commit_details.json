{
  "hash": "7018d1b3f20fb4308ed9bc577160cb8ffb79b62a",
  "hash_short": "7018d1b3",
  "subject": "Merge git://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next",
  "body": "Daniel Borkmann says:\n\n====================\npull-request: bpf-next 2018-01-17\n\nThe following pull-request contains BPF updates for your *net-next* tree.\n\nThe main changes are:\n\n1) Add initial BPF map offloading for nfp driver. Currently only\n   programs were supported so far w/o being able to access maps.\n   Offloaded programs are right now only allowed to perform map\n   lookups, and control path is responsible for populating the\n   maps. BPF core infrastructure along with nfp implementation is\n   provided, from Jakub.\n\n2) Various follow-ups to Josef's BPF error injections. More\n   specifically that includes: properly check whether the error\n   injectable event is on function entry or not, remove the percpu\n   bpf_kprobe_override and rather compare instruction pointer\n   with original one, separate error-injection from kprobes since\n   it's not limited to it, add injectable error types in order to\n   specify what is the expected type of failure, and last but not\n   least also support the kernel's fault injection framework, all\n   from Masami.\n\n3) Various misc improvements and cleanups to the libbpf Makefile.\n   That is, fix permissions when installing BPF header files, remove\n   unused variables and functions, and also install the libbpf.h\n   header, from Jesper.\n\n4) When offloading to nfp JIT and the BPF insn is unsupported in the\n   JIT, then reject right at verification time. Also fix libbpf with\n   regards to ELF section name matching by properly treating the\n   program type as prefix. Both from Quentin.\n\n5) Add -DPACKAGE to bpftool when including bfd.h for the disassembler.\n   This is needed, for example, when building libfd from source as\n   bpftool doesn't supply a config.h for bfd.h. Fix from Jiong.\n\n6) xdp_convert_ctx_access() is simplified since it doesn't need to\n   set target size during verification, from Jesper.\n\n7) Let bpftool properly recognize BPF_PROG_TYPE_CGROUP_DEVICE\n   program types, from Roman.\n\n8) Various functions in BPF cpumap were not declared static, from Wei.\n\n9) Fix a double semicolon in BPF samples, from Luis.\n====================\n\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "full_message": "Merge git://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next\n\nDaniel Borkmann says:\n\n====================\npull-request: bpf-next 2018-01-17\n\nThe following pull-request contains BPF updates for your *net-next* tree.\n\nThe main changes are:\n\n1) Add initial BPF map offloading for nfp driver. Currently only\n   programs were supported so far w/o being able to access maps.\n   Offloaded programs are right now only allowed to perform map\n   lookups, and control path is responsible for populating the\n   maps. BPF core infrastructure along with nfp implementation is\n   provided, from Jakub.\n\n2) Various follow-ups to Josef's BPF error injections. More\n   specifically that includes: properly check whether the error\n   injectable event is on function entry or not, remove the percpu\n   bpf_kprobe_override and rather compare instruction pointer\n   with original one, separate error-injection from kprobes since\n   it's not limited to it, add injectable error types in order to\n   specify what is the expected type of failure, and last but not\n   least also support the kernel's fault injection framework, all\n   from Masami.\n\n3) Various misc improvements and cleanups to the libbpf Makefile.\n   That is, fix permissions when installing BPF header files, remove\n   unused variables and functions, and also install the libbpf.h\n   header, from Jesper.\n\n4) When offloading to nfp JIT and the BPF insn is unsupported in the\n   JIT, then reject right at verification time. Also fix libbpf with\n   regards to ELF section name matching by properly treating the\n   program type as prefix. Both from Quentin.\n\n5) Add -DPACKAGE to bpftool when including bfd.h for the disassembler.\n   This is needed, for example, when building libfd from source as\n   bpftool doesn't supply a config.h for bfd.h. Fix from Jiong.\n\n6) xdp_convert_ctx_access() is simplified since it doesn't need to\n   set target size during verification, from Jesper.\n\n7) Let bpftool properly recognize BPF_PROG_TYPE_CGROUP_DEVICE\n   program types, from Roman.\n\n8) Various functions in BPF cpumap were not declared static, from Wei.\n\n9) Fix a double semicolon in BPF samples, from Luis.\n====================\n\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "author_name": "David S. Miller",
  "author_email": "davem@davemloft.net",
  "author_date": "Tue Jan 16 22:42:14 2018 -0500",
  "author_date_iso": "2018-01-16T22:42:14-05:00",
  "committer_name": "David S. Miller",
  "committer_email": "davem@davemloft.net",
  "committer_date": "Tue Jan 16 22:42:14 2018 -0500",
  "committer_date_iso": "2018-01-16T22:42:14-05:00",
  "files_changed": [
    "include/linux/netdevice.h"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "Documentation/fault-injection/fault-injection.txt",
      "insertions": 68,
      "deletions": 0
    },
    {
      "file": "arch/Kconfig",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/x86/Kconfig",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/x86/include/asm/error-injection.h",
      "insertions": 13,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/kprobes.h",
      "insertions": 1,
      "deletions": 3
    },
    {
      "file": "arch/x86/kernel/kprobes/ftrace.c",
      "insertions": 0,
      "deletions": 14
    },
    {
      "file": "arch/x86/lib/Makefile",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/lib/error-inject.c",
      "insertions": 19,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/netronome/nfp/Makefile",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/netronome/nfp/bpf/cmsg.c",
      "insertions": 446,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/netronome/nfp/bpf/fw.h",
      "insertions": 103,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/netronome/nfp/bpf/jit.c",
      "insertions": 159,
      "deletions": 9
    },
    {
      "file": "drivers/net/ethernet/netronome/nfp/bpf/main.c",
      "insertions": 59,
      "deletions": 1
    },
    {
      "file": "drivers/net/ethernet/netronome/nfp/bpf/main.h",
      "insertions": 94,
      "deletions": 2
    },
    {
      "file": "drivers/net/ethernet/netronome/nfp/bpf/offload.c",
      "insertions": 105,
      "deletions": 1
    },
    {
      "file": "drivers/net/ethernet/netronome/nfp/bpf/verifier.c",
      "insertions": 55,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/netronome/nfp/nfp_app.h",
      "insertions": 9,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/netronome/nfp/nfp_asm.c",
      "insertions": 58,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/netronome/nfp/nfp_asm.h",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/netronome/nfp/nfp_net.h",
      "insertions": 12,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/netronome/nfp/nfp_net_common.c",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "fs/btrfs/disk-io.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "fs/btrfs/free-space-cache.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "include/asm-generic/error-injection.h",
      "insertions": 35,
      "deletions": 0
    },
    {
      "file": "include/asm-generic/vmlinux.lds.h",
      "insertions": 7,
      "deletions": 7
    },
    {
      "file": "include/linux/bpf.h",
      "insertions": 63,
      "deletions": 13
    },
    {
      "file": "include/linux/error-injection.h",
      "insertions": 27,
      "deletions": 0
    },
    {
      "file": "include/linux/kprobes.h",
      "insertions": 0,
      "deletions": 1
    },
    {
      "file": "include/linux/module.h",
      "insertions": 4,
      "deletions": 3
    },
    {
      "file": "include/linux/netdevice.h",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "include/uapi/linux/bpf.h",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "kernel/Makefile",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "kernel/bpf/cpumap.c",
      "insertions": 13,
      "deletions": 18
    },
    {
      "file": "kernel/bpf/devmap.c",
      "insertions": 1,
      "deletions": 7
    },
    {
      "file": "kernel/bpf/disasm.h",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "kernel/bpf/hashtab.c",
      "insertions": 59,
      "deletions": 44
    },
    {
      "file": "kernel/bpf/lpm_trie.c",
      "insertions": 1,
      "deletions": 6
    },
    {
      "file": "kernel/bpf/offload.c",
      "insertions": 203,
      "deletions": 19
    },
    {
      "file": "kernel/bpf/sockmap.c",
      "insertions": 1,
      "deletions": 7
    },
    {
      "file": "kernel/bpf/stackmap.c",
      "insertions": 1,
      "deletions": 5
    },
    {
      "file": "kernel/bpf/syscall.c",
      "insertions": 61,
      "deletions": 10
    },
    {
      "file": "kernel/bpf/verifier.c",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "kernel/fail_function.c",
      "insertions": 349,
      "deletions": 0
    },
    {
      "file": "kernel/kprobes.c",
      "insertions": 0,
      "deletions": 163
    },
    {
      "file": "kernel/module.c",
      "insertions": 4,
      "deletions": 4
    },
    {
      "file": "kernel/trace/Kconfig",
      "insertions": 1,
      "deletions": 3
    },
    {
      "file": "kernel/trace/bpf_trace.c",
      "insertions": 5,
      "deletions": 6
    },
    {
      "file": "kernel/trace/trace_kprobe.c",
      "insertions": 15,
      "deletions": 18
    },
    {
      "file": "kernel/trace/trace_probe.h",
      "insertions": 6,
      "deletions": 6
    },
    {
      "file": "lib/Kconfig.debug",
      "insertions": 14,
      "deletions": 0
    },
    {
      "file": "lib/Makefile",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "lib/error-inject.c",
      "insertions": 242,
      "deletions": 0
    },
    {
      "file": "net/core/filter.c",
      "insertions": 3,
      "deletions": 4
    },
    {
      "file": "samples/bpf/xdp_monitor_kern.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "tools/bpf/bpftool/Makefile",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "tools/bpf/bpftool/prog.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "tools/build/feature/Makefile",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "tools/include/uapi/linux/bpf.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "tools/lib/bpf/Makefile",
      "insertions": 5,
      "deletions": 15
    },
    {
      "file": "tools/lib/bpf/libbpf.c",
      "insertions": 1,
      "deletions": 1
    }
  ],
  "total_insertions": 2365,
  "total_deletions": 402,
  "total_changes": 2767,
  "parents": [
    "e7e70fa6784b48a811fdd4253c41fc7195300570",
    "e8a9d9683c8a62f917c19e57f1618363fb9ed04e"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.16",
    "v4.16-rc1",
    "v4.16-rc2",
    "v4.16-rc3",
    "v4.16-rc4",
    "v4.16-rc5",
    "v4.16-rc6",
    "v4.16-rc7",
    "v4.17",
    "v4.17-rc1"
  ],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/linux/netdevice.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}