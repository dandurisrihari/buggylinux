{
  "hash": "d07c0acb4f41cc42a0d97530946965b3e4fa68c1",
  "hash_short": "d07c0acb",
  "subject": "fortify: Fix __compiletime_strlen() under UBSAN_BOUNDS_LOCAL",
  "body": "With CONFIG_FORTIFY=y and CONFIG_UBSAN_LOCAL_BOUNDS=y enabled, we observe\na runtime panic while running Android's Compatibility Test Suite's (CTS)\nandroid.hardware.input.cts.tests. This is stemming from a strlen()\ncall in hidinput_allocate().\n\n__compiletime_strlen() is implemented in terms of __builtin_object_size(),\nthen does an array access to check for NUL-termination. A quirk of\n__builtin_object_size() is that for strings whose values are runtime\ndependent, __builtin_object_size(str, 1 or 0) returns the maximum size\nof possible values when those sizes are determinable at compile time.\nExample:\n\n  static const char *v = \"FOO BAR\";\n  static const char *y = \"FOO BA\";\n  unsigned long x (int z) {\n      // Returns 8, which is:\n      // max(__builtin_object_size(v, 1), __builtin_object_size(y, 1))\n      return __builtin_object_size(z ? v : y, 1);\n  }\n\nSo when FORTIFY_SOURCE is enabled, the current implementation of\n__compiletime_strlen() will try to access beyond the end of y at runtime\nusing the size of v. Mixed with UBSAN_LOCAL_BOUNDS we get a fault.\n\nhidinput_allocate() has a local C string whose value is control flow\ndependent on a switch statement, so __builtin_object_size(str, 1)\nevaluates to the maximum string length, making all other cases fault on\nthe last character check. hidinput_allocate() could be cleaned up to\navoid runtime calls to strlen() since the local variable can only have\nliteral values, so there's no benefit to trying to fortify the strlen\ncall site there.\n\nPerform a __builtin_constant_p() check against index 0 earlier in the\nmacro to filter out the control-flow-dependant case. Add a KUnit test\nfor checking the expected behavioral characteristics of FORTIFY_SOURCE\ninternals.\n\nCc: Nathan Chancellor <nathan@kernel.org>\nCc: Tom Rix <trix@redhat.com>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Vlastimil Babka <vbabka@suse.cz>\nCc: \"Steven Rostedt (Google)\" <rostedt@goodmis.org>\nCc: David Gow <davidgow@google.com>\nCc: Yury Norov <yury.norov@gmail.com>\nCc: Masami Hiramatsu <mhiramat@kernel.org>\nCc: Sander Vanheule <sander@svanheule.net>\nCc: linux-hardening@vger.kernel.org\nCc: llvm@lists.linux.dev\nReviewed-by: Nick Desaulniers <ndesaulniers@google.com>\nTested-by: Android Treehugger Robot\nLink: https://android-review.googlesource.com/c/kernel/common/+/2206839\nCo-developed-by: Nick Desaulniers <ndesaulniers@google.com>\nSigned-off-by: Nick Desaulniers <ndesaulniers@google.com>\nSigned-off-by: Kees Cook <keescook@chromium.org>",
  "full_message": "fortify: Fix __compiletime_strlen() under UBSAN_BOUNDS_LOCAL\n\nWith CONFIG_FORTIFY=y and CONFIG_UBSAN_LOCAL_BOUNDS=y enabled, we observe\na runtime panic while running Android's Compatibility Test Suite's (CTS)\nandroid.hardware.input.cts.tests. This is stemming from a strlen()\ncall in hidinput_allocate().\n\n__compiletime_strlen() is implemented in terms of __builtin_object_size(),\nthen does an array access to check for NUL-termination. A quirk of\n__builtin_object_size() is that for strings whose values are runtime\ndependent, __builtin_object_size(str, 1 or 0) returns the maximum size\nof possible values when those sizes are determinable at compile time.\nExample:\n\n  static const char *v = \"FOO BAR\";\n  static const char *y = \"FOO BA\";\n  unsigned long x (int z) {\n      // Returns 8, which is:\n      // max(__builtin_object_size(v, 1), __builtin_object_size(y, 1))\n      return __builtin_object_size(z ? v : y, 1);\n  }\n\nSo when FORTIFY_SOURCE is enabled, the current implementation of\n__compiletime_strlen() will try to access beyond the end of y at runtime\nusing the size of v. Mixed with UBSAN_LOCAL_BOUNDS we get a fault.\n\nhidinput_allocate() has a local C string whose value is control flow\ndependent on a switch statement, so __builtin_object_size(str, 1)\nevaluates to the maximum string length, making all other cases fault on\nthe last character check. hidinput_allocate() could be cleaned up to\navoid runtime calls to strlen() since the local variable can only have\nliteral values, so there's no benefit to trying to fortify the strlen\ncall site there.\n\nPerform a __builtin_constant_p() check against index 0 earlier in the\nmacro to filter out the control-flow-dependant case. Add a KUnit test\nfor checking the expected behavioral characteristics of FORTIFY_SOURCE\ninternals.\n\nCc: Nathan Chancellor <nathan@kernel.org>\nCc: Tom Rix <trix@redhat.com>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Vlastimil Babka <vbabka@suse.cz>\nCc: \"Steven Rostedt (Google)\" <rostedt@goodmis.org>\nCc: David Gow <davidgow@google.com>\nCc: Yury Norov <yury.norov@gmail.com>\nCc: Masami Hiramatsu <mhiramat@kernel.org>\nCc: Sander Vanheule <sander@svanheule.net>\nCc: linux-hardening@vger.kernel.org\nCc: llvm@lists.linux.dev\nReviewed-by: Nick Desaulniers <ndesaulniers@google.com>\nTested-by: Android Treehugger Robot\nLink: https://android-review.googlesource.com/c/kernel/common/+/2206839\nCo-developed-by: Nick Desaulniers <ndesaulniers@google.com>\nSigned-off-by: Nick Desaulniers <ndesaulniers@google.com>\nSigned-off-by: Kees Cook <keescook@chromium.org>",
  "author_name": "Kees Cook",
  "author_email": "keescook@chromium.org",
  "author_date": "Fri Sep 2 13:02:26 2022 -0700",
  "author_date_iso": "2022-09-02T13:02:26-07:00",
  "committer_name": "Kees Cook",
  "committer_email": "keescook@chromium.org",
  "committer_date": "Wed Sep 7 16:37:26 2022 -0700",
  "committer_date_iso": "2022-09-07T16:37:26-07:00",
  "files_changed": [
    "include/linux/fortify-string.h"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "include/linux/fortify-string.h",
      "insertions": 2,
      "deletions": 1
    }
  ],
  "total_insertions": 2,
  "total_deletions": 1,
  "total_changes": 3,
  "parents": [
    "dfbafa70bde26c40615f8c538ce68dac82a64fb4"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/linux/fortify-string.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}