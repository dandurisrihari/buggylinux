{
  "hash": "a50026bdb867c8caf9d29e18f9fe9e1390312619",
  "hash_short": "a50026bd",
  "subject": "iov_iter: get rid of 'copy_mc' flag",
  "body": "This flag is only set by one single user: the magical core dumping code\nthat looks up user pages one by one, and then writes them out using\ntheir kernel addresses (by using a BVEC_ITER).\n\nThat actually ends up being a huge problem, because while we do use\ncopy_mc_to_kernel() for this case and it is able to handle the possible\nmachine checks involved, nothing else is really ready to handle the\nfailures caused by the machine check.\n\nIn particular, as reported by Tong Tiangen, we don't actually support\nfault_in_iov_iter_readable() on a machine check area.\n\nAs a result, the usual logic for writing things to a file under a\nfilesystem lock, which involves doing a copy with page faults disabled\nand then if that fails trying to fault pages in without holding the\nlocks with fault_in_iov_iter_readable() does not work at all.\n\nWe could decide to always just make the MC copy \"succeed\" (and filling\nthe destination with zeroes), and that would then create a core dump\nfile that just ignores any machine checks.\n\nBut honestly, this single special case has been problematic before, and\nmeans that all the normal iov_iter code ends up slightly more complex\nand slower.\n\nSee for example commit c9eec08bac96 (\"iov_iter: Don't deal with\niter->copy_mc in memcpy_from_iter_mc()\") where David Howells\nre-organized the code just to avoid having to check the 'copy_mc' flags\ninside the inner iov_iter loops.\n\nSo considering that we have exactly one user, and that one user is a\nnon-critical special case that doesn't actually ever trigger in real\nlife (Tong found this with manual error injection), the sane solution is\nto just decide that the onus on handling the machine check lines on that\nuser instead.\n\nErgo, do the copy_mc_to_kernel() in the core dump logic itself, copying\nthe user data to a stable kernel page before writing it out.\n\nFixes: f1982740f5e7 (\"iov_iter: Convert iterate*() to inline funcs\")\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>\nSigned-off-by: Tong Tiangen <tongtiangen@huawei.com>\nLink: https://lore.kernel.org/r/20240305133336.3804360-1-tongtiangen@huawei.com\nLink: https://lore.kernel.org/all/4e80924d-9c85-f13a-722a-6a5d2b1c225a@huawei.com/\nTested-by: David Howells <dhowells@redhat.com>\nReviewed-by: David Howells <dhowells@redhat.com>\nReviewed-by: Jens Axboe <axboe@kernel.dk>\nReported-by: Tong Tiangen <tongtiangen@huawei.com>\nSigned-off-by: Christian Brauner <brauner@kernel.org>",
  "full_message": "iov_iter: get rid of 'copy_mc' flag\n\nThis flag is only set by one single user: the magical core dumping code\nthat looks up user pages one by one, and then writes them out using\ntheir kernel addresses (by using a BVEC_ITER).\n\nThat actually ends up being a huge problem, because while we do use\ncopy_mc_to_kernel() for this case and it is able to handle the possible\nmachine checks involved, nothing else is really ready to handle the\nfailures caused by the machine check.\n\nIn particular, as reported by Tong Tiangen, we don't actually support\nfault_in_iov_iter_readable() on a machine check area.\n\nAs a result, the usual logic for writing things to a file under a\nfilesystem lock, which involves doing a copy with page faults disabled\nand then if that fails trying to fault pages in without holding the\nlocks with fault_in_iov_iter_readable() does not work at all.\n\nWe could decide to always just make the MC copy \"succeed\" (and filling\nthe destination with zeroes), and that would then create a core dump\nfile that just ignores any machine checks.\n\nBut honestly, this single special case has been problematic before, and\nmeans that all the normal iov_iter code ends up slightly more complex\nand slower.\n\nSee for example commit c9eec08bac96 (\"iov_iter: Don't deal with\niter->copy_mc in memcpy_from_iter_mc()\") where David Howells\nre-organized the code just to avoid having to check the 'copy_mc' flags\ninside the inner iov_iter loops.\n\nSo considering that we have exactly one user, and that one user is a\nnon-critical special case that doesn't actually ever trigger in real\nlife (Tong found this with manual error injection), the sane solution is\nto just decide that the onus on handling the machine check lines on that\nuser instead.\n\nErgo, do the copy_mc_to_kernel() in the core dump logic itself, copying\nthe user data to a stable kernel page before writing it out.\n\nFixes: f1982740f5e7 (\"iov_iter: Convert iterate*() to inline funcs\")\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>\nSigned-off-by: Tong Tiangen <tongtiangen@huawei.com>\nLink: https://lore.kernel.org/r/20240305133336.3804360-1-tongtiangen@huawei.com\nLink: https://lore.kernel.org/all/4e80924d-9c85-f13a-722a-6a5d2b1c225a@huawei.com/\nTested-by: David Howells <dhowells@redhat.com>\nReviewed-by: David Howells <dhowells@redhat.com>\nReviewed-by: Jens Axboe <axboe@kernel.dk>\nReported-by: Tong Tiangen <tongtiangen@huawei.com>\nSigned-off-by: Christian Brauner <brauner@kernel.org>",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Tue Mar 5 21:33:36 2024 +0800",
  "author_date_iso": "2024-03-05T21:33:36+08:00",
  "committer_name": "Christian Brauner",
  "committer_email": "brauner@kernel.org",
  "committer_date": "Wed Mar 6 10:52:12 2024 +0100",
  "committer_date_iso": "2024-03-06T10:52:12+01:00",
  "files_changed": [
    "fs/coredump.c",
    "include/linux/uio.h",
    "lib/iov_iter.c"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "fs/coredump.c",
      "insertions": 42,
      "deletions": 3
    },
    {
      "file": "include/linux/uio.h",
      "insertions": 0,
      "deletions": 16
    },
    {
      "file": "lib/iov_iter.c",
      "insertions": 0,
      "deletions": 23
    }
  ],
  "total_insertions": 42,
  "total_deletions": 42,
  "total_changes": 84,
  "parents": [
    "961ebd120565cb60cebe21cb634fbc456022db4a"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/coredump.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/uio.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "lib/iov_iter.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}