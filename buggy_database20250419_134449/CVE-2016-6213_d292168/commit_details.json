{
  "hash": "d29216842a85c7970c536108e093963f02714498",
  "hash_short": "d2921684",
  "subject": "mnt: Add a per mount namespace limit on the number of mounts",
  "body": "CAI Qian <caiqian@redhat.com> pointed out that the semantics\nof shared subtrees make it possible to create an exponentially\nincreasing number of mounts in a mount namespace.\n\n    mkdir /tmp/1 /tmp/2\n    mount --make-rshared /\n    for i in $(seq 1 20) ; do mount --bind /tmp/1 /tmp/2 ; done\n\nWill create create 2^20 or 1048576 mounts, which is a practical problem\nas some people have managed to hit this by accident.\n\nAs such CVE-2016-6213 was assigned.\n\nIan Kent <raven@themaw.net> described the situation for autofs users\nas follows:\n\n> The number of mounts for direct mount maps is usually not very large because of\n> the way they are implemented, large direct mount maps can have performance\n> problems. There can be anywhere from a few (likely case a few hundred) to less\n> than 10000, plus mounts that have been triggered and not yet expired.\n>\n> Indirect mounts have one autofs mount at the root plus the number of mounts that\n> have been triggered and not yet expired.\n>\n> The number of autofs indirect map entries can range from a few to the common\n> case of several thousand and in rare cases up to between 30000 and 50000. I've\n> not heard of people with maps larger than 50000 entries.\n>\n> The larger the number of map entries the greater the possibility for a large\n> number of active mounts so it's not hard to expect cases of a 1000 or somewhat\n> more active mounts.\n\nSo I am setting the default number of mounts allowed per mount\nnamespace at 100,000.  This is more than enough for any use case I\nknow of, but small enough to quickly stop an exponential increase\nin mounts.  Which should be perfect to catch misconfigurations and\nmalfunctioning programs.\n\nFor anyone who needs a higher limit this can be changed by writing\nto the new /proc/sys/fs/mount-max sysctl.\n\nTested-by: CAI Qian <caiqian@redhat.com>\nSigned-off-by: \"Eric W. Biederman\" <ebiederm@xmission.com>",
  "full_message": "mnt: Add a per mount namespace limit on the number of mounts\n\nCAI Qian <caiqian@redhat.com> pointed out that the semantics\nof shared subtrees make it possible to create an exponentially\nincreasing number of mounts in a mount namespace.\n\n    mkdir /tmp/1 /tmp/2\n    mount --make-rshared /\n    for i in $(seq 1 20) ; do mount --bind /tmp/1 /tmp/2 ; done\n\nWill create create 2^20 or 1048576 mounts, which is a practical problem\nas some people have managed to hit this by accident.\n\nAs such CVE-2016-6213 was assigned.\n\nIan Kent <raven@themaw.net> described the situation for autofs users\nas follows:\n\n> The number of mounts for direct mount maps is usually not very large because of\n> the way they are implemented, large direct mount maps can have performance\n> problems. There can be anywhere from a few (likely case a few hundred) to less\n> than 10000, plus mounts that have been triggered and not yet expired.\n>\n> Indirect mounts have one autofs mount at the root plus the number of mounts that\n> have been triggered and not yet expired.\n>\n> The number of autofs indirect map entries can range from a few to the common\n> case of several thousand and in rare cases up to between 30000 and 50000. I've\n> not heard of people with maps larger than 50000 entries.\n>\n> The larger the number of map entries the greater the possibility for a large\n> number of active mounts so it's not hard to expect cases of a 1000 or somewhat\n> more active mounts.\n\nSo I am setting the default number of mounts allowed per mount\nnamespace at 100,000.  This is more than enough for any use case I\nknow of, but small enough to quickly stop an exponential increase\nin mounts.  Which should be perfect to catch misconfigurations and\nmalfunctioning programs.\n\nFor anyone who needs a higher limit this can be changed by writing\nto the new /proc/sys/fs/mount-max sysctl.\n\nTested-by: CAI Qian <caiqian@redhat.com>\nSigned-off-by: \"Eric W. Biederman\" <ebiederm@xmission.com>",
  "author_name": "Eric W. Biederman",
  "author_email": "ebiederm@xmission.com",
  "author_date": "Wed Sep 28 00:27:17 2016 -0500",
  "author_date_iso": "2016-09-28T00:27:17-05:00",
  "committer_name": "Eric W. Biederman",
  "committer_email": "ebiederm@xmission.com",
  "committer_date": "Fri Sep 30 12:46:48 2016 -0500",
  "committer_date_iso": "2016-09-30T12:46:48-05:00",
  "files_changed": [
    "Documentation/sysctl/fs.txt",
    "fs/mount.h",
    "fs/namespace.c",
    "fs/pnode.c",
    "fs/pnode.h",
    "include/linux/mount.h",
    "kernel/sysctl.c"
  ],
  "files_changed_count": 7,
  "stats": [
    {
      "file": "Documentation/sysctl/fs.txt",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "fs/mount.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "fs/namespace.c",
      "insertions": 48,
      "deletions": 1
    },
    {
      "file": "fs/pnode.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "fs/pnode.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "include/linux/mount.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "kernel/sysctl.c",
      "insertions": 9,
      "deletions": 0
    }
  ],
  "total_insertions": 70,
  "total_deletions": 2,
  "total_changes": 72,
  "parents": [
    "2ed6afdee798658fe3c33b50c4a79d1bde45f1d8"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.10",
    "v4.10-rc1",
    "v4.10-rc2",
    "v4.10-rc3",
    "v4.10-rc4",
    "v4.10-rc5",
    "v4.10-rc6",
    "v4.10-rc7",
    "v4.10-rc8",
    "v4.11"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2016-6213"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "Documentation/sysctl/fs.txt",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/mount.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/namespace.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/pnode.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/mount.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/pnode.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/sysctl.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}