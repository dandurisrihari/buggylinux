{
  "hash": "70c50ee72eebb3d1e3aae7450269fd8d8074c610",
  "hash_short": "70c50ee7",
  "subject": "thermal/powerclamp: Prevent division by zero when counting interval",
  "body": "I have got a zero division error when disabling the forced\nidle injection from the intel powerclamp. I did\n\n  echo 0 >/sys/class/thermal/cooling_device48/cur_state\n\nand got\n\n[  986.072632] divide error: 0000 [#1] PREEMPT SMP\n[  986.078989] Modules linked in:\n[  986.083618] CPU: 17 PID: 24967 Comm: kidle_inject/17 Not tainted 4.7.0-1-default+ #3055\n[  986.093781] Hardware name: Intel Corporation S2600CP/S2600CP, BIOS RMLSDP.86I.R3.27.D685.1305151734 05/15/2013\n[  986.106227] task: ffff880430e1c080 task.stack: ffff880427ef0000\n[  986.114122] RIP: 0010:[<ffffffff81794859>]  [<ffffffff81794859>] clamp_thread+0x1d9/0x600\n[  986.124609] RSP: 0018:ffff880427ef3e20  EFLAGS: 00010246\n[  986.131860] RAX: 0000000000000258 RBX: 0000000000000006 RCX: 0000000000000001\n[  986.141179] RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000018\n[  986.150478] RBP: ffff880427ef3ec8 R08: ffff880427ef0000 R09: 0000000000000002\n[  986.159779] R10: 0000000000003df2 R11: 0000000000000018 R12: 0000000000000002\n[  986.169089] R13: 0000000000000000 R14: ffff880427ef0000 R15: ffff880427ef0000\n[  986.178388] FS:  0000000000000000(0000) GS:ffff880435940000(0000) knlGS:0000000000000000\n[  986.188785] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[  986.196559] CR2: 00007f1d0caf0000 CR3: 0000000002006000 CR4: 00000000001406e0\n[  986.205909] Stack:\n[  986.209524]  ffff8802be897b00 ffff880430e1c080 0000000000000011 0000006a35959780\n[  986.219236]  0000000000000011 ffff880427ef0008 0000000000000000 ffff8804359503d0\n[  986.228966]  0000000100029d93 ffffffff81794140 0000000000000000 ffffffff05000011\n[  986.238686] Call Trace:\n[  986.242825]  [<ffffffff81794140>] ? pkg_state_counter+0x80/0x80\n[  986.250866]  [<ffffffff81794680>] ? powerclamp_set_cur_state+0x180/0x180\n[  986.259797]  [<ffffffff8111d1a9>] kthread+0xc9/0xe0\n[  986.266682]  [<ffffffff8193d69f>] ret_from_fork+0x1f/0x40\n[  986.274142]  [<ffffffff8111d0e0>] ? kthread_create_on_node+0x180/0x180\n[  986.282869] Code: d1 ea 48 89 d6 80 3d 6a d0 d4 00 00 ba 64 00 00 00 89 d8 41 0f 45 f5 0f af c2 42 8d 14 2e be 31 00 00 00 83 fa 31 0f 42 f2 31 d2 <f7> f6 48 8b 15 9e 07 87 00 48 8b 3d 97 07 87 00 48 63 f0 83 e8\n[  986.307806] RIP  [<ffffffff81794859>] clamp_thread+0x1d9/0x600\n[  986.315871]  RSP <ffff880427ef3e20>\n\nRIP points to the following lines:\n\n\tcompensation = get_compensation(target_ratio);\n\tinterval = duration_jiffies*100/(target_ratio+compensation);\n\nA solution would be to switch the following two commands in\npowerclamp_set_cur_state():\n\n\tset_target_ratio = 0;\n\tend_power_clamp();\n\nBut I think that the zero division might happen also when target_ratio\nis non-zero because the compensation might be negative. Therefore\nwe also check the sum of target_ratio and compensation explicitly.\n\nAlso the compensated_ratio variable is always set. Therefore there\nis no need to initialize it.\n\nSigned-off-by: Petr Mladek <pmladek@suse.com>\nAcked-by: Jacob Pan <jacob.jun.pan@linux.intel.com>\nSigned-off-by: Zhang Rui <rui.zhang@intel.com>",
  "full_message": "thermal/powerclamp: Prevent division by zero when counting interval\n\nI have got a zero division error when disabling the forced\nidle injection from the intel powerclamp. I did\n\n  echo 0 >/sys/class/thermal/cooling_device48/cur_state\n\nand got\n\n[  986.072632] divide error: 0000 [#1] PREEMPT SMP\n[  986.078989] Modules linked in:\n[  986.083618] CPU: 17 PID: 24967 Comm: kidle_inject/17 Not tainted 4.7.0-1-default+ #3055\n[  986.093781] Hardware name: Intel Corporation S2600CP/S2600CP, BIOS RMLSDP.86I.R3.27.D685.1305151734 05/15/2013\n[  986.106227] task: ffff880430e1c080 task.stack: ffff880427ef0000\n[  986.114122] RIP: 0010:[<ffffffff81794859>]  [<ffffffff81794859>] clamp_thread+0x1d9/0x600\n[  986.124609] RSP: 0018:ffff880427ef3e20  EFLAGS: 00010246\n[  986.131860] RAX: 0000000000000258 RBX: 0000000000000006 RCX: 0000000000000001\n[  986.141179] RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000018\n[  986.150478] RBP: ffff880427ef3ec8 R08: ffff880427ef0000 R09: 0000000000000002\n[  986.159779] R10: 0000000000003df2 R11: 0000000000000018 R12: 0000000000000002\n[  986.169089] R13: 0000000000000000 R14: ffff880427ef0000 R15: ffff880427ef0000\n[  986.178388] FS:  0000000000000000(0000) GS:ffff880435940000(0000) knlGS:0000000000000000\n[  986.188785] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[  986.196559] CR2: 00007f1d0caf0000 CR3: 0000000002006000 CR4: 00000000001406e0\n[  986.205909] Stack:\n[  986.209524]  ffff8802be897b00 ffff880430e1c080 0000000000000011 0000006a35959780\n[  986.219236]  0000000000000011 ffff880427ef0008 0000000000000000 ffff8804359503d0\n[  986.228966]  0000000100029d93 ffffffff81794140 0000000000000000 ffffffff05000011\n[  986.238686] Call Trace:\n[  986.242825]  [<ffffffff81794140>] ? pkg_state_counter+0x80/0x80\n[  986.250866]  [<ffffffff81794680>] ? powerclamp_set_cur_state+0x180/0x180\n[  986.259797]  [<ffffffff8111d1a9>] kthread+0xc9/0xe0\n[  986.266682]  [<ffffffff8193d69f>] ret_from_fork+0x1f/0x40\n[  986.274142]  [<ffffffff8111d0e0>] ? kthread_create_on_node+0x180/0x180\n[  986.282869] Code: d1 ea 48 89 d6 80 3d 6a d0 d4 00 00 ba 64 00 00 00 89 d8 41 0f 45 f5 0f af c2 42 8d 14 2e be 31 00 00 00 83 fa 31 0f 42 f2 31 d2 <f7> f6 48 8b 15 9e 07 87 00 48 8b 3d 97 07 87 00 48 63 f0 83 e8\n[  986.307806] RIP  [<ffffffff81794859>] clamp_thread+0x1d9/0x600\n[  986.315871]  RSP <ffff880427ef3e20>\n\nRIP points to the following lines:\n\n\tcompensation = get_compensation(target_ratio);\n\tinterval = duration_jiffies*100/(target_ratio+compensation);\n\nA solution would be to switch the following two commands in\npowerclamp_set_cur_state():\n\n\tset_target_ratio = 0;\n\tend_power_clamp();\n\nBut I think that the zero division might happen also when target_ratio\nis non-zero because the compensation might be negative. Therefore\nwe also check the sum of target_ratio and compensation explicitly.\n\nAlso the compensated_ratio variable is always set. Therefore there\nis no need to initialize it.\n\nSigned-off-by: Petr Mladek <pmladek@suse.com>\nAcked-by: Jacob Pan <jacob.jun.pan@linux.intel.com>\nSigned-off-by: Zhang Rui <rui.zhang@intel.com>",
  "author_name": "Petr Mladek",
  "author_email": "pmladek@suse.com",
  "author_date": "Fri Aug 5 15:20:41 2016 +0200",
  "author_date_iso": "2016-08-05T15:20:41+02:00",
  "committer_name": "Zhang Rui",
  "committer_email": "rui.zhang@intel.com",
  "committer_date": "Mon Aug 8 10:54:55 2016 +0800",
  "committer_date_iso": "2016-08-08T10:54:55+08:00",
  "files_changed": [
    "drivers/thermal/intel_powerclamp.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "drivers/thermal/intel_powerclamp.c",
      "insertions": 7,
      "deletions": 4
    }
  ],
  "total_insertions": 7,
  "total_deletions": 4,
  "total_changes": 11,
  "parents": [
    "176b1ec21306f0775e6d7a03f42d82a0b144ef0e"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.10",
    "v4.10-rc1",
    "v4.10-rc2",
    "v4.10-rc3",
    "v4.10-rc4",
    "v4.10-rc5",
    "v4.10-rc6",
    "v4.10-rc7",
    "v4.10-rc8",
    "v4.11"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/thermal/intel_powerclamp.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}