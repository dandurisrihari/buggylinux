{
  "hash": "c68cf5285e1896a2b725ec01a1351f08610165b8",
  "hash_short": "c68cf528",
  "subject": "arm64: pauth: don't sign leaf functions",
  "body": "Currently, when CONFIG_ARM64_PTR_AUTH_KERNEL=y (and\nCONFIG_UNWIND_PATCH_PAC_INTO_SCS=n), we enable pointer authentication\nfor all functions, including leaf functions. This isn't necessary, and\nis unfortunate for a few reasons:\n\n* Any PACIASP instruction is implicitly a `BTI C` landing pad, and\n  forcing the addition of a PACIASP in every function introduces a\n  larger set of BTI gadgets than is necessary.\n\n* The PACIASP and AUTIASP instructions make leaf functions larger than\n  necessary, bloating the kernel Image. For a defconfig v6.2-rc3 kernel,\n  this appears to add ~64KiB relative to not signing leaf functions,\n  which is unfortunate but not entirely onerous.\n\n* The PACIASP and AUTIASP instructions potentially make leaf functions\n  more expensive in terms of performance and/or power. For many trivial\n  leaf functions, this is clearly unnecessary, e.g.\n\n  | <arch_local_save_flags>:\n  |        d503233f        paciasp\n  |        d53b4220        mrs     x0, daif\n  |        d50323bf        autiasp\n  |        d65f03c0        ret\n\n  | <calibration_delay_done>:\n  |        d503233f        paciasp\n  |        d50323bf        autiasp\n  |        d65f03c0        ret\n  |        d503201f        nop\n\n* When CONFIG_UNWIND_PATCH_PAC_INTO_SCS=y we disable pointer\n  authentication for leaf functions, so clearly this is not functionally\n  necessary, indicates we have an inconsistent threat model, and\n  convolutes the Makefile logic.\n\nWe've used pointer authentication in leaf functions since the\nintroduction of in-kernel pointer authentication in commit:\n\n  74afda4016a7437e (\"arm64: compile the kernel with ptrauth return address signing\")\n\n... but at the time we had no rationale for signing leaf functions.\n\nSubsequently, we considered avoiding signing leaf functions:\n\n  https://lore.kernel.org/linux-arm-kernel/1586856741-26839-1-git-send-email-amit.kachhap@arm.com/\n  https://lore.kernel.org/linux-arm-kernel/1588149371-20310-1-git-send-email-amit.kachhap@arm.com/\n\n... however at the time we didn't have an abundance of reasons to avoid\nsigning leaf functions as above (e.g. the BTI case), we had no hardware\nto make performance measurements, and it was reasoned that this gave\nsome level of protection against a limited set of code-reuse gadgets\nwhich would fall through to a RET. We documented this in commit:\n\n  717b938e22f8dbf0 (\"arm64: Document why we enable PAC support for leaf functions\")\n\nNotably, this was before we supported any forward-edge CFI scheme (e.g.\nArm BTI, or Clang CFI/kCFI), which would prevent jumping into the middle\nof a function.\n\nIn addition, even with signing forced for leaf functions, AUTIASP may be\nplaced before a number of instructions which might constitute such a\ngadget, e.g.\n\n| <user_regs_reset_single_step>:\n|        f9400022        ldr     x2, [x1]\n|        d503233f        paciasp\n|        d50323bf        autiasp\n|        f9408401        ldr     x1, [x0, #264]\n|        720b005f        tst     w2, #0x200000\n|        b26b0022        orr     x2, x1, #0x200000\n|        926af821        and     x1, x1, #0xffffffffffdfffff\n|        9a820021        csel    x1, x1, x2, eq  // eq = none\n|        f9008401        str     x1, [x0, #264]\n|        d65f03c0        ret\n\n| <fpsimd_cpu_dead>:\n|        2a0003e3        mov     w3, w0\n|        9000ff42        adrp    x2, ffff800009ffd000 <xen_dynamic_chip+0x48>\n|        9120e042        add     x2, x2, #0x838\n|        52800000        mov     w0, #0x0                        // #0\n|        d503233f        paciasp\n|        f000d041        adrp    x1, ffff800009a20000 <this_cpu_vector>\n|        d50323bf        autiasp\n|        9102c021        add     x1, x1, #0xb0\n|        f8635842        ldr     x2, [x2, w3, uxtw #3]\n|        f821685f        str     xzr, [x2, x1]\n|        d65f03c0        ret\n|        d503201f        nop\n\nSo generally, trying to use AUTIASP to detect such gadgetization is not\nrobust, and this is dealt with far better by forward-edge CFI (which is\ndesigned to prevent such cases). We should bite the bullet and stop\npretending that AUTIASP is a mitigation for such forward-edge\ngadgetization.\n\nFor the above reasons, this patch has the kernel consistently sign\nnon-leaf functions and avoid signing leaf functions.\n\nConsidering a defconfig v6.2-rc3 kernel built with LLVM 15.0.6:\n\n* The vmlinux is ~43KiB smaller:\n\n  | [mark@lakrids:~/src/linux]% ls -al vmlinux-*\n  | -rwxr-xr-x 1 mark mark 338547808 Jan 25 17:17 vmlinux-after\n  | -rwxr-xr-x 1 mark mark 338591472 Jan 25 17:22 vmlinux-before\n\n* The resulting Image is 64KiB smaller:\n\n  | [mark@lakrids:~/src/linux]% ls -al Image-*\n  | -rwxr-xr-x 1 mark mark 32702976 Jan 25 17:17 Image-after\n  | -rwxr-xr-x 1 mark mark 32768512 Jan 25 17:22 Image-before\n\n* There are ~400 fewer BTI gadgets:\n\n  | [mark@lakrids:~/src/linux]% usekorg 12.1.0 aarch64-linux-objdump -d vmlinux-before 2> /dev/null | grep -ow 'paciasp\\|bti\\sc\\?' | sort | uniq -c\n  |    1219 bti     c\n  |   61982 paciasp\n\n  | [mark@lakrids:~/src/linux]% usekorg 12.1.0 aarch64-linux-objdump -d vmlinux-after 2> /dev/null | grep -ow 'paciasp\\|bti\\sc\\?' | sort | uniq -c\n  |   10099 bti     c\n  |   52699 paciasp\n\n  Which is +8880 BTIs, and -9283 PACIASPs, for -403 unnecessary BTI\n  gadgets. While this is small relative to the total, distinguishing the\n  two cases will make it easier to analyse and reduce this set further\n  in future.\n\nSigned-off-by: Mark Rutland <mark.rutland@arm.com>\nReviewed-by: Ard Biesheuvel <ardb@kernel.org>\nReviewed-by: Mark Brown <broonie@kernel.org>\nCc: Amit Daniel Kachhap <amit.kachhap@arm.com>\nCc: Will Deacon <will@kernel.org>\nLink: https://lore.kernel.org/r/20230131105809.991288-3-mark.rutland@arm.com\nSigned-off-by: Catalin Marinas <catalin.marinas@arm.com>",
  "full_message": "arm64: pauth: don't sign leaf functions\n\nCurrently, when CONFIG_ARM64_PTR_AUTH_KERNEL=y (and\nCONFIG_UNWIND_PATCH_PAC_INTO_SCS=n), we enable pointer authentication\nfor all functions, including leaf functions. This isn't necessary, and\nis unfortunate for a few reasons:\n\n* Any PACIASP instruction is implicitly a `BTI C` landing pad, and\n  forcing the addition of a PACIASP in every function introduces a\n  larger set of BTI gadgets than is necessary.\n\n* The PACIASP and AUTIASP instructions make leaf functions larger than\n  necessary, bloating the kernel Image. For a defconfig v6.2-rc3 kernel,\n  this appears to add ~64KiB relative to not signing leaf functions,\n  which is unfortunate but not entirely onerous.\n\n* The PACIASP and AUTIASP instructions potentially make leaf functions\n  more expensive in terms of performance and/or power. For many trivial\n  leaf functions, this is clearly unnecessary, e.g.\n\n  | <arch_local_save_flags>:\n  |        d503233f        paciasp\n  |        d53b4220        mrs     x0, daif\n  |        d50323bf        autiasp\n  |        d65f03c0        ret\n\n  | <calibration_delay_done>:\n  |        d503233f        paciasp\n  |        d50323bf        autiasp\n  |        d65f03c0        ret\n  |        d503201f        nop\n\n* When CONFIG_UNWIND_PATCH_PAC_INTO_SCS=y we disable pointer\n  authentication for leaf functions, so clearly this is not functionally\n  necessary, indicates we have an inconsistent threat model, and\n  convolutes the Makefile logic.\n\nWe've used pointer authentication in leaf functions since the\nintroduction of in-kernel pointer authentication in commit:\n\n  74afda4016a7437e (\"arm64: compile the kernel with ptrauth return address signing\")\n\n... but at the time we had no rationale for signing leaf functions.\n\nSubsequently, we considered avoiding signing leaf functions:\n\n  https://lore.kernel.org/linux-arm-kernel/1586856741-26839-1-git-send-email-amit.kachhap@arm.com/\n  https://lore.kernel.org/linux-arm-kernel/1588149371-20310-1-git-send-email-amit.kachhap@arm.com/\n\n... however at the time we didn't have an abundance of reasons to avoid\nsigning leaf functions as above (e.g. the BTI case), we had no hardware\nto make performance measurements, and it was reasoned that this gave\nsome level of protection against a limited set of code-reuse gadgets\nwhich would fall through to a RET. We documented this in commit:\n\n  717b938e22f8dbf0 (\"arm64: Document why we enable PAC support for leaf functions\")\n\nNotably, this was before we supported any forward-edge CFI scheme (e.g.\nArm BTI, or Clang CFI/kCFI), which would prevent jumping into the middle\nof a function.\n\nIn addition, even with signing forced for leaf functions, AUTIASP may be\nplaced before a number of instructions which might constitute such a\ngadget, e.g.\n\n| <user_regs_reset_single_step>:\n|        f9400022        ldr     x2, [x1]\n|        d503233f        paciasp\n|        d50323bf        autiasp\n|        f9408401        ldr     x1, [x0, #264]\n|        720b005f        tst     w2, #0x200000\n|        b26b0022        orr     x2, x1, #0x200000\n|        926af821        and     x1, x1, #0xffffffffffdfffff\n|        9a820021        csel    x1, x1, x2, eq  // eq = none\n|        f9008401        str     x1, [x0, #264]\n|        d65f03c0        ret\n\n| <fpsimd_cpu_dead>:\n|        2a0003e3        mov     w3, w0\n|        9000ff42        adrp    x2, ffff800009ffd000 <xen_dynamic_chip+0x48>\n|        9120e042        add     x2, x2, #0x838\n|        52800000        mov     w0, #0x0                        // #0\n|        d503233f        paciasp\n|        f000d041        adrp    x1, ffff800009a20000 <this_cpu_vector>\n|        d50323bf        autiasp\n|        9102c021        add     x1, x1, #0xb0\n|        f8635842        ldr     x2, [x2, w3, uxtw #3]\n|        f821685f        str     xzr, [x2, x1]\n|        d65f03c0        ret\n|        d503201f        nop\n\nSo generally, trying to use AUTIASP to detect such gadgetization is not\nrobust, and this is dealt with far better by forward-edge CFI (which is\ndesigned to prevent such cases). We should bite the bullet and stop\npretending that AUTIASP is a mitigation for such forward-edge\ngadgetization.\n\nFor the above reasons, this patch has the kernel consistently sign\nnon-leaf functions and avoid signing leaf functions.\n\nConsidering a defconfig v6.2-rc3 kernel built with LLVM 15.0.6:\n\n* The vmlinux is ~43KiB smaller:\n\n  | [mark@lakrids:~/src/linux]% ls -al vmlinux-*\n  | -rwxr-xr-x 1 mark mark 338547808 Jan 25 17:17 vmlinux-after\n  | -rwxr-xr-x 1 mark mark 338591472 Jan 25 17:22 vmlinux-before\n\n* The resulting Image is 64KiB smaller:\n\n  | [mark@lakrids:~/src/linux]% ls -al Image-*\n  | -rwxr-xr-x 1 mark mark 32702976 Jan 25 17:17 Image-after\n  | -rwxr-xr-x 1 mark mark 32768512 Jan 25 17:22 Image-before\n\n* There are ~400 fewer BTI gadgets:\n\n  | [mark@lakrids:~/src/linux]% usekorg 12.1.0 aarch64-linux-objdump -d vmlinux-before 2> /dev/null | grep -ow 'paciasp\\|bti\\sc\\?' | sort | uniq -c\n  |    1219 bti     c\n  |   61982 paciasp\n\n  | [mark@lakrids:~/src/linux]% usekorg 12.1.0 aarch64-linux-objdump -d vmlinux-after 2> /dev/null | grep -ow 'paciasp\\|bti\\sc\\?' | sort | uniq -c\n  |   10099 bti     c\n  |   52699 paciasp\n\n  Which is +8880 BTIs, and -9283 PACIASPs, for -403 unnecessary BTI\n  gadgets. While this is small relative to the total, distinguishing the\n  two cases will make it easier to analyse and reduce this set further\n  in future.\n\nSigned-off-by: Mark Rutland <mark.rutland@arm.com>\nReviewed-by: Ard Biesheuvel <ardb@kernel.org>\nReviewed-by: Mark Brown <broonie@kernel.org>\nCc: Amit Daniel Kachhap <amit.kachhap@arm.com>\nCc: Will Deacon <will@kernel.org>\nLink: https://lore.kernel.org/r/20230131105809.991288-3-mark.rutland@arm.com\nSigned-off-by: Catalin Marinas <catalin.marinas@arm.com>",
  "author_name": "Mark Rutland",
  "author_email": "mark.rutland@arm.com",
  "author_date": "Tue Jan 31 10:58:09 2023 +0000",
  "author_date_iso": "2023-01-31T10:58:09+00:00",
  "committer_name": "Catalin Marinas",
  "committer_email": "catalin.marinas@arm.com",
  "committer_date": "Tue Jan 31 16:03:37 2023 +0000",
  "committer_date_iso": "2023-01-31T16:03:37+00:00",
  "files_changed": [
    "arch/arm64/Makefile"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/arm64/Makefile",
      "insertions": 8,
      "deletions": 20
    }
  ],
  "total_insertions": 8,
  "total_deletions": 20,
  "total_changes": 28,
  "parents": [
    "1e249c41ea43157fc69e1496e3b4feea999f107a"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/arm64/Makefile",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}