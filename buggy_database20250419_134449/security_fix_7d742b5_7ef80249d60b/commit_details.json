{
  "hash": "7d742b509dd773f6ae2f32ffe3d2c0f3ea598a6d",
  "hash_short": "7d742b50",
  "subject": "openvswitch: meter: remove rate from the bucket size calculation",
  "body": "Implementation of meters supposed to be a classic token bucket with 2\ntypical parameters: rate and burst size.\n\nBurst size in this schema is the maximum number of bytes/packets that\ncould pass without being rate limited.\n\nRecent changes to userspace datapath made meter implementation to be\nin line with the kernel one, and this uncovered several issues.\n\nThe main problem is that maximum bucket size for unknown reason\naccounts not only burst size, but also the numerical value of rate.\nThis creates a lot of confusion around behavior of meters.\n\nFor example, if rate is configured as 1000 pps and burst size set to 1,\nthis should mean that meter will tolerate bursts of 1 packet at most,\ni.e. not a single packet above the rate should pass the meter.\nHowever, current implementation calculates maximum bucket size as\n(rate + burst size), so the effective bucket size will be 1001.  This\nmeans that first 1000 packets will not be rate limited and average\nrate might be twice as high as the configured rate.  This also makes\nit practically impossible to configure meter that will have burst size\nlower than the rate, which might be a desirable configuration if the\nrate is high.\n\nInability to configure low values of a burst size and overall inability\nfor a user to predict what will be a maximum and average rate from the\nconfigured parameters of a meter without looking at the OVS and kernel\ncode might be also classified as a security issue, because drop meters\nare frequently used as a way of protection from DoS attacks.\n\nThis change removes rate from the calculation of a bucket size, making\nit in line with the classic token bucket algorithm and essentially\nmaking the rate and burst tolerance being predictable from a users'\nperspective.\n\nSame change proposed for the userspace implementation.\n\nFixes: 96fbc13d7e77 (\"openvswitch: Add meter infrastructure\")\nSigned-off-by: Ilya Maximets <i.maximets@ovn.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "full_message": "openvswitch: meter: remove rate from the bucket size calculation\n\nImplementation of meters supposed to be a classic token bucket with 2\ntypical parameters: rate and burst size.\n\nBurst size in this schema is the maximum number of bytes/packets that\ncould pass without being rate limited.\n\nRecent changes to userspace datapath made meter implementation to be\nin line with the kernel one, and this uncovered several issues.\n\nThe main problem is that maximum bucket size for unknown reason\naccounts not only burst size, but also the numerical value of rate.\nThis creates a lot of confusion around behavior of meters.\n\nFor example, if rate is configured as 1000 pps and burst size set to 1,\nthis should mean that meter will tolerate bursts of 1 packet at most,\ni.e. not a single packet above the rate should pass the meter.\nHowever, current implementation calculates maximum bucket size as\n(rate + burst size), so the effective bucket size will be 1001.  This\nmeans that first 1000 packets will not be rate limited and average\nrate might be twice as high as the configured rate.  This also makes\nit practically impossible to configure meter that will have burst size\nlower than the rate, which might be a desirable configuration if the\nrate is high.\n\nInability to configure low values of a burst size and overall inability\nfor a user to predict what will be a maximum and average rate from the\nconfigured parameters of a meter without looking at the OVS and kernel\ncode might be also classified as a security issue, because drop meters\nare frequently used as a way of protection from DoS attacks.\n\nThis change removes rate from the calculation of a bucket size, making\nit in line with the classic token bucket algorithm and essentially\nmaking the rate and burst tolerance being predictable from a users'\nperspective.\n\nSame change proposed for the userspace implementation.\n\nFixes: 96fbc13d7e77 (\"openvswitch: Add meter infrastructure\")\nSigned-off-by: Ilya Maximets <i.maximets@ovn.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "author_name": "Ilya Maximets",
  "author_email": "i.maximets@ovn.org",
  "author_date": "Wed Apr 21 15:57:47 2021 +0200",
  "author_date_iso": "2021-04-21T15:57:47+02:00",
  "committer_name": "David S. Miller",
  "committer_email": "davem@davemloft.net",
  "committer_date": "Fri Apr 23 13:08:47 2021 -0700",
  "committer_date_iso": "2021-04-23T13:08:47-07:00",
  "files_changed": [
    "net/openvswitch/meter.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "net/openvswitch/meter.c",
      "insertions": 2,
      "deletions": 2
    }
  ],
  "total_insertions": 2,
  "total_deletions": 2,
  "total_changes": 4,
  "parents": [
    "bb556de79f0a9e647e8febe15786ee68483fa67b"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "security issue"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "net/openvswitch/meter.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}