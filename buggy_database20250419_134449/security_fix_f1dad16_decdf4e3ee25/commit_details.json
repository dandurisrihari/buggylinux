{
  "hash": "f1dad166e88a5ddca0acf8f11dea0e2bd92d8bf3",
  "hash_short": "f1dad166",
  "subject": "Avoid potential NULL dereference in unregister_sysctl_table",
  "body": "register_sysctl_table() can return NULL sometimes, e.g.  when kmalloc()\nreturns NULL or when sysctl check fails.\n\nI've also noticed, that many (most?) code in the kernel doesn't check for\nthe return value from register_sysctl_table() and later simply calls the\nunregister_sysctl_table() with potentially NULL argument.\n\nThis is unlikely on a common kernel configuration, but in case we're\ndealing with modules and/or fault-injection support, there's a slight\npossibility of an OOPS.\n\nChanging all the users to check for return code from the registering does\nnot look like a good solution - there are too many code doing this and\nfailure in sysctl tables registration is not a good reason to abort module\nloading (in most of the cases).\n\nSo I think, that we can just have this check in unregister_sysctl_table\njust to avoid accidental OOPS-es (actually, the unregister_sysctl_table()\ndid exactly this, before the start_unregistering() appeared).\n\nSigned-off-by: Pavel Emelyanov <xemul@openvz.org>\nCc: \"Eric W. Biederman\" <ebiederm@xmission.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "full_message": "Avoid potential NULL dereference in unregister_sysctl_table\n\nregister_sysctl_table() can return NULL sometimes, e.g.  when kmalloc()\nreturns NULL or when sysctl check fails.\n\nI've also noticed, that many (most?) code in the kernel doesn't check for\nthe return value from register_sysctl_table() and later simply calls the\nunregister_sysctl_table() with potentially NULL argument.\n\nThis is unlikely on a common kernel configuration, but in case we're\ndealing with modules and/or fault-injection support, there's a slight\npossibility of an OOPS.\n\nChanging all the users to check for return code from the registering does\nnot look like a good solution - there are too many code doing this and\nfailure in sysctl tables registration is not a good reason to abort module\nloading (in most of the cases).\n\nSo I think, that we can just have this check in unregister_sysctl_table\njust to avoid accidental OOPS-es (actually, the unregister_sysctl_table()\ndid exactly this, before the start_unregistering() appeared).\n\nSigned-off-by: Pavel Emelyanov <xemul@openvz.org>\nCc: \"Eric W. Biederman\" <ebiederm@xmission.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "author_name": "Pavel Emelyanov",
  "author_email": "xemul@openvz.org",
  "author_date": "Tue Dec 4 23:45:24 2007 -0800",
  "author_date_iso": "2007-12-04T23:45:24-08:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@woody.linux-foundation.org",
  "committer_date": "Wed Dec 5 09:21:20 2007 -0800",
  "committer_date_iso": "2007-12-05T09:21:20-08:00",
  "files_changed": [
    "kernel/sysctl.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "kernel/sysctl.c",
      "insertions": 4,
      "deletions": 0
    }
  ],
  "total_insertions": 4,
  "total_deletions": 0,
  "total_changes": 4,
  "parents": [
    "092e1fdaf35126475aef0dc70f4a2ce4f2f43052"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v2.6.24",
    "v2.6.24-rc5",
    "v2.6.24-rc6",
    "v2.6.24-rc7",
    "v2.6.24-rc8",
    "v2.6.25",
    "v2.6.25-rc1",
    "v2.6.25-rc2",
    "v2.6.25-rc3",
    "v2.6.25-rc4"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "kernel/sysctl.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}