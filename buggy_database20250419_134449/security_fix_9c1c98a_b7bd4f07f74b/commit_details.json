{
  "hash": "9c1c98a3bb7b7593b60264b9a07e001e68b46697",
  "hash_short": "9c1c98a3",
  "subject": "mac80211: Send EAPOL frames at lowest rate",
  "body": "The current minstrel_ht rate control behavior is somewhat optimistic in\ntrying to find optimum TX rate. While this is usually fine for normal\nData frames, there are cases where a more conservative set of retry\nparameters would be beneficial to make the connection more robust.\n\nEAPOL frames are critical to the authentication and especially the\nEAPOL-Key message 4/4 (the last message in the 4-way handshake) is\nimportant to get through to the AP. If that message is lost, the only\nrecovery mechanism in many cases is to reassociate with the AP and start\nfrom scratch. This can often be avoided by trying to send the frame with\nmore conservative rate and/or with more link layer retries.\n\nIn most cases, minstrel_ht is currently using the initial EAPOL-Key\nframes for probing higher rates and this results in only five link layer\ntransmission attempts (one at high(ish) MCS and four at MCS0). While\nthis works with most APs, it looks like there are some deployed APs that\nmay have issues with the EAPOL frames using HT MCS immediately after\nassociation. Similarly, there may be issues in cases where the signal\nstrength or radio environment is not good enough to be able to get\nframes through even at couple of MCS 0 tries.\n\nThe best approach for this would likely to be to reduce the TX rate for\nthe last rate (3rd rate parameter in the set) to a low basic rate (say,\n6 Mbps on 5 GHz and 2 or 5.5 Mbps on 2.4 GHz), but doing that cleanly\nrequires some more effort. For now, we can start with a simple one-liner\nthat forces the minimum rate to be used for EAPOL frames similarly how\nthe TX rate is selected for the IEEE 802.11 Management frames. This does\nresult in a small extra latency added to the cases where the AP would be\nable to receive the higher rate, but taken into account how small number\nof EAPOL frames are used, this is likely to be insignificant. A future\noptimization in the minstrel_ht design can also allow this patch to be\nreverted to get back to the more optimized initial TX rate.\n\nIt should also be noted that many drivers that do not use minstrel as\nthe rate control algorithm are already doing similar workarounds by\nforcing the lowest TX rate to be used for EAPOL frames.\n\nCc: stable@vger.kernel.org\nReported-by: Linus Torvalds <torvalds@linux-foundation.org>\nTested-by: Linus Torvalds <torvalds@linux-foundation.org>\nSigned-off-by: Jouni Malinen <jouni@qca.qualcomm.com>\nSigned-off-by: Johannes Berg <johannes.berg@intel.com>",
  "full_message": "mac80211: Send EAPOL frames at lowest rate\n\nThe current minstrel_ht rate control behavior is somewhat optimistic in\ntrying to find optimum TX rate. While this is usually fine for normal\nData frames, there are cases where a more conservative set of retry\nparameters would be beneficial to make the connection more robust.\n\nEAPOL frames are critical to the authentication and especially the\nEAPOL-Key message 4/4 (the last message in the 4-way handshake) is\nimportant to get through to the AP. If that message is lost, the only\nrecovery mechanism in many cases is to reassociate with the AP and start\nfrom scratch. This can often be avoided by trying to send the frame with\nmore conservative rate and/or with more link layer retries.\n\nIn most cases, minstrel_ht is currently using the initial EAPOL-Key\nframes for probing higher rates and this results in only five link layer\ntransmission attempts (one at high(ish) MCS and four at MCS0). While\nthis works with most APs, it looks like there are some deployed APs that\nmay have issues with the EAPOL frames using HT MCS immediately after\nassociation. Similarly, there may be issues in cases where the signal\nstrength or radio environment is not good enough to be able to get\nframes through even at couple of MCS 0 tries.\n\nThe best approach for this would likely to be to reduce the TX rate for\nthe last rate (3rd rate parameter in the set) to a low basic rate (say,\n6 Mbps on 5 GHz and 2 or 5.5 Mbps on 2.4 GHz), but doing that cleanly\nrequires some more effort. For now, we can start with a simple one-liner\nthat forces the minimum rate to be used for EAPOL frames similarly how\nthe TX rate is selected for the IEEE 802.11 Management frames. This does\nresult in a small extra latency added to the cases where the AP would be\nable to receive the higher rate, but taken into account how small number\nof EAPOL frames are used, this is likely to be insignificant. A future\noptimization in the minstrel_ht design can also allow this patch to be\nreverted to get back to the more optimized initial TX rate.\n\nIt should also be noted that many drivers that do not use minstrel as\nthe rate control algorithm are already doing similar workarounds by\nforcing the lowest TX rate to be used for EAPOL frames.\n\nCc: stable@vger.kernel.org\nReported-by: Linus Torvalds <torvalds@linux-foundation.org>\nTested-by: Linus Torvalds <torvalds@linux-foundation.org>\nSigned-off-by: Jouni Malinen <jouni@qca.qualcomm.com>\nSigned-off-by: Johannes Berg <johannes.berg@intel.com>",
  "author_name": "Jouni Malinen",
  "author_email": "jouni@qca.qualcomm.com",
  "author_date": "Thu Feb 26 15:50:50 2015 +0200",
  "author_date_iso": "2015-02-26T15:50:50+02:00",
  "committer_name": "Johannes Berg",
  "committer_email": "johannes.berg@intel.com",
  "committer_date": "Thu Feb 26 21:03:06 2015 +0100",
  "committer_date_iso": "2015-02-26T21:03:06+01:00",
  "files_changed": [
    "net/mac80211/tx.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "net/mac80211/tx.c",
      "insertions": 1,
      "deletions": 0
    }
  ],
  "total_insertions": 1,
  "total_deletions": 0,
  "total_changes": 1,
  "parents": [
    "17dce15801d5602719936045a7e84ff7dc6b6da2"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.0",
    "v4.0-rc3",
    "v4.0-rc4",
    "v4.0-rc5",
    "v4.0-rc6",
    "v4.0-rc7",
    "v4.1",
    "v4.1-rc1",
    "v4.1-rc2",
    "v4.1-rc3"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "net/mac80211/tx.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}