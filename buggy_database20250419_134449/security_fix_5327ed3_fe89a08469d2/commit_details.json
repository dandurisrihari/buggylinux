{
  "hash": "5327ed3d44b754f5cc51d5b3f18e442eaebacff5",
  "hash_short": "5327ed3d",
  "subject": "bpf: verifier: mark verified-insn with sub-register zext flag",
  "body": "eBPF ISA specification requires high 32-bit cleared when low 32-bit\nsub-register is written. This applies to destination register of ALU32 etc.\nJIT back-ends must guarantee this semantic when doing code-gen. x86_64 and\nAArch64 ISA has the same semantics, so the corresponding JIT back-end\ndoesn't need to do extra work.\n\nHowever, 32-bit arches (arm, x86, nfp etc.) and some other 64-bit arches\n(PowerPC, SPARC etc) need to do explicit zero extension to meet this\nrequirement, otherwise code like the following will fail.\n\n  u64_value = (u64) u32_value\n  ... other uses of u64_value\n\nThis is because compiler could exploit the semantic described above and\nsave those zero extensions for extending u32_value to u64_value, these JIT\nback-ends are expected to guarantee this through inserting extra zero\nextensions which however could be a significant increase on the code size.\nSome benchmarks show there could be ~40% sub-register writes out of total\ninsns, meaning at least ~40% extra code-gen.\n\nOne observation is these extra zero extensions are not always necessary.\nTake above code snippet for example, it is possible u32_value will never be\ncasted into a u64, the value of high 32-bit of u32_value then could be\nignored and extra zero extension could be eliminated.\n\nThis patch implements this idea, insns defining sub-registers will be\nmarked when the high 32-bit of the defined sub-register matters. For\nthose unmarked insns, it is safe to eliminate high 32-bit clearnace for\nthem.\n\nAlgo:\n - Split read flags into READ32 and READ64.\n\n - Record index of insn that does sub-register write. Keep the index inside\n   reg state and update it during verifier insn walking.\n\n - A full register read on a sub-register marks its definition insn as\n   needing zero extension on dst register.\n\n   A new sub-register write overrides the old one.\n\n - When propagating read64 during path pruning, also mark any insn defining\n   a sub-register that is read in the pruned path as full-register.\n\nReviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>\nSigned-off-by: Jiong Wang <jiong.wang@netronome.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>",
  "full_message": "bpf: verifier: mark verified-insn with sub-register zext flag\n\neBPF ISA specification requires high 32-bit cleared when low 32-bit\nsub-register is written. This applies to destination register of ALU32 etc.\nJIT back-ends must guarantee this semantic when doing code-gen. x86_64 and\nAArch64 ISA has the same semantics, so the corresponding JIT back-end\ndoesn't need to do extra work.\n\nHowever, 32-bit arches (arm, x86, nfp etc.) and some other 64-bit arches\n(PowerPC, SPARC etc) need to do explicit zero extension to meet this\nrequirement, otherwise code like the following will fail.\n\n  u64_value = (u64) u32_value\n  ... other uses of u64_value\n\nThis is because compiler could exploit the semantic described above and\nsave those zero extensions for extending u32_value to u64_value, these JIT\nback-ends are expected to guarantee this through inserting extra zero\nextensions which however could be a significant increase on the code size.\nSome benchmarks show there could be ~40% sub-register writes out of total\ninsns, meaning at least ~40% extra code-gen.\n\nOne observation is these extra zero extensions are not always necessary.\nTake above code snippet for example, it is possible u32_value will never be\ncasted into a u64, the value of high 32-bit of u32_value then could be\nignored and extra zero extension could be eliminated.\n\nThis patch implements this idea, insns defining sub-registers will be\nmarked when the high 32-bit of the defined sub-register matters. For\nthose unmarked insns, it is safe to eliminate high 32-bit clearnace for\nthem.\n\nAlgo:\n - Split read flags into READ32 and READ64.\n\n - Record index of insn that does sub-register write. Keep the index inside\n   reg state and update it during verifier insn walking.\n\n - A full register read on a sub-register marks its definition insn as\n   needing zero extension on dst register.\n\n   A new sub-register write overrides the old one.\n\n - When propagating read64 during path pruning, also mark any insn defining\n   a sub-register that is read in the pruned path as full-register.\n\nReviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>\nSigned-off-by: Jiong Wang <jiong.wang@netronome.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>",
  "author_name": "Jiong Wang",
  "author_email": "jiong.wang@netronome.com",
  "author_date": "Fri May 24 23:25:12 2019 +0100",
  "author_date_iso": "2019-05-24T23:25:12+01:00",
  "committer_name": "Alexei Starovoitov",
  "committer_email": "ast@kernel.org",
  "committer_date": "Fri May 24 18:58:37 2019 -0700",
  "committer_date_iso": "2019-05-24T18:58:37-07:00",
  "files_changed": [
    "include/linux/bpf_verifier.h",
    "kernel/bpf/verifier.c"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "include/linux/bpf_verifier.h",
      "insertions": 11,
      "deletions": 3
    },
    {
      "file": "kernel/bpf/verifier.c",
      "insertions": 160,
      "deletions": 13
    }
  ],
  "total_insertions": 171,
  "total_deletions": 16,
  "total_changes": 187,
  "parents": [
    "a08acd118d5ca7f6e745ef81cfc6cbadacb56462"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.3",
    "v5.3-rc1",
    "v5.3-rc2",
    "v5.3-rc3",
    "v5.3-rc4",
    "v5.3-rc5",
    "v5.3-rc6",
    "v5.3-rc7",
    "v5.3-rc8",
    "v5.4"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/linux/bpf_verifier.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/bpf/verifier.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}