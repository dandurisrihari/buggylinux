{
  "hash": "b5cb15d9372abc9adc4e844c0c1bf594ca6a7695",
  "hash_short": "b5cb15d9",
  "subject": "usercopy: Allow boot cmdline disabling of hardening",
  "body": "Enabling HARDENED_USERCOPY may cause measurable regressions in networking\nperformance: up to 8% under UDP flood.\n\nI ran a small packet UDP flood using pktgen vs. a host b2b connected. On\nthe receiver side the UDP packets are processed by a simple user space\nprocess that just reads and drops them:\n\nhttps://github.com/netoptimizer/network-testing/blob/master/src/udp_sink.c\n\nNot very useful from a functional PoV, but it helps to pin-point\nbottlenecks in the networking stack.\n\nWhen running a kernel with CONFIG_HARDENED_USERCOPY=y, I see a 5-8%\nregression in the receive tput, compared to the same kernel without this\noption enabled.\n\nWith CONFIG_HARDENED_USERCOPY=y, perf shows ~6% of CPU time spent\ncumulatively in __check_object_size (~4%) and __virt_addr_valid (~2%).\n\nThe call-chain is:\n\n__GI___libc_recvfrom\nentry_SYSCALL_64_after_hwframe\ndo_syscall_64\n__x64_sys_recvfrom\n__sys_recvfrom\ninet_recvmsg\nudp_recvmsg\n__check_object_size\n\nudp_recvmsg() actually calls copy_to_iter() (inlined) and the latters\ncalls check_copy_size() (again, inlined).\n\nA generic distro may want to enable HARDENED_USERCOPY in their default\nkernel config, but at the same time, such distro may want to be able to\navoid the performance penalties in with the default configuration and\ndisable the stricter check on a per-boot basis.\n\nThis change adds a boot parameter that conditionally disables\nHARDENED_USERCOPY via \"hardened_usercopy=off\".\n\nSigned-off-by: Chris von Recklinghausen <crecklin@redhat.com>\nSigned-off-by: Kees Cook <keescook@chromium.org>",
  "full_message": "usercopy: Allow boot cmdline disabling of hardening\n\nEnabling HARDENED_USERCOPY may cause measurable regressions in networking\nperformance: up to 8% under UDP flood.\n\nI ran a small packet UDP flood using pktgen vs. a host b2b connected. On\nthe receiver side the UDP packets are processed by a simple user space\nprocess that just reads and drops them:\n\nhttps://github.com/netoptimizer/network-testing/blob/master/src/udp_sink.c\n\nNot very useful from a functional PoV, but it helps to pin-point\nbottlenecks in the networking stack.\n\nWhen running a kernel with CONFIG_HARDENED_USERCOPY=y, I see a 5-8%\nregression in the receive tput, compared to the same kernel without this\noption enabled.\n\nWith CONFIG_HARDENED_USERCOPY=y, perf shows ~6% of CPU time spent\ncumulatively in __check_object_size (~4%) and __virt_addr_valid (~2%).\n\nThe call-chain is:\n\n__GI___libc_recvfrom\nentry_SYSCALL_64_after_hwframe\ndo_syscall_64\n__x64_sys_recvfrom\n__sys_recvfrom\ninet_recvmsg\nudp_recvmsg\n__check_object_size\n\nudp_recvmsg() actually calls copy_to_iter() (inlined) and the latters\ncalls check_copy_size() (again, inlined).\n\nA generic distro may want to enable HARDENED_USERCOPY in their default\nkernel config, but at the same time, such distro may want to be able to\navoid the performance penalties in with the default configuration and\ndisable the stricter check on a per-boot basis.\n\nThis change adds a boot parameter that conditionally disables\nHARDENED_USERCOPY via \"hardened_usercopy=off\".\n\nSigned-off-by: Chris von Recklinghausen <crecklin@redhat.com>\nSigned-off-by: Kees Cook <keescook@chromium.org>",
  "author_name": "Chris von Recklinghausen",
  "author_email": "crecklin@redhat.com",
  "author_date": "Tue Jul 3 15:43:08 2018 -0400",
  "author_date_iso": "2018-07-03T15:43:08-04:00",
  "committer_name": "Kees Cook",
  "committer_email": "keescook@chromium.org",
  "committer_date": "Wed Jul 4 08:04:52 2018 -0700",
  "committer_date_iso": "2018-07-04T08:04:52-07:00",
  "files_changed": [
    "Documentation/admin-guide/kernel-parameters.txt",
    "include/linux/jump_label.h",
    "mm/usercopy.c"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "Documentation/admin-guide/kernel-parameters.txt",
      "insertions": 11,
      "deletions": 0
    },
    {
      "file": "include/linux/jump_label.h",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "mm/usercopy.c",
      "insertions": 25,
      "deletions": 0
    }
  ],
  "total_insertions": 42,
  "total_deletions": 0,
  "total_changes": 42,
  "parents": [
    "6aa56f44253a6dd802e45d8ab1b48847feaf063a"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.19",
    "v4.19-rc1",
    "v4.19-rc2",
    "v4.19-rc3",
    "v4.19-rc4",
    "v4.19-rc5",
    "v4.19-rc6",
    "v4.19-rc7",
    "v4.19-rc8",
    "v4.20"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "Documentation/admin-guide/kernel-parameters.txt",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/jump_label.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/usercopy.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}