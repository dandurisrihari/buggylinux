{
  "hash": "ba62319a42c50e6254e98b3f316464fac8e77968",
  "hash_short": "ba62319a",
  "subject": "regulator: core: fix resource leak in regulator_register()",
  "body": "I got some resource leak reports while doing fault injection test:\n\n  OF: ERROR: memory leak, expected refcount 1 instead of 100,\n  of_node_get()/of_node_put() unbalanced - destroy cset entry:\n  attach overlay node /i2c/pmic@64/regulators/buck1\n\nunreferenced object 0xffff88810deea000 (size 512):\n  comm \"490-i2c-rt5190a\", pid 253, jiffies 4294859840 (age 5061.046s)\n  hex dump (first 32 bytes):\n    00 00 00 00 ad 4e ad de ff ff ff ff 00 00 00 00  .....N..........\n    ff ff ff ff ff ff ff ff a0 1e 00 a1 ff ff ff ff  ................\n  backtrace:\n    [<00000000d78541e2>] kmalloc_trace+0x21/0x110\n    [<00000000b343d153>] device_private_init+0x32/0xd0\n    [<00000000be1f0c70>] device_add+0xb2d/0x1030\n    [<00000000e3e6344d>] regulator_register+0xaf2/0x12a0\n    [<00000000e2f5e754>] devm_regulator_register+0x57/0xb0\n    [<000000008b898197>] rt5190a_probe+0x52a/0x861 [rt5190a_regulator]\n\nunreferenced object 0xffff88810b617b80 (size 32):\n  comm \"490-i2c-rt5190a\", pid 253, jiffies 4294859904 (age 5060.983s)\n  hex dump (first 32 bytes):\n    72 65 67 75 6c 61 74 6f 72 2e 32 38 36 38 2d 53  regulator.2868-S\n    55 50 50 4c 59 00 ff ff 29 00 00 00 2b 00 00 00  UPPLY...)...+...\n  backtrace:\n    [<000000009da9280d>] __kmalloc_node_track_caller+0x44/0x1b0\n    [<0000000025c6a4e5>] kstrdup+0x3a/0x70\n    [<00000000790efb69>] create_regulator+0xc0/0x4e0\n    [<0000000005ed203a>] regulator_resolve_supply+0x2d4/0x440\n    [<0000000045796214>] regulator_register+0x10b3/0x12a0\n    [<00000000e2f5e754>] devm_regulator_register+0x57/0xb0\n    [<000000008b898197>] rt5190a_probe+0x52a/0x861 [rt5190a_regulator]\n\nAfter calling regulator_resolve_supply(), the 'rdev->supply' is set\nby set_supply(), after this set, in the error path, the resources\nneed be released, so call regulator_put() to avoid the leaks.\n\nFixes: aea6cb99703e (\"regulator: resolve supply after creating regulator\")\nFixes: 8a866d527ac0 (\"regulator: core: Resolve supply name earlier to prevent double-init\")\nSigned-off-by: Yang Yingliang <yangyingliang@huawei.com>\nLink: https://lore.kernel.org/r/20221202025111.496402-1-yangyingliang@huawei.com\nSigned-off-by: Mark Brown <broonie@kernel.org>",
  "full_message": "regulator: core: fix resource leak in regulator_register()\n\nI got some resource leak reports while doing fault injection test:\n\n  OF: ERROR: memory leak, expected refcount 1 instead of 100,\n  of_node_get()/of_node_put() unbalanced - destroy cset entry:\n  attach overlay node /i2c/pmic@64/regulators/buck1\n\nunreferenced object 0xffff88810deea000 (size 512):\n  comm \"490-i2c-rt5190a\", pid 253, jiffies 4294859840 (age 5061.046s)\n  hex dump (first 32 bytes):\n    00 00 00 00 ad 4e ad de ff ff ff ff 00 00 00 00  .....N..........\n    ff ff ff ff ff ff ff ff a0 1e 00 a1 ff ff ff ff  ................\n  backtrace:\n    [<00000000d78541e2>] kmalloc_trace+0x21/0x110\n    [<00000000b343d153>] device_private_init+0x32/0xd0\n    [<00000000be1f0c70>] device_add+0xb2d/0x1030\n    [<00000000e3e6344d>] regulator_register+0xaf2/0x12a0\n    [<00000000e2f5e754>] devm_regulator_register+0x57/0xb0\n    [<000000008b898197>] rt5190a_probe+0x52a/0x861 [rt5190a_regulator]\n\nunreferenced object 0xffff88810b617b80 (size 32):\n  comm \"490-i2c-rt5190a\", pid 253, jiffies 4294859904 (age 5060.983s)\n  hex dump (first 32 bytes):\n    72 65 67 75 6c 61 74 6f 72 2e 32 38 36 38 2d 53  regulator.2868-S\n    55 50 50 4c 59 00 ff ff 29 00 00 00 2b 00 00 00  UPPLY...)...+...\n  backtrace:\n    [<000000009da9280d>] __kmalloc_node_track_caller+0x44/0x1b0\n    [<0000000025c6a4e5>] kstrdup+0x3a/0x70\n    [<00000000790efb69>] create_regulator+0xc0/0x4e0\n    [<0000000005ed203a>] regulator_resolve_supply+0x2d4/0x440\n    [<0000000045796214>] regulator_register+0x10b3/0x12a0\n    [<00000000e2f5e754>] devm_regulator_register+0x57/0xb0\n    [<000000008b898197>] rt5190a_probe+0x52a/0x861 [rt5190a_regulator]\n\nAfter calling regulator_resolve_supply(), the 'rdev->supply' is set\nby set_supply(), after this set, in the error path, the resources\nneed be released, so call regulator_put() to avoid the leaks.\n\nFixes: aea6cb99703e (\"regulator: resolve supply after creating regulator\")\nFixes: 8a866d527ac0 (\"regulator: core: Resolve supply name earlier to prevent double-init\")\nSigned-off-by: Yang Yingliang <yangyingliang@huawei.com>\nLink: https://lore.kernel.org/r/20221202025111.496402-1-yangyingliang@huawei.com\nSigned-off-by: Mark Brown <broonie@kernel.org>",
  "author_name": "Yang Yingliang",
  "author_email": "yangyingliang@huawei.com",
  "author_date": "Fri Dec 2 10:51:11 2022 +0800",
  "author_date_iso": "2022-12-02T10:51:11+08:00",
  "committer_name": "Mark Brown",
  "committer_email": "broonie@kernel.org",
  "committer_date": "Fri Dec 2 11:55:58 2022 +0000",
  "committer_date_iso": "2022-12-02T11:55:58+00:00",
  "files_changed": [
    "drivers/regulator/core.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "drivers/regulator/core.c",
      "insertions": 1,
      "deletions": 0
    }
  ],
  "total_insertions": 1,
  "total_deletions": 0,
  "total_changes": 1,
  "parents": [
    "da46ee19cbd8344d6860816b4827a7ce95764867"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/regulator/core.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}