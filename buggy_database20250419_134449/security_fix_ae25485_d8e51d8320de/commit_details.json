{
  "hash": "ae254858ce0745aba25d107159b580ab5fdada5b",
  "hash_short": "ae254858",
  "subject": "selinux: introduce an initial SID for early boot processes",
  "body": "Currently, SELinux doesn't allow distinguishing between kernel threads\nand userspace processes that are started before the policy is first\nloaded - both get the label corresponding to the kernel SID. The only\nway a process that persists from early boot can get a meaningful label\nis by doing a voluntary dyntransition or re-executing itself.\n\nReusing the kernel label for userspace processes is problematic for\nseveral reasons:\n1. The kernel is considered to be a privileged domain and generally\n   needs to have a wide range of permissions allowed to work correctly,\n   which prevents the policy writer from effectively hardening against\n   early boot processes that might remain running unintentionally after\n   the policy is loaded (they represent a potential extra attack surface\n   that should be mitigated).\n2. Despite the kernel being treated as a privileged domain, the policy\n   writer may want to impose certain special limitations on kernel\n   threads that may conflict with the requirements of intentional early\n   boot processes. For example, it is a good hardening practice to limit\n   what executables the kernel can execute as usermode helpers and to\n   confine the resulting usermode helper processes. However, a\n   (legitimate) process surviving from early boot may need to execute a\n   different set of executables.\n3. As currently implemented, overlayfs remembers the security context of\n   the process that created an overlayfs mount and uses it to bound\n   subsequent operations on files using this context. If an overlayfs\n   mount is created before the SELinux policy is loaded, these \"mounter\"\n   checks are made against the kernel context, which may clash with\n   restrictions on the kernel domain (see 2.).\n\nTo resolve this, introduce a new initial SID (reusing the slot of the\nformer \"init\" initial SID) that will be assigned to any userspace\nprocess started before the policy is first loaded. This is easy to do,\nas we can simply label any process that goes through the\nbprm_creds_for_exec LSM hook with the new init-SID instead of\npropagating the kernel SID from the parent.\n\nTo provide backwards compatibility for existing policies that are\nunaware of this new semantic of the \"init\" initial SID, introduce a new\npolicy capability \"userspace_initial_context\" and set the \"init\" SID to\nthe same context as the \"kernel\" SID unless this capability is set by\nthe policy.\n\nAnother small backwards compatibility measure is needed in\nsecurity_sid_to_context_core() for before the initial SELinux policy\nload - see the code comment for explanation.\n\nSigned-off-by: Ondrej Mosnacek <omosnace@redhat.com>\nReviewed-by: Stephen Smalley <stephen.smalley.work@gmail.com>\n[PM: edited comments based on feedback/discussion]\nSigned-off-by: Paul Moore <paul@paul-moore.com>",
  "full_message": "selinux: introduce an initial SID for early boot processes\n\nCurrently, SELinux doesn't allow distinguishing between kernel threads\nand userspace processes that are started before the policy is first\nloaded - both get the label corresponding to the kernel SID. The only\nway a process that persists from early boot can get a meaningful label\nis by doing a voluntary dyntransition or re-executing itself.\n\nReusing the kernel label for userspace processes is problematic for\nseveral reasons:\n1. The kernel is considered to be a privileged domain and generally\n   needs to have a wide range of permissions allowed to work correctly,\n   which prevents the policy writer from effectively hardening against\n   early boot processes that might remain running unintentionally after\n   the policy is loaded (they represent a potential extra attack surface\n   that should be mitigated).\n2. Despite the kernel being treated as a privileged domain, the policy\n   writer may want to impose certain special limitations on kernel\n   threads that may conflict with the requirements of intentional early\n   boot processes. For example, it is a good hardening practice to limit\n   what executables the kernel can execute as usermode helpers and to\n   confine the resulting usermode helper processes. However, a\n   (legitimate) process surviving from early boot may need to execute a\n   different set of executables.\n3. As currently implemented, overlayfs remembers the security context of\n   the process that created an overlayfs mount and uses it to bound\n   subsequent operations on files using this context. If an overlayfs\n   mount is created before the SELinux policy is loaded, these \"mounter\"\n   checks are made against the kernel context, which may clash with\n   restrictions on the kernel domain (see 2.).\n\nTo resolve this, introduce a new initial SID (reusing the slot of the\nformer \"init\" initial SID) that will be assigned to any userspace\nprocess started before the policy is first loaded. This is easy to do,\nas we can simply label any process that goes through the\nbprm_creds_for_exec LSM hook with the new init-SID instead of\npropagating the kernel SID from the parent.\n\nTo provide backwards compatibility for existing policies that are\nunaware of this new semantic of the \"init\" initial SID, introduce a new\npolicy capability \"userspace_initial_context\" and set the \"init\" SID to\nthe same context as the \"kernel\" SID unless this capability is set by\nthe policy.\n\nAnother small backwards compatibility measure is needed in\nsecurity_sid_to_context_core() for before the initial SELinux policy\nload - see the code comment for explanation.\n\nSigned-off-by: Ondrej Mosnacek <omosnace@redhat.com>\nReviewed-by: Stephen Smalley <stephen.smalley.work@gmail.com>\n[PM: edited comments based on feedback/discussion]\nSigned-off-by: Paul Moore <paul@paul-moore.com>",
  "author_name": "Ondrej Mosnacek",
  "author_email": "omosnace@redhat.com",
  "author_date": "Tue Nov 14 16:51:16 2023 +0100",
  "author_date_iso": "2023-11-14T16:51:16+01:00",
  "committer_name": "Paul Moore",
  "committer_email": "paul@paul-moore.com",
  "committer_date": "Tue Nov 21 18:39:59 2023 -0500",
  "committer_date_iso": "2023-11-21T18:39:59-05:00",
  "files_changed": [
    "security/selinux/hooks.c",
    "security/selinux/include/initial_sid_to_string.h",
    "security/selinux/include/policycap.h",
    "security/selinux/include/policycap_names.h",
    "security/selinux/include/security.h",
    "security/selinux/ss/policydb.c",
    "security/selinux/ss/services.c"
  ],
  "files_changed_count": 7,
  "stats": [
    {
      "file": "security/selinux/hooks.c",
      "insertions": 28,
      "deletions": 0
    },
    {
      "file": "security/selinux/include/initial_sid_to_string.h",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "security/selinux/include/policycap.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "security/selinux/include/policycap_names.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "security/selinux/include/security.h",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "security/selinux/ss/policydb.c",
      "insertions": 27,
      "deletions": 0
    },
    {
      "file": "security/selinux/ss/services.c",
      "insertions": 12,
      "deletions": 1
    }
  ],
  "total_insertions": 76,
  "total_deletions": 2,
  "total_changes": 78,
  "parents": [
    "1712ed62153125e62d4d1e0ca68d35387e6a6993"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "security/selinux/include/policycap_names.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "security/selinux/include/policycap.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "security/selinux/include/initial_sid_to_string.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "security/selinux/include/security.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "security/selinux/hooks.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "security/selinux/ss/policydb.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "security/selinux/ss/services.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}