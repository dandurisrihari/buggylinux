{
  "hash": "4e7c22d447bb6d7e37bfe39ff658486ae78e8d77",
  "hash_short": "4e7c22d4",
  "subject": "x86, mm/ASLR: Fix stack randomization on 64-bit systems",
  "body": "The issue is that the stack for processes is not properly randomized on\n64 bit architectures due to an integer overflow.\n\nThe affected function is randomize_stack_top() in file\n\"fs/binfmt_elf.c\":\n\n  static unsigned long randomize_stack_top(unsigned long stack_top)\n  {\n           unsigned int random_variable = 0;\n\n           if ((current->flags & PF_RANDOMIZE) &&\n                   !(current->personality & ADDR_NO_RANDOMIZE)) {\n                   random_variable = get_random_int() & STACK_RND_MASK;\n                   random_variable <<= PAGE_SHIFT;\n           }\n           return PAGE_ALIGN(stack_top) + random_variable;\n           return PAGE_ALIGN(stack_top) - random_variable;\n  }\n\nNote that, it declares the \"random_variable\" variable as \"unsigned int\".\nSince the result of the shifting operation between STACK_RND_MASK (which\nis 0x3fffff on x86_64, 22 bits) and PAGE_SHIFT (which is 12 on x86_64):\n\n\t  random_variable <<= PAGE_SHIFT;\n\nthen the two leftmost bits are dropped when storing the result in the\n\"random_variable\". This variable shall be at least 34 bits long to hold\nthe (22+12) result.\n\nThese two dropped bits have an impact on the entropy of process stack.\nConcretely, the total stack entropy is reduced by four: from 2^28 to\n2^30 (One fourth of expected entropy).\n\nThis patch restores back the entropy by correcting the types involved\nin the operations in the functions randomize_stack_top() and\nstack_maxrandom_size().\n\nThe successful fix can be tested with:\n\n  $ for i in `seq 1 10`; do cat /proc/self/maps | grep stack; done\n  7ffeda566000-7ffeda587000 rw-p 00000000 00:00 0                          [stack]\n  7fff5a332000-7fff5a353000 rw-p 00000000 00:00 0                          [stack]\n  7ffcdb7a1000-7ffcdb7c2000 rw-p 00000000 00:00 0                          [stack]\n  7ffd5e2c4000-7ffd5e2e5000 rw-p 00000000 00:00 0                          [stack]\n  ...\n\nOnce corrected, the leading bytes should be between 7ffc and 7fff,\nrather than always being 7fff.\n\nSigned-off-by: Hector Marco-Gisbert <hecmargi@upv.es>\nSigned-off-by: Ismael Ripoll <iripoll@upv.es>\n[ Rebased, fixed 80 char bugs, cleaned up commit message, added test example and CVE ]\nSigned-off-by: Kees Cook <keescook@chromium.org>\nCc: <stable@vger.kernel.org>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Al Viro <viro@zeniv.linux.org.uk>\nFixes: CVE-2015-1593\nLink: http://lkml.kernel.org/r/20150214173350.GA18393@www.outflux.net\nSigned-off-by: Borislav Petkov <bp@suse.de>",
  "full_message": "x86, mm/ASLR: Fix stack randomization on 64-bit systems\n\nThe issue is that the stack for processes is not properly randomized on\n64 bit architectures due to an integer overflow.\n\nThe affected function is randomize_stack_top() in file\n\"fs/binfmt_elf.c\":\n\n  static unsigned long randomize_stack_top(unsigned long stack_top)\n  {\n           unsigned int random_variable = 0;\n\n           if ((current->flags & PF_RANDOMIZE) &&\n                   !(current->personality & ADDR_NO_RANDOMIZE)) {\n                   random_variable = get_random_int() & STACK_RND_MASK;\n                   random_variable <<= PAGE_SHIFT;\n           }\n           return PAGE_ALIGN(stack_top) + random_variable;\n           return PAGE_ALIGN(stack_top) - random_variable;\n  }\n\nNote that, it declares the \"random_variable\" variable as \"unsigned int\".\nSince the result of the shifting operation between STACK_RND_MASK (which\nis 0x3fffff on x86_64, 22 bits) and PAGE_SHIFT (which is 12 on x86_64):\n\n\t  random_variable <<= PAGE_SHIFT;\n\nthen the two leftmost bits are dropped when storing the result in the\n\"random_variable\". This variable shall be at least 34 bits long to hold\nthe (22+12) result.\n\nThese two dropped bits have an impact on the entropy of process stack.\nConcretely, the total stack entropy is reduced by four: from 2^28 to\n2^30 (One fourth of expected entropy).\n\nThis patch restores back the entropy by correcting the types involved\nin the operations in the functions randomize_stack_top() and\nstack_maxrandom_size().\n\nThe successful fix can be tested with:\n\n  $ for i in `seq 1 10`; do cat /proc/self/maps | grep stack; done\n  7ffeda566000-7ffeda587000 rw-p 00000000 00:00 0                          [stack]\n  7fff5a332000-7fff5a353000 rw-p 00000000 00:00 0                          [stack]\n  7ffcdb7a1000-7ffcdb7c2000 rw-p 00000000 00:00 0                          [stack]\n  7ffd5e2c4000-7ffd5e2e5000 rw-p 00000000 00:00 0                          [stack]\n  ...\n\nOnce corrected, the leading bytes should be between 7ffc and 7fff,\nrather than always being 7fff.\n\nSigned-off-by: Hector Marco-Gisbert <hecmargi@upv.es>\nSigned-off-by: Ismael Ripoll <iripoll@upv.es>\n[ Rebased, fixed 80 char bugs, cleaned up commit message, added test example and CVE ]\nSigned-off-by: Kees Cook <keescook@chromium.org>\nCc: <stable@vger.kernel.org>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Al Viro <viro@zeniv.linux.org.uk>\nFixes: CVE-2015-1593\nLink: http://lkml.kernel.org/r/20150214173350.GA18393@www.outflux.net\nSigned-off-by: Borislav Petkov <bp@suse.de>",
  "author_name": "Hector Marco-Gisbert",
  "author_email": "hecmargi@upv.es",
  "author_date": "Sat Feb 14 09:33:50 2015 -0800",
  "author_date_iso": "2015-02-14T09:33:50-08:00",
  "committer_name": "Borislav Petkov",
  "committer_email": "bp@suse.de",
  "committer_date": "Thu Feb 19 12:21:36 2015 +0100",
  "committer_date_iso": "2015-02-19T12:21:36+01:00",
  "files_changed": [
    "arch/x86/mm/mmap.c",
    "fs/binfmt_elf.c"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "arch/x86/mm/mmap.c",
      "insertions": 3,
      "deletions": 3
    },
    {
      "file": "fs/binfmt_elf.c",
      "insertions": 3,
      "deletions": 2
    }
  ],
  "total_insertions": 6,
  "total_deletions": 5,
  "total_changes": 11,
  "parents": [
    "f47233c2d34f243ecdaac179c3408a39ff9216a7"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.0",
    "v4.0-rc1",
    "v4.0-rc2",
    "v4.0-rc3",
    "v4.0-rc4",
    "v4.0-rc5",
    "v4.0-rc6",
    "v4.0-rc7",
    "v4.1",
    "v4.1-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2015-1593"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "arch/x86/mm/mmap.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/binfmt_elf.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}