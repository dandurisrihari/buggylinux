{
  "hash": "ed5194c2732c8084af9fd159c146ea92bf137128",
  "hash_short": "ed5194c2",
  "subject": "x86/speculation/mds: Add basic bug infrastructure for MDS",
  "body": "Microarchitectural Data Sampling (MDS), is a class of side channel attacks\non internal buffers in Intel CPUs. The variants are:\n\n - Microarchitectural Store Buffer Data Sampling (MSBDS) (CVE-2018-12126)\n - Microarchitectural Fill Buffer Data Sampling (MFBDS) (CVE-2018-12130)\n - Microarchitectural Load Port Data Sampling (MLPDS) (CVE-2018-12127)\n\nMSBDS leaks Store Buffer Entries which can be speculatively forwarded to a\ndependent load (store-to-load forwarding) as an optimization. The forward\ncan also happen to a faulting or assisting load operation for a different\nmemory address, which can be exploited under certain conditions. Store\nbuffers are partitioned between Hyper-Threads so cross thread forwarding is\nnot possible. But if a thread enters or exits a sleep state the store\nbuffer is repartitioned which can expose data from one thread to the other.\n\nMFBDS leaks Fill Buffer Entries. Fill buffers are used internally to manage\nL1 miss situations and to hold data which is returned or sent in response\nto a memory or I/O operation. Fill buffers can forward data to a load\noperation and also write data to the cache. When the fill buffer is\ndeallocated it can retain the stale data of the preceding operations which\ncan then be forwarded to a faulting or assisting load operation, which can\nbe exploited under certain conditions. Fill buffers are shared between\nHyper-Threads so cross thread leakage is possible.\n\nMLDPS leaks Load Port Data. Load ports are used to perform load operations\nfrom memory or I/O. The received data is then forwarded to the register\nfile or a subsequent operation. In some implementations the Load Port can\ncontain stale data from a previous operation which can be forwarded to\nfaulting or assisting loads under certain conditions, which again can be\nexploited eventually. Load ports are shared between Hyper-Threads so cross\nthread leakage is possible.\n\nAll variants have the same mitigation for single CPU thread case (SMT off),\nso the kernel can treat them as one MDS issue.\n\nAdd the basic infrastructure to detect if the current CPU is affected by\nMDS.\n\n[ tglx: Rewrote changelog ]\n\nSigned-off-by: Andi Kleen <ak@linux.intel.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nReviewed-by: Borislav Petkov <bp@suse.de>\nReviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>\nReviewed-by: Frederic Weisbecker <frederic@kernel.org>\nReviewed-by: Jon Masters <jcm@redhat.com>\nTested-by: Jon Masters <jcm@redhat.com>",
  "full_message": "x86/speculation/mds: Add basic bug infrastructure for MDS\n\nMicroarchitectural Data Sampling (MDS), is a class of side channel attacks\non internal buffers in Intel CPUs. The variants are:\n\n - Microarchitectural Store Buffer Data Sampling (MSBDS) (CVE-2018-12126)\n - Microarchitectural Fill Buffer Data Sampling (MFBDS) (CVE-2018-12130)\n - Microarchitectural Load Port Data Sampling (MLPDS) (CVE-2018-12127)\n\nMSBDS leaks Store Buffer Entries which can be speculatively forwarded to a\ndependent load (store-to-load forwarding) as an optimization. The forward\ncan also happen to a faulting or assisting load operation for a different\nmemory address, which can be exploited under certain conditions. Store\nbuffers are partitioned between Hyper-Threads so cross thread forwarding is\nnot possible. But if a thread enters or exits a sleep state the store\nbuffer is repartitioned which can expose data from one thread to the other.\n\nMFBDS leaks Fill Buffer Entries. Fill buffers are used internally to manage\nL1 miss situations and to hold data which is returned or sent in response\nto a memory or I/O operation. Fill buffers can forward data to a load\noperation and also write data to the cache. When the fill buffer is\ndeallocated it can retain the stale data of the preceding operations which\ncan then be forwarded to a faulting or assisting load operation, which can\nbe exploited under certain conditions. Fill buffers are shared between\nHyper-Threads so cross thread leakage is possible.\n\nMLDPS leaks Load Port Data. Load ports are used to perform load operations\nfrom memory or I/O. The received data is then forwarded to the register\nfile or a subsequent operation. In some implementations the Load Port can\ncontain stale data from a previous operation which can be forwarded to\nfaulting or assisting loads under certain conditions, which again can be\nexploited eventually. Load ports are shared between Hyper-Threads so cross\nthread leakage is possible.\n\nAll variants have the same mitigation for single CPU thread case (SMT off),\nso the kernel can treat them as one MDS issue.\n\nAdd the basic infrastructure to detect if the current CPU is affected by\nMDS.\n\n[ tglx: Rewrote changelog ]\n\nSigned-off-by: Andi Kleen <ak@linux.intel.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nReviewed-by: Borislav Petkov <bp@suse.de>\nReviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>\nReviewed-by: Frederic Weisbecker <frederic@kernel.org>\nReviewed-by: Jon Masters <jcm@redhat.com>\nTested-by: Jon Masters <jcm@redhat.com>",
  "author_name": "Andi Kleen",
  "author_email": "ak@linux.intel.com",
  "author_date": "Fri Jan 18 16:50:16 2019 -0800",
  "author_date_iso": "2019-01-18T16:50:16-08:00",
  "committer_name": "Thomas Gleixner",
  "committer_email": "tglx@linutronix.de",
  "committer_date": "Wed Mar 6 21:52:11 2019 +0100",
  "committer_date_iso": "2019-03-06T21:52:11+01:00",
  "files_changed": [
    "arch/x86/include/asm/cpufeatures.h",
    "arch/x86/include/asm/msr-index.h",
    "arch/x86/kernel/cpu/common.c"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "arch/x86/include/asm/cpufeatures.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/msr-index.h",
      "insertions": 5,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/cpu/common.c",
      "insertions": 16,
      "deletions": 9
    }
  ],
  "total_insertions": 23,
  "total_deletions": 9,
  "total_changes": 32,
  "parents": [
    "36ad35131adacc29b328b9c8b6277a8bf0d6fd5d"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.2",
    "v5.2-rc1",
    "v5.2-rc2",
    "v5.2-rc3",
    "v5.2-rc4",
    "v5.2-rc5",
    "v5.2-rc6",
    "v5.2-rc7",
    "v5.3",
    "v5.3-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2018-12126",
      "CVE-2018-12130",
      "CVE-2018-12127"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "arch/x86/include/asm/cpufeatures.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/msr-index.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/cpu/common.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}