{
  "hash": "e41d58185f1444368873d4d7422f7664a68be61d",
  "hash_short": "e41d5818",
  "subject": "fault-inject: support systematic fault injection",
  "body": "Add /proc/self/task/<current-tid>/fail-nth file that allows failing\n0-th, 1-st, 2-nd and so on calls systematically.\nExcerpt from the added documentation:\n\n \"Write to this file of integer N makes N-th call in the current task\n  fail (N is 0-based). Read from this file returns a single char 'Y' or\n  'N' that says if the fault setup with a previous write to this file\n  was injected or not, and disables the fault if it wasn't yet injected.\n  Note that this file enables all types of faults (slab, futex, etc).\n  This setting takes precedence over all other generic settings like\n  probability, interval, times, etc. But per-capability settings (e.g.\n  fail_futex/ignore-private) take precedence over it. This feature is\n  intended for systematic testing of faults in a single system call. See\n  an example below\"\n\nWhy add a new setting:\n1. Existing settings are global rather than per-task.\n   So parallel testing is not possible.\n2. attr->interval is close but it depends on attr->count\n   which is non reset to 0, so interval does not work as expected.\n3. Trying to model this with existing settings requires manipulations\n   of all of probability, interval, times, space, task-filter and\n   unexposed count and per-task make-it-fail files.\n4. Existing settings are per-failure-type, and the set of failure\n   types is potentially expanding.\n5. make-it-fail can't be changed by unprivileged user and aggressive\n   stress testing better be done from an unprivileged user.\n   Similarly, this would require opening the debugfs files to the\n   unprivileged user, as he would need to reopen at least times file\n   (not possible to pre-open before dropping privs).\n\nThe proposed interface solves all of the above (see the example).\n\nWe want to integrate this into syzkaller fuzzer.  A prototype has found\n10 bugs in kernel in first day of usage:\n\n  https://groups.google.com/forum/#!searchin/syzkaller/%22FAULT_INJECTION%22%7Csort:relevance\n\nI've made the current interface work with all types of our sandboxes.\nFor setuid the secret sauce was prctl(PR_SET_DUMPABLE, 1, 0, 0, 0) to\nmake /proc entries non-root owned.  So I am fine with the current\nversion of the code.\n\n[akpm@linux-foundation.org: fix build]\nLink: http://lkml.kernel.org/r/20170328130128.101773-1-dvyukov@google.com\nSigned-off-by: Dmitry Vyukov <dvyukov@google.com>\nCc: Akinobu Mita <akinobu.mita@gmail.com>\nCc: Michal Hocko <mhocko@kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "full_message": "fault-inject: support systematic fault injection\n\nAdd /proc/self/task/<current-tid>/fail-nth file that allows failing\n0-th, 1-st, 2-nd and so on calls systematically.\nExcerpt from the added documentation:\n\n \"Write to this file of integer N makes N-th call in the current task\n  fail (N is 0-based). Read from this file returns a single char 'Y' or\n  'N' that says if the fault setup with a previous write to this file\n  was injected or not, and disables the fault if it wasn't yet injected.\n  Note that this file enables all types of faults (slab, futex, etc).\n  This setting takes precedence over all other generic settings like\n  probability, interval, times, etc. But per-capability settings (e.g.\n  fail_futex/ignore-private) take precedence over it. This feature is\n  intended for systematic testing of faults in a single system call. See\n  an example below\"\n\nWhy add a new setting:\n1. Existing settings are global rather than per-task.\n   So parallel testing is not possible.\n2. attr->interval is close but it depends on attr->count\n   which is non reset to 0, so interval does not work as expected.\n3. Trying to model this with existing settings requires manipulations\n   of all of probability, interval, times, space, task-filter and\n   unexposed count and per-task make-it-fail files.\n4. Existing settings are per-failure-type, and the set of failure\n   types is potentially expanding.\n5. make-it-fail can't be changed by unprivileged user and aggressive\n   stress testing better be done from an unprivileged user.\n   Similarly, this would require opening the debugfs files to the\n   unprivileged user, as he would need to reopen at least times file\n   (not possible to pre-open before dropping privs).\n\nThe proposed interface solves all of the above (see the example).\n\nWe want to integrate this into syzkaller fuzzer.  A prototype has found\n10 bugs in kernel in first day of usage:\n\n  https://groups.google.com/forum/#!searchin/syzkaller/%22FAULT_INJECTION%22%7Csort:relevance\n\nI've made the current interface work with all types of our sandboxes.\nFor setuid the secret sauce was prctl(PR_SET_DUMPABLE, 1, 0, 0, 0) to\nmake /proc entries non-root owned.  So I am fine with the current\nversion of the code.\n\n[akpm@linux-foundation.org: fix build]\nLink: http://lkml.kernel.org/r/20170328130128.101773-1-dvyukov@google.com\nSigned-off-by: Dmitry Vyukov <dvyukov@google.com>\nCc: Akinobu Mita <akinobu.mita@gmail.com>\nCc: Michal Hocko <mhocko@kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "author_name": "Dmitry Vyukov",
  "author_email": "dvyukov@google.com",
  "author_date": "Wed Jul 12 14:34:35 2017 -0700",
  "author_date_iso": "2017-07-12T14:34:35-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Wed Jul 12 16:26:01 2017 -0700",
  "committer_date_iso": "2017-07-12T16:26:01-07:00",
  "files_changed": [
    "Documentation/fault-injection/fault-injection.txt",
    "fs/proc/base.c",
    "include/linux/sched.h",
    "kernel/fork.c",
    "lib/fault-inject.c"
  ],
  "files_changed_count": 5,
  "stats": [
    {
      "file": "Documentation/fault-injection/fault-injection.txt",
      "insertions": 78,
      "deletions": 0
    },
    {
      "file": "fs/proc/base.c",
      "insertions": 52,
      "deletions": 0
    },
    {
      "file": "include/linux/sched.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "kernel/fork.c",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "lib/fault-inject.c",
      "insertions": 7,
      "deletions": 0
    }
  ],
  "total_insertions": 142,
  "total_deletions": 0,
  "total_changes": 142,
  "parents": [
    "92ef6da3d06ff551a86de41ae37df9cc4b58d7a0"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.13",
    "v4.13-rc1",
    "v4.13-rc2",
    "v4.13-rc3",
    "v4.13-rc4",
    "v4.13-rc5",
    "v4.13-rc6",
    "v4.13-rc7",
    "v4.14",
    "v4.14-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "inject"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "Documentation/fault-injection/fault-injection.txt",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/proc/base.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/sched.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/fork.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "lib/fault-inject.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}