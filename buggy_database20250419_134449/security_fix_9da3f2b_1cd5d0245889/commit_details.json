{
  "hash": "9da3f2b74054406f87dff7101a569217ffceb29b",
  "hash_short": "9da3f2b7",
  "subject": "x86/fault: BUG() when uaccess helpers fault on kernel addresses",
  "body": "There have been multiple kernel vulnerabilities that permitted userspace to\npass completely unchecked pointers through to userspace accessors:\n\n - the waitid() bug - commit 96ca579a1ecc (\"waitid(): Add missing\n   access_ok() checks\")\n - the sg/bsg read/write APIs\n - the infiniband read/write APIs\n\nThese don't happen all that often, but when they do happen, it is hard to\ntest for them properly; and it is probably also hard to discover them with\nfuzzing. Even when an unmapped kernel address is supplied to such buggy\ncode, it just returns -EFAULT instead of doing a proper BUG() or at least\nWARN().\n\nTry to make such misbehaving code a bit more visible by refusing to do a\nfixup in the pagefault handler code when a userspace accessor causes a #PF\non a kernel address and the current context isn't whitelisted.\n\nSigned-off-by: Jann Horn <jannh@google.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nTested-by: Kees Cook <keescook@chromium.org>\nCc: Andy Lutomirski <luto@kernel.org>\nCc: kernel-hardening@lists.openwall.com\nCc: dvyukov@google.com\nCc: Masami Hiramatsu <mhiramat@kernel.org>\nCc: \"Naveen N. Rao\" <naveen.n.rao@linux.vnet.ibm.com>\nCc: Anil S Keshavamurthy <anil.s.keshavamurthy@intel.com>\nCc: \"David S. Miller\" <davem@davemloft.net>\nCc: Alexander Viro <viro@zeniv.linux.org.uk>\nCc: linux-fsdevel@vger.kernel.org\nCc: Borislav Petkov <bp@alien8.de>\nLink: https://lkml.kernel.org/r/20180828201421.157735-7-jannh@google.com",
  "full_message": "x86/fault: BUG() when uaccess helpers fault on kernel addresses\n\nThere have been multiple kernel vulnerabilities that permitted userspace to\npass completely unchecked pointers through to userspace accessors:\n\n - the waitid() bug - commit 96ca579a1ecc (\"waitid(): Add missing\n   access_ok() checks\")\n - the sg/bsg read/write APIs\n - the infiniband read/write APIs\n\nThese don't happen all that often, but when they do happen, it is hard to\ntest for them properly; and it is probably also hard to discover them with\nfuzzing. Even when an unmapped kernel address is supplied to such buggy\ncode, it just returns -EFAULT instead of doing a proper BUG() or at least\nWARN().\n\nTry to make such misbehaving code a bit more visible by refusing to do a\nfixup in the pagefault handler code when a userspace accessor causes a #PF\non a kernel address and the current context isn't whitelisted.\n\nSigned-off-by: Jann Horn <jannh@google.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nTested-by: Kees Cook <keescook@chromium.org>\nCc: Andy Lutomirski <luto@kernel.org>\nCc: kernel-hardening@lists.openwall.com\nCc: dvyukov@google.com\nCc: Masami Hiramatsu <mhiramat@kernel.org>\nCc: \"Naveen N. Rao\" <naveen.n.rao@linux.vnet.ibm.com>\nCc: Anil S Keshavamurthy <anil.s.keshavamurthy@intel.com>\nCc: \"David S. Miller\" <davem@davemloft.net>\nCc: Alexander Viro <viro@zeniv.linux.org.uk>\nCc: linux-fsdevel@vger.kernel.org\nCc: Borislav Petkov <bp@alien8.de>\nLink: https://lkml.kernel.org/r/20180828201421.157735-7-jannh@google.com",
  "author_name": "Jann Horn",
  "author_email": "jannh@google.com",
  "author_date": "Tue Aug 28 22:14:20 2018 +0200",
  "author_date_iso": "2018-08-28T22:14:20+02:00",
  "committer_name": "Thomas Gleixner",
  "committer_email": "tglx@linutronix.de",
  "committer_date": "Mon Sep 3 15:12:09 2018 +0200",
  "committer_date_iso": "2018-09-03T15:12:09+02:00",
  "files_changed": [
    "arch/x86/mm/extable.c",
    "fs/namespace.c",
    "include/linux/sched.h",
    "mm/maccess.c"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "arch/x86/mm/extable.c",
      "insertions": 58,
      "deletions": 0
    },
    {
      "file": "fs/namespace.c",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "include/linux/sched.h",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "mm/maccess.c",
      "insertions": 6,
      "deletions": 0
    }
  ],
  "total_insertions": 72,
  "total_deletions": 0,
  "total_changes": 72,
  "parents": [
    "81fd9c18444ed1199b5a6f6776a395292d4256fb"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.20",
    "v4.20-rc1",
    "v4.20-rc2",
    "v4.20-rc3",
    "v4.20-rc4",
    "v4.20-rc5",
    "v4.20-rc6",
    "v4.20-rc7",
    "v5.0",
    "v5.0-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/mm/extable.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/namespace.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/sched.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/maccess.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}