{
  "hash": "0238d3c75303d63839ca20e71e4993fdab3fec7b",
  "hash_short": "0238d3c7",
  "subject": "Merge tag 'arm64-upstream' of git://git.kernel.org/pub/scm/linux/kernel/git/arm64/linux",
  "body": "Pull arm64 updates from Will Deacon:\n \"The changes are a real mixed bag this time around.\n\n  The only scary looking one from the diffstat is the uapi change to\n  asm-generic/mman-common.h, but this has been acked by Arnd and is\n  actually just adding a pair of comments in an attempt to prevent\n  allocation of some PROT values which tend to get used for\n  arch-specific purposes. We'll be using them for Branch Target\n  Identification (a CFI-like hardening feature), which is currently\n  under review on the mailing list.\n\n  New architecture features:\n\n   - Support for Armv8.5 E0PD, which benefits KASLR in the same way as\n     KPTI but without the overhead. This allows KPTI to be disabled on\n     CPUs that are not affected by Meltdown, even is KASLR is enabled.\n\n   - Initial support for the Armv8.5 RNG instructions, which claim to\n     provide access to a high bandwidth, cryptographically secure\n     hardware random number generator. As well as exposing these to\n     userspace, we also use them as part of the KASLR seed and to seed\n     the crng once all CPUs have come online.\n\n   - Advertise a bunch of new instructions to userspace, including\n     support for Data Gathering Hint, Matrix Multiply and 16-bit\n     floating point.\n\n  Kexec:\n\n   - Cleanups in preparation for relocating with the MMU enabled\n\n   - Support for loading crash dump kernels with kexec_file_load()\n\n  Perf and PMU drivers:\n\n   - Cleanups and non-critical fixes for a couple of system PMU drivers\n\n  FPU-less (aka broken) CPU support:\n\n   - Considerable fixes to support CPUs without the FP/SIMD extensions,\n     including their presence in heterogeneous systems. Good luck\n     finding a 64-bit userspace that handles this.\n\n  Modern assembly function annotations:\n\n   - Start migrating our use of ENTRY() and ENDPROC() over to the\n     new-fangled SYM_{CODE,FUNC}_{START,END} macros, which are intended\n     to aid debuggers\n\n  Kbuild:\n\n   - Cleanup detection of LSE support in the assembler by introducing\n     'as-instr'\n\n   - Remove compressed Image files when building clean targets\n\n  IP checksumming:\n\n   - Implement optimised IPv4 checksumming routine when hardware offload\n     is not in use. An IPv6 version is in the works, pending testing.\n\n  Hardware errata:\n\n   - Work around Cortex-A55 erratum #1530923\n\n  Shadow call stack:\n\n   - Work around some issues with Clang's integrated assembler not\n     liking our perfectly reasonable assembly code\n\n   - Avoid allocating the X18 register, so that it can be used to hold\n     the shadow call stack pointer in future\n\n  ACPI:\n\n   - Fix ID count checking in IORT code. This may regress broken\n     firmware that happened to work with the old implementation, in\n     which case we'll have to revert it and try something else\n\n   - Fix DAIF corruption on return from GHES handler with pseudo-NMIs\n\n  Miscellaneous:\n\n   - Whitelist some CPUs that are unaffected by Spectre-v2\n\n   - Reduce frequency of ASID rollover when KPTI is compiled in but\n     inactive\n\n   - Reserve a couple of arch-specific PROT flags that are already used\n     by Sparc and PowerPC and are planned for later use with BTI on\n     arm64\n\n   - Preparatory cleanup of our entry assembly code in preparation for\n     moving more of it into C later on\n\n   - Refactoring and cleanup\"\n\n* tag 'arm64-upstream' of git://git.kernel.org/pub/scm/linux/kernel/git/arm64/linux: (73 commits)\n  arm64: acpi: fix DAIF manipulation with pNMI\n  arm64: kconfig: Fix alignment of E0PD help text\n  arm64: Use v8.5-RNG entropy for KASLR seed\n  arm64: Implement archrandom.h for ARMv8.5-RNG\n  arm64: kbuild: remove compressed images on 'make ARCH=arm64 (dist)clean'\n  arm64: entry: Avoid empty alternatives entries\n  arm64: Kconfig: select HAVE_FUTEX_CMPXCHG\n  arm64: csum: Fix pathological zero-length calls\n  arm64: entry: cleanup sp_el0 manipulation\n  arm64: entry: cleanup el0 svc handler naming\n  arm64: entry: mark all entry code as notrace\n  arm64: assembler: remove smp_dmb macro\n  arm64: assembler: remove inherit_daif macro\n  ACPI/IORT: Fix 'Number of IDs' handling in iort_id_map()\n  mm: Reserve asm-generic prot flags 0x10 and 0x20 for arch use\n  arm64: Use macros instead of hard-coded constants for MAIR_EL1\n  arm64: Add KRYO{3,4}XX CPU cores to spectre-v2 safe list\n  arm64: kernel: avoid x18 in __cpu_soft_restart\n  arm64: kvm: stop treating register x18 as caller save\n  arm64/lib: copy_page: avoid x18 register in assembler code\n  ...",
  "full_message": "Merge tag 'arm64-upstream' of git://git.kernel.org/pub/scm/linux/kernel/git/arm64/linux\n\nPull arm64 updates from Will Deacon:\n \"The changes are a real mixed bag this time around.\n\n  The only scary looking one from the diffstat is the uapi change to\n  asm-generic/mman-common.h, but this has been acked by Arnd and is\n  actually just adding a pair of comments in an attempt to prevent\n  allocation of some PROT values which tend to get used for\n  arch-specific purposes. We'll be using them for Branch Target\n  Identification (a CFI-like hardening feature), which is currently\n  under review on the mailing list.\n\n  New architecture features:\n\n   - Support for Armv8.5 E0PD, which benefits KASLR in the same way as\n     KPTI but without the overhead. This allows KPTI to be disabled on\n     CPUs that are not affected by Meltdown, even is KASLR is enabled.\n\n   - Initial support for the Armv8.5 RNG instructions, which claim to\n     provide access to a high bandwidth, cryptographically secure\n     hardware random number generator. As well as exposing these to\n     userspace, we also use them as part of the KASLR seed and to seed\n     the crng once all CPUs have come online.\n\n   - Advertise a bunch of new instructions to userspace, including\n     support for Data Gathering Hint, Matrix Multiply and 16-bit\n     floating point.\n\n  Kexec:\n\n   - Cleanups in preparation for relocating with the MMU enabled\n\n   - Support for loading crash dump kernels with kexec_file_load()\n\n  Perf and PMU drivers:\n\n   - Cleanups and non-critical fixes for a couple of system PMU drivers\n\n  FPU-less (aka broken) CPU support:\n\n   - Considerable fixes to support CPUs without the FP/SIMD extensions,\n     including their presence in heterogeneous systems. Good luck\n     finding a 64-bit userspace that handles this.\n\n  Modern assembly function annotations:\n\n   - Start migrating our use of ENTRY() and ENDPROC() over to the\n     new-fangled SYM_{CODE,FUNC}_{START,END} macros, which are intended\n     to aid debuggers\n\n  Kbuild:\n\n   - Cleanup detection of LSE support in the assembler by introducing\n     'as-instr'\n\n   - Remove compressed Image files when building clean targets\n\n  IP checksumming:\n\n   - Implement optimised IPv4 checksumming routine when hardware offload\n     is not in use. An IPv6 version is in the works, pending testing.\n\n  Hardware errata:\n\n   - Work around Cortex-A55 erratum #1530923\n\n  Shadow call stack:\n\n   - Work around some issues with Clang's integrated assembler not\n     liking our perfectly reasonable assembly code\n\n   - Avoid allocating the X18 register, so that it can be used to hold\n     the shadow call stack pointer in future\n\n  ACPI:\n\n   - Fix ID count checking in IORT code. This may regress broken\n     firmware that happened to work with the old implementation, in\n     which case we'll have to revert it and try something else\n\n   - Fix DAIF corruption on return from GHES handler with pseudo-NMIs\n\n  Miscellaneous:\n\n   - Whitelist some CPUs that are unaffected by Spectre-v2\n\n   - Reduce frequency of ASID rollover when KPTI is compiled in but\n     inactive\n\n   - Reserve a couple of arch-specific PROT flags that are already used\n     by Sparc and PowerPC and are planned for later use with BTI on\n     arm64\n\n   - Preparatory cleanup of our entry assembly code in preparation for\n     moving more of it into C later on\n\n   - Refactoring and cleanup\"\n\n* tag 'arm64-upstream' of git://git.kernel.org/pub/scm/linux/kernel/git/arm64/linux: (73 commits)\n  arm64: acpi: fix DAIF manipulation with pNMI\n  arm64: kconfig: Fix alignment of E0PD help text\n  arm64: Use v8.5-RNG entropy for KASLR seed\n  arm64: Implement archrandom.h for ARMv8.5-RNG\n  arm64: kbuild: remove compressed images on 'make ARCH=arm64 (dist)clean'\n  arm64: entry: Avoid empty alternatives entries\n  arm64: Kconfig: select HAVE_FUTEX_CMPXCHG\n  arm64: csum: Fix pathological zero-length calls\n  arm64: entry: cleanup sp_el0 manipulation\n  arm64: entry: cleanup el0 svc handler naming\n  arm64: entry: mark all entry code as notrace\n  arm64: assembler: remove smp_dmb macro\n  arm64: assembler: remove inherit_daif macro\n  ACPI/IORT: Fix 'Number of IDs' handling in iort_id_map()\n  mm: Reserve asm-generic prot flags 0x10 and 0x20 for arch use\n  arm64: Use macros instead of hard-coded constants for MAIR_EL1\n  arm64: Add KRYO{3,4}XX CPU cores to spectre-v2 safe list\n  arm64: kernel: avoid x18 in __cpu_soft_restart\n  arm64: kvm: stop treating register x18 as caller save\n  arm64/lib: copy_page: avoid x18 register in assembler code\n  ...",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Mon Jan 27 08:58:19 2020 -0800",
  "author_date_iso": "2020-01-27T08:58:19-08:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Mon Jan 27 08:58:19 2020 -0800",
  "committer_date_iso": "2020-01-27T08:58:19-08:00",
  "files_changed": [
    "arch/arm64/Kconfig",
    "arch/arm64/include/asm/pgtable-prot.h",
    "arch/arm64/kernel/process.c"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "Documentation/arm64/cpu-feature-registers.rst",
      "insertions": 16,
      "deletions": 0
    },
    {
      "file": "Documentation/arm64/elf_hwcaps.rst",
      "insertions": 31,
      "deletions": 0
    },
    {
      "file": "Documentation/arm64/silicon-errata.rst",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "arch/arm64/Kconfig",
      "insertions": 55,
      "deletions": 1
    },
    {
      "file": "arch/arm64/Makefile",
      "insertions": 5,
      "deletions": 12
    },
    {
      "file": "arch/arm64/boot/Makefile",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/arm64/include/asm/alternative.h",
      "insertions": 21,
      "deletions": 11
    },
    {
      "file": "arch/arm64/include/asm/archrandom.h",
      "insertions": 75,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/assembler.h",
      "insertions": 0,
      "deletions": 24
    },
    {
      "file": "arch/arm64/include/asm/atomic_ll_sc.h",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/arm64/include/asm/atomic_lse.h",
      "insertions": 19,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/checksum.h",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/cpu.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/cpucaps.h",
      "insertions": 5,
      "deletions": 3
    },
    {
      "file": "arch/arm64/include/asm/cpufeature.h",
      "insertions": 5,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/cputype.h",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/daifflags.h",
      "insertions": 10,
      "deletions": 1
    },
    {
      "file": "arch/arm64/include/asm/exception.h",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm64/include/asm/hwcap.h",
      "insertions": 8,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/kexec.h",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/kvm_host.h",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm64/include/asm/kvm_hyp.h",
      "insertions": 3,
      "deletions": 3
    },
    {
      "file": "arch/arm64/include/asm/linkage.h",
      "insertions": 16,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/lse.h",
      "insertions": 6,
      "deletions": 6
    },
    {
      "file": "arch/arm64/include/asm/mmu.h",
      "insertions": 4,
      "deletions": 44
    },
    {
      "file": "arch/arm64/include/asm/pgtable-hwdef.h",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/pgtable-prot.h",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm64/include/asm/sections.h",
      "insertions": 0,
      "deletions": 1
    },
    {
      "file": "arch/arm64/include/asm/simd.h",
      "insertions": 6,
      "deletions": 2
    },
    {
      "file": "arch/arm64/include/asm/sysreg.h",
      "insertions": 38,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/uapi/asm/hwcap.h",
      "insertions": 8,
      "deletions": 0
    },
    {
      "file": "arch/arm64/kernel/acpi.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/arm64/kernel/armv8_deprecated.c",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "arch/arm64/kernel/cpu-reset.S",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm64/kernel/cpu_errata.c",
      "insertions": 21,
      "deletions": 6
    },
    {
      "file": "arch/arm64/kernel/cpufeature.c",
      "insertions": 164,
      "deletions": 27
    },
    {
      "file": "arch/arm64/kernel/cpuinfo.c",
      "insertions": 9,
      "deletions": 0
    },
    {
      "file": "arch/arm64/kernel/entry-common.c",
      "insertions": 4,
      "deletions": 4
    },
    {
      "file": "arch/arm64/kernel/entry.S",
      "insertions": 13,
      "deletions": 13
    },
    {
      "file": "arch/arm64/kernel/fpsimd.c",
      "insertions": 27,
      "deletions": 3
    },
    {
      "file": "arch/arm64/kernel/hibernate.c",
      "insertions": 80,
      "deletions": 71
    },
    {
      "file": "arch/arm64/kernel/kaslr.c",
      "insertions": 11,
      "deletions": 0
    },
    {
      "file": "arch/arm64/kernel/kexec_image.c",
      "insertions": 0,
      "deletions": 4
    },
    {
      "file": "arch/arm64/kernel/machine_kexec.c",
      "insertions": 0,
      "deletions": 12
    },
    {
      "file": "arch/arm64/kernel/machine_kexec_file.c",
      "insertions": 102,
      "deletions": 4
    },
    {
      "file": "arch/arm64/kernel/process.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/arm64/kernel/ptrace.c",
      "insertions": 21,
      "deletions": 0
    },
    {
      "file": "arch/arm64/kernel/setup.c",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "arch/arm64/kernel/signal.c",
      "insertions": 4,
      "deletions": 2
    },
    {
      "file": "arch/arm64/kernel/signal32.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm64/kernel/ssbd.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm64/kernel/syscall.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm64/kvm/hyp/entry.S",
      "insertions": 24,
      "deletions": 21
    },
    {
      "file": "arch/arm64/kvm/hyp/switch.c",
      "insertions": 14,
      "deletions": 6
    },
    {
      "file": "arch/arm64/kvm/hyp/sysreg-sr.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm64/kvm/hyp/tlb.c",
      "insertions": 6,
      "deletions": 6
    },
    {
      "file": "arch/arm64/kvm/sys_regs.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/arm64/lib/Makefile",
      "insertions": 3,
      "deletions": 3
    },
    {
      "file": "arch/arm64/lib/clear_page.S",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm64/lib/clear_user.S",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm64/lib/copy_from_user.S",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm64/lib/copy_in_user.S",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm64/lib/copy_page.S",
      "insertions": 21,
      "deletions": 21
    },
    {
      "file": "arch/arm64/lib/copy_to_user.S",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm64/lib/crc32.S",
      "insertions": 4,
      "deletions": 4
    },
    {
      "file": "arch/arm64/lib/csum.c",
      "insertions": 126,
      "deletions": 0
    },
    {
      "file": "arch/arm64/lib/memchr.S",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm64/lib/memcmp.S",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm64/lib/memcpy.S",
      "insertions": 4,
      "deletions": 4
    },
    {
      "file": "arch/arm64/lib/memmove.S",
      "insertions": 4,
      "deletions": 4
    },
    {
      "file": "arch/arm64/lib/memset.S",
      "insertions": 4,
      "deletions": 4
    },
    {
      "file": "arch/arm64/lib/strchr.S",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm64/lib/strcmp.S",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm64/lib/strlen.S",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm64/lib/strncmp.S",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm64/lib/strnlen.S",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm64/lib/strrchr.S",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm64/lib/tishift.S",
      "insertions": 6,
      "deletions": 6
    },
    {
      "file": "arch/arm64/mm/cache.S",
      "insertions": 26,
      "deletions": 26
    },
    {
      "file": "arch/arm64/mm/context.c",
      "insertions": 30,
      "deletions": 8
    },
    {
      "file": "arch/arm64/mm/pageattr.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/arm64/mm/proc.S",
      "insertions": 54,
      "deletions": 60
    },
    {
      "file": "arch/arm64/xen/hypercall.S",
      "insertions": 4,
      "deletions": 4
    },
    {
      "file": "drivers/acpi/arm64/iort.c",
      "insertions": 55,
      "deletions": 2
    },
    {
      "file": "drivers/perf/fsl_imx8_ddr_perf.c",
      "insertions": 11,
      "deletions": 5
    },
    {
      "file": "drivers/perf/hisilicon/hisi_uncore_pmu.c",
      "insertions": 32,
      "deletions": 26
    },
    {
      "file": "include/uapi/asm-generic/mman-common.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "kernel/kexec.c",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "kernel/kexec_core.c",
      "insertions": 7,
      "deletions": 1
    },
    {
      "file": "kernel/kexec_file.c",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "kernel/kexec_internal.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "lib/Makefile",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "lib/fdt_addresses.c",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "scripts/Kconfig.include",
      "insertions": 4,
      "deletions": 0
    }
  ],
  "total_insertions": 1315,
  "total_deletions": 515,
  "total_changes": 1830,
  "parents": [
    "d5226fa6dbae0569ee43ecfc08bdcd6770fc4755",
    "e533dbe9dcb199bb637a2c465f3a6e70564994fe"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.6",
    "v5.6-rc1",
    "v5.6-rc2",
    "v5.6-rc3",
    "v5.6-rc4",
    "v5.6-rc5",
    "v5.6-rc6",
    "v5.6-rc7",
    "v5.7-rc1"
  ],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/arm64/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/asm/pgtable-prot.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/process.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}