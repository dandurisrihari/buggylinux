{
  "hash": "868b104d7379e28013e9d48bdd2db25e0bdcf751",
  "hash_short": "868b104d",
  "subject": "mm/vmalloc: Add flag for freeing of special permsissions",
  "body": "Add a new flag VM_FLUSH_RESET_PERMS, for enabling vfree operations to\nimmediately clear executable TLB entries before freeing pages, and handle\nresetting permissions on the directmap. This flag is useful for any kind\nof memory with elevated permissions, or where there can be related\npermissions changes on the directmap. Today this is RO+X and RO memory.\n\nAlthough this enables directly vfreeing non-writeable memory now,\nnon-writable memory cannot be freed in an interrupt because the allocation\nitself is used as a node on deferred free list. So when RO memory needs to\nbe freed in an interrupt the code doing the vfree needs to have its own\nwork queue, as was the case before the deferred vfree list was added to\nvmalloc.\n\nFor architectures with set_direct_map_ implementations this whole operation\ncan be done with one TLB flush when centralized like this. For others with\ndirectmap permissions, currently only arm64, a backup method using\nset_memory functions is used to reset the directmap. When arm64 adds\nset_direct_map_ functions, this backup can be removed.\n\nWhen the TLB is flushed to both remove TLB entries for the vmalloc range\nmapping and the direct map permissions, the lazy purge operation could be\ndone to try to save a TLB flush later. However today vm_unmap_aliases\ncould flush a TLB range that does not include the directmap. So a helper\nis added with extra parameters that can allow both the vmalloc address and\nthe direct mapping to be flushed during this operation. The behavior of the\nnormal vm_unmap_aliases function is unchanged.\n\nSuggested-by: Dave Hansen <dave.hansen@intel.com>\nSuggested-by: Andy Lutomirski <luto@kernel.org>\nSuggested-by: Will Deacon <will.deacon@arm.com>\nSigned-off-by: Rick Edgecombe <rick.p.edgecombe@intel.com>\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nCc: <akpm@linux-foundation.org>\nCc: <ard.biesheuvel@linaro.org>\nCc: <deneen.t.dock@intel.com>\nCc: <kernel-hardening@lists.openwall.com>\nCc: <kristen@linux.intel.com>\nCc: <linux_dti@icloud.com>\nCc: Borislav Petkov <bp@alien8.de>\nCc: H. Peter Anvin <hpa@zytor.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Nadav Amit <nadav.amit@gmail.com>\nCc: Rik van Riel <riel@surriel.com>\nCc: Thomas Gleixner <tglx@linutronix.de>\nLink: https://lkml.kernel.org/r/20190426001143.4983-17-namit@vmware.com\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "full_message": "mm/vmalloc: Add flag for freeing of special permsissions\n\nAdd a new flag VM_FLUSH_RESET_PERMS, for enabling vfree operations to\nimmediately clear executable TLB entries before freeing pages, and handle\nresetting permissions on the directmap. This flag is useful for any kind\nof memory with elevated permissions, or where there can be related\npermissions changes on the directmap. Today this is RO+X and RO memory.\n\nAlthough this enables directly vfreeing non-writeable memory now,\nnon-writable memory cannot be freed in an interrupt because the allocation\nitself is used as a node on deferred free list. So when RO memory needs to\nbe freed in an interrupt the code doing the vfree needs to have its own\nwork queue, as was the case before the deferred vfree list was added to\nvmalloc.\n\nFor architectures with set_direct_map_ implementations this whole operation\ncan be done with one TLB flush when centralized like this. For others with\ndirectmap permissions, currently only arm64, a backup method using\nset_memory functions is used to reset the directmap. When arm64 adds\nset_direct_map_ functions, this backup can be removed.\n\nWhen the TLB is flushed to both remove TLB entries for the vmalloc range\nmapping and the direct map permissions, the lazy purge operation could be\ndone to try to save a TLB flush later. However today vm_unmap_aliases\ncould flush a TLB range that does not include the directmap. So a helper\nis added with extra parameters that can allow both the vmalloc address and\nthe direct mapping to be flushed during this operation. The behavior of the\nnormal vm_unmap_aliases function is unchanged.\n\nSuggested-by: Dave Hansen <dave.hansen@intel.com>\nSuggested-by: Andy Lutomirski <luto@kernel.org>\nSuggested-by: Will Deacon <will.deacon@arm.com>\nSigned-off-by: Rick Edgecombe <rick.p.edgecombe@intel.com>\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nCc: <akpm@linux-foundation.org>\nCc: <ard.biesheuvel@linaro.org>\nCc: <deneen.t.dock@intel.com>\nCc: <kernel-hardening@lists.openwall.com>\nCc: <kristen@linux.intel.com>\nCc: <linux_dti@icloud.com>\nCc: Borislav Petkov <bp@alien8.de>\nCc: H. Peter Anvin <hpa@zytor.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Nadav Amit <nadav.amit@gmail.com>\nCc: Rik van Riel <riel@surriel.com>\nCc: Thomas Gleixner <tglx@linutronix.de>\nLink: https://lkml.kernel.org/r/20190426001143.4983-17-namit@vmware.com\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "author_name": "Rick Edgecombe",
  "author_email": "rick.p.edgecombe@intel.com",
  "author_date": "Thu Apr 25 17:11:36 2019 -0700",
  "author_date_iso": "2019-04-25T17:11:36-07:00",
  "committer_name": "Ingo Molnar",
  "committer_email": "mingo@kernel.org",
  "committer_date": "Tue Apr 30 12:37:58 2019 +0200",
  "committer_date_iso": "2019-04-30T12:37:58+02:00",
  "files_changed": [
    "include/linux/vmalloc.h",
    "mm/vmalloc.c"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "include/linux/vmalloc.h",
      "insertions": 15,
      "deletions": 0
    },
    {
      "file": "mm/vmalloc.c",
      "insertions": 94,
      "deletions": 19
    }
  ],
  "total_insertions": 109,
  "total_deletions": 19,
  "total_changes": 128,
  "parents": [
    "d63326928611600ad65baff54a70f53b02b3cdfe"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.2",
    "v5.2-rc1",
    "v5.2-rc2",
    "v5.2-rc3",
    "v5.2-rc4",
    "v5.2-rc5",
    "v5.2-rc6",
    "v5.2-rc7",
    "v5.3",
    "v5.3-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/linux/vmalloc.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/vmalloc.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}