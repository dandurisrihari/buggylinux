{
  "hash": "513dc792d6060d5ef572e43852683097a8420f56",
  "hash_short": "513dc792",
  "subject": "vgacon: Fix a UAF in vgacon_invert_region",
  "body": "When syzkaller tests, there is a UAF:\n  BUG: KASan: use after free in vgacon_invert_region+0x9d/0x110 at addr\n    ffff880000100000\n  Read of size 2 by task syz-executor.1/16489\n  page:ffffea0000004000 count:0 mapcount:-127 mapping:          (null)\n  index:0x0\n  page flags: 0xfffff00000000()\n  page dumped because: kasan: bad access detected\n  CPU: 1 PID: 16489 Comm: syz-executor.1 Not tainted\n  Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS\n  rel-1.9.3-0-ge2fc41e-prebuilt.qemu-project.org 04/01/2014\n  Call Trace:\n    [<ffffffffb119f309>] dump_stack+0x1e/0x20\n    [<ffffffffb04af957>] kasan_report+0x577/0x950\n    [<ffffffffb04ae652>] __asan_load2+0x62/0x80\n    [<ffffffffb090f26d>] vgacon_invert_region+0x9d/0x110\n    [<ffffffffb0a39d95>] invert_screen+0xe5/0x470\n    [<ffffffffb0a21dcb>] set_selection+0x44b/0x12f0\n    [<ffffffffb0a3bfae>] tioclinux+0xee/0x490\n    [<ffffffffb0a1d114>] vt_ioctl+0xff4/0x2670\n    [<ffffffffb0a0089a>] tty_ioctl+0x46a/0x1a10\n    [<ffffffffb052db3d>] do_vfs_ioctl+0x5bd/0xc40\n    [<ffffffffb052e2f2>] SyS_ioctl+0x132/0x170\n    [<ffffffffb11c9b1b>] system_call_fastpath+0x22/0x27\n    Memory state around the buggy address:\n     ffff8800000fff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n     00 00\n     ffff8800000fff80: 00 00 00 00 00 00 00 00 00 00 00 00 00\n     00 00 00\n    >ffff880000100000: ff ff ff ff ff ff ff ff ff ff ff ff ff\n     ff ff ff\n\nIt can be reproduce in the linux mainline by the program:\n  #include <stdio.h>\n  #include <stdlib.h>\n  #include <unistd.h>\n  #include <fcntl.h>\n  #include <sys/types.h>\n  #include <sys/stat.h>\n  #include <sys/ioctl.h>\n  #include <linux/vt.h>\n\n  struct tiocl_selection {\n    unsigned short xs;      /* X start */\n    unsigned short ys;      /* Y start */\n    unsigned short xe;      /* X end */\n    unsigned short ye;      /* Y end */\n    unsigned short sel_mode; /* selection mode */\n  };\n\n  #define TIOCL_SETSEL    2\n  struct tiocl {\n    unsigned char type;\n    unsigned char pad;\n    struct tiocl_selection sel;\n  };\n\n  int main()\n  {\n    int fd = 0;\n    const char *dev = \"/dev/char/4:1\";\n\n    struct vt_consize v = {0};\n    struct tiocl tioc = {0};\n\n    fd = open(dev, O_RDWR, 0);\n\n    v.v_rows = 3346;\n    ioctl(fd, VT_RESIZEX, &v);\n\n    tioc.type = TIOCL_SETSEL;\n    ioctl(fd, TIOCLINUX, &tioc);\n\n    return 0;\n  }\n\nWhen resize the screen, update the 'vc->vc_size_row' to the new_row_size,\nbut when 'set_origin' in 'vgacon_set_origin', vgacon use 'vga_vram_base'\nfor 'vc_origin' and 'vc_visible_origin', not 'vc_screenbuf'. It maybe\nsmaller than 'vc_screenbuf'. When TIOCLINUX, use the new_row_size to calc\nthe offset, it maybe larger than the vga_vram_size in vgacon driver, then\nbad access.\nAlso, if set an larger screenbuf firstly, then set an more larger\nscreenbuf, when copy old_origin to new_origin, a bad access may happen.\n\nSo, If the screen size larger than vga_vram, resize screen should be\nfailed. This alse fix CVE-2020-8649 and CVE-2020-8647.\n\nLinus pointed out that overflow checking seems absent. We're saved by\nthe existing bounds checks in vc_do_resize() with rather strict\nlimits:\n\n\tif (cols > VC_RESIZE_MAXCOL || lines > VC_RESIZE_MAXROW)\n\t\treturn -EINVAL;\n\nFixes: 0aec4867dca14 (\"[PATCH] SVGATextMode fix\")\nReference: CVE-2020-8647 and CVE-2020-8649\nReported-by: Hulk Robot <hulkci@huawei.com>\nSigned-off-by: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>\n[danvet: augment commit message to point out overflow safety]\nCc: stable@vger.kernel.org\nSigned-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>\nLink: https://patchwork.freedesktop.org/patch/msgid/20200304022429.37738-1-zhangxiaoxu5@huawei.com",
  "full_message": "vgacon: Fix a UAF in vgacon_invert_region\n\nWhen syzkaller tests, there is a UAF:\n  BUG: KASan: use after free in vgacon_invert_region+0x9d/0x110 at addr\n    ffff880000100000\n  Read of size 2 by task syz-executor.1/16489\n  page:ffffea0000004000 count:0 mapcount:-127 mapping:          (null)\n  index:0x0\n  page flags: 0xfffff00000000()\n  page dumped because: kasan: bad access detected\n  CPU: 1 PID: 16489 Comm: syz-executor.1 Not tainted\n  Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS\n  rel-1.9.3-0-ge2fc41e-prebuilt.qemu-project.org 04/01/2014\n  Call Trace:\n    [<ffffffffb119f309>] dump_stack+0x1e/0x20\n    [<ffffffffb04af957>] kasan_report+0x577/0x950\n    [<ffffffffb04ae652>] __asan_load2+0x62/0x80\n    [<ffffffffb090f26d>] vgacon_invert_region+0x9d/0x110\n    [<ffffffffb0a39d95>] invert_screen+0xe5/0x470\n    [<ffffffffb0a21dcb>] set_selection+0x44b/0x12f0\n    [<ffffffffb0a3bfae>] tioclinux+0xee/0x490\n    [<ffffffffb0a1d114>] vt_ioctl+0xff4/0x2670\n    [<ffffffffb0a0089a>] tty_ioctl+0x46a/0x1a10\n    [<ffffffffb052db3d>] do_vfs_ioctl+0x5bd/0xc40\n    [<ffffffffb052e2f2>] SyS_ioctl+0x132/0x170\n    [<ffffffffb11c9b1b>] system_call_fastpath+0x22/0x27\n    Memory state around the buggy address:\n     ffff8800000fff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n     00 00\n     ffff8800000fff80: 00 00 00 00 00 00 00 00 00 00 00 00 00\n     00 00 00\n    >ffff880000100000: ff ff ff ff ff ff ff ff ff ff ff ff ff\n     ff ff ff\n\nIt can be reproduce in the linux mainline by the program:\n  #include <stdio.h>\n  #include <stdlib.h>\n  #include <unistd.h>\n  #include <fcntl.h>\n  #include <sys/types.h>\n  #include <sys/stat.h>\n  #include <sys/ioctl.h>\n  #include <linux/vt.h>\n\n  struct tiocl_selection {\n    unsigned short xs;      /* X start */\n    unsigned short ys;      /* Y start */\n    unsigned short xe;      /* X end */\n    unsigned short ye;      /* Y end */\n    unsigned short sel_mode; /* selection mode */\n  };\n\n  #define TIOCL_SETSEL    2\n  struct tiocl {\n    unsigned char type;\n    unsigned char pad;\n    struct tiocl_selection sel;\n  };\n\n  int main()\n  {\n    int fd = 0;\n    const char *dev = \"/dev/char/4:1\";\n\n    struct vt_consize v = {0};\n    struct tiocl tioc = {0};\n\n    fd = open(dev, O_RDWR, 0);\n\n    v.v_rows = 3346;\n    ioctl(fd, VT_RESIZEX, &v);\n\n    tioc.type = TIOCL_SETSEL;\n    ioctl(fd, TIOCLINUX, &tioc);\n\n    return 0;\n  }\n\nWhen resize the screen, update the 'vc->vc_size_row' to the new_row_size,\nbut when 'set_origin' in 'vgacon_set_origin', vgacon use 'vga_vram_base'\nfor 'vc_origin' and 'vc_visible_origin', not 'vc_screenbuf'. It maybe\nsmaller than 'vc_screenbuf'. When TIOCLINUX, use the new_row_size to calc\nthe offset, it maybe larger than the vga_vram_size in vgacon driver, then\nbad access.\nAlso, if set an larger screenbuf firstly, then set an more larger\nscreenbuf, when copy old_origin to new_origin, a bad access may happen.\n\nSo, If the screen size larger than vga_vram, resize screen should be\nfailed. This alse fix CVE-2020-8649 and CVE-2020-8647.\n\nLinus pointed out that overflow checking seems absent. We're saved by\nthe existing bounds checks in vc_do_resize() with rather strict\nlimits:\n\n\tif (cols > VC_RESIZE_MAXCOL || lines > VC_RESIZE_MAXROW)\n\t\treturn -EINVAL;\n\nFixes: 0aec4867dca14 (\"[PATCH] SVGATextMode fix\")\nReference: CVE-2020-8647 and CVE-2020-8649\nReported-by: Hulk Robot <hulkci@huawei.com>\nSigned-off-by: Zhang Xiaoxu <zhangxiaoxu5@huawei.com>\n[danvet: augment commit message to point out overflow safety]\nCc: stable@vger.kernel.org\nSigned-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>\nLink: https://patchwork.freedesktop.org/patch/msgid/20200304022429.37738-1-zhangxiaoxu5@huawei.com",
  "author_name": "Zhang Xiaoxu",
  "author_email": "zhangxiaoxu5@huawei.com",
  "author_date": "Wed Mar 4 10:24:29 2020 +0800",
  "author_date_iso": "2020-03-04T10:24:29+08:00",
  "committer_name": "Daniel Vetter",
  "committer_email": "daniel.vetter@ffwll.ch",
  "committer_date": "Fri Mar 6 21:06:34 2020 +0100",
  "committer_date_iso": "2020-03-06T21:06:34+01:00",
  "files_changed": [
    "drivers/video/console/vgacon.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "drivers/video/console/vgacon.c",
      "insertions": 3,
      "deletions": 0
    }
  ],
  "total_insertions": 3,
  "total_deletions": 0,
  "total_changes": 3,
  "parents": [
    "2ac4853e295bba53209917e14af701c45c99ce04"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.6",
    "v5.6-rc5",
    "v5.6-rc6",
    "v5.6-rc7",
    "v5.7-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2020-8649",
      "CVE-2020-8647",
      "CVE-2020-8647",
      "CVE-2020-8649"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "drivers/video/console/vgacon.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}