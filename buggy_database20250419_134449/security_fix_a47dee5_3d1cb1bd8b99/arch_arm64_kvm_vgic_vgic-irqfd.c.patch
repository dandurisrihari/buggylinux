commit a47dee5513cd7b6d1e20dfecd458363f24a19cdc
Author: Marc Zyngier <maz@kernel.org>
Date:   Mon May 25 09:45:21 2020 +0100

    KVM: arm64: Allow in-atomic injection of SPIs
    
    On a system that uses SPIs to implement MSIs (as it would be
    the case on a GICv2 system exposing a GICv2m to its guests),
    we deny the possibility of injecting SPIs on the in-atomic
    fast-path.
    
    This results in a very large amount of context-switches
    (roughly equivalent to twice the interrupt rate) on the host,
    and suboptimal performance for the guest (as measured with
    a test workload involving a virtio interface backed by vhost-net).
    Given that GICv2 systems are usually on the low-end of the spectrum
    performance wise, they could do without the aggravation.
    
    We solved this for GICv3+ITS by having a translation cache. But
    SPIs do not need any extra infrastructure, and can be immediately
    injected in the virtual distributor as the locking is already
    heavy enough that we don't need to worry about anything.
    
    This halves the number of context switches for the same workload.
    
    Reviewed-by: Eric Auger <eric.auger@redhat.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>

diff --git a/arch/arm64/kvm/vgic/vgic-irqfd.c b/arch/arm64/kvm/vgic/vgic-irqfd.c
index d8cdfea5cc96..79f8899b234c 100644
--- a/arch/arm64/kvm/vgic/vgic-irqfd.c
+++ b/arch/arm64/kvm/vgic/vgic-irqfd.c
@@ -100,19 +100,33 @@ int kvm_set_msi(struct kvm_kernel_irq_routing_entry *e,
 
 /**
  * kvm_arch_set_irq_inatomic: fast-path for irqfd injection
- *
- * Currently only direct MSI injection is supported.
  */
 int kvm_arch_set_irq_inatomic(struct kvm_kernel_irq_routing_entry *e,
 			      struct kvm *kvm, int irq_source_id, int level,
 			      bool line_status)
 {
-	if (e->type == KVM_IRQ_ROUTING_MSI && vgic_has_its(kvm) && level) {
+	if (!level)
+		return -EWOULDBLOCK;
+
+	switch (e->type) {
+	case KVM_IRQ_ROUTING_MSI: {
 		struct kvm_msi msi;
 
+		if (!vgic_has_its(kvm))
+			break;
+
 		kvm_populate_msi(e, &msi);
-		if (!vgic_its_inject_cached_translation(kvm, &msi))
-			return 0;
+		return vgic_its_inject_cached_translation(kvm, &msi);
+	}
+
+	case KVM_IRQ_ROUTING_IRQCHIP:
+		/*
+		 * Injecting SPIs is always possible in atomic context
+		 * as long as the damn vgic is initialized.
+		 */
+		if (unlikely(!vgic_initialized(kvm)))
+			break;
+		return vgic_irqfd_set_irq(e, kvm, irq_source_id, 1, line_status);
 	}
 
 	return -EWOULDBLOCK;