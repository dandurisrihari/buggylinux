diff --cc Documentation/admin-guide/kernel-parameters.txt
index 08df58805703,18cad2b0392a..43176340c73d
--- a/Documentation/admin-guide/kernel-parameters.txt
+++ b/Documentation/admin-guide/kernel-parameters.txt
@@@ -2557,14 -2550,13 +2583,15 @@@
  				improves system performance, but it may also
  				expose users to several CPU vulnerabilities.
  				Equivalent to: nopti [X86,PPC]
 +					       kpti=0 [ARM64]
  					       nospectre_v1 [PPC]
  					       nobp=0 [S390]
 -					       nospectre_v2 [X86,PPC,S390]
 +					       nospectre_v2 [X86,PPC,S390,ARM64]
  					       spectre_v2_user=off [X86]
  					       spec_store_bypass_disable=off [X86,PPC]
 +					       ssbd=force-off [ARM64]
  					       l1tf=off [X86]
+ 					       mds=off [X86]
  
  			auto (default)
  				Mitigate all CPU vulnerabilities, but leave SMT
diff --cc Documentation/index.rst
index 9e01aace4f48,63864826dcd6..a7566ef62411
--- a/Documentation/index.rst
+++ b/Documentation/index.rst
@@@ -112,8 -100,8 +112,9 @@@ implementation
  .. toctree::
     :maxdepth: 2
  
 +   x86/index
     sh/index
+    x86/index
  
  Filesystem Documentation
  ------------------------
diff --cc Documentation/x86/index.rst
index 73a487957fd4,ef389dcf1b1d..ae36fc5fc649
--- a/Documentation/x86/index.rst
+++ b/Documentation/x86/index.rst
@@@ -5,26 -3,6 +5,27 @@@ x86-specific Documentatio
  ==========================
  
  .. toctree::
 -   :maxdepth: 1
 +   :maxdepth: 2
 +   :numbered:
  
 +   boot
 +   topology
 +   exception-tables
 +   kernel-stacks
 +   entry_64
 +   earlyprintk
 +   orc-unwinder
 +   zero-page
 +   tlb
 +   mtrr
 +   pat
 +   protection-keys
 +   intel_mpx
 +   amd-memory-encryption
 +   pti
+    mds
 +   microcode
 +   resctrl_ui
 +   usb-legacy-support
 +   i386/index
 +   x86_64/index
diff --cc arch/x86/entry/common.c
index 51beb8d29123,19f650d729f5..a986b3c8294c
--- a/arch/x86/entry/common.c
+++ b/arch/x86/entry/common.c
@@@ -30,8 -29,9 +30,9 @@@
  #include <asm/desc.h>
  #include <asm/traps.h>
  #include <asm/vdso.h>
 -#include <linux/uaccess.h>
  #include <asm/cpufeature.h>
 +#include <asm/fpu/api.h>
+ #include <asm/nospec-branch.h>
  
  #define CREATE_TRACE_POINTS
  #include <trace/events/syscalls.h>
diff --cc arch/x86/include/asm/cpufeatures.h
index 981ff9479648,bdcea163850a..75f27ee2c263
--- a/arch/x86/include/asm/cpufeatures.h
+++ b/arch/x86/include/asm/cpufeatures.h
@@@ -344,7 -344,7 +344,8 @@@
  /* Intel-defined CPU features, CPUID level 0x00000007:0 (EDX), word 18 */
  #define X86_FEATURE_AVX512_4VNNIW	(18*32+ 2) /* AVX-512 Neural Network Instructions */
  #define X86_FEATURE_AVX512_4FMAPS	(18*32+ 3) /* AVX-512 Multiply Accumulation Single precision */
+ #define X86_FEATURE_MD_CLEAR		(18*32+10) /* VERW clears CPU buffers */
 +#define X86_FEATURE_TSX_FORCE_ABORT	(18*32+13) /* "" TSX_FORCE_ABORT */
  #define X86_FEATURE_PCONFIG		(18*32+18) /* Intel PCONFIG */
  #define X86_FEATURE_SPEC_CTRL		(18*32+26) /* "" Speculation Control (IBRS + IBPB) */
  #define X86_FEATURE_INTEL_STIBP		(18*32+27) /* "" Single Thread Indirect Branch Predictors */
diff --cc arch/x86/kvm/vmx/vmx.c
index 9663d41cc2bc,b0597507bde7..e1fa935a545f
--- a/arch/x86/kvm/vmx/vmx.c
+++ b/arch/x86/kvm/vmx/vmx.c
@@@ -6431,16 -6575,7 +6431,19 @@@ static void vmx_vcpu_run(struct kvm_vcp
  	 */
  	x86_spec_ctrl_set_guest(vmx->spec_ctrl, 0);
  
 -	__vmx_vcpu_run(vcpu, vmx);
++	/* L1D Flush includes CPU buffer clear to mitigate MDS */
 +	if (static_branch_unlikely(&vmx_l1d_should_flush))
 +		vmx_l1d_flush(vcpu);
++	else if (static_branch_unlikely(&mds_user_clear))
++		mds_clear_cpu_buffers();
 +
 +	if (vcpu->arch.cr2 != read_cr2())
 +		write_cr2(vcpu->arch.cr2);
 +
 +	vmx->fail = __vmx_vcpu_run(vmx, (unsigned long *)&vcpu->arch.regs,
 +				   vmx->loaded_vmcs->launched);
 +
 +	vcpu->arch.cr2 = read_cr2();
  
  	/*
  	 * We do not use IBRS in the kernel. If this vCPU has used the