{
  "hash": "fa4bff165070dc40a3de35b78e4f8da8e8d85ec5",
  "hash_short": "fa4bff16",
  "subject": "Merge branch 'x86-mds-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip",
  "body": "Pull x86 MDS mitigations from Thomas Gleixner:\n \"Microarchitectural Data Sampling (MDS) is a hardware vulnerability\n  which allows unprivileged speculative access to data which is\n  available in various CPU internal buffers. This new set of misfeatures\n  has the following CVEs assigned:\n\n     CVE-2018-12126  MSBDS  Microarchitectural Store Buffer Data Sampling\n     CVE-2018-12130  MFBDS  Microarchitectural Fill Buffer Data Sampling\n     CVE-2018-12127  MLPDS  Microarchitectural Load Port Data Sampling\n     CVE-2019-11091  MDSUM  Microarchitectural Data Sampling Uncacheable Memory\n\n  MDS attacks target microarchitectural buffers which speculatively\n  forward data under certain conditions. Disclosure gadgets can expose\n  this data via cache side channels.\n\n  Contrary to other speculation based vulnerabilities the MDS\n  vulnerability does not allow the attacker to control the memory target\n  address. As a consequence the attacks are purely sampling based, but\n  as demonstrated with the TLBleed attack samples can be postprocessed\n  successfully.\n\n  The mitigation is to flush the microarchitectural buffers on return to\n  user space and before entering a VM. It's bolted on the VERW\n  instruction and requires a microcode update. As some of the attacks\n  exploit data structures shared between hyperthreads, full protection\n  requires to disable hyperthreading. The kernel does not do that by\n  default to avoid breaking unattended updates.\n\n  The mitigation set comes with documentation for administrators and a\n  deeper technical view\"\n\n* 'x86-mds-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (23 commits)\n  x86/speculation/mds: Fix documentation typo\n  Documentation: Correct the possible MDS sysfs values\n  x86/mds: Add MDSUM variant to the MDS documentation\n  x86/speculation/mds: Add 'mitigations=' support for MDS\n  x86/speculation/mds: Print SMT vulnerable on MSBDS with mitigations off\n  x86/speculation/mds: Fix comment\n  x86/speculation/mds: Add SMT warning message\n  x86/speculation: Move arch_smt_update() call to after mitigation decisions\n  x86/speculation/mds: Add mds=full,nosmt cmdline option\n  Documentation: Add MDS vulnerability documentation\n  Documentation: Move L1TF to separate directory\n  x86/speculation/mds: Add mitigation mode VMWERV\n  x86/speculation/mds: Add sysfs reporting for MDS\n  x86/speculation/mds: Add mitigation control for MDS\n  x86/speculation/mds: Conditionally clear CPU buffers on idle entry\n  x86/kvm/vmx: Add MDS protection when L1D Flush is not active\n  x86/speculation/mds: Clear CPU buffers on exit to user\n  x86/speculation/mds: Add mds_clear_cpu_buffers()\n  x86/kvm: Expose X86_FEATURE_MD_CLEAR to guests\n  x86/speculation/mds: Add BUG_MSBDS_ONLY\n  ...",
  "full_message": "Merge branch 'x86-mds-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip\n\nPull x86 MDS mitigations from Thomas Gleixner:\n \"Microarchitectural Data Sampling (MDS) is a hardware vulnerability\n  which allows unprivileged speculative access to data which is\n  available in various CPU internal buffers. This new set of misfeatures\n  has the following CVEs assigned:\n\n     CVE-2018-12126  MSBDS  Microarchitectural Store Buffer Data Sampling\n     CVE-2018-12130  MFBDS  Microarchitectural Fill Buffer Data Sampling\n     CVE-2018-12127  MLPDS  Microarchitectural Load Port Data Sampling\n     CVE-2019-11091  MDSUM  Microarchitectural Data Sampling Uncacheable Memory\n\n  MDS attacks target microarchitectural buffers which speculatively\n  forward data under certain conditions. Disclosure gadgets can expose\n  this data via cache side channels.\n\n  Contrary to other speculation based vulnerabilities the MDS\n  vulnerability does not allow the attacker to control the memory target\n  address. As a consequence the attacks are purely sampling based, but\n  as demonstrated with the TLBleed attack samples can be postprocessed\n  successfully.\n\n  The mitigation is to flush the microarchitectural buffers on return to\n  user space and before entering a VM. It's bolted on the VERW\n  instruction and requires a microcode update. As some of the attacks\n  exploit data structures shared between hyperthreads, full protection\n  requires to disable hyperthreading. The kernel does not do that by\n  default to avoid breaking unattended updates.\n\n  The mitigation set comes with documentation for administrators and a\n  deeper technical view\"\n\n* 'x86-mds-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (23 commits)\n  x86/speculation/mds: Fix documentation typo\n  Documentation: Correct the possible MDS sysfs values\n  x86/mds: Add MDSUM variant to the MDS documentation\n  x86/speculation/mds: Add 'mitigations=' support for MDS\n  x86/speculation/mds: Print SMT vulnerable on MSBDS with mitigations off\n  x86/speculation/mds: Fix comment\n  x86/speculation/mds: Add SMT warning message\n  x86/speculation: Move arch_smt_update() call to after mitigation decisions\n  x86/speculation/mds: Add mds=full,nosmt cmdline option\n  Documentation: Add MDS vulnerability documentation\n  Documentation: Move L1TF to separate directory\n  x86/speculation/mds: Add mitigation mode VMWERV\n  x86/speculation/mds: Add sysfs reporting for MDS\n  x86/speculation/mds: Add mitigation control for MDS\n  x86/speculation/mds: Conditionally clear CPU buffers on idle entry\n  x86/kvm/vmx: Add MDS protection when L1D Flush is not active\n  x86/speculation/mds: Clear CPU buffers on exit to user\n  x86/speculation/mds: Add mds_clear_cpu_buffers()\n  x86/kvm: Expose X86_FEATURE_MD_CLEAR to guests\n  x86/speculation/mds: Add BUG_MSBDS_ONLY\n  ...",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Tue May 14 07:57:29 2019 -0700",
  "author_date_iso": "2019-05-14T07:57:29-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Tue May 14 07:57:29 2019 -0700",
  "committer_date_iso": "2019-05-14T07:57:29-07:00",
  "files_changed": [
    "Documentation/ABI/testing/sysfs-devices-system-cpu",
    "Documentation/admin-guide/index.rst",
    "Documentation/admin-guide/kernel-parameters.txt",
    "Documentation/index.rst",
    "Documentation/x86/index.rst",
    "arch/x86/entry/common.c",
    "arch/x86/include/asm/cpufeatures.h",
    "arch/x86/include/asm/msr-index.h",
    "arch/x86/include/asm/nospec-branch.h",
    "arch/x86/include/asm/processor.h",
    "arch/x86/kernel/cpu/bugs.c",
    "arch/x86/kernel/cpu/common.c",
    "arch/x86/kernel/nmi.c",
    "arch/x86/kernel/traps.c",
    "arch/x86/kvm/cpuid.c",
    "arch/x86/kvm/vmx/vmx.c",
    "drivers/base/cpu.c",
    "include/linux/cpu.h"
  ],
  "files_changed_count": 18,
  "stats": [
    {
      "file": "Documentation/ABI/testing/sysfs-devices-system-cpu",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "Documentation/admin-guide/hw-vuln/index.rst",
      "insertions": 13,
      "deletions": 0
    },
    {
      "file": "Documentation/admin-guide/{ => hw-vuln}/l1tf.rst",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "Documentation/admin-guide/hw-vuln/mds.rst",
      "insertions": 308,
      "deletions": 0
    },
    {
      "file": "Documentation/admin-guide/index.rst",
      "insertions": 2,
      "deletions": 4
    },
    {
      "file": "Documentation/admin-guide/kernel-parameters.txt",
      "insertions": 29,
      "deletions": 1
    },
    {
      "file": "Documentation/index.rst",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "Documentation/x86/conf.py",
      "insertions": 10,
      "deletions": 0
    },
    {
      "file": "Documentation/x86/index.rst",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "Documentation/x86/mds.rst",
      "insertions": 225,
      "deletions": 0
    },
    {
      "file": "arch/x86/entry/common.c",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/cpufeatures.h",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/irqflags.h",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/msr-index.h",
      "insertions": 23,
      "deletions": 16
    },
    {
      "file": "arch/x86/include/asm/mwait.h",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/nospec-branch.h",
      "insertions": 50,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/processor.h",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/cpu/bugs.c",
      "insertions": 131,
      "deletions": 4
    },
    {
      "file": "arch/x86/kernel/cpu/common.c",
      "insertions": 71,
      "deletions": 50
    },
    {
      "file": "arch/x86/kernel/nmi.c",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/traps.c",
      "insertions": 8,
      "deletions": 0
    },
    {
      "file": "arch/x86/kvm/cpuid.c",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "arch/x86/kvm/vmx/vmx.c",
      "insertions": 5,
      "deletions": 2
    },
    {
      "file": "drivers/base/cpu.c",
      "insertions": 8,
      "deletions": 0
    },
    {
      "file": "include/linux/cpu.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "tools/power/x86/turbostat/Makefile",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "tools/power/x86/x86_energy_perf_policy/Makefile",
      "insertions": 1,
      "deletions": 1
    }
  ],
  "total_insertions": 921,
  "total_deletions": 82,
  "total_changes": 1003,
  "parents": [
    "63863ee8e2f6f6ae47be3dff4af2f2806f5ca2dd",
    "95310e348a321b45fb746c176961d4da72344282"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.2",
    "v5.2-rc1",
    "v5.2-rc2",
    "v5.2-rc3",
    "v5.2-rc4",
    "v5.2-rc5",
    "v5.2-rc6",
    "v5.2-rc7",
    "v5.3",
    "v5.3-rc1"
  ],
  "is_merge": true,
  "security_info": {
    "cve_ids": [
      "CVE-2018-12126",
      "CVE-2018-12130",
      "CVE-2018-12127",
      "CVE-2019-11091"
    ],
    "security_keywords": [
      "vulnerability",
      "exploit"
    ]
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "Documentation/index.rst",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "Documentation/x86/index.rst",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "Documentation/admin-guide/index.rst",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/cpufeatures.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/msr-index.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/entry/common.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "Documentation/ABI/testing/sysfs-devices-system-cpu",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/nospec-branch.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/cpu/bugs.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/processor.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "Documentation/admin-guide/kernel-parameters.txt",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/traps.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/cpu/common.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kvm/cpuid.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/nmi.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/base/cpu.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/cpu.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kvm/vmx/vmx.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}