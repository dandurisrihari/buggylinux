{
  "hash": "7f4ce97cd5edf723c7f2e32668481b6aa86c9ec6",
  "hash_short": "7f4ce97c",
  "subject": "bpf: generalize MAYBE_NULL vs non-MAYBE_NULL rule",
  "body": "Make generic check to prevent XXX_OR_NULL and XXX register types to be\nintermixed. While technically in some situations it could be safe, it's\nimpossible to enforce due to the loss of an ID when converting\nXXX_OR_NULL to its non-NULL variant. So prevent this in general, not\njust for PTR_TO_MAP_KEY and PTR_TO_MAP_VALUE.\n\nPTR_TO_MAP_KEY_OR_NULL and PTR_TO_MAP_VALUE_OR_NULL checks, which were\npreviously special-cased, are simplified to generic check that takes\ninto account range_within() and tnum_in(). This is correct as BPF\nverifier doesn't allow arithmetic on XXX_OR_NULL register types, so\nvar_off and ranges should stay zero. But even if in the future this\nrestriction is lifted, it's even more important to enforce that var_off\nand ranges are compatible, otherwise it's possible to construct case\nwhere this can be exploited to bypass verifier's memory range safety\nchecks.\n\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/r/20221223054921.958283-4-andrii@kernel.org\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>",
  "full_message": "bpf: generalize MAYBE_NULL vs non-MAYBE_NULL rule\n\nMake generic check to prevent XXX_OR_NULL and XXX register types to be\nintermixed. While technically in some situations it could be safe, it's\nimpossible to enforce due to the loss of an ID when converting\nXXX_OR_NULL to its non-NULL variant. So prevent this in general, not\njust for PTR_TO_MAP_KEY and PTR_TO_MAP_VALUE.\n\nPTR_TO_MAP_KEY_OR_NULL and PTR_TO_MAP_VALUE_OR_NULL checks, which were\npreviously special-cased, are simplified to generic check that takes\ninto account range_within() and tnum_in(). This is correct as BPF\nverifier doesn't allow arithmetic on XXX_OR_NULL register types, so\nvar_off and ranges should stay zero. But even if in the future this\nrestriction is lifted, it's even more important to enforce that var_off\nand ranges are compatible, otherwise it's possible to construct case\nwhere this can be exploited to bypass verifier's memory range safety\nchecks.\n\nSigned-off-by: Andrii Nakryiko <andrii@kernel.org>\nLink: https://lore.kernel.org/r/20221223054921.958283-4-andrii@kernel.org\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>",
  "author_name": "Andrii Nakryiko",
  "author_email": "andrii@kernel.org",
  "author_date": "Thu Dec 22 21:49:17 2022 -0800",
  "author_date_iso": "2022-12-22T21:49:17-08:00",
  "committer_name": "Alexei Starovoitov",
  "committer_email": "ast@kernel.org",
  "committer_date": "Tue Dec 27 17:37:07 2022 -0800",
  "committer_date_iso": "2022-12-27T17:37:07-08:00",
  "files_changed": [
    "kernel/bpf/verifier.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "kernel/bpf/verifier.c",
      "insertions": 15,
      "deletions": 16
    }
  ],
  "total_insertions": 15,
  "total_deletions": 16,
  "total_changes": 31,
  "parents": [
    "a73bf9f2d969cbb04d5ca778f2a224060cda1027"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "bypass"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "kernel/bpf/verifier.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}