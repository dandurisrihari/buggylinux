{
  "hash": "28d06353881939703c34d82a1465136af176c620",
  "hash_short": "28d06353",
  "subject": "kvm: nVMX: Disallow userspace-injected exceptions in guest mode",
  "body": "The userspace exception injection API and code path are entirely\nunprepared for exceptions that might cause a VM-exit from L2 to L1, so\nthe best course of action may be to simply disallow this for now.\n\n1. The API provides no mechanism for userspace to specify the new DR6\nbits for a #DB exception or the new CR2 value for a #PF\nexception. Presumably, userspace is expected to modify these registers\ndirectly with KVM_SET_SREGS before the next KVM_RUN ioctl. However, in\nthe event that L1 intercepts the exception, these registers should not\nbe changed. Instead, the new values should be provided in the\nexit_qualification field of vmcs12 (Intel SDM vol 3, section 27.1).\n\n2. In the case of a userspace-injected #DB, inject_pending_event()\nclears DR7.GD before calling vmx_queue_exception(). However, in the\nevent that L1 intercepts the exception, this is too early, because\nDR7.GD should not be modified by a #DB that causes a VM-exit directly\n(Intel SDM vol 3, section 27.1).\n\n3. If the injected exception is a #PF, nested_vmx_check_exception()\ndoesn't properly check whether or not L1 is interested in the\nassociated error code (using the #PF error code mask and match fields\nfrom vmcs12). It may either return 0 when it should call\nnested_vmx_vmexit() or vice versa.\n\n4. nested_vmx_check_exception() assumes that it is dealing with a\nhardware-generated exception intercept from L2, with some of the\nrelevant details (the VM-exit interruption-information and the exit\nqualification) live in vmcs02. For userspace-injected exceptions, this\nis not the case.\n\n5. prepare_vmcs12() assumes that when its exit_intr_info argument\nspecifies valid information with a valid error code that it can VMREAD\nthe VM-exit interruption error code from vmcs02. For\nuserspace-injected exceptions, this is not the case.\n\nSigned-off-by: Jim Mattson <jmattson@google.com>\nSigned-off-by: Radim Kr\u010dm\u00e1\u0159 <rkrcmar@redhat.com>",
  "full_message": "kvm: nVMX: Disallow userspace-injected exceptions in guest mode\n\nThe userspace exception injection API and code path are entirely\nunprepared for exceptions that might cause a VM-exit from L2 to L1, so\nthe best course of action may be to simply disallow this for now.\n\n1. The API provides no mechanism for userspace to specify the new DR6\nbits for a #DB exception or the new CR2 value for a #PF\nexception. Presumably, userspace is expected to modify these registers\ndirectly with KVM_SET_SREGS before the next KVM_RUN ioctl. However, in\nthe event that L1 intercepts the exception, these registers should not\nbe changed. Instead, the new values should be provided in the\nexit_qualification field of vmcs12 (Intel SDM vol 3, section 27.1).\n\n2. In the case of a userspace-injected #DB, inject_pending_event()\nclears DR7.GD before calling vmx_queue_exception(). However, in the\nevent that L1 intercepts the exception, this is too early, because\nDR7.GD should not be modified by a #DB that causes a VM-exit directly\n(Intel SDM vol 3, section 27.1).\n\n3. If the injected exception is a #PF, nested_vmx_check_exception()\ndoesn't properly check whether or not L1 is interested in the\nassociated error code (using the #PF error code mask and match fields\nfrom vmcs12). It may either return 0 when it should call\nnested_vmx_vmexit() or vice versa.\n\n4. nested_vmx_check_exception() assumes that it is dealing with a\nhardware-generated exception intercept from L2, with some of the\nrelevant details (the VM-exit interruption-information and the exit\nqualification) live in vmcs02. For userspace-injected exceptions, this\nis not the case.\n\n5. prepare_vmcs12() assumes that when its exit_intr_info argument\nspecifies valid information with a valid error code that it can VMREAD\nthe VM-exit interruption error code from vmcs02. For\nuserspace-injected exceptions, this is not the case.\n\nSigned-off-by: Jim Mattson <jmattson@google.com>\nSigned-off-by: Radim Kr\u010dm\u00e1\u0159 <rkrcmar@redhat.com>",
  "author_name": "Jim Mattson",
  "author_email": "jmattson@google.com",
  "author_date": "Wed Apr 5 09:14:40 2017 -0700",
  "author_date_iso": "2017-04-05T09:14:40-07:00",
  "committer_name": "Radim Kr\u010dm\u00e1\u0159",
  "committer_email": "rkrcmar@redhat.com",
  "committer_date": "Fri Apr 7 16:49:01 2017 +0200",
  "committer_date_iso": "2017-04-07T16:49:01+02:00",
  "files_changed": [
    "arch/x86/kvm/x86.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/x86/kvm/x86.c",
      "insertions": 2,
      "deletions": 1
    }
  ],
  "total_insertions": 2,
  "total_deletions": 1,
  "total_changes": 3,
  "parents": [
    "28bf28887976d8881a3a59491896c718fade7355"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.12",
    "v4.12-rc1",
    "v4.12-rc2",
    "v4.12-rc3",
    "v4.12-rc4",
    "v4.12-rc5",
    "v4.12-rc6",
    "v4.12-rc7",
    "v4.13",
    "v4.13-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/kvm/x86.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}