commit 3dc9dc8969dc738285cb7d43e852c98459c8f0a9
Author: Nikolay Borisov <nborisov@suse.com>
Date:   Tue Sep 1 17:39:58 2020 +0300

    btrfs: eliminate total_size parameter from setup_items_for_insert
    
    The value of this argument can be derived from the total_data as it's
    simply the value of the data size + size of btrfs_items being touched.
    Move the parameter calculation inside the function. This results in a
    simpler interface and also a minor size reduction:
    
    ./scripts/bloat-o-meter ctree.original fs/btrfs/ctree.o
    add/remove: 0/0 grow/shrink: 0/3 up/down: 0/-34 (-34)
    Function                                     old     new   delta
    btrfs_duplicate_item                         260     259      -1
    setup_items_for_insert                      1200    1190     -10
    btrfs_insert_empty_items                     177     154     -23
    
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: Johannes Thumshirn <johannes.thumshirn@wdc.com>
    Signed-off-by: Nikolay Borisov <nborisov@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

diff --git a/fs/btrfs/tests/extent-buffer-tests.c b/fs/btrfs/tests/extent-buffer-tests.c
index a1b9f9b5978e..a792a1dfd6dd 100644
--- a/fs/btrfs/tests/extent-buffer-tests.c
+++ b/fs/btrfs/tests/extent-buffer-tests.c
@@ -60,8 +60,7 @@ static int test_btrfs_split_item(u32 sectorsize, u32 nodesize)
 	key.type = BTRFS_EXTENT_CSUM_KEY;
 	key.offset = 0;
 
-	setup_items_for_insert(root, path, &key, &value_len, value_len,
-			       value_len + sizeof(struct btrfs_item), 1);
+	setup_items_for_insert(root, path, &key, &value_len, value_len, 1);
 	item = btrfs_item_nr(0);
 	write_extent_buffer(eb, value, btrfs_item_ptr_offset(eb, 0),
 			    value_len);