{
  "hash": "cefdca0a86be517bc390fc4541e3674b8e7803b0",
  "hash_short": "cefdca0a",
  "subject": "userfaultfd/sysctl: add vm.unprivileged_userfaultfd",
  "body": "Userfaultfd can be misued to make it easier to exploit existing\nuse-after-free (and similar) bugs that might otherwise only make a\nshort window or race condition available.  By using userfaultfd to\nstall a kernel thread, a malicious program can keep some state that it\nwrote, stable for an extended period, which it can then access using an\nexisting exploit.  While it doesn't cause the exploit itself, and while\nit's not the only thing that can stall a kernel thread when accessing a\nmemory location, it's one of the few that never needs privilege.\n\nWe can add a flag, allowing userfaultfd to be restricted, so that in\ngeneral it won't be useable by arbitrary user programs, but in\nenvironments that require userfaultfd it can be turned back on.\n\nAdd a global sysctl knob \"vm.unprivileged_userfaultfd\" to control\nwhether userfaultfd is allowed by unprivileged users.  When this is\nset to zero, only privileged users (root user, or users with the\nCAP_SYS_PTRACE capability) will be able to use the userfaultfd\nsyscalls.\n\nAndrea said:\n\n: The only difference between the bpf sysctl and the userfaultfd sysctl\n: this way is that the bpf sysctl adds the CAP_SYS_ADMIN capability\n: requirement, while userfaultfd adds the CAP_SYS_PTRACE requirement,\n: because the userfaultfd monitor is more likely to need CAP_SYS_PTRACE\n: already if it's doing other kind of tracking on processes runtime, in\n: addition of userfaultfd.  In other words both syscalls works only for\n: root, when the two sysctl are opt-in set to 1.\n\n[dgilbert@redhat.com: changelog additions]\n[akpm@linux-foundation.org: documentation tweak, per Mike]\nLink: http://lkml.kernel.org/r/20190319030722.12441-2-peterx@redhat.com\nSigned-off-by: Peter Xu <peterx@redhat.com>\nSuggested-by: Andrea Arcangeli <aarcange@redhat.com>\nSuggested-by: Mike Rapoport <rppt@linux.ibm.com>\nReviewed-by: Mike Rapoport <rppt@linux.ibm.com>\nReviewed-by: Andrea Arcangeli <aarcange@redhat.com>\nCc: Paolo Bonzini <pbonzini@redhat.com>\nCc: Hugh Dickins <hughd@google.com>\nCc: Luis Chamberlain <mcgrof@kernel.org>\nCc: Maxime Coquelin <maxime.coquelin@redhat.com>\nCc: Maya Gokhale <gokhale2@llnl.gov>\nCc: Jerome Glisse <jglisse@redhat.com>\nCc: Pavel Emelyanov <xemul@virtuozzo.com>\nCc: Johannes Weiner <hannes@cmpxchg.org>\nCc: Martin Cracauer <cracauer@cons.org>\nCc: Denis Plotnikov <dplotnikov@virtuozzo.com>\nCc: Marty McFadden <mcfadden8@llnl.gov>\nCc: Mike Kravetz <mike.kravetz@oracle.com>\nCc: Kees Cook <keescook@chromium.org>\nCc: Mel Gorman <mgorman@suse.de>\nCc: \"Kirill A . Shutemov\" <kirill@shutemov.name>\nCc: \"Dr . David Alan Gilbert\" <dgilbert@redhat.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "full_message": "userfaultfd/sysctl: add vm.unprivileged_userfaultfd\n\nUserfaultfd can be misued to make it easier to exploit existing\nuse-after-free (and similar) bugs that might otherwise only make a\nshort window or race condition available.  By using userfaultfd to\nstall a kernel thread, a malicious program can keep some state that it\nwrote, stable for an extended period, which it can then access using an\nexisting exploit.  While it doesn't cause the exploit itself, and while\nit's not the only thing that can stall a kernel thread when accessing a\nmemory location, it's one of the few that never needs privilege.\n\nWe can add a flag, allowing userfaultfd to be restricted, so that in\ngeneral it won't be useable by arbitrary user programs, but in\nenvironments that require userfaultfd it can be turned back on.\n\nAdd a global sysctl knob \"vm.unprivileged_userfaultfd\" to control\nwhether userfaultfd is allowed by unprivileged users.  When this is\nset to zero, only privileged users (root user, or users with the\nCAP_SYS_PTRACE capability) will be able to use the userfaultfd\nsyscalls.\n\nAndrea said:\n\n: The only difference between the bpf sysctl and the userfaultfd sysctl\n: this way is that the bpf sysctl adds the CAP_SYS_ADMIN capability\n: requirement, while userfaultfd adds the CAP_SYS_PTRACE requirement,\n: because the userfaultfd monitor is more likely to need CAP_SYS_PTRACE\n: already if it's doing other kind of tracking on processes runtime, in\n: addition of userfaultfd.  In other words both syscalls works only for\n: root, when the two sysctl are opt-in set to 1.\n\n[dgilbert@redhat.com: changelog additions]\n[akpm@linux-foundation.org: documentation tweak, per Mike]\nLink: http://lkml.kernel.org/r/20190319030722.12441-2-peterx@redhat.com\nSigned-off-by: Peter Xu <peterx@redhat.com>\nSuggested-by: Andrea Arcangeli <aarcange@redhat.com>\nSuggested-by: Mike Rapoport <rppt@linux.ibm.com>\nReviewed-by: Mike Rapoport <rppt@linux.ibm.com>\nReviewed-by: Andrea Arcangeli <aarcange@redhat.com>\nCc: Paolo Bonzini <pbonzini@redhat.com>\nCc: Hugh Dickins <hughd@google.com>\nCc: Luis Chamberlain <mcgrof@kernel.org>\nCc: Maxime Coquelin <maxime.coquelin@redhat.com>\nCc: Maya Gokhale <gokhale2@llnl.gov>\nCc: Jerome Glisse <jglisse@redhat.com>\nCc: Pavel Emelyanov <xemul@virtuozzo.com>\nCc: Johannes Weiner <hannes@cmpxchg.org>\nCc: Martin Cracauer <cracauer@cons.org>\nCc: Denis Plotnikov <dplotnikov@virtuozzo.com>\nCc: Marty McFadden <mcfadden8@llnl.gov>\nCc: Mike Kravetz <mike.kravetz@oracle.com>\nCc: Kees Cook <keescook@chromium.org>\nCc: Mel Gorman <mgorman@suse.de>\nCc: \"Kirill A . Shutemov\" <kirill@shutemov.name>\nCc: \"Dr . David Alan Gilbert\" <dgilbert@redhat.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "author_name": "Peter Xu",
  "author_email": "peterx@redhat.com",
  "author_date": "Mon May 13 17:16:41 2019 -0700",
  "author_date_iso": "2019-05-13T17:16:41-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Tue May 14 09:47:45 2019 -0700",
  "committer_date_iso": "2019-05-14T09:47:45-07:00",
  "files_changed": [
    "Documentation/sysctl/vm.txt",
    "fs/userfaultfd.c",
    "include/linux/userfaultfd_k.h",
    "kernel/sysctl.c"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "Documentation/sysctl/vm.txt",
      "insertions": 12,
      "deletions": 0
    },
    {
      "file": "fs/userfaultfd.c",
      "insertions": 5,
      "deletions": 0
    },
    {
      "file": "include/linux/userfaultfd_k.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "kernel/sysctl.c",
      "insertions": 12,
      "deletions": 0
    }
  ],
  "total_insertions": 31,
  "total_deletions": 0,
  "total_changes": 31,
  "parents": [
    "f0fd50504a54f5548eb666dc16ddf8394e44e4b7"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.2",
    "v5.2-rc1",
    "v5.2-rc2",
    "v5.2-rc3",
    "v5.2-rc4",
    "v5.2-rc5",
    "v5.2-rc6",
    "v5.2-rc7",
    "v5.3",
    "v5.3-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "Documentation/sysctl/vm.txt",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/userfaultfd.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/userfaultfd_k.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/sysctl.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}