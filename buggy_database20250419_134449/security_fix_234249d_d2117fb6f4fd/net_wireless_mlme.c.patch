commit 234249d88b091d006b82f8d570343aae5f383736
Author: Wen Gong <quic_wgong@quicinc.com>
Date:   Fri Aug 25 03:00:55 2023 -0400

    wifi: cfg80211/mac80211: hold link BSSes when assoc fails for MLO connection
    
    When connect to MLO AP with more than one link, and the assoc response of
    AP is not success, then cfg80211_unhold_bss() is not called for all the
    links' cfg80211_bss except the primary link which means the link used by
    the latest successful association request. Thus the hold value of the
    cfg80211_bss is not reset to 0 after the assoc fail, and then the
    __cfg80211_unlink_bss() will not be called for the cfg80211_bss by
    __cfg80211_bss_expire().
    
    Then the AP always looks exist even the AP is shutdown or reconfigured
    to another type, then it will lead error while connecting it again.
    
    The detail info are as below.
    
    When connect with muti-links AP, cfg80211_hold_bss() is called by
    cfg80211_mlme_assoc() for each cfg80211_bss of all the links. When
    assoc response from AP is not success(such as status_code==1), the
    ieee80211_link_data of non-primary link(sdata->link[link_id]) is NULL
    because ieee80211_assoc_success()->ieee80211_vif_update_links() is
    not called for the links.
    
    Then struct cfg80211_rx_assoc_resp resp in cfg80211_rx_assoc_resp() and
    struct cfg80211_connect_resp_params cr in __cfg80211_connect_result()
    will only have the data of the primary link, and finally function
    cfg80211_connect_result_release_bsses() only call cfg80211_unhold_bss()
    for the primary link. Then cfg80211_bss of the other links will never free
    because its hold is always > 0 now.
    
    Hence assign value for the bss and status from assoc_data since it is
    valid for this case. Also assign value of addr from assoc_data when the
    link is NULL because the addrs of assoc_data and link both represent the
    local link addr and they are same value for success connection.
    
    Fixes: 81151ce462e5 ("wifi: mac80211: support MLO authentication/association with one link")
    Signed-off-by: Wen Gong <quic_wgong@quicinc.com>
    Link: https://lore.kernel.org/r/20230825070055.28164-1-quic_wgong@quicinc.com
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>

diff --git a/net/wireless/mlme.c b/net/wireless/mlme.c
index 775cac4d6100..3e2c398abddc 100644
--- a/net/wireless/mlme.c
+++ b/net/wireless/mlme.c
@@ -52,7 +52,8 @@ void cfg80211_rx_assoc_resp(struct net_device *dev,
 		cr.links[link_id].bssid = data->links[link_id].bss->bssid;
 		cr.links[link_id].addr = data->links[link_id].addr;
 		/* need to have local link addresses for MLO connections */
-		WARN_ON(cr.ap_mld_addr && !cr.links[link_id].addr);
+		WARN_ON(cr.ap_mld_addr &&
+			!is_valid_ether_addr(cr.links[link_id].addr));
 
 		BUG_ON(!cr.links[link_id].bss->channel);