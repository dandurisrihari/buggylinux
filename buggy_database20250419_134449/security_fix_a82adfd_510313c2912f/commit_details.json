{
  "hash": "a82adfd5c7cb4b8bb37ef439aed954f9972bb618",
  "hash_short": "a82adfd5",
  "subject": "hardening: Introduce CONFIG_ZERO_CALL_USED_REGS",
  "body": "When CONFIG_ZERO_CALL_USED_REGS is enabled, build the kernel with\n\"-fzero-call-used-regs=used-gpr\" (in GCC 11). This option will zero any\ncaller-used register contents just before returning from a function,\nensuring that temporary values are not leaked beyond the function\nboundary. This means that register contents are less likely to be\navailable for side channel attacks and information exposures.\n\nAdditionally this helps reduce the number of useful ROP gadgets in the\nkernel image by about 20%:\n\n$ ROPgadget.py --nosys --nojop --binary vmlinux.stock | tail -n1\nUnique gadgets found: 337245\n\n$ ROPgadget.py --nosys --nojop --binary vmlinux.zero-call-regs | tail -n1\nUnique gadgets found: 267175\n\nand more notably removes simple \"write-what-where\" gadgets:\n\n$ ROPgadget.py --ropchain --binary vmlinux.stock | sed -n '/Step 1/,/Step 2/p'\n- Step 1 -- Write-what-where gadgets\n\n        [+] Gadget found: 0xffffffff8102d76c mov qword ptr [rsi], rdx ; ret\n        [+] Gadget found: 0xffffffff81000cf5 pop rsi ; ret\n        [+] Gadget found: 0xffffffff8104d7c8 pop rdx ; ret\n        [-] Can't find the 'xor rdx, rdx' gadget. Try with another 'mov [reg], reg'\n\n        [+] Gadget found: 0xffffffff814c2b4c mov qword ptr [rsi], rdi ; ret\n        [+] Gadget found: 0xffffffff81000cf5 pop rsi ; ret\n        [+] Gadget found: 0xffffffff81001e51 pop rdi ; ret\n        [-] Can't find the 'xor rdi, rdi' gadget. Try with another 'mov [reg], reg'\n\n        [+] Gadget found: 0xffffffff81540d61 mov qword ptr [rsi], rdi ; pop rbx ; pop rbp ; ret\n        [+] Gadget found: 0xffffffff81000cf5 pop rsi ; ret\n        [+] Gadget found: 0xffffffff81001e51 pop rdi ; ret\n        [-] Can't find the 'xor rdi, rdi' gadget. Try with another 'mov [reg], reg'\n\n        [+] Gadget found: 0xffffffff8105341e mov qword ptr [rsi], rax ; ret\n        [+] Gadget found: 0xffffffff81000cf5 pop rsi ; ret\n        [+] Gadget found: 0xffffffff81029a11 pop rax ; ret\n        [+] Gadget found: 0xffffffff811f1c3b xor rax, rax ; ret\n\n- Step 2 -- Init syscall number gadgets\n\n$ ROPgadget.py --ropchain --binary vmlinux.zero* | sed -n '/Step 1/,/Step 2/p'\n- Step 1 -- Write-what-where gadgets\n\n        [-] Can't find the 'mov qword ptr [r64], r64' gadget\n\nFor an x86_64 parallel build tests, this has a less than 1% performance\nimpact, and grows the image size less than 1%:\n\n$ size vmlinux.stock vmlinux.zero-call-regs\n   text    data     bss     dec     hex filename\n22437676   8559152 14127340 45124168 2b08a48 vmlinux.stock\n22453184   8563248 14110956 45127388 2b096dc vmlinux.zero-call-regs\n\nImpact for other architectures may vary. For example, arm64 sees a 5.5%\nimage size growth, mainly due to needing to always clear x16 and x17:\nhttps://lore.kernel.org/lkml/20210510134503.GA88495@C02TD0UTHF1T.local/\n\nSigned-off-by: Kees Cook <keescook@chromium.org>",
  "full_message": "hardening: Introduce CONFIG_ZERO_CALL_USED_REGS\n\nWhen CONFIG_ZERO_CALL_USED_REGS is enabled, build the kernel with\n\"-fzero-call-used-regs=used-gpr\" (in GCC 11). This option will zero any\ncaller-used register contents just before returning from a function,\nensuring that temporary values are not leaked beyond the function\nboundary. This means that register contents are less likely to be\navailable for side channel attacks and information exposures.\n\nAdditionally this helps reduce the number of useful ROP gadgets in the\nkernel image by about 20%:\n\n$ ROPgadget.py --nosys --nojop --binary vmlinux.stock | tail -n1\nUnique gadgets found: 337245\n\n$ ROPgadget.py --nosys --nojop --binary vmlinux.zero-call-regs | tail -n1\nUnique gadgets found: 267175\n\nand more notably removes simple \"write-what-where\" gadgets:\n\n$ ROPgadget.py --ropchain --binary vmlinux.stock | sed -n '/Step 1/,/Step 2/p'\n- Step 1 -- Write-what-where gadgets\n\n        [+] Gadget found: 0xffffffff8102d76c mov qword ptr [rsi], rdx ; ret\n        [+] Gadget found: 0xffffffff81000cf5 pop rsi ; ret\n        [+] Gadget found: 0xffffffff8104d7c8 pop rdx ; ret\n        [-] Can't find the 'xor rdx, rdx' gadget. Try with another 'mov [reg], reg'\n\n        [+] Gadget found: 0xffffffff814c2b4c mov qword ptr [rsi], rdi ; ret\n        [+] Gadget found: 0xffffffff81000cf5 pop rsi ; ret\n        [+] Gadget found: 0xffffffff81001e51 pop rdi ; ret\n        [-] Can't find the 'xor rdi, rdi' gadget. Try with another 'mov [reg], reg'\n\n        [+] Gadget found: 0xffffffff81540d61 mov qword ptr [rsi], rdi ; pop rbx ; pop rbp ; ret\n        [+] Gadget found: 0xffffffff81000cf5 pop rsi ; ret\n        [+] Gadget found: 0xffffffff81001e51 pop rdi ; ret\n        [-] Can't find the 'xor rdi, rdi' gadget. Try with another 'mov [reg], reg'\n\n        [+] Gadget found: 0xffffffff8105341e mov qword ptr [rsi], rax ; ret\n        [+] Gadget found: 0xffffffff81000cf5 pop rsi ; ret\n        [+] Gadget found: 0xffffffff81029a11 pop rax ; ret\n        [+] Gadget found: 0xffffffff811f1c3b xor rax, rax ; ret\n\n- Step 2 -- Init syscall number gadgets\n\n$ ROPgadget.py --ropchain --binary vmlinux.zero* | sed -n '/Step 1/,/Step 2/p'\n- Step 1 -- Write-what-where gadgets\n\n        [-] Can't find the 'mov qword ptr [r64], r64' gadget\n\nFor an x86_64 parallel build tests, this has a less than 1% performance\nimpact, and grows the image size less than 1%:\n\n$ size vmlinux.stock vmlinux.zero-call-regs\n   text    data     bss     dec     hex filename\n22437676   8559152 14127340 45124168 2b08a48 vmlinux.stock\n22453184   8563248 14110956 45127388 2b096dc vmlinux.zero-call-regs\n\nImpact for other architectures may vary. For example, arm64 sees a 5.5%\nimage size growth, mainly due to needing to always clear x16 and x17:\nhttps://lore.kernel.org/lkml/20210510134503.GA88495@C02TD0UTHF1T.local/\n\nSigned-off-by: Kees Cook <keescook@chromium.org>",
  "author_name": "Kees Cook",
  "author_email": "keescook@chromium.org",
  "author_date": "Mon Apr 12 19:56:54 2021 -0700",
  "author_date_iso": "2021-04-12T19:56:54-07:00",
  "committer_name": "Kees Cook",
  "committer_email": "keescook@chromium.org",
  "committer_date": "Tue Jul 20 15:10:42 2021 -0700",
  "committer_date_iso": "2021-07-20T15:10:42-07:00",
  "files_changed": [
    "Makefile",
    "security/Kconfig.hardening"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "Makefile",
      "insertions": 5,
      "deletions": 0
    },
    {
      "file": "security/Kconfig.hardening",
      "insertions": 19,
      "deletions": 0
    }
  ],
  "total_insertions": 24,
  "total_deletions": 0,
  "total_changes": 24,
  "parents": [
    "2734d6c1b1a089fb593ef6a23d4b70903526fe0c"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "Makefile",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "security/Kconfig.hardening",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}