{
  "hash": "7b2b1fee30df7e2165525cd03f7d1d01a3a56794",
  "hash_short": "7b2b1fee",
  "subject": "[PATCH] knfsd: knfsd: cache ipmap per TCP socket",
  "body": "Speed up high call-rate workloads by caching the struct ip_map for the peer on\nthe connected struct svc_sock instead of looking it up in the ip_map cache\nhashtable on every call.  This helps workloads using AUTH_SYS authentication\nover TCP.\n\nTesting was on a 4 CPU 4 NIC Altix using 4 IRIX clients, each with 16\nsynthetic client threads simulating an rsync (i.e.  recursive directory\nlisting) workload reading from an i386 RH9 install image (161480 regular files\nin 10841 directories) on the server.  That tree is small enough to fill in the\nserver's RAM so no disk traffic was involved.  This setup gives a sustained\ncall rate in excess of 60000 calls/sec before being CPU-bound on the server.\n\nProfiling showed strcmp(), called from ip_map_match(), was taking 4.8% of each\nCPU, and ip_map_lookup() was taking 2.9%.  This patch drops both contribution\ninto the profile noise.\n\nNote that the above result overstates this value of this patch for most\nworkloads.  The synthetic clients are all using separate IP addresses, so\nthere are 64 entries in the ip_map cache hash.  Because the kernel measured\ncontained the bug fixed in commit\n\ncommit 1f1e030bf75774b6a283518e1534d598e14147d4\n\nand was running on 64bit little-endian machine, probably all of those 64\nentries were on a single chain, thus increasing the cost of ip_map_lookup().\n\nWith a modern kernel you would need more clients to see the same amount of\nperformance improvement.  This patch has helped to scale knfsd to handle a\ndeployment with 2000 NFS clients.\n\nSigned-off-by: Greg Banks <gnb@melbourne.sgi.com>\nSigned-off-by: Neil Brown <neilb@suse.de>\nSigned-off-by: Andrew Morton <akpm@osdl.org>\nSigned-off-by: Linus Torvalds <torvalds@osdl.org>",
  "full_message": "[PATCH] knfsd: knfsd: cache ipmap per TCP socket\n\nSpeed up high call-rate workloads by caching the struct ip_map for the peer on\nthe connected struct svc_sock instead of looking it up in the ip_map cache\nhashtable on every call.  This helps workloads using AUTH_SYS authentication\nover TCP.\n\nTesting was on a 4 CPU 4 NIC Altix using 4 IRIX clients, each with 16\nsynthetic client threads simulating an rsync (i.e.  recursive directory\nlisting) workload reading from an i386 RH9 install image (161480 regular files\nin 10841 directories) on the server.  That tree is small enough to fill in the\nserver's RAM so no disk traffic was involved.  This setup gives a sustained\ncall rate in excess of 60000 calls/sec before being CPU-bound on the server.\n\nProfiling showed strcmp(), called from ip_map_match(), was taking 4.8% of each\nCPU, and ip_map_lookup() was taking 2.9%.  This patch drops both contribution\ninto the profile noise.\n\nNote that the above result overstates this value of this patch for most\nworkloads.  The synthetic clients are all using separate IP addresses, so\nthere are 64 entries in the ip_map cache hash.  Because the kernel measured\ncontained the bug fixed in commit\n\ncommit 1f1e030bf75774b6a283518e1534d598e14147d4\n\nand was running on 64bit little-endian machine, probably all of those 64\nentries were on a single chain, thus increasing the cost of ip_map_lookup().\n\nWith a modern kernel you would need more clients to see the same amount of\nperformance improvement.  This patch has helped to scale knfsd to handle a\ndeployment with 2000 NFS clients.\n\nSigned-off-by: Greg Banks <gnb@melbourne.sgi.com>\nSigned-off-by: Neil Brown <neilb@suse.de>\nSigned-off-by: Andrew Morton <akpm@osdl.org>\nSigned-off-by: Linus Torvalds <torvalds@osdl.org>",
  "author_name": "Greg Banks",
  "author_email": "gnb@melbourne.sgi.com",
  "author_date": "Wed Oct 4 02:15:50 2006 -0700",
  "author_date_iso": "2006-10-04T02:15:50-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@g5.osdl.org",
  "committer_date": "Wed Oct 4 07:55:16 2006 -0700",
  "committer_date_iso": "2006-10-04T07:55:16-07:00",
  "files_changed": [
    "include/linux/sunrpc/cache.h",
    "include/linux/sunrpc/svcauth.h",
    "include/linux/sunrpc/svcsock.h",
    "net/sunrpc/svcauth_unix.c",
    "net/sunrpc/svcsock.c"
  ],
  "files_changed_count": 5,
  "stats": [
    {
      "file": "include/linux/sunrpc/cache.h",
      "insertions": 11,
      "deletions": 0
    },
    {
      "file": "include/linux/sunrpc/svcauth.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "include/linux/sunrpc/svcsock.h",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "net/sunrpc/svcauth_unix.c",
      "insertions": 44,
      "deletions": 3
    },
    {
      "file": "net/sunrpc/svcsock.c",
      "insertions": 2,
      "deletions": 0
    }
  ],
  "total_insertions": 61,
  "total_deletions": 3,
  "total_changes": 64,
  "parents": [
    "fce1456a19f5c08b688c29f00ef90fdfa074c79b"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v2.6.19",
    "v2.6.19-rc1",
    "v2.6.19-rc2",
    "v2.6.19-rc3",
    "v2.6.19-rc4",
    "v2.6.19-rc5",
    "v2.6.19-rc6",
    "v2.6.20",
    "v2.6.20-rc1",
    "v2.6.20-rc2"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/linux/sunrpc/cache.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/sunrpc/svcauth.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/sunrpc/svcsock.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/sunrpc/svcauth_unix.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/sunrpc/svcsock.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}