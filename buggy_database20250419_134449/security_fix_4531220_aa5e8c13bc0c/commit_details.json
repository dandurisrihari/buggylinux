{
  "hash": "4531220b71f0399e71cda0c4cf749e7281a7416a",
  "hash_short": "4531220b",
  "subject": "KVM: x86: Rework user space NMI injection as KVM_CAP_USER_NMI",
  "body": "There is no point in doing the ready_for_nmi_injection/\nrequest_nmi_window dance with user space. First, we don't do this for\nin-kernel irqchip anyway, while the code path is the same as for user\nspace irqchip mode. And second, there is nothing to loose if a pending\nNMI is overwritten by another one (in contrast to IRQs where we have to\nsave the number). Actually, there is even the risk of raising spurious\nNMIs this way because the reason for the held-back NMI might already be\nhandled while processing the first one.\n\nTherefore this patch creates a simplified user space NMI injection\ninterface, exporting it under KVM_CAP_USER_NMI and dropping the old\nKVM_CAP_NMI capability. And this time we also take care to provide the\ninterface only on archs supporting NMIs via KVM (right now only x86).\n\nSigned-off-by: Jan Kiszka <jan.kiszka@siemens.com>\nSigned-off-by: Avi Kivity <avi@redhat.com>",
  "full_message": "KVM: x86: Rework user space NMI injection as KVM_CAP_USER_NMI\n\nThere is no point in doing the ready_for_nmi_injection/\nrequest_nmi_window dance with user space. First, we don't do this for\nin-kernel irqchip anyway, while the code path is the same as for user\nspace irqchip mode. And second, there is nothing to loose if a pending\nNMI is overwritten by another one (in contrast to IRQs where we have to\nsave the number). Actually, there is even the risk of raising spurious\nNMIs this way because the reason for the held-back NMI might already be\nhandled while processing the first one.\n\nTherefore this patch creates a simplified user space NMI injection\ninterface, exporting it under KVM_CAP_USER_NMI and dropping the old\nKVM_CAP_NMI capability. And this time we also take care to provide the\ninterface only on archs supporting NMIs via KVM (right now only x86).\n\nSigned-off-by: Jan Kiszka <jan.kiszka@siemens.com>\nSigned-off-by: Avi Kivity <avi@redhat.com>",
  "author_name": "Jan Kiszka",
  "author_email": "jan.kiszka@siemens.com",
  "author_date": "Thu Dec 11 16:54:54 2008 +0100",
  "author_date_iso": "2008-12-11T16:54:54+01:00",
  "committer_name": "Avi Kivity",
  "committer_email": "avi@redhat.com",
  "committer_date": "Wed Dec 31 16:55:47 2008 +0200",
  "committer_date_iso": "2008-12-31T16:55:47+02:00",
  "files_changed": [
    "arch/x86/kvm/vmx.c",
    "arch/x86/kvm/x86.c",
    "include/linux/kvm.h"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "arch/x86/kvm/vmx.c",
      "insertions": 2,
      "deletions": 22
    },
    {
      "file": "arch/x86/kvm/x86.c",
      "insertions": 2,
      "deletions": 26
    },
    {
      "file": "include/linux/kvm.h",
      "insertions": 5,
      "deletions": 6
    }
  ],
  "total_insertions": 9,
  "total_deletions": 54,
  "total_changes": 63,
  "parents": [
    "264ff01d55b456932cef03082448b41d2edeb6a1"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v2.6.29",
    "v2.6.29-rc1",
    "v2.6.29-rc2",
    "v2.6.29-rc3",
    "v2.6.29-rc4",
    "v2.6.29-rc5",
    "v2.6.29-rc6",
    "v2.6.29-rc7",
    "v2.6.29-rc8",
    "v2.6.30"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/kvm/vmx.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kvm/x86.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/kvm.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}