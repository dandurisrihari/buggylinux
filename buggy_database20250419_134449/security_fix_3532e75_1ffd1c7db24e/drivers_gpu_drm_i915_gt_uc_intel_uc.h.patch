commit 3532e75dfadcf52f8cb56dbfb6bce4503c69091f
Author: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>
Date:   Wed May 31 16:54:09 2023 -0700

    drm/i915/uc: perma-pin firmwares
    
    Now that each FW has its own reserved area, we can keep them always
    pinned and skip the pin/unpin dance on reset. This will make things
    easier for the 2-step HuC authentication, which requires the FW to be
    pinned in GGTT after the xfer is completed.
    Since the vma is now valid for a long time and not just for the quick
    pin-load-unpin dance, the name "dummy" is no longer appropriare and has
    been replaced with vma_res. All the functions have also been updated to
    operate on vma_res for consistency.
    Given that we pin the vma behind the allocator's back (which is ok
    because we do the pinning in an area that was previously reserved for
    thus purpose), we do need to explicitly re-pin on resume because the
    automated helper won't cover us.
    
    v2: better comments and commit message, s/dummy/vma_res/
    
    Signed-off-by: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>
    Cc: Alan Previn <alan.previn.teres.alexis@intel.com>
    Cc: John Harrison <John.C.Harrison@Intel.com>
    Reviewed-by: John Harrison <John.C.Harrison@Intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20230531235415.1467475-2-daniele.ceraolospurio@intel.com

diff --git a/drivers/gpu/drm/i915/gt/uc/intel_uc.h b/drivers/gpu/drm/i915/gt/uc/intel_uc.h
index d585524d94de..014bb7d83689 100644
--- a/drivers/gpu/drm/i915/gt/uc/intel_uc.h
+++ b/drivers/gpu/drm/i915/gt/uc/intel_uc.h
@@ -24,6 +24,7 @@ struct intel_uc_ops {
 	void (*fini)(struct intel_uc *uc);
 	int (*init_hw)(struct intel_uc *uc);
 	void (*fini_hw)(struct intel_uc *uc);
+	void (*resume_mappings)(struct intel_uc *uc);
 };
 
 struct intel_uc {
@@ -114,6 +115,7 @@ intel_uc_ops_function(init, init, int, 0);
 intel_uc_ops_function(fini, fini, void, );
 intel_uc_ops_function(init_hw, init_hw, int, 0);
 intel_uc_ops_function(fini_hw, fini_hw, void, );
+intel_uc_ops_function(resume_mappings, resume_mappings, void, );
 #undef intel_uc_ops_function
 
 #endif