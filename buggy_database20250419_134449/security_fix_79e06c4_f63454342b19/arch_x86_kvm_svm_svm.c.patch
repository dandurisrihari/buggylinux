commit 79e06c4c4950be2abd8ca5d2428a8c915aa62c24
Merge: cb3f09f9afe5 c862dcd19975
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Jan 16 16:15:14 2022 +0200

    Merge tag 'for-linus' of git://git.kernel.org/pub/scm/virt/kvm/kvm
    
    Pull kvm updates from Paolo Bonzini:
     "RISCV:
    
       - Use common KVM implementation of MMU memory caches
    
       - SBI v0.2 support for Guest
    
       - Initial KVM selftests support
    
       - Fix to avoid spurious virtual interrupts after clearing hideleg CSR
    
       - Update email address for Anup and Atish
    
      ARM:
    
       - Simplification of the 'vcpu first run' by integrating it into KVM's
         'pid change' flow
    
       - Refactoring of the FP and SVE state tracking, also leading to a
         simpler state and less shared data between EL1 and EL2 in the nVHE
         case
    
       - Tidy up the header file usage for the nvhe hyp object
    
       - New HYP unsharing mechanism, finally allowing pages to be unmapped
         from the Stage-1 EL2 page-tables
    
       - Various pKVM cleanups around refcounting and sharing
    
       - A couple of vgic fixes for bugs that would trigger once the vcpu
         xarray rework is merged, but not sooner
    
       - Add minimal support for ARMv8.7's PMU extension
    
       - Rework kvm_pgtable initialisation ahead of the NV work
    
       - New selftest for IRQ injection
    
       - Teach selftests about the lack of default IPA space and page sizes
    
       - Expand sysreg selftest to deal with Pointer Authentication
    
       - The usual bunch of cleanups and doc update
    
      s390:
    
       - fix sigp sense/start/stop/inconsistency
    
       - cleanups
    
      x86:
    
       - Clean up some function prototypes more
    
       - improved gfn_to_pfn_cache with proper invalidation, used by Xen
         emulation
    
       - add KVM_IRQ_ROUTING_XEN_EVTCHN and event channel delivery
    
       - completely remove potential TOC/TOU races in nested SVM consistency
         checks
    
       - update some PMCs on emulated instructions
    
       - Intel AMX support (joint work between Thomas and Intel)
    
       - large MMU cleanups
    
       - module parameter to disable PMU virtualization
    
       - cleanup register cache
    
       - first part of halt handling cleanups
    
       - Hyper-V enlightened MSR bitmap support for nested hypervisors
    
      Generic:
    
       - clean up Makefiles
    
       - introduce CONFIG_HAVE_KVM_DIRTY_RING
    
       - optimize memslot lookup using a tree
    
       - optimize vCPU array usage by converting to xarray"
    
    * tag 'for-linus' of git://git.kernel.org/pub/scm/virt/kvm/kvm: (268 commits)
      x86/fpu: Fix inline prefix warnings
      selftest: kvm: Add amx selftest
      selftest: kvm: Move struct kvm_x86_state to header
      selftest: kvm: Reorder vcpu_load_state steps for AMX
      kvm: x86: Disable interception for IA32_XFD on demand
      x86/fpu: Provide fpu_sync_guest_vmexit_xfd_state()
      kvm: selftests: Add support for KVM_CAP_XSAVE2
      kvm: x86: Add support for getting/setting expanded xstate buffer
      x86/fpu: Add uabi_size to guest_fpu
      kvm: x86: Add CPUID support for Intel AMX
      kvm: x86: Add XCR0 support for Intel AMX
      kvm: x86: Disable RDMSR interception of IA32_XFD_ERR
      kvm: x86: Emulate IA32_XFD_ERR for guest
      kvm: x86: Intercept #NM for saving IA32_XFD_ERR
      x86/fpu: Prepare xfd_err in struct fpu_guest
      kvm: x86: Add emulation for IA32_XFD
      x86/fpu: Provide fpu_update_guest_xfd() for IA32_XFD emulation
      kvm: x86: Enable dynamic xfeatures at KVM_SET_CPUID2
      x86/fpu: Provide fpu_enable_guest_xfd_features() for KVM
      x86/fpu: Add guest support to xfd_enable_feature()
      ...

diff --cc arch/x86/kvm/svm/svm.c
index 9079d2fdc12e,c3d9006478a4..46bcc706f257
--- a/arch/x86/kvm/svm/svm.c
+++ b/arch/x86/kvm/svm/svm.c
@@@ -3931,9 -3964,10 +3964,10 @@@ static __no_kcsan fastpath_t svm_vcpu_r
  		vcpu->arch.regs[VCPU_REGS_RSP] = svm->vmcb->save.rsp;
  		vcpu->arch.regs[VCPU_REGS_RIP] = svm->vmcb->save.rip;
  	}
+ 	vcpu->arch.regs_dirty = 0;
  
  	if (unlikely(svm->vmcb->control.exit_code == SVM_EXIT_NMI))
 -		kvm_before_interrupt(vcpu);
 +		kvm_before_interrupt(vcpu, KVM_HANDLING_NMI);
  
  	kvm_load_host_xsave_state(vcpu);
  	stgi();