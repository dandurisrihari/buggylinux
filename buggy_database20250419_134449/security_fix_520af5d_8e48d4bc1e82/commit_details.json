{
  "hash": "520af5da664a8edc4f4c1cd8e6e8488ecccdb7e5",
  "hash_short": "520af5da",
  "subject": "crypto: lib/aesgcm - Provide minimal library implementation",
  "body": "Implement a minimal library version of AES-GCM based on the existing\nlibrary implementations of AES and multiplication in GF(2^128). Using\nthese primitives, GCM can be implemented in a straight-forward manner.\n\nGCM has a couple of sharp edges, i.e., the amount of input data\nprocessed with the same initialization vector (IV) should be capped to\nprotect the counter from 32-bit rollover (or carry), and the size of the\nauthentication tag should be fixed for a given key. [0]\n\nThe former concern is addressed trivially, given that the function call\nAPI uses 32-bit signed types for the input lengths. It is still up to\nthe caller to avoid IV reuse in general, but this is not something we\ncan police at the implementation level.\n\nAs for the latter concern, let's make the authentication tag size part\nof the key schedule, and only permit it to be configured as part of the\nkey expansion routine.\n\nNote that table based AES implementations are susceptible to known\nplaintext timing attacks on the encryption key. The AES library already\nattempts to mitigate this to some extent, but given that the counter\nmode encryption used by GCM operates exclusively on known plaintext by\nconstruction (the IV and therefore the initial counter value are known\nto an attacker), let's take some extra care to mitigate this, by calling\nthe AES library with interrupts disabled.\n\n[0] https://nvlpubs.nist.gov/nistpubs/legacy/sp/nistspecialpublication800-38d.pdf\n\nLink: https://lore.kernel.org/all/c6fb9b25-a4b6-2e4a-2dd1-63adda055a49@amd.com/\nSigned-off-by: Ard Biesheuvel <ardb@kernel.org>\nTested-by: Nikunj A Dadhania <nikunj@amd.com>\nSigned-off-by: Herbert Xu <herbert@gondor.apana.org.au>",
  "full_message": "crypto: lib/aesgcm - Provide minimal library implementation\n\nImplement a minimal library version of AES-GCM based on the existing\nlibrary implementations of AES and multiplication in GF(2^128). Using\nthese primitives, GCM can be implemented in a straight-forward manner.\n\nGCM has a couple of sharp edges, i.e., the amount of input data\nprocessed with the same initialization vector (IV) should be capped to\nprotect the counter from 32-bit rollover (or carry), and the size of the\nauthentication tag should be fixed for a given key. [0]\n\nThe former concern is addressed trivially, given that the function call\nAPI uses 32-bit signed types for the input lengths. It is still up to\nthe caller to avoid IV reuse in general, but this is not something we\ncan police at the implementation level.\n\nAs for the latter concern, let's make the authentication tag size part\nof the key schedule, and only permit it to be configured as part of the\nkey expansion routine.\n\nNote that table based AES implementations are susceptible to known\nplaintext timing attacks on the encryption key. The AES library already\nattempts to mitigate this to some extent, but given that the counter\nmode encryption used by GCM operates exclusively on known plaintext by\nconstruction (the IV and therefore the initial counter value are known\nto an attacker), let's take some extra care to mitigate this, by calling\nthe AES library with interrupts disabled.\n\n[0] https://nvlpubs.nist.gov/nistpubs/legacy/sp/nistspecialpublication800-38d.pdf\n\nLink: https://lore.kernel.org/all/c6fb9b25-a4b6-2e4a-2dd1-63adda055a49@amd.com/\nSigned-off-by: Ard Biesheuvel <ardb@kernel.org>\nTested-by: Nikunj A Dadhania <nikunj@amd.com>\nSigned-off-by: Herbert Xu <herbert@gondor.apana.org.au>",
  "author_name": "Ard Biesheuvel",
  "author_email": "ardb@kernel.org",
  "author_date": "Thu Nov 3 20:22:59 2022 +0100",
  "author_date_iso": "2022-11-03T20:22:59+01:00",
  "committer_name": "Herbert Xu",
  "committer_email": "herbert@gondor.apana.org.au",
  "committer_date": "Fri Nov 11 18:14:59 2022 +0800",
  "committer_date_iso": "2022-11-11T18:14:59+08:00",
  "files_changed": [
    "include/crypto/gcm.h",
    "lib/crypto/Kconfig",
    "lib/crypto/Makefile",
    "lib/crypto/aesgcm.c"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "include/crypto/gcm.h",
      "insertions": 22,
      "deletions": 0
    },
    {
      "file": "lib/crypto/Kconfig",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "lib/crypto/Makefile",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "lib/crypto/aesgcm.c",
      "insertions": 727,
      "deletions": 0
    }
  ],
  "total_insertions": 758,
  "total_deletions": 0,
  "total_changes": 758,
  "parents": [
    "b67ce439fef69a1a339cf2743c8198e8d90e6821"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/crypto/gcm.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "lib/crypto/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "lib/crypto/Makefile",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "lib/crypto/aesgcm.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}