{
  "hash": "13a857a4c4e826c587cde3a69bc3d1162d247d9d",
  "hash_short": "13a857a4",
  "subject": "block, bfq: detect wakers and unconditionally inject their I/O",
  "body": "A bfq_queue Q may happen to be synchronized with another\nbfq_queue Q2, i.e., the I/O of Q2 may need to be completed for Q to\nreceive new I/O. We call Q2 \"waker queue\".\n\nIf I/O plugging is being performed for Q, and Q is not receiving any\nmore I/O because of the above synchronization, then, thanks to BFQ's\ninjection mechanism, the waker queue is likely to get served before\nthe I/O-plugging timeout fires.\n\nUnfortunately, this fact may not be sufficient to guarantee a high\nthroughput during the I/O plugging, because the inject limit for Q may\nbe too low to guarantee a lot of injected I/O. In addition, the\nduration of the plugging, i.e., the time before Q finally receives new\nI/O, may not be minimized, because the waker queue may happen to be\nserved only after other queues.\n\nTo address these issues, this commit introduces the explicit detection\nof the waker queue, and the unconditional injection of a pending I/O\nrequest of the waker queue on each invocation of\nbfq_dispatch_request().\n\nOne may be concerned that this systematic injection of I/O from the\nwaker queue delays the service of Q's I/O. Fortunately, it doesn't. On\nthe contrary, next Q's I/O is brought forward dramatically, for it is\nnot blocked for milliseconds.\n\nReported-by: Srivatsa S. Bhat (VMware) <srivatsa@csail.mit.edu>\nTested-by: Srivatsa S. Bhat (VMware) <srivatsa@csail.mit.edu>\nSigned-off-by: Paolo Valente <paolo.valente@linaro.org>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
  "full_message": "block, bfq: detect wakers and unconditionally inject their I/O\n\nA bfq_queue Q may happen to be synchronized with another\nbfq_queue Q2, i.e., the I/O of Q2 may need to be completed for Q to\nreceive new I/O. We call Q2 \"waker queue\".\n\nIf I/O plugging is being performed for Q, and Q is not receiving any\nmore I/O because of the above synchronization, then, thanks to BFQ's\ninjection mechanism, the waker queue is likely to get served before\nthe I/O-plugging timeout fires.\n\nUnfortunately, this fact may not be sufficient to guarantee a high\nthroughput during the I/O plugging, because the inject limit for Q may\nbe too low to guarantee a lot of injected I/O. In addition, the\nduration of the plugging, i.e., the time before Q finally receives new\nI/O, may not be minimized, because the waker queue may happen to be\nserved only after other queues.\n\nTo address these issues, this commit introduces the explicit detection\nof the waker queue, and the unconditional injection of a pending I/O\nrequest of the waker queue on each invocation of\nbfq_dispatch_request().\n\nOne may be concerned that this systematic injection of I/O from the\nwaker queue delays the service of Q's I/O. Fortunately, it doesn't. On\nthe contrary, next Q's I/O is brought forward dramatically, for it is\nnot blocked for milliseconds.\n\nReported-by: Srivatsa S. Bhat (VMware) <srivatsa@csail.mit.edu>\nTested-by: Srivatsa S. Bhat (VMware) <srivatsa@csail.mit.edu>\nSigned-off-by: Paolo Valente <paolo.valente@linaro.org>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
  "author_name": "Paolo Valente",
  "author_email": "paolo.valente@linaro.org",
  "author_date": "Tue Jun 25 07:12:47 2019 +0200",
  "author_date_iso": "2019-06-25T07:12:47+02:00",
  "committer_name": "Jens Axboe",
  "committer_email": "axboe@kernel.dk",
  "committer_date": "Tue Jun 25 09:07:34 2019 -0600",
  "committer_date_iso": "2019-06-25T09:07:34-06:00",
  "files_changed": [
    "block/bfq-iosched.c",
    "block/bfq-iosched.h"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "block/bfq-iosched.c",
      "insertions": 237,
      "deletions": 33
    },
    {
      "file": "block/bfq-iosched.h",
      "insertions": 24,
      "deletions": 1
    }
  ],
  "total_insertions": 261,
  "total_deletions": 34,
  "total_changes": 295,
  "parents": [
    "a3f9bce3697a5b4039ff7096db4a1ee897349276"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.3",
    "v5.3-rc1",
    "v5.3-rc2",
    "v5.3-rc3",
    "v5.3-rc4",
    "v5.3-rc5",
    "v5.3-rc6",
    "v5.3-rc7",
    "v5.3-rc8",
    "v5.4"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "inject"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "block/bfq-iosched.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "block/bfq-iosched.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}