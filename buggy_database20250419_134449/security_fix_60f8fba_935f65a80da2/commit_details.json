{
  "hash": "60f8fbaa954452104a1914e21c5cc109f7bf276a",
  "hash_short": "60f8fbaa",
  "subject": "Merge tag 'for-5.15/io_uring-2021-09-04' of git://git.kernel.dk/linux-block",
  "body": "Pull io_uring fixes from Jens Axboe:\n \"As sometimes happens, two reports came in around the merge window open\n  that led to some fixes. Hence this one is a bit bigger than usual\n  followup fixes, but most of it will be going towards stable, outside\n  of the fixes that are addressing regressions from this merge window.\n\n  In detail:\n\n   - postgres is a heavy user of signals between tasks, and if we're\n     unlucky this can interfere with io-wq worker creation. Make sure\n     we're resilient against unrelated signal handling. This set of\n     changes also includes hardening against allocation failures, which\n     could previously had led to stalls.\n\n   - Some use cases that end up having a mix of bounded and unbounded\n     work would have starvation issues related to that. Split the\n     pending work lists to handle that better.\n\n   - Completion trace int -> unsigned -> long fix\n\n   - Fix issue with REGISTER_IOWQ_MAX_WORKERS and SQPOLL\n\n   - Fix regression with hash wait lock in this merge window\n\n   - Fix retry issued on block devices (Ming)\n\n   - Fix regression with links in this merge window (Pavel)\n\n   - Fix race with multi-shot poll and completions (Xiaoguang)\n\n   - Ensure regular file IO doesn't inadvertently skip completion\n     batching (Pavel)\n\n   - Ensure submissions are flushed after running task_work (Pavel)\"\n\n* tag 'for-5.15/io_uring-2021-09-04' of git://git.kernel.dk/linux-block:\n  io_uring: io_uring_complete() trace should take an integer\n  io_uring: fix possible poll event lost in multi shot mode\n  io_uring: prolong tctx_task_work() with flushing\n  io_uring: don't disable kiocb_done() CQE batching\n  io_uring: ensure IORING_REGISTER_IOWQ_MAX_WORKERS works with SQPOLL\n  io-wq: make worker creation resilient against signals\n  io-wq: get rid of FIXED worker flag\n  io-wq: only exit on fatal signals\n  io-wq: split bounded and unbounded work into separate lists\n  io-wq: fix queue stalling race\n  io_uring: don't submit half-prepared drain request\n  io_uring: fix queueing half-created requests\n  io-wq: ensure that hash wait lock is IRQ disabling\n  io_uring: retry in case of short read on block device\n  io_uring: IORING_OP_WRITE needs hash_reg_file set\n  io-wq: fix race between adding work and activating a free worker",
  "full_message": "Merge tag 'for-5.15/io_uring-2021-09-04' of git://git.kernel.dk/linux-block\n\nPull io_uring fixes from Jens Axboe:\n \"As sometimes happens, two reports came in around the merge window open\n  that led to some fixes. Hence this one is a bit bigger than usual\n  followup fixes, but most of it will be going towards stable, outside\n  of the fixes that are addressing regressions from this merge window.\n\n  In detail:\n\n   - postgres is a heavy user of signals between tasks, and if we're\n     unlucky this can interfere with io-wq worker creation. Make sure\n     we're resilient against unrelated signal handling. This set of\n     changes also includes hardening against allocation failures, which\n     could previously had led to stalls.\n\n   - Some use cases that end up having a mix of bounded and unbounded\n     work would have starvation issues related to that. Split the\n     pending work lists to handle that better.\n\n   - Completion trace int -> unsigned -> long fix\n\n   - Fix issue with REGISTER_IOWQ_MAX_WORKERS and SQPOLL\n\n   - Fix regression with hash wait lock in this merge window\n\n   - Fix retry issued on block devices (Ming)\n\n   - Fix regression with links in this merge window (Pavel)\n\n   - Fix race with multi-shot poll and completions (Xiaoguang)\n\n   - Ensure regular file IO doesn't inadvertently skip completion\n     batching (Pavel)\n\n   - Ensure submissions are flushed after running task_work (Pavel)\"\n\n* tag 'for-5.15/io_uring-2021-09-04' of git://git.kernel.dk/linux-block:\n  io_uring: io_uring_complete() trace should take an integer\n  io_uring: fix possible poll event lost in multi shot mode\n  io_uring: prolong tctx_task_work() with flushing\n  io_uring: don't disable kiocb_done() CQE batching\n  io_uring: ensure IORING_REGISTER_IOWQ_MAX_WORKERS works with SQPOLL\n  io-wq: make worker creation resilient against signals\n  io-wq: get rid of FIXED worker flag\n  io-wq: only exit on fatal signals\n  io-wq: split bounded and unbounded work into separate lists\n  io-wq: fix queue stalling race\n  io_uring: don't submit half-prepared drain request\n  io_uring: fix queueing half-created requests\n  io-wq: ensure that hash wait lock is IRQ disabling\n  io_uring: retry in case of short read on block device\n  io_uring: IORING_OP_WRITE needs hash_reg_file set\n  io-wq: fix race between adding work and activating a free worker",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Mon Sep 6 09:26:07 2021 -0700",
  "author_date_iso": "2021-09-06T09:26:07-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Mon Sep 6 09:26:07 2021 -0700",
  "committer_date_iso": "2021-09-06T09:26:07-07:00",
  "files_changed": [
    "fs/io_uring.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "fs/io-wq.c",
      "insertions": 254,
      "deletions": 170
    },
    {
      "file": "fs/io_uring.c",
      "insertions": 66,
      "deletions": 10
    },
    {
      "file": "include/trace/events/io_uring.h",
      "insertions": 3,
      "deletions": 3
    }
  ],
  "total_insertions": 323,
  "total_deletions": 183,
  "total_changes": 506,
  "parents": [
    "20fbb11fe4ea99e02d77824613f1438bea456683",
    "2fc2a7a62eb58650e71b4550cf6fa6cc0a75b2d2"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/io_uring.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}