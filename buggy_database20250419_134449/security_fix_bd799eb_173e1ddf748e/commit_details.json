{
  "hash": "bd799eb63db4c61a5f2dc941672391fbca5bcab4",
  "hash_short": "bd799eb6",
  "subject": "Merge tag 'libnvdimm-fixes-4.20-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/nvdimm/nvdimm",
  "body": "Pull libnvdimm fixes from Dan Williams:\n \"A regression fix for the Address Range Scrub implementation, yes\n  another one, and support for platforms that misalign persistent memory\n  relative to the Linux memory hotplug section constraint. Longer term,\n  support for sub-section memory hotplug would alleviate alignment\n  waste, but until then this hack allows a 'struct page' memmap to be\n  established for these misaligned memory regions.\n\n  These have all appeared in a -next release, and thanks to Patrick for\n  reporting and testing the alignment padding fix.\n\n  Summary:\n\n   - Unless and until the core mm handles memory hotplug units smaller\n     than a section (128M), persistent memory namespaces must be padded\n     to section alignment.\n\n     The libnvdimm core already handled section collision with \"System\n     RAM\", but some configurations overlap independent \"Persistent\n     Memory\" ranges within a section, so additional padding injection is\n     added for that case.\n\n   - The recent reworks of the ARS (address range scrub) state machine\n     to reduce the number of state flags inadvertantly missed a\n     conversion of acpi_nfit_ars_rescan() call sites. Fix the regression\n     whereby user-requested ARS results in a \"short\" scrub rather than a\n     \"long\" scrub.\n\n   - Fixup the unit tests to handle / test the 128M section alignment of\n     mocked test resources.\n\n* tag 'libnvdimm-fixes-4.20-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/nvdimm/nvdimm:\n  acpi/nfit: Fix user-initiated ARS to be \"ARS-long\" rather than \"ARS-short\"\n  libnvdimm, pfn: Pad pfn namespaces relative to other regions\n  tools/testing/nvdimm: Align test resources to 128M",
  "full_message": "Merge tag 'libnvdimm-fixes-4.20-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/nvdimm/nvdimm\n\nPull libnvdimm fixes from Dan Williams:\n \"A regression fix for the Address Range Scrub implementation, yes\n  another one, and support for platforms that misalign persistent memory\n  relative to the Linux memory hotplug section constraint. Longer term,\n  support for sub-section memory hotplug would alleviate alignment\n  waste, but until then this hack allows a 'struct page' memmap to be\n  established for these misaligned memory regions.\n\n  These have all appeared in a -next release, and thanks to Patrick for\n  reporting and testing the alignment padding fix.\n\n  Summary:\n\n   - Unless and until the core mm handles memory hotplug units smaller\n     than a section (128M), persistent memory namespaces must be padded\n     to section alignment.\n\n     The libnvdimm core already handled section collision with \"System\n     RAM\", but some configurations overlap independent \"Persistent\n     Memory\" ranges within a section, so additional padding injection is\n     added for that case.\n\n   - The recent reworks of the ARS (address range scrub) state machine\n     to reduce the number of state flags inadvertantly missed a\n     conversion of acpi_nfit_ars_rescan() call sites. Fix the regression\n     whereby user-requested ARS results in a \"short\" scrub rather than a\n     \"long\" scrub.\n\n   - Fixup the unit tests to handle / test the 128M section alignment of\n     mocked test resources.\n\n* tag 'libnvdimm-fixes-4.20-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/nvdimm/nvdimm:\n  acpi/nfit: Fix user-initiated ARS to be \"ARS-long\" rather than \"ARS-short\"\n  libnvdimm, pfn: Pad pfn namespaces relative to other regions\n  tools/testing/nvdimm: Align test resources to 128M",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Sun Dec 9 09:46:54 2018 -0800",
  "author_date_iso": "2018-12-09T09:46:54-08:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Sun Dec 9 09:46:54 2018 -0800",
  "committer_date_iso": "2018-12-09T09:46:54-08:00",
  "files_changed": [],
  "files_changed_count": 0,
  "stats": [
    {
      "file": "drivers/acpi/nfit/core.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "drivers/nvdimm/nd-core.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "drivers/nvdimm/pfn_devs.c",
      "insertions": 37,
      "deletions": 27
    },
    {
      "file": "drivers/nvdimm/region_devs.c",
      "insertions": 41,
      "deletions": 0
    },
    {
      "file": "tools/testing/nvdimm/test/nfit.c",
      "insertions": 33,
      "deletions": 2
    }
  ],
  "total_insertions": 114,
  "total_deletions": 30,
  "total_changes": 144,
  "parents": [
    "6ec067e3a4492569699676d75a21fcee22fefc5b",
    "b5fd2e00a60248902315fb32210550ac3cb9f44c"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.20",
    "v4.20-rc6",
    "v4.20-rc7",
    "v5.0",
    "v5.0-rc1",
    "v5.0-rc2",
    "v5.0-rc3",
    "v5.0-rc4",
    "v5.0-rc5",
    "v5.0-rc6"
  ],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": []
}