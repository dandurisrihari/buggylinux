{
  "hash": "fd706c9b1674e2858766bfbf7430534c2b26fbef",
  "hash_short": "fd706c9b",
  "subject": "KVM: x86: Snapshot if a vCPU's vendor model is AMD vs. Intel compatible",
  "body": "Add kvm_vcpu_arch.is_amd_compatible to cache if a vCPU's vendor model is\ncompatible with AMD, i.e. if the vCPU vendor is AMD or Hygon, along with\nhelpers to check if a vCPU is compatible AMD vs. Intel.  To handle Intel\nvs. AMD behavior related to masking the LVTPC entry, KVM will need to\ncheck for vendor compatibility on every PMI injection, i.e. querying for\nAMD will soon be a moderately hot path.\n\nNote!  This subtly (or maybe not-so-subtly) makes \"Intel compatible\" KVM's\ndefault behavior, both if userspace omits (or never sets) CPUID 0x0 and if\nuserspace sets a completely unknown vendor.  One could argue that KVM\nshould treat such vCPUs as not being compatible with Intel *or* AMD, but\nthat would add useless complexity to KVM.\n\nKVM needs to do *something* in the face of vendor specific behavior, and\nso unless KVM conjured up a magic third option, choosing to treat unknown\nvendors as neither Intel nor AMD means that checks on AMD compatibility\nwould yield Intel behavior, and checks for Intel compatibility would yield\nAMD behavior.  And that's far worse as it would effectively yield random\nbehavior depending on whether KVM checked for AMD vs. Intel vs. !AMD vs.\n!Intel.  And practically speaking, all x86 CPUs follow either Intel or AMD\narchitecture, i.e. \"supporting\" an unknown third architecture adds no\nvalue.\n\nDeliberately don't convert any of the existing guest_cpuid_is_intel()\nchecks, as the Intel side of things is messier due to some flows explicitly\nchecking for exactly vendor==Intel, versus some flows assuming anything\nthat isn't \"AMD compatible\" gets Intel behavior.  The Intel code will be\ncleaned up in the future.\n\nCc: stable@vger.kernel.org\nSigned-off-by: Sean Christopherson <seanjc@google.com>\nMessage-ID: <20240405235603.1173076-2-seanjc@google.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
  "full_message": "KVM: x86: Snapshot if a vCPU's vendor model is AMD vs. Intel compatible\n\nAdd kvm_vcpu_arch.is_amd_compatible to cache if a vCPU's vendor model is\ncompatible with AMD, i.e. if the vCPU vendor is AMD or Hygon, along with\nhelpers to check if a vCPU is compatible AMD vs. Intel.  To handle Intel\nvs. AMD behavior related to masking the LVTPC entry, KVM will need to\ncheck for vendor compatibility on every PMI injection, i.e. querying for\nAMD will soon be a moderately hot path.\n\nNote!  This subtly (or maybe not-so-subtly) makes \"Intel compatible\" KVM's\ndefault behavior, both if userspace omits (or never sets) CPUID 0x0 and if\nuserspace sets a completely unknown vendor.  One could argue that KVM\nshould treat such vCPUs as not being compatible with Intel *or* AMD, but\nthat would add useless complexity to KVM.\n\nKVM needs to do *something* in the face of vendor specific behavior, and\nso unless KVM conjured up a magic third option, choosing to treat unknown\nvendors as neither Intel nor AMD means that checks on AMD compatibility\nwould yield Intel behavior, and checks for Intel compatibility would yield\nAMD behavior.  And that's far worse as it would effectively yield random\nbehavior depending on whether KVM checked for AMD vs. Intel vs. !AMD vs.\n!Intel.  And practically speaking, all x86 CPUs follow either Intel or AMD\narchitecture, i.e. \"supporting\" an unknown third architecture adds no\nvalue.\n\nDeliberately don't convert any of the existing guest_cpuid_is_intel()\nchecks, as the Intel side of things is messier due to some flows explicitly\nchecking for exactly vendor==Intel, versus some flows assuming anything\nthat isn't \"AMD compatible\" gets Intel behavior.  The Intel code will be\ncleaned up in the future.\n\nCc: stable@vger.kernel.org\nSigned-off-by: Sean Christopherson <seanjc@google.com>\nMessage-ID: <20240405235603.1173076-2-seanjc@google.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
  "author_name": "Sean Christopherson",
  "author_email": "seanjc@google.com",
  "author_date": "Fri Apr 5 16:55:54 2024 -0700",
  "author_date_iso": "2024-04-05T16:55:54-07:00",
  "committer_name": "Paolo Bonzini",
  "committer_email": "pbonzini@redhat.com",
  "committer_date": "Thu Apr 11 12:58:56 2024 -0400",
  "committer_date_iso": "2024-04-11T12:58:56-04:00",
  "files_changed": [
    "arch/x86/include/asm/kvm_host.h",
    "arch/x86/kvm/cpuid.c",
    "arch/x86/kvm/cpuid.h",
    "arch/x86/kvm/mmu/mmu.c",
    "arch/x86/kvm/x86.c"
  ],
  "files_changed_count": 5,
  "stats": [
    {
      "file": "arch/x86/include/asm/kvm_host.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/kvm/cpuid.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/kvm/cpuid.h",
      "insertions": 10,
      "deletions": 0
    },
    {
      "file": "arch/x86/kvm/mmu/mmu.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/x86/kvm/x86.c",
      "insertions": 1,
      "deletions": 1
    }
  ],
  "total_insertions": 14,
  "total_deletions": 2,
  "total_changes": 16,
  "parents": [
    "fec50db7033ea478773b159e0e2efb135270e3b7"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/include/asm/kvm_host.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kvm/cpuid.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kvm/cpuid.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kvm/mmu/mmu.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kvm/x86.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}