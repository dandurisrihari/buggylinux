{
  "hash": "d50dde5a10f305253cbc3855307f608f8a3c5f73",
  "hash_short": "d50dde5a",
  "subject": "sched: Add new scheduler syscalls to support an extended scheduling parameters ABI",
  "body": "Add the syscalls needed for supporting scheduling algorithms\nwith extended scheduling parameters (e.g., SCHED_DEADLINE).\n\nIn general, it makes possible to specify a periodic/sporadic task,\nthat executes for a given amount of runtime at each instance, and is\nscheduled according to the urgency of their own timing constraints,\ni.e.:\n\n - a (maximum/typical) instance execution time,\n - a minimum interval between consecutive instances,\n - a time constraint by which each instance must be completed.\n\nThus, both the data structure that holds the scheduling parameters of\nthe tasks and the system calls dealing with it must be extended.\nUnfortunately, modifying the existing struct sched_param would break\nthe ABI and result in potentially serious compatibility issues with\nlegacy binaries.\n\nFor these reasons, this patch:\n\n - defines the new struct sched_attr, containing all the fields\n   that are necessary for specifying a task in the computational\n   model described above;\n\n - defines and implements the new scheduling related syscalls that\n   manipulate it, i.e., sched_setattr() and sched_getattr().\n\nSyscalls are introduced for x86 (32 and 64 bits) and ARM only, as a\nproof of concept and for developing and testing purposes. Making them\navailable on other architectures is straightforward.\n\nSince no \"user\" for these new parameters is introduced in this patch,\nthe implementation of the new system calls is just identical to their\nalready existing counterpart. Future patches that implement scheduling\npolicies able to exploit the new data structure must also take care of\nmodifying the sched_*attr() calls accordingly with their own purposes.\n\nSigned-off-by: Dario Faggioli <raistlin@linux.it>\n[ Rewrote to use sched_attr. ]\nSigned-off-by: Juri Lelli <juri.lelli@gmail.com>\n[ Removed sched_setscheduler2() for now. ]\nSigned-off-by: Peter Zijlstra <peterz@infradead.org>\nLink: http://lkml.kernel.org/r/1383831828-15501-3-git-send-email-juri.lelli@gmail.com\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "full_message": "sched: Add new scheduler syscalls to support an extended scheduling parameters ABI\n\nAdd the syscalls needed for supporting scheduling algorithms\nwith extended scheduling parameters (e.g., SCHED_DEADLINE).\n\nIn general, it makes possible to specify a periodic/sporadic task,\nthat executes for a given amount of runtime at each instance, and is\nscheduled according to the urgency of their own timing constraints,\ni.e.:\n\n - a (maximum/typical) instance execution time,\n - a minimum interval between consecutive instances,\n - a time constraint by which each instance must be completed.\n\nThus, both the data structure that holds the scheduling parameters of\nthe tasks and the system calls dealing with it must be extended.\nUnfortunately, modifying the existing struct sched_param would break\nthe ABI and result in potentially serious compatibility issues with\nlegacy binaries.\n\nFor these reasons, this patch:\n\n - defines the new struct sched_attr, containing all the fields\n   that are necessary for specifying a task in the computational\n   model described above;\n\n - defines and implements the new scheduling related syscalls that\n   manipulate it, i.e., sched_setattr() and sched_getattr().\n\nSyscalls are introduced for x86 (32 and 64 bits) and ARM only, as a\nproof of concept and for developing and testing purposes. Making them\navailable on other architectures is straightforward.\n\nSince no \"user\" for these new parameters is introduced in this patch,\nthe implementation of the new system calls is just identical to their\nalready existing counterpart. Future patches that implement scheduling\npolicies able to exploit the new data structure must also take care of\nmodifying the sched_*attr() calls accordingly with their own purposes.\n\nSigned-off-by: Dario Faggioli <raistlin@linux.it>\n[ Rewrote to use sched_attr. ]\nSigned-off-by: Juri Lelli <juri.lelli@gmail.com>\n[ Removed sched_setscheduler2() for now. ]\nSigned-off-by: Peter Zijlstra <peterz@infradead.org>\nLink: http://lkml.kernel.org/r/1383831828-15501-3-git-send-email-juri.lelli@gmail.com\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "author_name": "Dario Faggioli",
  "author_email": "raistlin@linux.it",
  "author_date": "Thu Nov 7 14:43:36 2013 +0100",
  "author_date_iso": "2013-11-07T14:43:36+01:00",
  "committer_name": "Ingo Molnar",
  "committer_email": "mingo@kernel.org",
  "committer_date": "Mon Jan 13 13:41:04 2014 +0100",
  "committer_date_iso": "2014-01-13T13:41:04+01:00",
  "files_changed": [
    "arch/arm/include/asm/unistd.h",
    "arch/arm/include/uapi/asm/unistd.h",
    "arch/arm/kernel/calls.S",
    "arch/x86/syscalls/syscall_32.tbl",
    "arch/x86/syscalls/syscall_64.tbl",
    "include/linux/sched.h",
    "include/linux/syscalls.h",
    "kernel/sched/core.c",
    "kernel/sched/sched.h"
  ],
  "files_changed_count": 9,
  "stats": [
    {
      "file": "arch/arm/include/asm/unistd.h",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/arm/include/uapi/asm/unistd.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "arch/arm/kernel/calls.S",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "arch/x86/syscalls/syscall_32.tbl",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "arch/x86/syscalls/syscall_64.tbl",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "include/linux/sched.h",
      "insertions": 62,
      "deletions": 0
    },
    {
      "file": "include/linux/syscalls.h",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "kernel/sched/core.c",
      "insertions": 243,
      "deletions": 20
    },
    {
      "file": "kernel/sched/sched.h",
      "insertions": 6,
      "deletions": 3
    }
  ],
  "total_insertions": 326,
  "total_deletions": 24,
  "total_changes": 350,
  "parents": [
    "56b4811039174bba9cbd68318d0d8b1585b9eded"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v3.14",
    "v3.14-rc1",
    "v3.14-rc2",
    "v3.14-rc3",
    "v3.14-rc4",
    "v3.14-rc5",
    "v3.14-rc6",
    "v3.14-rc7",
    "v3.14-rc8",
    "v3.15"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/arm/include/asm/unistd.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm/kernel/calls.S",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/syscalls/syscall_32.tbl",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/syscalls/syscall_64.tbl",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm/include/uapi/asm/unistd.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/sched.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/syscalls.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/sched/sched.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/sched/core.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}