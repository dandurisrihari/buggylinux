{
  "hash": "9ce6010290587f4b0c57e2819481bd5ba9668349",
  "hash_short": "9ce60102",
  "subject": "Merge branch 'bpf_modify_ret'",
  "body": "KP Singh says:\n\n====================\nv3 -> v4:\n\n* Fix a memory leak noticed by Daniel.\n\nv2 -> v3:\n\n* bpf_trampoline_update_progs -> bpf_trampoline_get_progs + const\n  qualification.\n* Typos in commit messages.\n* Added Andrii's Acks.\n\nv1 -> v2:\n\n* Adressed Andrii's feedback.\n* Fixed a bug that Alexei noticed about nop generation.\n* Rebase.\n\nThis was brought up in the KRSI v4 discussion and found to be useful\nboth for security and tracing programs.\n\n  https://lore.kernel.org/bpf/20200225193108.GB22391@chromium.org/\n\nThe modify_return programs are allowed for security hooks (with an\nextra CAP_MAC_ADMIN check) and functions whitelisted for error\ninjection (ALLOW_ERROR_INJECTION).\n\nThe \"security_\" check is expected to be cleaned up with the KRSI patch\nseries.\n\nHere is an example of how a fmod_ret program behaves:\n\nint func_to_be_attached(int a, int b)\n{  <--- do_fentry\n\ndo_fmod_ret:\n   <update ret by calling fmod_ret>\n   if (ret != 0)\n        goto do_fexit;\n\noriginal_function:\n\n    <side_effects_happen_here>\n\n}  <--- do_fexit\n\nALLOW_ERROR_INJECTION(func_to_be_attached, ERRNO)\n\nThe fmod_ret program attached to this function can be defined as:\n\nSEC(\"fmod_ret/func_to_be_attached\")\nint BPF_PROG(func_name, int a, int b, int ret)\n{\n        // This will skip the original function logic.\n        return -1;\n}\n====================\n\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>",
  "full_message": "Merge branch 'bpf_modify_ret'\n\nKP Singh says:\n\n====================\nv3 -> v4:\n\n* Fix a memory leak noticed by Daniel.\n\nv2 -> v3:\n\n* bpf_trampoline_update_progs -> bpf_trampoline_get_progs + const\n  qualification.\n* Typos in commit messages.\n* Added Andrii's Acks.\n\nv1 -> v2:\n\n* Adressed Andrii's feedback.\n* Fixed a bug that Alexei noticed about nop generation.\n* Rebase.\n\nThis was brought up in the KRSI v4 discussion and found to be useful\nboth for security and tracing programs.\n\n  https://lore.kernel.org/bpf/20200225193108.GB22391@chromium.org/\n\nThe modify_return programs are allowed for security hooks (with an\nextra CAP_MAC_ADMIN check) and functions whitelisted for error\ninjection (ALLOW_ERROR_INJECTION).\n\nThe \"security_\" check is expected to be cleaned up with the KRSI patch\nseries.\n\nHere is an example of how a fmod_ret program behaves:\n\nint func_to_be_attached(int a, int b)\n{  <--- do_fentry\n\ndo_fmod_ret:\n   <update ret by calling fmod_ret>\n   if (ret != 0)\n        goto do_fexit;\n\noriginal_function:\n\n    <side_effects_happen_here>\n\n}  <--- do_fexit\n\nALLOW_ERROR_INJECTION(func_to_be_attached, ERRNO)\n\nThe fmod_ret program attached to this function can be defined as:\n\nSEC(\"fmod_ret/func_to_be_attached\")\nint BPF_PROG(func_name, int a, int b, int ret)\n{\n        // This will skip the original function logic.\n        return -1;\n}\n====================\n\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>",
  "author_name": "Alexei Starovoitov",
  "author_email": "ast@kernel.org",
  "author_date": "Wed Mar 4 13:41:06 2020 -0800",
  "author_date_iso": "2020-03-04T13:41:06-08:00",
  "committer_name": "Alexei Starovoitov",
  "committer_email": "ast@kernel.org",
  "committer_date": "Wed Mar 4 13:47:16 2020 -0800",
  "committer_date_iso": "2020-03-04T13:47:16-08:00",
  "files_changed": [],
  "files_changed_count": 0,
  "stats": [
    {
      "file": "arch/x86/net/bpf_jit_comp.c",
      "insertions": 205,
      "deletions": 74
    },
    {
      "file": "include/linux/bpf.h",
      "insertions": 22,
      "deletions": 2
    },
    {
      "file": "include/uapi/linux/bpf.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "kernel/bpf/bpf_struct_ops.c",
      "insertions": 9,
      "deletions": 1
    },
    {
      "file": "kernel/bpf/btf.c",
      "insertions": 20,
      "deletions": 7
    },
    {
      "file": "kernel/bpf/syscall.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "kernel/bpf/trampoline.c",
      "insertions": 38,
      "deletions": 27
    },
    {
      "file": "kernel/bpf/verifier.c",
      "insertions": 32,
      "deletions": 0
    },
    {
      "file": "kernel/trace/bpf_trace.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "net/bpf/test_run.c",
      "insertions": 48,
      "deletions": 9
    },
    {
      "file": "tools/include/uapi/linux/bpf.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "tools/lib/bpf/libbpf.c",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/prog_tests/fentry_fexit.c",
      "insertions": 3,
      "deletions": 9
    },
    {
      "file": "tools/testing/selftests/bpf/prog_tests/fentry_test.c",
      "insertions": 4,
      "deletions": 10
    },
    {
      "file": "tools/testing/selftests/bpf/prog_tests/fexit_test.c",
      "insertions": 21,
      "deletions": 48
    },
    {
      "file": "tools/testing/selftests/bpf/prog_tests/modify_return.c",
      "insertions": 65,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/progs/modify_return.c",
      "insertions": 49,
      "deletions": 0
    }
  ],
  "total_insertions": 524,
  "total_deletions": 187,
  "total_changes": 711,
  "parents": [
    "cc6fa771024ffdb428bdf25a94309cf21e8ef1b9",
    "3d08b6f29cf33aeaf301553d8d3805f0aa609df7"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.7-rc1"
  ],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": []
}