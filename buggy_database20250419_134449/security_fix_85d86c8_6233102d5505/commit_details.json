{
  "hash": "85d86c8aa52eb5b3539eebe3adcc2f077118b412",
  "hash_short": "85d86c8a",
  "subject": "selftests/powerpc: Add basic EEH selftest",
  "body": "Use the new eeh_dev_check and eeh_dev_break interfaces to test EEH\nrecovery.  Historically this has been done manually using platform specific\nEEH error injection facilities (e.g. via RTAS). However, documentation on\nhow to use these facilities is haphazard at best and non-existent at worst\nso it's hard to develop a cross-platform test.\n\nThe new debugfs interfaces allow the kernel to handle the platform specific\ndetails so we can write a more generic set of sets. This patch adds the\nmost basic of recovery tests where:\n\na) Errors are injected and recovered from sequentially,\nb) Errors are not injected into PCI-PCI bridges, such as PCIe switches.\nc) Errors are only injected into device function zero.\nd) No errors are injected into Virtual Functions.\n\na), b) and c) are largely due to limitations of Linux's EEH support.  EEH\nrecovery is serialised in the EEH recovery thread which forces a).\nSimilarly, multi-function PCI devices are almost always grouped into the\nsame PE so injecting an error on one function exercises the same code\npaths. c) is because we currently more or less ignore PCI bridges during\nrecovery and assume that the recovered topology will be the same as the\noriginal.\n\nd) is due to the limits of the eeh_dev_break interface. With the current\nimplementation we can't inject an error into a specific VF without\npotentially causing additional errors on other VFs. Due to the serialised\nrecovery process we might end up timing out waiting for another function to\nrecover before the function of interest is recovered. The platform specific\nerror injection facilities are finer-grained and allow this capability, but\ndoing that requires working out how to use those facilities first.\n\nBasicly, it's better than nothing and it's a base to build on.\n\nSigned-off-by: Oliver O'Halloran <oohall@gmail.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://lore.kernel.org/r/20190903101605.2890-15-oohall@gmail.com",
  "full_message": "selftests/powerpc: Add basic EEH selftest\n\nUse the new eeh_dev_check and eeh_dev_break interfaces to test EEH\nrecovery.  Historically this has been done manually using platform specific\nEEH error injection facilities (e.g. via RTAS). However, documentation on\nhow to use these facilities is haphazard at best and non-existent at worst\nso it's hard to develop a cross-platform test.\n\nThe new debugfs interfaces allow the kernel to handle the platform specific\ndetails so we can write a more generic set of sets. This patch adds the\nmost basic of recovery tests where:\n\na) Errors are injected and recovered from sequentially,\nb) Errors are not injected into PCI-PCI bridges, such as PCIe switches.\nc) Errors are only injected into device function zero.\nd) No errors are injected into Virtual Functions.\n\na), b) and c) are largely due to limitations of Linux's EEH support.  EEH\nrecovery is serialised in the EEH recovery thread which forces a).\nSimilarly, multi-function PCI devices are almost always grouped into the\nsame PE so injecting an error on one function exercises the same code\npaths. c) is because we currently more or less ignore PCI bridges during\nrecovery and assume that the recovered topology will be the same as the\noriginal.\n\nd) is due to the limits of the eeh_dev_break interface. With the current\nimplementation we can't inject an error into a specific VF without\npotentially causing additional errors on other VFs. Due to the serialised\nrecovery process we might end up timing out waiting for another function to\nrecover before the function of interest is recovered. The platform specific\nerror injection facilities are finer-grained and allow this capability, but\ndoing that requires working out how to use those facilities first.\n\nBasicly, it's better than nothing and it's a base to build on.\n\nSigned-off-by: Oliver O'Halloran <oohall@gmail.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://lore.kernel.org/r/20190903101605.2890-15-oohall@gmail.com",
  "author_name": "Oliver O'Halloran",
  "author_email": "oohall@gmail.com",
  "author_date": "Tue Sep 3 20:16:05 2019 +1000",
  "author_date_iso": "2019-09-03T20:16:05+10:00",
  "committer_name": "Michael Ellerman",
  "committer_email": "mpe@ellerman.id.au",
  "committer_date": "Thu Sep 5 14:22:40 2019 +1000",
  "committer_date_iso": "2019-09-05T14:22:40+10:00",
  "files_changed": [
    "tools/testing/selftests/powerpc/Makefile",
    "tools/testing/selftests/powerpc/eeh/Makefile",
    "tools/testing/selftests/powerpc/eeh/eeh-basic.sh",
    "tools/testing/selftests/powerpc/eeh/eeh-functions.sh"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "tools/testing/selftests/powerpc/Makefile",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/powerpc/eeh/Makefile",
      "insertions": 9,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/powerpc/eeh/eeh-basic.sh",
      "insertions": 82,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/powerpc/eeh/eeh-functions.sh",
      "insertions": 76,
      "deletions": 0
    }
  ],
  "total_insertions": 168,
  "total_deletions": 0,
  "total_changes": 168,
  "parents": [
    "bd6461cc7b3c4fd12dcba4b0e95dfc612df872fd"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.4",
    "v5.4-rc1",
    "v5.4-rc2",
    "v5.4-rc3",
    "v5.4-rc4",
    "v5.4-rc5",
    "v5.4-rc6",
    "v5.4-rc7",
    "v5.4-rc8",
    "v5.5"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "tools/testing/selftests/powerpc/Makefile",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "tools/testing/selftests/powerpc/eeh/Makefile",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "tools/testing/selftests/powerpc/eeh/eeh-basic.sh",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "tools/testing/selftests/powerpc/eeh/eeh-functions.sh",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}