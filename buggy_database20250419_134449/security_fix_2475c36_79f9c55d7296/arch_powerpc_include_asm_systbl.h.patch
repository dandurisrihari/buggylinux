commit 2475c362134a0fa5309c7b0fdb6fc1b86dca88a1
Author: Michael Ellerman <mpe@ellerman.id.au>
Date:   Wed Dec 16 21:26:28 2015 +1100

    Partial revert of "powerpc: Individual System V IPC system calls"
    
    This partially reverts commit a34236155afb1cc41945e58388ac988431bcb0b8.
    
    While reviewing the glibc patch to exploit the individual IPC calls,
    Arnd & Andreas noticed that we were still requiring userspace to pass
    IPC_64 in order to get the new style IPC API.
    
    With a bit of cleanup in the kernel we can drop that requirement, and
    instead only provide the new style API, which will simplify things for
    userspace.
    
    Rather than try and sneak that patch into 4.4, instead we will drop the
    individual IPC calls for powerpc, and merge them again in 4.5 once the
    cleanup patch has gone in.
    
    Because we've already added sys_mlock2() as syscall #378, we don't do a
    full revert of the IPC calls. Instead we drop the __NR #defines, and
    send those now undefined syscall numbers to sys_ni_syscall(). This
    leaves a gap in the syscall numbers, but we'll reuse them when we merge
    the individual IPC calls.
    
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Acked-by: Arnd Bergmann <arnd@arndb.de>

diff --git a/arch/powerpc/include/asm/systbl.h b/arch/powerpc/include/asm/systbl.h
index f2b0b1b0c72a..5654ece02c0d 100644
--- a/arch/powerpc/include/asm/systbl.h
+++ b/arch/powerpc/include/asm/systbl.h
@@ -370,16 +370,16 @@ COMPAT_SYS(execveat)
 PPC64ONLY(switch_endian)
 SYSCALL_SPU(userfaultfd)
 SYSCALL_SPU(membarrier)
-SYSCALL(semop)
-SYSCALL(semget)
-COMPAT_SYS(semctl)
-COMPAT_SYS(semtimedop)
-COMPAT_SYS(msgsnd)
-COMPAT_SYS(msgrcv)
-SYSCALL(msgget)
-COMPAT_SYS(msgctl)
-COMPAT_SYS(shmat)
-SYSCALL(shmdt)
-SYSCALL(shmget)
-COMPAT_SYS(shmctl)
+SYSCALL(ni_syscall)
+SYSCALL(ni_syscall)
+SYSCALL(ni_syscall)
+SYSCALL(ni_syscall)
+SYSCALL(ni_syscall)
+SYSCALL(ni_syscall)
+SYSCALL(ni_syscall)
+SYSCALL(ni_syscall)
+SYSCALL(ni_syscall)
+SYSCALL(ni_syscall)
+SYSCALL(ni_syscall)
+SYSCALL(ni_syscall)
 SYSCALL(mlock2)