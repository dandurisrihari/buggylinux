{
  "hash": "dab741e0e02bd3c4f5e2e97be74b39df2523fc6e",
  "hash_short": "dab741e0",
  "subject": "Add a \"nosymfollow\" mount option.",
  "body": "For mounts that have the new \"nosymfollow\" option, don't follow symlinks\nwhen resolving paths. The new option is similar in spirit to the\nexisting \"nodev\", \"noexec\", and \"nosuid\" options, as well as to the\nLOOKUP_NO_SYMLINKS resolve flag in the openat2(2) syscall. Various BSD\nvariants have been supporting the \"nosymfollow\" mount option for a long\ntime with equivalent implementations.\n\nNote that symlinks may still be created on file systems mounted with\nthe \"nosymfollow\" option present. readlink() remains functional, so\nuser space code that is aware of symlinks can still choose to follow\nthem explicitly.\n\nSetting the \"nosymfollow\" mount option helps prevent privileged\nwriters from modifying files unintentionally in case there is an\nunexpected link along the accessed path. The \"nosymfollow\" option is\nthus useful as a defensive measure for systems that need to deal with\nuntrusted file systems in privileged contexts.\n\nMore information on the history and motivation for this patch can be\nfound here:\n\nhttps://sites.google.com/a/chromium.org/dev/chromium-os/chromiumos-design-docs/hardening-against-malicious-stateful-data#TOC-Restricting-symlink-traversal\n\nSigned-off-by: Mattias Nissler <mnissler@chromium.org>\nSigned-off-by: Ross Zwisler <zwisler@google.com>\nReviewed-by: Aleksa Sarai <cyphar@cyphar.com>\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>",
  "full_message": "Add a \"nosymfollow\" mount option.\n\nFor mounts that have the new \"nosymfollow\" option, don't follow symlinks\nwhen resolving paths. The new option is similar in spirit to the\nexisting \"nodev\", \"noexec\", and \"nosuid\" options, as well as to the\nLOOKUP_NO_SYMLINKS resolve flag in the openat2(2) syscall. Various BSD\nvariants have been supporting the \"nosymfollow\" mount option for a long\ntime with equivalent implementations.\n\nNote that symlinks may still be created on file systems mounted with\nthe \"nosymfollow\" option present. readlink() remains functional, so\nuser space code that is aware of symlinks can still choose to follow\nthem explicitly.\n\nSetting the \"nosymfollow\" mount option helps prevent privileged\nwriters from modifying files unintentionally in case there is an\nunexpected link along the accessed path. The \"nosymfollow\" option is\nthus useful as a defensive measure for systems that need to deal with\nuntrusted file systems in privileged contexts.\n\nMore information on the history and motivation for this patch can be\nfound here:\n\nhttps://sites.google.com/a/chromium.org/dev/chromium-os/chromiumos-design-docs/hardening-against-malicious-stateful-data#TOC-Restricting-symlink-traversal\n\nSigned-off-by: Mattias Nissler <mnissler@chromium.org>\nSigned-off-by: Ross Zwisler <zwisler@google.com>\nReviewed-by: Aleksa Sarai <cyphar@cyphar.com>\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>",
  "author_name": "Mattias Nissler",
  "author_email": "mnissler@chromium.org",
  "author_date": "Thu Aug 27 11:09:46 2020 -0600",
  "author_date_iso": "2020-08-27T11:09:46-06:00",
  "committer_name": "Al Viro",
  "committer_email": "viro@zeniv.linux.org.uk",
  "committer_date": "Thu Aug 27 16:06:47 2020 -0400",
  "committer_date_iso": "2020-08-27T16:06:47-04:00",
  "files_changed": [
    "fs/namei.c",
    "fs/namespace.c",
    "fs/proc_namespace.c",
    "fs/statfs.c",
    "include/linux/mount.h",
    "include/linux/statfs.h",
    "include/uapi/linux/mount.h"
  ],
  "files_changed_count": 7,
  "stats": [
    {
      "file": "fs/namei.c",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "fs/namespace.c",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "fs/proc_namespace.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "fs/statfs.c",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "include/linux/mount.h",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "include/linux/statfs.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "include/uapi/linux/mount.h",
      "insertions": 1,
      "deletions": 0
    }
  ],
  "total_insertions": 11,
  "total_deletions": 2,
  "total_changes": 13,
  "parents": [
    "9123e3a74ec7b934a4a099e98af6a61c2f80bbf5"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/namei.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/proc_namespace.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/statfs.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/namespace.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/uapi/linux/mount.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/statfs.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/mount.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}