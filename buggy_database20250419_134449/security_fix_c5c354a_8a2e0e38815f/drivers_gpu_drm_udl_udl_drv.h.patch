commit c5c354a3a4728045e1342166394c615d75d45377
Author: Takashi Iwai <tiwai@suse.de>
Date:   Thu Sep 8 11:51:13 2022 +0200

    drm/udl: Fix inconsistent urbs.count value during udl_free_urb_list()
    
    In the current design, udl_get_urb() may be called asynchronously
    during the driver freeing its URL list via udl_free_urb_list().
    The problem is that the sync is determined by comparing the urbs.count
    and urbs.available fields, while we clear urbs.count field only once
    after udl_free_urb_list() finishes, i.e. during udl_free_urb_list(),
    the state becomes inconsistent.
    
    For fixing this inconsistency and also for hardening the locking
    scheme, this patch does a slight refactoring of the code around
    udl_get_urb() and udl_free_urb_list().  Now urbs.count is updated in
    the same spinlock at extracting a URB from the list in
    udl_free_url_list().
    
    Acked-by: Thomas Zimmermann <tzimmermann@suse.de>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Thomas Zimmermann <tzimmermann@suse.de>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220908095115.23396-11-tiwai@suse.de

diff --git a/drivers/gpu/drm/udl/udl_drv.h b/drivers/gpu/drm/udl/udl_drv.h
index 5923d2e02bc8..d943684b5bbb 100644
--- a/drivers/gpu/drm/udl/udl_drv.h
+++ b/drivers/gpu/drm/udl/udl_drv.h
@@ -74,13 +74,7 @@ static inline struct usb_device *udl_to_usb_device(struct udl_device *udl)
 int udl_modeset_init(struct drm_device *dev);
 struct drm_connector *udl_connector_init(struct drm_device *dev);
 
-struct urb *udl_get_urb_timeout(struct drm_device *dev, long timeout);
-
-#define GET_URB_TIMEOUT	HZ
-static inline struct urb *udl_get_urb(struct drm_device *dev)
-{
-	return udl_get_urb_timeout(dev, GET_URB_TIMEOUT);
-}
+struct urb *udl_get_urb(struct drm_device *dev);
 
 int udl_submit_urb(struct drm_device *dev, struct urb *urb, size_t len);
 int udl_sync_pending_urbs(struct drm_device *dev);