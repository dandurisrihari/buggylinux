{
  "hash": "bd14798650cd2a2befd7d96bbc466c2317a582db",
  "hash_short": "bd147986",
  "subject": "vme: Fix integer overflow checking in vme_check_window()",
  "body": "The controversial part of this patch is that I've changed it so we now\nprevent integer overflows for VME_USER types and before we didn't.  I\nview it as kernel-hardening.  I looked at a couple places that used\nVME_USER types and they seemed pretty suspicious so I'm pretty sure\npreventing overflows here is a good idea.\n\nThe most common problem which this function is for cases like VME_A16\nwhere we don't put an upper bound on \"size\" so you could have \"size\" set\nto U64_MAX and a valid vme_base would overflow the \"vme_base + size\"\ninto the valid range as well.\n\nIn the VME_A64 case, the integer overflow checking doesn't work because\n\"U64_MAX + 1\" has an integer overflow and it's just a complicated way of\nsaying zero.  That VME_A64 case is sort of interesting as well because\nthere is a VME_A64_MAX define which is set to \"U64_MAX + 1\".  The\ncompiler will never let anyone use it since it can't be stored in a u64\nvariable...  With my patch it's now limited to just U64_MAX.\n\nAnyway, I put one integer overflow check at the start of the function\nand deleted all existing checks.\n\nSigned-off-by: Dan Carpenter <dan.carpenter@oracle.com>\nAcked-by: Dmitry Kalinkin <dmitry.kalinkin@gmail.com>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
  "full_message": "vme: Fix integer overflow checking in vme_check_window()\n\nThe controversial part of this patch is that I've changed it so we now\nprevent integer overflows for VME_USER types and before we didn't.  I\nview it as kernel-hardening.  I looked at a couple places that used\nVME_USER types and they seemed pretty suspicious so I'm pretty sure\npreventing overflows here is a good idea.\n\nThe most common problem which this function is for cases like VME_A16\nwhere we don't put an upper bound on \"size\" so you could have \"size\" set\nto U64_MAX and a valid vme_base would overflow the \"vme_base + size\"\ninto the valid range as well.\n\nIn the VME_A64 case, the integer overflow checking doesn't work because\n\"U64_MAX + 1\" has an integer overflow and it's just a complicated way of\nsaying zero.  That VME_A64 case is sort of interesting as well because\nthere is a VME_A64_MAX define which is set to \"U64_MAX + 1\".  The\ncompiler will never let anyone use it since it can't be stored in a u64\nvariable...  With my patch it's now limited to just U64_MAX.\n\nAnyway, I put one integer overflow check at the start of the function\nand deleted all existing checks.\n\nSigned-off-by: Dan Carpenter <dan.carpenter@oracle.com>\nAcked-by: Dmitry Kalinkin <dmitry.kalinkin@gmail.com>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
  "author_name": "Dan Carpenter",
  "author_email": "dan.carpenter@oracle.com",
  "author_date": "Sat Sep 30 14:27:41 2017 +0300",
  "author_date_iso": "2017-09-30T14:27:41+03:00",
  "committer_name": "Greg Kroah-Hartman",
  "committer_email": "gregkh@linuxfoundation.org",
  "committer_date": "Wed Oct 4 10:30:53 2017 +0200",
  "committer_date_iso": "2017-10-04T10:30:53+02:00",
  "files_changed": [
    "drivers/vme/vme.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "drivers/vme/vme.c",
      "insertions": 8,
      "deletions": 10
    }
  ],
  "total_insertions": 8,
  "total_deletions": 10,
  "total_changes": 18,
  "parents": [
    "ebc4768ac4971eab4b570e733e47ac9dfd0e4175"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.15",
    "v4.15-rc1",
    "v4.15-rc2",
    "v4.15-rc3",
    "v4.15-rc4",
    "v4.15-rc5",
    "v4.15-rc6",
    "v4.15-rc7",
    "v4.15-rc8",
    "v4.15-rc9"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/vme/vme.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}