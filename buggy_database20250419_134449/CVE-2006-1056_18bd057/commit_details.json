{
  "hash": "18bd057b1408cd110ed23281533430cfc2d52091",
  "hash_short": "18bd057b",
  "subject": "[PATCH] i386/x86-64: Fix x87 information leak between processes",
  "body": "AMD K7/K8 CPUs only save/restore the FOP/FIP/FDP x87 registers in FXSAVE\nwhen an exception is pending.  This means the value leak through\ncontext switches and allow processes to observe some x87 instruction\nstate of other processes.\n\nThis was actually documented by AMD, but nobody recognized it as\nbeing different from Intel before.\n\nThe fix first adds an optimization: instead of unconditionally\ncalling FNCLEX after each FXSAVE test if ES is pending and skip\nit when not needed. Then do a x87 load from a kernel variable to\nclear FOP/FIP/FDP.\n\nThis means other processes always will only see a constant value\ndefined by the kernel in their FP state.\n\nI took some pain to make sure to chose a variable that's already\nin L1 during context switch to make the overhead of this low.\n\nAlso alternative() is used to patch away the new code on CPUs\nwho don't need it.\n\nPatch for both i386/x86-64.\n\nThe problem was discovered originally by Jan Beulich. Richard\nBrunner provided the basic code for the workarounds, with contribution\nfrom Jan.\n\nThis is CVE-2006-1056\n\nCc: richard.brunner@amd.com\nCc: jbeulich@novell.com\n\nSigned-off-by: Andi Kleen <ak@suse.de>\nSigned-off-by: Linus Torvalds <torvalds@osdl.org>",
  "full_message": "[PATCH] i386/x86-64: Fix x87 information leak between processes\n\nAMD K7/K8 CPUs only save/restore the FOP/FIP/FDP x87 registers in FXSAVE\nwhen an exception is pending.  This means the value leak through\ncontext switches and allow processes to observe some x87 instruction\nstate of other processes.\n\nThis was actually documented by AMD, but nobody recognized it as\nbeing different from Intel before.\n\nThe fix first adds an optimization: instead of unconditionally\ncalling FNCLEX after each FXSAVE test if ES is pending and skip\nit when not needed. Then do a x87 load from a kernel variable to\nclear FOP/FIP/FDP.\n\nThis means other processes always will only see a constant value\ndefined by the kernel in their FP state.\n\nI took some pain to make sure to chose a variable that's already\nin L1 during context switch to make the overhead of this low.\n\nAlso alternative() is used to patch away the new code on CPUs\nwho don't need it.\n\nPatch for both i386/x86-64.\n\nThe problem was discovered originally by Jan Beulich. Richard\nBrunner provided the basic code for the workarounds, with contribution\nfrom Jan.\n\nThis is CVE-2006-1056\n\nCc: richard.brunner@amd.com\nCc: jbeulich@novell.com\n\nSigned-off-by: Andi Kleen <ak@suse.de>\nSigned-off-by: Linus Torvalds <torvalds@osdl.org>",
  "author_name": "Andi Kleen",
  "author_email": "ak@suse.de",
  "author_date": "Thu Apr 20 02:36:45 2006 +0200",
  "author_date_iso": "2006-04-20T02:36:45+02:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@g5.osdl.org",
  "committer_date": "Thu Apr 20 07:58:11 2006 -0700",
  "committer_date_iso": "2006-04-20T07:58:11-07:00",
  "files_changed": [
    "arch/i386/kernel/cpu/amd.c",
    "arch/x86_64/kernel/process.c",
    "arch/x86_64/kernel/setup.c",
    "include/asm-i386/cpufeature.h",
    "include/asm-i386/i387.h",
    "include/asm-x86_64/cpufeature.h",
    "include/asm-x86_64/i387.h"
  ],
  "files_changed_count": 7,
  "stats": [
    {
      "file": "arch/i386/kernel/cpu/amd.c",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "arch/x86_64/kernel/process.c",
      "insertions": 3,
      "deletions": 1
    },
    {
      "file": "arch/x86_64/kernel/setup.c",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "include/asm-i386/cpufeature.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "include/asm-i386/i387.h",
      "insertions": 26,
      "deletions": 4
    },
    {
      "file": "include/asm-x86_64/cpufeature.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "include/asm-x86_64/i387.h",
      "insertions": 19,
      "deletions": 1
    }
  ],
  "total_insertions": 56,
  "total_deletions": 6,
  "total_changes": 62,
  "parents": [
    "5dc5cf7dd2723430b6df3d91c5b22af49e063622"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v2.6.17",
    "v2.6.17-rc3",
    "v2.6.17-rc4",
    "v2.6.17-rc5",
    "v2.6.17-rc6",
    "v2.6.18",
    "v2.6.18-rc1",
    "v2.6.18-rc2",
    "v2.6.18-rc3",
    "v2.6.18-rc4"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2006-1056"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "include/asm-x86_64/i387.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/asm-i386/cpufeature.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/asm-i386/i387.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86_64/kernel/setup.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/i386/kernel/cpu/amd.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/asm-x86_64/cpufeature.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86_64/kernel/process.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}