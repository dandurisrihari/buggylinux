{
  "hash": "4b4eef57e6135ebd28de8c6a3e7898e04172a897",
  "hash_short": "4b4eef57",
  "subject": "Merge tag 'probes-fixes-v6.5-rc1-2' of git://git.kernel.org/pub/scm/linux/kernel/git/trace/linux-trace",
  "body": "Pull probe fixes from Masami Hiramatsu:\n\n - fprobe: Add a comment why fprobe will be skipped if another kprobe is\n   running in fprobe_kprobe_handler().\n\n - probe-events: Fix some issues related to fetch-arguments:\n\n    - Fix double counting of the string length for user-string and\n      symstr. This will require longer buffer in the array case.\n\n    - Fix not to count error code (minus value) for the total used\n      length in array argument. This makes the total used length\n      shorter.\n\n    - Fix to update dynamic used data size counter only if fetcharg uses\n      the dynamic size data. This may mis-count the used dynamic data\n      size and corrupt data.\n\n    - Revert \"tracing: Add \"(fault)\" name injection to kernel probes\"\n      because that did not work correctly with a bug, and we agreed the\n      current '(fault)' output (instead of '\"(fault)\"' like a string)\n      explains what happened more clearly.\n\n    - Fix to record 0-length (means fault access) data_loc data in fetch\n      function itself, instead of store_trace_args(). If we record an\n      array of string, this will fix to save fault access data on each\n      entry of the array correctly.\n\n* tag 'probes-fixes-v6.5-rc1-2' of git://git.kernel.org/pub/scm/linux/kernel/git/trace/linux-trace:\n  tracing/probes: Fix to record 0-length data_loc in fetch_store_string*() if fails\n  Revert \"tracing: Add \"(fault)\" name injection to kernel probes\"\n  tracing/probes: Fix to update dynamic data counter if fetcharg uses it\n  tracing/probes: Fix not to count error code to total length\n  tracing/probes: Fix to avoid double count of the string length on the array\n  fprobes: Add a comment why fprobe_kprobe_handler exits if kprobe is running",
  "full_message": "Merge tag 'probes-fixes-v6.5-rc1-2' of git://git.kernel.org/pub/scm/linux/kernel/git/trace/linux-trace\n\nPull probe fixes from Masami Hiramatsu:\n\n - fprobe: Add a comment why fprobe will be skipped if another kprobe is\n   running in fprobe_kprobe_handler().\n\n - probe-events: Fix some issues related to fetch-arguments:\n\n    - Fix double counting of the string length for user-string and\n      symstr. This will require longer buffer in the array case.\n\n    - Fix not to count error code (minus value) for the total used\n      length in array argument. This makes the total used length\n      shorter.\n\n    - Fix to update dynamic used data size counter only if fetcharg uses\n      the dynamic size data. This may mis-count the used dynamic data\n      size and corrupt data.\n\n    - Revert \"tracing: Add \"(fault)\" name injection to kernel probes\"\n      because that did not work correctly with a bug, and we agreed the\n      current '(fault)' output (instead of '\"(fault)\"' like a string)\n      explains what happened more clearly.\n\n    - Fix to record 0-length (means fault access) data_loc data in fetch\n      function itself, instead of store_trace_args(). If we record an\n      array of string, this will fix to save fault access data on each\n      entry of the array correctly.\n\n* tag 'probes-fixes-v6.5-rc1-2' of git://git.kernel.org/pub/scm/linux/kernel/git/trace/linux-trace:\n  tracing/probes: Fix to record 0-length data_loc in fetch_store_string*() if fails\n  Revert \"tracing: Add \"(fault)\" name injection to kernel probes\"\n  tracing/probes: Fix to update dynamic data counter if fetcharg uses it\n  tracing/probes: Fix not to count error code to total length\n  tracing/probes: Fix to avoid double count of the string length on the array\n  fprobes: Add a comment why fprobe_kprobe_handler exits if kprobe is running",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Sun Jul 16 12:13:51 2023 -0700",
  "author_date_iso": "2023-07-16T12:13:51-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Sun Jul 16 12:13:51 2023 -0700",
  "committer_date_iso": "2023-07-16T12:13:51-07:00",
  "files_changed": [
    "kernel/trace/fprobe.c",
    "kernel/trace/trace.h",
    "kernel/trace/trace_probe.c",
    "kernel/trace/trace_uprobe.c"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "kernel/trace/fprobe.c",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "kernel/trace/trace.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "kernel/trace/trace_probe.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "kernel/trace/trace_probe_kernel.h",
      "insertions": 8,
      "deletions": 22
    },
    {
      "file": "kernel/trace/trace_probe_tmpl.h",
      "insertions": 5,
      "deletions": 5
    },
    {
      "file": "kernel/trace/trace_uprobe.c",
      "insertions": 2,
      "deletions": 1
    }
  ],
  "total_insertions": 24,
  "total_deletions": 29,
  "total_changes": 53,
  "parents": [
    "831fe284d8275987596b7d640518dddba5735f61",
    "797311bce5c2ac90b8d65e357603cfd410d36ebb"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "kernel/trace/fprobe.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/trace/trace.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/trace/trace_probe.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/trace/trace_uprobe.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}