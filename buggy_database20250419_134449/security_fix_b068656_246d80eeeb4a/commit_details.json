{
  "hash": "b0686565946368892c2cdf92f102392e24823588",
  "hash_short": "b0686565",
  "subject": "virtio_net: Fix probe failed when modprobe virtio_net",
  "body": "When doing the following test steps, an error was found:\n  step 1: modprobe virtio_net succeeded\n    # modprobe virtio_net        <-- OK\n\n  step 2: fault injection in register_netdevice()\n    # modprobe -r virtio_net     <-- OK\n    # ...\n      FAULT_INJECTION: forcing a failure.\n      name failslab, interval 1, probability 0, space 0, times 0\n      CPU: 0 PID: 3521 Comm: modprobe\n      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996),\n      Call Trace:\n       <TASK>\n       ...\n       should_failslab+0xa/0x20\n       ...\n       dev_set_name+0xc0/0x100\n       netdev_register_kobject+0xc2/0x340\n       register_netdevice+0xbb9/0x1320\n       virtnet_probe+0x1d72/0x2658 [virtio_net]\n       ...\n       </TASK>\n      virtio_net: probe of virtio0 failed with error -22\n\n  step 3: modprobe virtio_net failed\n    # modprobe virtio_net        <-- failed\n      virtio_net: probe of virtio0 failed with error -2\n\nThe root cause of the problem is that the queues are not\ndisable on the error handling path when register_netdevice()\nfails in virtnet_probe(), resulting in an error \"-ENOENT\"\nreturned in the next modprobe call in setup_vq().\n\nvirtio_pci_modern_device uses virtqueues to send or\nreceive message, and \"queue_enable\" records whether the\nqueues are available. In vp_modern_find_vqs(), all queues\nwill be selected and activated, but once queues are enabled\nthere is no way to go back except reset.\n\nFix it by reset virtio device on error handling path. This\nmakes error handling follow the same order as normal device\ncleanup in virtnet_remove() which does: unregister, destroy\nfailover, then reset. And that flow is better tested than\nerror handling so we can be reasonably sure it works well.\n\nFixes: 024655555021 (\"virtio_net: fix use after free on allocation failure\")\nSigned-off-by: Li Zetao <lizetao1@huawei.com>\nAcked-by: Michael S. Tsirkin <mst@redhat.com>\nLink: https://lore.kernel.org/r/20221122150046.3910638-1-lizetao1@huawei.com\nSigned-off-by: Paolo Abeni <pabeni@redhat.com>",
  "full_message": "virtio_net: Fix probe failed when modprobe virtio_net\n\nWhen doing the following test steps, an error was found:\n  step 1: modprobe virtio_net succeeded\n    # modprobe virtio_net        <-- OK\n\n  step 2: fault injection in register_netdevice()\n    # modprobe -r virtio_net     <-- OK\n    # ...\n      FAULT_INJECTION: forcing a failure.\n      name failslab, interval 1, probability 0, space 0, times 0\n      CPU: 0 PID: 3521 Comm: modprobe\n      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996),\n      Call Trace:\n       <TASK>\n       ...\n       should_failslab+0xa/0x20\n       ...\n       dev_set_name+0xc0/0x100\n       netdev_register_kobject+0xc2/0x340\n       register_netdevice+0xbb9/0x1320\n       virtnet_probe+0x1d72/0x2658 [virtio_net]\n       ...\n       </TASK>\n      virtio_net: probe of virtio0 failed with error -22\n\n  step 3: modprobe virtio_net failed\n    # modprobe virtio_net        <-- failed\n      virtio_net: probe of virtio0 failed with error -2\n\nThe root cause of the problem is that the queues are not\ndisable on the error handling path when register_netdevice()\nfails in virtnet_probe(), resulting in an error \"-ENOENT\"\nreturned in the next modprobe call in setup_vq().\n\nvirtio_pci_modern_device uses virtqueues to send or\nreceive message, and \"queue_enable\" records whether the\nqueues are available. In vp_modern_find_vqs(), all queues\nwill be selected and activated, but once queues are enabled\nthere is no way to go back except reset.\n\nFix it by reset virtio device on error handling path. This\nmakes error handling follow the same order as normal device\ncleanup in virtnet_remove() which does: unregister, destroy\nfailover, then reset. And that flow is better tested than\nerror handling so we can be reasonably sure it works well.\n\nFixes: 024655555021 (\"virtio_net: fix use after free on allocation failure\")\nSigned-off-by: Li Zetao <lizetao1@huawei.com>\nAcked-by: Michael S. Tsirkin <mst@redhat.com>\nLink: https://lore.kernel.org/r/20221122150046.3910638-1-lizetao1@huawei.com\nSigned-off-by: Paolo Abeni <pabeni@redhat.com>",
  "author_name": "Li Zetao",
  "author_email": "lizetao1@huawei.com",
  "author_date": "Tue Nov 22 23:00:46 2022 +0800",
  "author_date_iso": "2022-11-22T23:00:46+08:00",
  "committer_name": "Paolo Abeni",
  "committer_email": "pabeni@redhat.com",
  "committer_date": "Thu Nov 24 09:26:35 2022 +0100",
  "committer_date_iso": "2022-11-24T09:26:35+01:00",
  "files_changed": [
    "drivers/net/virtio_net.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "drivers/net/virtio_net.c",
      "insertions": 1,
      "deletions": 2
    }
  ],
  "total_insertions": 1,
  "total_deletions": 2,
  "total_changes": 3,
  "parents": [
    "08e8a949f684e1fbc4b1efd2337d72ec8f3613d9"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/net/virtio_net.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}