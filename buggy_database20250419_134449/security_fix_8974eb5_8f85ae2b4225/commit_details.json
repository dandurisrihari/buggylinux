{
  "hash": "8974eb588283b7d44a7c91fa09fcbaf380339f3a",
  "hash_short": "8974eb58",
  "subject": "x86/speculation: Add Gather Data Sampling mitigation",
  "body": "Gather Data Sampling (GDS) is a hardware vulnerability which allows\nunprivileged speculative access to data which was previously stored in\nvector registers.\n\nIntel processors that support AVX2 and AVX512 have gather instructions\nthat fetch non-contiguous data elements from memory. On vulnerable\nhardware, when a gather instruction is transiently executed and\nencounters a fault, stale data from architectural or internal vector\nregisters may get transiently stored to the destination vector\nregister allowing an attacker to infer the stale data using typical\nside channel techniques like cache timing attacks.\n\nThis mitigation is different from many earlier ones for two reasons.\nFirst, it is enabled by default and a bit must be set to *DISABLE* it.\nThis is the opposite of normal mitigation polarity. This means GDS can\nbe mitigated simply by updating microcode and leaving the new control\nbit alone.\n\nSecond, GDS has a \"lock\" bit. This lock bit is there because the\nmitigation affects the hardware security features KeyLocker and SGX.\nIt needs to be enabled and *STAY* enabled for these features to be\nmitigated against GDS.\n\nThe mitigation is enabled in the microcode by default. Disable it by\nsetting gather_data_sampling=off or by disabling all mitigations with\nmitigations=off. The mitigation status can be checked by reading:\n\n    /sys/devices/system/cpu/vulnerabilities/gather_data_sampling\n\nSigned-off-by: Daniel Sneddon <daniel.sneddon@linux.intel.com>\nSigned-off-by: Dave Hansen <dave.hansen@linux.intel.com>\nAcked-by: Josh Poimboeuf <jpoimboe@kernel.org>",
  "full_message": "x86/speculation: Add Gather Data Sampling mitigation\n\nGather Data Sampling (GDS) is a hardware vulnerability which allows\nunprivileged speculative access to data which was previously stored in\nvector registers.\n\nIntel processors that support AVX2 and AVX512 have gather instructions\nthat fetch non-contiguous data elements from memory. On vulnerable\nhardware, when a gather instruction is transiently executed and\nencounters a fault, stale data from architectural or internal vector\nregisters may get transiently stored to the destination vector\nregister allowing an attacker to infer the stale data using typical\nside channel techniques like cache timing attacks.\n\nThis mitigation is different from many earlier ones for two reasons.\nFirst, it is enabled by default and a bit must be set to *DISABLE* it.\nThis is the opposite of normal mitigation polarity. This means GDS can\nbe mitigated simply by updating microcode and leaving the new control\nbit alone.\n\nSecond, GDS has a \"lock\" bit. This lock bit is there because the\nmitigation affects the hardware security features KeyLocker and SGX.\nIt needs to be enabled and *STAY* enabled for these features to be\nmitigated against GDS.\n\nThe mitigation is enabled in the microcode by default. Disable it by\nsetting gather_data_sampling=off or by disabling all mitigations with\nmitigations=off. The mitigation status can be checked by reading:\n\n    /sys/devices/system/cpu/vulnerabilities/gather_data_sampling\n\nSigned-off-by: Daniel Sneddon <daniel.sneddon@linux.intel.com>\nSigned-off-by: Dave Hansen <dave.hansen@linux.intel.com>\nAcked-by: Josh Poimboeuf <jpoimboe@kernel.org>",
  "author_name": "Daniel Sneddon",
  "author_email": "daniel.sneddon@linux.intel.com",
  "author_date": "Wed Jul 12 19:43:11 2023 -0700",
  "author_date_iso": "2023-07-12T19:43:11-07:00",
  "committer_name": "Dave Hansen",
  "committer_email": "dave.hansen@linux.intel.com",
  "committer_date": "Wed Jul 19 16:45:37 2023 -0700",
  "committer_date_iso": "2023-07-19T16:45:37-07:00",
  "files_changed": [
    "Documentation/ABI/testing/sysfs-devices-system-cpu",
    "Documentation/admin-guide/hw-vuln/gather_data_sampling.rst",
    "Documentation/admin-guide/hw-vuln/index.rst",
    "Documentation/admin-guide/kernel-parameters.txt",
    "arch/x86/include/asm/cpufeatures.h",
    "arch/x86/include/asm/msr-index.h",
    "arch/x86/kernel/cpu/bugs.c",
    "arch/x86/kernel/cpu/common.c",
    "arch/x86/kernel/cpu/cpu.h",
    "drivers/base/cpu.c"
  ],
  "files_changed_count": 10,
  "stats": [
    {
      "file": "Documentation/ABI/testing/sysfs-devices-system-cpu",
      "insertions": 7,
      "deletions": 6
    },
    {
      "file": "Documentation/admin-guide/hw-vuln/gather_data_sampling.rst",
      "insertions": 99,
      "deletions": 0
    },
    {
      "file": "Documentation/admin-guide/hw-vuln/index.rst",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "Documentation/admin-guide/kernel-parameters.txt",
      "insertions": 28,
      "deletions": 13
    },
    {
      "file": "arch/x86/include/asm/cpufeatures.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/msr-index.h",
      "insertions": 11,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/cpu/bugs.c",
      "insertions": 129,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/cpu/common.c",
      "insertions": 25,
      "deletions": 9
    },
    {
      "file": "arch/x86/kernel/cpu/cpu.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "drivers/base/cpu.c",
      "insertions": 8,
      "deletions": 0
    }
  ],
  "total_insertions": 310,
  "total_deletions": 28,
  "total_changes": 338,
  "parents": [
    "fdf0eaf11452d72945af31804e2a1048ee1b574c"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "vulnerability"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "Documentation/admin-guide/hw-vuln/gather_data_sampling.rst",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "Documentation/ABI/testing/sysfs-devices-system-cpu",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "Documentation/admin-guide/hw-vuln/index.rst",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/msr-index.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/cpu/bugs.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/cpufeatures.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "Documentation/admin-guide/kernel-parameters.txt",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/cpu/cpu.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/cpu/common.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/base/cpu.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}