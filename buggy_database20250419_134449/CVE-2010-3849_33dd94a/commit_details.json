{
  "hash": "33dd94ae1ccbfb7bf0fb6c692bc3d1c4269e6177",
  "hash_short": "33dd94ae",
  "subject": "do_exit(): make sure that we run with get_fs() == USER_DS",
  "body": "If a user manages to trigger an oops with fs set to KERNEL_DS, fs is not\notherwise reset before do_exit().  do_exit may later (via mm_release in\nfork.c) do a put_user to a user-controlled address, potentially allowing\na user to leverage an oops into a controlled write into kernel memory.\n\nThis is only triggerable in the presence of another bug, but this\npotentially turns a lot of DoS bugs into privilege escalations, so it's\nworth fixing.  I have proof-of-concept code which uses this bug along\nwith CVE-2010-3849 to write a zero to an arbitrary kernel address, so\nI've tested that this is not theoretical.\n\nA more logical place to put this fix might be when we know an oops has\noccurred, before we call do_exit(), but that would involve changing\nevery architecture, in multiple places.\n\nLet's just stick it in do_exit instead.\n\n[akpm@linux-foundation.org: update code comment]\nSigned-off-by: Nelson Elhage <nelhage@ksplice.com>\nCc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>\nCc: <stable@kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "full_message": "do_exit(): make sure that we run with get_fs() == USER_DS\n\nIf a user manages to trigger an oops with fs set to KERNEL_DS, fs is not\notherwise reset before do_exit().  do_exit may later (via mm_release in\nfork.c) do a put_user to a user-controlled address, potentially allowing\na user to leverage an oops into a controlled write into kernel memory.\n\nThis is only triggerable in the presence of another bug, but this\npotentially turns a lot of DoS bugs into privilege escalations, so it's\nworth fixing.  I have proof-of-concept code which uses this bug along\nwith CVE-2010-3849 to write a zero to an arbitrary kernel address, so\nI've tested that this is not theoretical.\n\nA more logical place to put this fix might be when we know an oops has\noccurred, before we call do_exit(), but that would involve changing\nevery architecture, in multiple places.\n\nLet's just stick it in do_exit instead.\n\n[akpm@linux-foundation.org: update code comment]\nSigned-off-by: Nelson Elhage <nelhage@ksplice.com>\nCc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>\nCc: <stable@kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "author_name": "Nelson Elhage",
  "author_email": "nelhage@ksplice.com",
  "author_date": "Thu Dec 2 14:31:21 2010 -0800",
  "author_date_iso": "2010-12-02T14:31:21-08:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Thu Dec 2 14:51:16 2010 -0800",
  "committer_date_iso": "2010-12-02T14:51:16-08:00",
  "files_changed": [
    "kernel/exit.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "kernel/exit.c",
      "insertions": 9,
      "deletions": 0
    }
  ],
  "total_insertions": 9,
  "total_deletions": 0,
  "total_changes": 9,
  "parents": [
    "a0b0f58cdd32ab363a600a294ddaa90f0c32de8c"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v2.6.37",
    "v2.6.37-rc5",
    "v2.6.37-rc6",
    "v2.6.37-rc7",
    "v2.6.37-rc8",
    "v2.6.38",
    "v2.6.38-rc1",
    "v2.6.38-rc2",
    "v2.6.38-rc3",
    "v2.6.38-rc4"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2010-3849"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "kernel/exit.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}