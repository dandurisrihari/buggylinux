commit 6fad84a4d624c300d03ebba457cc641765050c43
Author: Keith Busch <kbusch@kernel.org>
Date:   Fri Nov 8 15:41:08 2024 -0800

    nvme-pci: use sgls for all user requests if possible
    
    If the device supports SGLs, use these for all user requests. This
    format encodes the expected transfer length so it can catch short buffer
    errors in a user command, whether it occurred accidently or maliciously.
    
    For controllers that support SGL data mode, this is a viable mitigation
    to CVE-2023-6238. For controllers that don't support SGLs, log a warning
    in the passthrough path since not having the capability can corrupt
    data if the interface is not used correctly.
    
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Keith Busch <kbusch@kernel.org>

diff --git a/drivers/nvme/host/pci.c b/drivers/nvme/host/pci.c
index c6c3ae3a7c43..4c644bb7f069 100644
--- a/drivers/nvme/host/pci.c
+++ b/drivers/nvme/host/pci.c
@@ -515,7 +515,8 @@ static inline bool nvme_pci_metadata_use_sgls(struct nvme_dev *dev,
 {
 	if (!nvme_ctrl_meta_sgl_supported(&dev->ctrl))
 		return false;
-	return req->nr_integrity_segments > 1;
+	return req->nr_integrity_segments > 1 ||
+		nvme_req(req)->flags & NVME_REQ_USERCMD;
 }
 
 static inline bool nvme_pci_use_sgls(struct nvme_dev *dev, struct request *req,
@@ -533,7 +534,7 @@ static inline bool nvme_pci_use_sgls(struct nvme_dev *dev, struct request *req,
 	if (nvme_pci_metadata_use_sgls(dev, req))
 		return true;
 	if (!sgl_threshold || avg_seg_size < sgl_threshold)
-		return false;
+		return nvme_req(req)->flags & NVME_REQ_USERCMD;
 	return true;
 }