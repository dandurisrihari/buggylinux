{
  "hash": "d87c295f599cab2ab3b3df53a9098adba4a6002b",
  "hash_short": "d87c295f",
  "subject": "sysfs: Introduce a mechanism to hide static attribute_groups",
  "body": "Add a mechanism for named attribute_groups to hide their directory at\nsysfs_update_group() time, or otherwise skip emitting the group\ndirectory when the group is first registered. It piggybacks on\nis_visible() in a similar manner as SYSFS_PREALLOC, i.e. special flags\nin the upper bits of the returned mode. To use it, specify a symbol\nprefix to DEFINE_SYSFS_GROUP_VISIBLE(), and then pass that same prefix\nto SYSFS_GROUP_VISIBLE() when assigning the @is_visible() callback:\n\n\tDEFINE_SYSFS_GROUP_VISIBLE($prefix)\n\n\tstruct attribute_group $prefix_group = {\n\t\t.name = $name,\n\t\t.is_visible = SYSFS_GROUP_VISIBLE($prefix),\n\t};\n\nSYSFS_GROUP_VISIBLE() expects a definition of $prefix_group_visible()\nand $prefix_attr_visible(), where $prefix_group_visible() just returns\ntrue / false and $prefix_attr_visible() behaves as normal.\n\nThe motivation for this capability is to centralize PCI device\nauthentication in the PCI core with a named sysfs group while keeping\nthat group hidden for devices and platforms that do not meet the\nrequirements. In a PCI topology, most devices will not support\nauthentication, a small subset will support just PCI CMA (Component\nMeasurement and Authentication), a smaller subset will support PCI CMA +\nPCIe IDE (Link Integrity and Encryption), and only next generation\nserver hosts will start to include a platform TSM (TEE Security\nManager).\n\nWithout this capability the alternatives are:\n\n* Check if all attributes are invisible and if so, hide the directory.\n  Beyond trouble getting this to work [1], this is an ABI change for\n  scenarios if userspace happens to depend on group visibility absent any\n  attributes. I.e. this new capability avoids regression since it does\n  not retroactively apply to existing cases.\n\n* Publish an empty /sys/bus/pci/devices/$pdev/tsm/ directory for all PCI\n  devices (i.e. for the case when TSM platform support is present, but\n  device support is absent). Unfortunate that this will be a vestigial\n  empty directory in the vast majority of cases.\n\n* Reintroduce usage of runtime calls to sysfs_{create,remove}_group()\n  in the PCI core. Bjorn has already indicated that he does not want to\n  see any growth of pci_sysfs_init() [2].\n\n* Drop the named group and simulate a directory by prefixing all\n  TSM-related attributes with \"tsm_\". Unfortunate to not use the naming\n  capability of a sysfs group as intended.\n\nIn comparison, there is a small potential for regression if for some\nreason an @is_visible() callback had dependencies on how many times it\nwas called. Additionally, it is no longer an error to update a group\nthat does not have its directory already present, and it is no longer a\nWARN() to remove a group that was never visible.\n\nLink: https://lore.kernel.org/all/2024012321-envious-procedure-4a58@gregkh/ [1]\nLink: https://lore.kernel.org/linux-pci/20231019200110.GA1410324@bhelgaas/ [2]\nSigned-off-by: Dan Williams <dan.j.williams@intel.com>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>\nLink: https://lore.kernel.org/r/2024013028-deflator-flaring-ec62@gregkh\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
  "full_message": "sysfs: Introduce a mechanism to hide static attribute_groups\n\nAdd a mechanism for named attribute_groups to hide their directory at\nsysfs_update_group() time, or otherwise skip emitting the group\ndirectory when the group is first registered. It piggybacks on\nis_visible() in a similar manner as SYSFS_PREALLOC, i.e. special flags\nin the upper bits of the returned mode. To use it, specify a symbol\nprefix to DEFINE_SYSFS_GROUP_VISIBLE(), and then pass that same prefix\nto SYSFS_GROUP_VISIBLE() when assigning the @is_visible() callback:\n\n\tDEFINE_SYSFS_GROUP_VISIBLE($prefix)\n\n\tstruct attribute_group $prefix_group = {\n\t\t.name = $name,\n\t\t.is_visible = SYSFS_GROUP_VISIBLE($prefix),\n\t};\n\nSYSFS_GROUP_VISIBLE() expects a definition of $prefix_group_visible()\nand $prefix_attr_visible(), where $prefix_group_visible() just returns\ntrue / false and $prefix_attr_visible() behaves as normal.\n\nThe motivation for this capability is to centralize PCI device\nauthentication in the PCI core with a named sysfs group while keeping\nthat group hidden for devices and platforms that do not meet the\nrequirements. In a PCI topology, most devices will not support\nauthentication, a small subset will support just PCI CMA (Component\nMeasurement and Authentication), a smaller subset will support PCI CMA +\nPCIe IDE (Link Integrity and Encryption), and only next generation\nserver hosts will start to include a platform TSM (TEE Security\nManager).\n\nWithout this capability the alternatives are:\n\n* Check if all attributes are invisible and if so, hide the directory.\n  Beyond trouble getting this to work [1], this is an ABI change for\n  scenarios if userspace happens to depend on group visibility absent any\n  attributes. I.e. this new capability avoids regression since it does\n  not retroactively apply to existing cases.\n\n* Publish an empty /sys/bus/pci/devices/$pdev/tsm/ directory for all PCI\n  devices (i.e. for the case when TSM platform support is present, but\n  device support is absent). Unfortunate that this will be a vestigial\n  empty directory in the vast majority of cases.\n\n* Reintroduce usage of runtime calls to sysfs_{create,remove}_group()\n  in the PCI core. Bjorn has already indicated that he does not want to\n  see any growth of pci_sysfs_init() [2].\n\n* Drop the named group and simulate a directory by prefixing all\n  TSM-related attributes with \"tsm_\". Unfortunate to not use the naming\n  capability of a sysfs group as intended.\n\nIn comparison, there is a small potential for regression if for some\nreason an @is_visible() callback had dependencies on how many times it\nwas called. Additionally, it is no longer an error to update a group\nthat does not have its directory already present, and it is no longer a\nWARN() to remove a group that was never visible.\n\nLink: https://lore.kernel.org/all/2024012321-envious-procedure-4a58@gregkh/ [1]\nLink: https://lore.kernel.org/linux-pci/20231019200110.GA1410324@bhelgaas/ [2]\nSigned-off-by: Dan Williams <dan.j.williams@intel.com>\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>\nLink: https://lore.kernel.org/r/2024013028-deflator-flaring-ec62@gregkh\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
  "author_name": "Dan Williams",
  "author_email": "dan.j.williams@intel.com",
  "author_date": "Tue Jan 30 10:46:27 2024 -0800",
  "author_date_iso": "2024-01-30T10:46:27-08:00",
  "committer_name": "Greg Kroah-Hartman",
  "committer_email": "gregkh@linuxfoundation.org",
  "committer_date": "Mon Feb 19 09:04:56 2024 +0100",
  "committer_date_iso": "2024-02-19T09:04:56+01:00",
  "files_changed": [
    "fs/sysfs/group.c",
    "include/linux/sysfs.h"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "fs/sysfs/group.c",
      "insertions": 36,
      "deletions": 9
    },
    {
      "file": "include/linux/sysfs.h",
      "insertions": 51,
      "deletions": 12
    }
  ],
  "total_insertions": 87,
  "total_deletions": 21,
  "total_changes": 108,
  "parents": [
    "07749061b837a1268146dc8a620a522253cea877"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/sysfs/group.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/sysfs.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}