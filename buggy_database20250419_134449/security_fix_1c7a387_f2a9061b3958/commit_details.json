{
  "hash": "1c7a387ffef894b1ab3942f0482dac7a6e0a909c",
  "hash_short": "1c7a387f",
  "subject": "drm: Update file owner during use",
  "body": "With the typical model where the display server opens the file descriptor\nand then hands it over to the client(*), we were showing stale data in\ndebugfs.\n\nFix it by updating the drm_file->pid on ioctl access from a different\nprocess.\n\nThe field is also made RCU protected to allow for lockless readers. Update\nside is protected with dev->filelist_mutex.\n\nBefore:\n\n$ cat /sys/kernel/debug/dri/0/clients\n             command   pid dev master a   uid      magic\n                Xorg  2344   0   y    y     0          0\n                Xorg  2344   0   n    y     0          2\n                Xorg  2344   0   n    y     0          3\n                Xorg  2344   0   n    y     0          4\n\nAfter:\n\n$ cat /sys/kernel/debug/dri/0/clients\n             command  tgid dev master a   uid      magic\n                Xorg   830   0   y    y     0          0\n       xfce4-session   880   0   n    y     0          1\n               xfwm4   943   0   n    y     0          2\n           neverball  1095   0   n    y     0          3\n\n*)\nMore detailed and historically accurate description of various handover\nimplementation kindly provided by Emil Velikov:\n\n\"\"\"\nThe traditional model, the server was the orchestrator managing the\nprimary device node. From the fd, to the master status and\nauthentication. But looking at the fd alone, this has varied across\nthe years.\n\nIIRC in the DRI1 days, Xorg (libdrm really) would have a list of open\nfd(s) and reuse those whenever needed, DRI2 the client was responsible\nfor open() themselves and with DRI3 the fd was passed to the client.\n\nAround the inception of DRI3 and systemd-logind, the latter became\nanother possible orchestrator. Whereby Xorg and Wayland compositors\ncould ask it for the fd. For various reasons (hysterical and genuine\nones) Xorg has a fallback path going the open(), whereas Wayland\ncompositors are moving to solely relying on logind... some never had\nfallback even.\n\nOver the past few years, more projects have emerged which provide\nfunctionality similar (be that on API level, Dbus, or otherwise) to\nsystemd-logind.\n\"\"\"\n\nv2:\n * Fixed typo in commit text and added a fine historical explanation\n   from Emil.\n\nSigned-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nCc: \"Christian K\u00f6nig\" <christian.koenig@amd.com>\nCc: Daniel Vetter <daniel@ffwll.ch>\nAcked-by: Christian K\u00f6nig <christian.koenig@amd.com>\nReviewed-by: Emil Velikov <emil.l.velikov@gmail.com>\nReviewed-by: Rob Clark <robdclark@gmail.com>\nTested-by: Rob Clark <robdclark@gmail.com>\nLink: https://patchwork.freedesktop.org/patch/msgid/20230621094824.2348732-1-tvrtko.ursulin@linux.intel.com\nSigned-off-by: Christian K\u00f6nig <christian.koenig@amd.com>",
  "full_message": "drm: Update file owner during use\n\nWith the typical model where the display server opens the file descriptor\nand then hands it over to the client(*), we were showing stale data in\ndebugfs.\n\nFix it by updating the drm_file->pid on ioctl access from a different\nprocess.\n\nThe field is also made RCU protected to allow for lockless readers. Update\nside is protected with dev->filelist_mutex.\n\nBefore:\n\n$ cat /sys/kernel/debug/dri/0/clients\n             command   pid dev master a   uid      magic\n                Xorg  2344   0   y    y     0          0\n                Xorg  2344   0   n    y     0          2\n                Xorg  2344   0   n    y     0          3\n                Xorg  2344   0   n    y     0          4\n\nAfter:\n\n$ cat /sys/kernel/debug/dri/0/clients\n             command  tgid dev master a   uid      magic\n                Xorg   830   0   y    y     0          0\n       xfce4-session   880   0   n    y     0          1\n               xfwm4   943   0   n    y     0          2\n           neverball  1095   0   n    y     0          3\n\n*)\nMore detailed and historically accurate description of various handover\nimplementation kindly provided by Emil Velikov:\n\n\"\"\"\nThe traditional model, the server was the orchestrator managing the\nprimary device node. From the fd, to the master status and\nauthentication. But looking at the fd alone, this has varied across\nthe years.\n\nIIRC in the DRI1 days, Xorg (libdrm really) would have a list of open\nfd(s) and reuse those whenever needed, DRI2 the client was responsible\nfor open() themselves and with DRI3 the fd was passed to the client.\n\nAround the inception of DRI3 and systemd-logind, the latter became\nanother possible orchestrator. Whereby Xorg and Wayland compositors\ncould ask it for the fd. For various reasons (hysterical and genuine\nones) Xorg has a fallback path going the open(), whereas Wayland\ncompositors are moving to solely relying on logind... some never had\nfallback even.\n\nOver the past few years, more projects have emerged which provide\nfunctionality similar (be that on API level, Dbus, or otherwise) to\nsystemd-logind.\n\"\"\"\n\nv2:\n * Fixed typo in commit text and added a fine historical explanation\n   from Emil.\n\nSigned-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nCc: \"Christian K\u00f6nig\" <christian.koenig@amd.com>\nCc: Daniel Vetter <daniel@ffwll.ch>\nAcked-by: Christian K\u00f6nig <christian.koenig@amd.com>\nReviewed-by: Emil Velikov <emil.l.velikov@gmail.com>\nReviewed-by: Rob Clark <robdclark@gmail.com>\nTested-by: Rob Clark <robdclark@gmail.com>\nLink: https://patchwork.freedesktop.org/patch/msgid/20230621094824.2348732-1-tvrtko.ursulin@linux.intel.com\nSigned-off-by: Christian K\u00f6nig <christian.koenig@amd.com>",
  "author_name": "Tvrtko Ursulin",
  "author_email": "tvrtko.ursulin@intel.com",
  "author_date": "Wed Jun 21 10:48:24 2023 +0100",
  "author_date_iso": "2023-06-21T10:48:24+01:00",
  "committer_name": "Christian K\u00f6nig",
  "committer_email": "christian.koenig@amd.com",
  "committer_date": "Wed Sep 20 15:27:44 2023 +0200",
  "committer_date_iso": "2023-09-20T15:27:44+02:00",
  "files_changed": [
    "drivers/gpu/drm/amd/amdgpu/amdgpu_gem.c",
    "drivers/gpu/drm/drm_auth.c",
    "drivers/gpu/drm/drm_debugfs.c",
    "drivers/gpu/drm/drm_file.c",
    "drivers/gpu/drm/drm_ioctl.c",
    "drivers/gpu/drm/nouveau/nouveau_drm.c",
    "drivers/gpu/drm/vmwgfx/vmwgfx_gem.c",
    "include/drm/drm_file.h"
  ],
  "files_changed_count": 8,
  "stats": [
    {
      "file": "drivers/gpu/drm/amd/amdgpu/amdgpu_gem.c",
      "insertions": 4,
      "deletions": 2
    },
    {
      "file": "drivers/gpu/drm/drm_auth.c",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "drivers/gpu/drm/drm_debugfs.c",
      "insertions": 6,
      "deletions": 4
    },
    {
      "file": "drivers/gpu/drm/drm_file.c",
      "insertions": 37,
      "deletions": 3
    },
    {
      "file": "drivers/gpu/drm/drm_ioctl.c",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "drivers/gpu/drm/nouveau/nouveau_drm.c",
      "insertions": 4,
      "deletions": 1
    },
    {
      "file": "drivers/gpu/drm/vmwgfx/vmwgfx_gem.c",
      "insertions": 4,
      "deletions": 2
    },
    {
      "file": "include/drm/drm_file.h",
      "insertions": 11,
      "deletions": 2
    }
  ],
  "total_insertions": 71,
  "total_deletions": 15,
  "total_changes": 86,
  "parents": [
    "9fc75c40faa29df14ba16066be6bdfaea9f39ce4"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/gpu/drm/drm_auth.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/drm_file.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/drm_debugfs.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/drm_ioctl.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/drm/drm_file.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/amd/amdgpu/amdgpu_gem.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/vmwgfx/vmwgfx_gem.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/nouveau/nouveau_drm.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}