{
  "hash": "796aec4a5b5850967af0c42d4e84df2d748d570b",
  "hash_short": "796aec4a",
  "subject": "Merge tag 'idxd-for-linus-may2024' of git bundle from Arjan",
  "body": "Pull DSA and IAA accelerator mis-alignment fix from Arjan van de Ven:\n \"The DSA (memory copy/zero/etc) and IAA (compression) accelerators in\n  the Sapphire Rapids and Emerald Rapids SOCs turn out to have a bug\n  that has security implications.\n\n  Both of these accelerators work by the application submitting a 64\n  byte command to the device; this command contains an opcode as well as\n  the virtual address of the return value that the device will update on\n  completion... and a set of opcode specific values.\n\n  In a typical scenario a ring 3 application mmaps the device file and\n  uses the ENQCMD or MOVDIR64 instructions (which are variations of a 64\n  byte atomic write) on this mmap'd memory region to directly submit\n  commands to a device hardware.\n\n  The return value as specified in the command, is supposed to be 32 (or\n  64) bytes aligned in memory, and generally the hardware checks and\n  enforces this alignment.\n\n  However in testing it has been found that there are conditions\n  (controlled by the submitter) where this enforcement does not\n  happen... which makes it possible for the return value to span a page\n  boundary. And this is where it goes wrong - the accelerators will\n  perform the virtual to physical address lookup on the first of the two\n  pages, but end up continue writing to the next consecutive physical\n  (host) page rather than the consecutive virtual page. In addition, the\n  device will end up in a hung state on such unaligned write of the\n  return value.\n\n  This patch series has the proposed software side solution consisting\n  of three parts:\n\n   - Don't allow these two PCI devices to be assigned to VM guests (we\n     cannot trust a VM guest to behave correctly and not cause this\n     condition)\n\n   - Don't allow ring 3 applications to set up the mmap unless they have\n     CAP_SYS_RAWIO permissions. This makes it no longer possible for\n     non-root applications to directly submit commands to the\n     accelerator\n\n   - Add a write() method to the device so that an application can\n     submit its commands to the kernel driver, which performs the needed\n     sanity checks before submitting it to the hardware.\n\n  This switch from mmap to write is an incompatible interface change to\n  non-root userspace, but we have not found a way to avoid this. All\n  software we know of uses a small set of accessor libraries for these\n  accelerators, for which libqpl and libdml (on github) are the most\n  common. As part of the security release, updated versions of these\n  libraries will be released that transparently fall back to write().\n\n  Intel has assigned CVE-2024-21823 to this hardware issue\"\n\n* tag 'idxd-for-linus-may2024' of git bundle from Arjan:\n  dmaengine: idxd: add a write() method for applications to submit work\n  dmaengine: idxd: add a new security check to deal with a hardware erratum\n  VFIO: Add the SPR_DSA and SPR_IAX devices to the denylist",
  "full_message": "Merge tag 'idxd-for-linus-may2024' of git bundle from Arjan\n\nPull DSA and IAA accelerator mis-alignment fix from Arjan van de Ven:\n \"The DSA (memory copy/zero/etc) and IAA (compression) accelerators in\n  the Sapphire Rapids and Emerald Rapids SOCs turn out to have a bug\n  that has security implications.\n\n  Both of these accelerators work by the application submitting a 64\n  byte command to the device; this command contains an opcode as well as\n  the virtual address of the return value that the device will update on\n  completion... and a set of opcode specific values.\n\n  In a typical scenario a ring 3 application mmaps the device file and\n  uses the ENQCMD or MOVDIR64 instructions (which are variations of a 64\n  byte atomic write) on this mmap'd memory region to directly submit\n  commands to a device hardware.\n\n  The return value as specified in the command, is supposed to be 32 (or\n  64) bytes aligned in memory, and generally the hardware checks and\n  enforces this alignment.\n\n  However in testing it has been found that there are conditions\n  (controlled by the submitter) where this enforcement does not\n  happen... which makes it possible for the return value to span a page\n  boundary. And this is where it goes wrong - the accelerators will\n  perform the virtual to physical address lookup on the first of the two\n  pages, but end up continue writing to the next consecutive physical\n  (host) page rather than the consecutive virtual page. In addition, the\n  device will end up in a hung state on such unaligned write of the\n  return value.\n\n  This patch series has the proposed software side solution consisting\n  of three parts:\n\n   - Don't allow these two PCI devices to be assigned to VM guests (we\n     cannot trust a VM guest to behave correctly and not cause this\n     condition)\n\n   - Don't allow ring 3 applications to set up the mmap unless they have\n     CAP_SYS_RAWIO permissions. This makes it no longer possible for\n     non-root applications to directly submit commands to the\n     accelerator\n\n   - Add a write() method to the device so that an application can\n     submit its commands to the kernel driver, which performs the needed\n     sanity checks before submitting it to the hardware.\n\n  This switch from mmap to write is an incompatible interface change to\n  non-root userspace, but we have not found a way to avoid this. All\n  software we know of uses a small set of accessor libraries for these\n  accelerators, for which libqpl and libdml (on github) are the most\n  common. As part of the security release, updated versions of these\n  libraries will be released that transparently fall back to write().\n\n  Intel has assigned CVE-2024-21823 to this hardware issue\"\n\n* tag 'idxd-for-linus-may2024' of git bundle from Arjan:\n  dmaengine: idxd: add a write() method for applications to submit work\n  dmaengine: idxd: add a new security check to deal with a hardware erratum\n  VFIO: Add the SPR_DSA and SPR_IAX devices to the denylist",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Mon May 13 20:10:19 2024 -0700",
  "author_date_iso": "2024-05-13T20:10:19-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Mon May 13 20:10:19 2024 -0700",
  "committer_date_iso": "2024-05-13T20:10:19-07:00",
  "files_changed": [],
  "files_changed_count": 0,
  "stats": [
    {
      "file": "drivers/dma/idxd/cdev.c",
      "insertions": 77,
      "deletions": 0
    },
    {
      "file": "drivers/dma/idxd/idxd.h",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "drivers/dma/idxd/init.c",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "drivers/dma/idxd/registers.h",
      "insertions": 0,
      "deletions": 3
    },
    {
      "file": "drivers/dma/idxd/sysfs.c",
      "insertions": 25,
      "deletions": 2
    },
    {
      "file": "drivers/vfio/pci/vfio_pci.c",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "include/linux/pci_ids.h",
      "insertions": 2,
      "deletions": 0
    }
  ],
  "total_insertions": 113,
  "total_deletions": 5,
  "total_changes": 118,
  "parents": [
    "a5131c3fdf2608f1c15f3809e201cf540eb28489",
    "6827738dc684a87ad54ebba3ae7f3d7c977698eb"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [
      "CVE-2024-21823"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": []
}