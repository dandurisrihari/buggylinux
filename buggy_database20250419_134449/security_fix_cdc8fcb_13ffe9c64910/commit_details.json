{
  "hash": "cdc8fcb49905c0b67e355e027cb462ee168ffaa3",
  "hash_short": "cdc8fcb4",
  "subject": "Merge tag 'for-5.9/io_uring-20200802' of git://git.kernel.dk/linux-block",
  "body": "Pull io_uring updates from Jens Axboe:\n \"Lots of cleanups in here, hardening the code and/or making it easier\n  to read and fixing bugs, but a core feature/change too adding support\n  for real async buffered reads. With the latter in place, we just need\n  buffered write async support and we're done relying on kthreads for\n  the fast path. In detail:\n\n   - Cleanup how memory accounting is done on ring setup/free (Bijan)\n\n   - sq array offset calculation fixup (Dmitry)\n\n   - Consistently handle blocking off O_DIRECT submission path (me)\n\n   - Support proper async buffered reads, instead of relying on kthread\n     offload for that. This uses the page waitqueue to drive retries\n     from task_work, like we handle poll based retry. (me)\n\n   - IO completion optimizations (me)\n\n   - Fix race with accounting and ring fd install (me)\n\n   - Support EPOLLEXCLUSIVE (Jiufei)\n\n   - Get rid of the io_kiocb unionizing, made possible by shrinking\n     other bits (Pavel)\n\n   - Completion side cleanups (Pavel)\n\n   - Cleanup REQ_F_ flags handling, and kill off many of them (Pavel)\n\n   - Request environment grabbing cleanups (Pavel)\n\n   - File and socket read/write cleanups (Pavel)\n\n   - Improve kiocb_set_rw_flags() (Pavel)\n\n   - Tons of fixes and cleanups (Pavel)\n\n   - IORING_SQ_NEED_WAKEUP clear fix (Xiaoguang)\"\n\n* tag 'for-5.9/io_uring-20200802' of git://git.kernel.dk/linux-block: (127 commits)\n  io_uring: flip if handling after io_setup_async_rw\n  fs: optimise kiocb_set_rw_flags()\n  io_uring: don't touch 'ctx' after installing file descriptor\n  io_uring: get rid of atomic FAA for cq_timeouts\n  io_uring: consolidate *_check_overflow accounting\n  io_uring: fix stalled deferred requests\n  io_uring: fix racy overflow count reporting\n  io_uring: deduplicate __io_complete_rw()\n  io_uring: de-unionise io_kiocb\n  io-wq: update hash bits\n  io_uring: fix missing io_queue_linked_timeout()\n  io_uring: mark ->work uninitialised after cleanup\n  io_uring: deduplicate io_grab_files() calls\n  io_uring: don't do opcode prep twice\n  io_uring: clear IORING_SQ_NEED_WAKEUP after executing task works\n  io_uring: batch put_task_struct()\n  tasks: add put_task_struct_many()\n  io_uring: return locked and pinned page accounting\n  io_uring: don't miscount pinned memory\n  io_uring: don't open-code recv kbuf managment\n  ...",
  "full_message": "Merge tag 'for-5.9/io_uring-20200802' of git://git.kernel.dk/linux-block\n\nPull io_uring updates from Jens Axboe:\n \"Lots of cleanups in here, hardening the code and/or making it easier\n  to read and fixing bugs, but a core feature/change too adding support\n  for real async buffered reads. With the latter in place, we just need\n  buffered write async support and we're done relying on kthreads for\n  the fast path. In detail:\n\n   - Cleanup how memory accounting is done on ring setup/free (Bijan)\n\n   - sq array offset calculation fixup (Dmitry)\n\n   - Consistently handle blocking off O_DIRECT submission path (me)\n\n   - Support proper async buffered reads, instead of relying on kthread\n     offload for that. This uses the page waitqueue to drive retries\n     from task_work, like we handle poll based retry. (me)\n\n   - IO completion optimizations (me)\n\n   - Fix race with accounting and ring fd install (me)\n\n   - Support EPOLLEXCLUSIVE (Jiufei)\n\n   - Get rid of the io_kiocb unionizing, made possible by shrinking\n     other bits (Pavel)\n\n   - Completion side cleanups (Pavel)\n\n   - Cleanup REQ_F_ flags handling, and kill off many of them (Pavel)\n\n   - Request environment grabbing cleanups (Pavel)\n\n   - File and socket read/write cleanups (Pavel)\n\n   - Improve kiocb_set_rw_flags() (Pavel)\n\n   - Tons of fixes and cleanups (Pavel)\n\n   - IORING_SQ_NEED_WAKEUP clear fix (Xiaoguang)\"\n\n* tag 'for-5.9/io_uring-20200802' of git://git.kernel.dk/linux-block: (127 commits)\n  io_uring: flip if handling after io_setup_async_rw\n  fs: optimise kiocb_set_rw_flags()\n  io_uring: don't touch 'ctx' after installing file descriptor\n  io_uring: get rid of atomic FAA for cq_timeouts\n  io_uring: consolidate *_check_overflow accounting\n  io_uring: fix stalled deferred requests\n  io_uring: fix racy overflow count reporting\n  io_uring: deduplicate __io_complete_rw()\n  io_uring: de-unionise io_kiocb\n  io-wq: update hash bits\n  io_uring: fix missing io_queue_linked_timeout()\n  io_uring: mark ->work uninitialised after cleanup\n  io_uring: deduplicate io_grab_files() calls\n  io_uring: don't do opcode prep twice\n  io_uring: clear IORING_SQ_NEED_WAKEUP after executing task works\n  io_uring: batch put_task_struct()\n  tasks: add put_task_struct_many()\n  io_uring: return locked and pinned page accounting\n  io_uring: don't miscount pinned memory\n  io_uring: don't open-code recv kbuf managment\n  ...",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Mon Aug 3 13:01:22 2020 -0700",
  "author_date_iso": "2020-08-03T13:01:22-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Mon Aug 3 13:01:22 2020 -0700",
  "committer_date_iso": "2020-08-03T13:01:22-07:00",
  "files_changed": [
    "block/blk-core.c",
    "fs/block_dev.c",
    "fs/btrfs/file.c",
    "fs/io_uring.c",
    "include/linux/blkdev.h",
    "include/linux/fs.h",
    "include/linux/pagemap.h",
    "mm/filemap.c"
  ],
  "files_changed_count": 8,
  "stats": [
    {
      "file": "block/blk-core.c",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "fs/block_dev.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "fs/btrfs/file.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "fs/io-wq.c",
      "insertions": 5,
      "deletions": 9
    },
    {
      "file": "fs/io-wq.h",
      "insertions": 6,
      "deletions": 5
    },
    {
      "file": "fs/io_uring.c",
      "insertions": 1482,
      "deletions": 1129
    },
    {
      "file": "fs/xfs/xfs_file.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "include/linux/blkdev.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "include/linux/fs.h",
      "insertions": 20,
      "deletions": 6
    },
    {
      "file": "include/linux/pagemap.h",
      "insertions": 43,
      "deletions": 0
    },
    {
      "file": "include/linux/sched/task.h",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "include/uapi/linux/io_uring.h",
      "insertions": 3,
      "deletions": 1
    },
    {
      "file": "mm/filemap.c",
      "insertions": 64,
      "deletions": 27
    },
    {
      "file": "tools/io_uring/liburing.h",
      "insertions": 5,
      "deletions": 1
    }
  ],
  "total_insertions": 1644,
  "total_deletions": 1181,
  "total_changes": 2825,
  "parents": [
    "382625d0d4325fb14a29444eb8dce8dcc2eb9b51",
    "fa15bafb71fd7a4d6018dae87cfaf890fd4ab47f"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "block/blk-core.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/blkdev.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/io_uring.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/block_dev.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/filemap.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/pagemap.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/fs.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/btrfs/file.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}