{
  "hash": "dd54fcced81d479d77acbeb4eea74b9ab9276bff",
  "hash_short": "dd54fcce",
  "subject": "Merge tag 'io_uring-6.13-20242901' of git://git.kernel.dk/linux",
  "body": "Pull more io_uring updates from Jens Axboe:\n\n - Remove a leftover struct from when the cqwait registered waiting was\n   transitioned to regions.\n\n - Fix for an issue introduced in this merge window, where nop->fd might\n   be used uninitialized. Ensure it's always set.\n\n - Add capping of the task_work run in local task_work mode, to prevent\n   bursty and long chains from adding too much latency.\n\n - Work around xa_store() leaving ->head non-NULL if it encounters an\n   allocation error during storing. Just a debug trigger, and can go\n   away once xa_store() behaves in a more expected way for this\n   condition. Not a major thing as it basically requires fault injection\n   to trigger it.\n\n - Fix a few mapping corner cases\n\n - Fix KCSAN complaint on reading the table size post unlock. Again not\n   a \"real\" issue, but it's easy to silence by just keeping the reading\n   inside the lock that protects it.\n\n* tag 'io_uring-6.13-20242901' of git://git.kernel.dk/linux:\n  io_uring/tctx: work around xa_store() allocation error issue\n  io_uring: fix corner case forgetting to vunmap\n  io_uring: fix task_work cap overshooting\n  io_uring: check for overflows in io_pin_pages\n  io_uring/nop: ensure nop->fd is always initialized\n  io_uring: limit local tw done\n  io_uring: add io_local_work_pending()\n  io_uring/region: return negative -E2BIG in io_create_region()\n  io_uring: protect register tracing\n  io_uring: remove io_uring_cqwait_reg_arg",
  "full_message": "Merge tag 'io_uring-6.13-20242901' of git://git.kernel.dk/linux\n\nPull more io_uring updates from Jens Axboe:\n\n - Remove a leftover struct from when the cqwait registered waiting was\n   transitioned to regions.\n\n - Fix for an issue introduced in this merge window, where nop->fd might\n   be used uninitialized. Ensure it's always set.\n\n - Add capping of the task_work run in local task_work mode, to prevent\n   bursty and long chains from adding too much latency.\n\n - Work around xa_store() leaving ->head non-NULL if it encounters an\n   allocation error during storing. Just a debug trigger, and can go\n   away once xa_store() behaves in a more expected way for this\n   condition. Not a major thing as it basically requires fault injection\n   to trigger it.\n\n - Fix a few mapping corner cases\n\n - Fix KCSAN complaint on reading the table size post unlock. Again not\n   a \"real\" issue, but it's easy to silence by just keeping the reading\n   inside the lock that protects it.\n\n* tag 'io_uring-6.13-20242901' of git://git.kernel.dk/linux:\n  io_uring/tctx: work around xa_store() allocation error issue\n  io_uring: fix corner case forgetting to vunmap\n  io_uring: fix task_work cap overshooting\n  io_uring: check for overflows in io_pin_pages\n  io_uring/nop: ensure nop->fd is always initialized\n  io_uring: limit local tw done\n  io_uring: add io_local_work_pending()\n  io_uring/region: return negative -E2BIG in io_create_region()\n  io_uring: protect register tracing\n  io_uring: remove io_uring_cqwait_reg_arg",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Sat Nov 30 15:43:02 2024 -0800",
  "author_date_iso": "2024-11-30T15:43:02-08:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Sat Nov 30 15:43:02 2024 -0800",
  "committer_date_iso": "2024-11-30T15:43:02-08:00",
  "files_changed": [
    "include/linux/io_uring_types.h",
    "io_uring/io_uring.c"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "include/linux/io_uring_types.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "include/uapi/linux/io_uring.h",
      "insertions": 0,
      "deletions": 14
    },
    {
      "file": "io_uring/io_uring.c",
      "insertions": 50,
      "deletions": 25
    },
    {
      "file": "io_uring/io_uring.h",
      "insertions": 7,
      "deletions": 2
    },
    {
      "file": "io_uring/memmap.c",
      "insertions": 10,
      "deletions": 3
    },
    {
      "file": "io_uring/nop.c",
      "insertions": 5,
      "deletions": 1
    },
    {
      "file": "io_uring/register.c",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "io_uring/tctx.c",
      "insertions": 12,
      "deletions": 1
    }
  ],
  "total_insertions": 87,
  "total_deletions": 47,
  "total_changes": 134,
  "parents": [
    "133577cad6bf48e5a7848c4338124081393bfe8a",
    "7eb75ce7527129d7f1fee6951566af409a37a1c4"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/linux/io_uring_types.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "io_uring/io_uring.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}