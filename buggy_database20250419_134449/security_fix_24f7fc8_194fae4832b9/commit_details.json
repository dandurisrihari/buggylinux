{
  "hash": "24f7fc83b9204d20f878c57cb77d261ae825e033",
  "hash_short": "24f7fc83",
  "subject": "x86/bugs: Provide boot parameters for the spec_store_bypass_disable mitigation",
  "body": "Contemporary high performance processors use a common industry-wide\noptimization known as \"Speculative Store Bypass\" in which loads from\naddresses to which a recent store has occurred may (speculatively) see an\nolder value. Intel refers to this feature as \"Memory Disambiguation\" which\nis part of their \"Smart Memory Access\" capability.\n\nMemory Disambiguation can expose a cache side-channel attack against such\nspeculatively read values. An attacker can create exploit code that allows\nthem to read memory outside of a sandbox environment (for example,\nmalicious JavaScript in a web page), or to perform more complex attacks\nagainst code running within the same privilege level, e.g. via the stack.\n\nAs a first step to mitigate against such attacks, provide two boot command\nline control knobs:\n\n nospec_store_bypass_disable\n spec_store_bypass_disable=[off,auto,on]\n\nBy default affected x86 processors will power on with Speculative\nStore Bypass enabled. Hence the provided kernel parameters are written\nfrom the point of view of whether to enable a mitigation or not.\nThe parameters are as follows:\n\n - auto - Kernel detects whether your CPU model contains an implementation\n\t  of Speculative Store Bypass and picks the most appropriate\n\t  mitigation.\n\n - on   - disable Speculative Store Bypass\n - off  - enable Speculative Store Bypass\n\n[ tglx: Reordered the checks so that the whole evaluation is not done\n  \twhen the CPU does not support RDS ]\n\nSigned-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nReviewed-by: Borislav Petkov <bp@suse.de>\nReviewed-by: Ingo Molnar <mingo@kernel.org>",
  "full_message": "x86/bugs: Provide boot parameters for the spec_store_bypass_disable mitigation\n\nContemporary high performance processors use a common industry-wide\noptimization known as \"Speculative Store Bypass\" in which loads from\naddresses to which a recent store has occurred may (speculatively) see an\nolder value. Intel refers to this feature as \"Memory Disambiguation\" which\nis part of their \"Smart Memory Access\" capability.\n\nMemory Disambiguation can expose a cache side-channel attack against such\nspeculatively read values. An attacker can create exploit code that allows\nthem to read memory outside of a sandbox environment (for example,\nmalicious JavaScript in a web page), or to perform more complex attacks\nagainst code running within the same privilege level, e.g. via the stack.\n\nAs a first step to mitigate against such attacks, provide two boot command\nline control knobs:\n\n nospec_store_bypass_disable\n spec_store_bypass_disable=[off,auto,on]\n\nBy default affected x86 processors will power on with Speculative\nStore Bypass enabled. Hence the provided kernel parameters are written\nfrom the point of view of whether to enable a mitigation or not.\nThe parameters are as follows:\n\n - auto - Kernel detects whether your CPU model contains an implementation\n\t  of Speculative Store Bypass and picks the most appropriate\n\t  mitigation.\n\n - on   - disable Speculative Store Bypass\n - off  - enable Speculative Store Bypass\n\n[ tglx: Reordered the checks so that the whole evaluation is not done\n  \twhen the CPU does not support RDS ]\n\nSigned-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nReviewed-by: Borislav Petkov <bp@suse.de>\nReviewed-by: Ingo Molnar <mingo@kernel.org>",
  "author_name": "Konrad Rzeszutek Wilk",
  "author_email": "konrad.wilk@oracle.com",
  "author_date": "Wed Apr 25 22:04:21 2018 -0400",
  "author_date_iso": "2018-04-25T22:04:21-04:00",
  "committer_name": "Thomas Gleixner",
  "committer_email": "tglx@linutronix.de",
  "committer_date": "Thu May 3 13:55:48 2018 +0200",
  "committer_date_iso": "2018-05-03T13:55:48+02:00",
  "files_changed": [
    "Documentation/admin-guide/kernel-parameters.txt",
    "arch/x86/include/asm/cpufeatures.h",
    "arch/x86/include/asm/nospec-branch.h",
    "arch/x86/kernel/cpu/bugs.c"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "Documentation/admin-guide/kernel-parameters.txt",
      "insertions": 33,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/cpufeatures.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/nospec-branch.h",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/cpu/bugs.c",
      "insertions": 103,
      "deletions": 0
    }
  ],
  "total_insertions": 143,
  "total_deletions": 0,
  "total_changes": 143,
  "parents": [
    "0cc5fa00b0a88dad140b4e5c2cead9951ad36822"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.17",
    "v4.17-rc7",
    "v4.18",
    "v4.18-rc1",
    "v4.18-rc2",
    "v4.18-rc3",
    "v4.18-rc4",
    "v4.18-rc5",
    "v4.18-rc6",
    "v4.18-rc7"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit",
      "Bypass"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "Documentation/admin-guide/kernel-parameters.txt",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/cpufeatures.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/nospec-branch.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/cpu/bugs.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}