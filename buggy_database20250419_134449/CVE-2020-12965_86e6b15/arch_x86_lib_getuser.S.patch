commit 86e6b1547b3d013bc392adf775b89318441403c2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Oct 23 18:17:46 2024 -0700

    x86: fix user address masking non-canonical speculation issue
    
    It turns out that AMD has a "Meltdown Lite(tm)" issue with non-canonical
    accesses in kernel space.  And so using just the high bit to decide
    whether an access is in user space or kernel space ends up with the good
    old "leak speculative data" if you have the right gadget using the
    result:
    
      CVE-2020-12965 “Transient Execution of Non-Canonical Accesses“
    
    Now, the kernel surrounds the access with a STAC/CLAC pair, and those
    instructions end up serializing execution on older Zen architectures,
    which closes the speculation window.
    
    But that was true only up until Zen 5, which renames the AC bit [1].
    That improves performance of STAC/CLAC a lot, but also means that the
    speculation window is now open.
    
    Note that this affects not just the new address masking, but also the
    regular valid_user_address() check used by access_ok(), and the asm
    version of the sign bit check in the get_user() helpers.
    
    It does not affect put_user() or clear_user() variants, since there's no
    speculative result to be used in a gadget for those operations.
    
    Reported-by: Andrew Cooper <andrew.cooper3@citrix.com>
    Link: https://lore.kernel.org/all/80d94591-1297-4afb-b510-c665efd37f10@citrix.com/
    Link: https://lore.kernel.org/all/20241023094448.GAZxjFkEOOF_DM83TQ@fat_crate.local/ [1]
    Link: https://www.amd.com/en/resources/product-security/bulletin/amd-sb-1010.html
    Link: https://arxiv.org/pdf/2108.10771
    Cc: Josh Poimboeuf <jpoimboe@kernel.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Tested-by: Maciej Wieczor-Retman <maciej.wieczor-retman@intel.com> # LAM case
    Fixes: 2865baf54077 ("x86: support user address masking instead of non-speculative conditional")
    Fixes: 6014bc27561f ("x86-64: make access_ok() independent of LAM")
    Fixes: b19b74bc99b1 ("x86/mm: Rework address range check in get_user() and put_user()")
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/arch/x86/lib/getuser.S b/arch/x86/lib/getuser.S
index d066aecf8aeb..4357ec2a0bfc 100644
--- a/arch/x86/lib/getuser.S
+++ b/arch/x86/lib/getuser.S
@@ -39,8 +39,13 @@
 
 .macro check_range size:req
 .if IS_ENABLED(CONFIG_X86_64)
-	mov %rax, %rdx
-	sar $63, %rdx
+	movq $0x0123456789abcdef,%rdx
+  1:
+  .pushsection runtime_ptr_USER_PTR_MAX,"a"
+	.long 1b - 8 - .
+  .popsection
+	cmp %rax, %rdx
+	sbb %rdx, %rdx
 	or %rdx, %rax
 .else
 	cmp $TASK_SIZE_MAX-\size+1, %eax