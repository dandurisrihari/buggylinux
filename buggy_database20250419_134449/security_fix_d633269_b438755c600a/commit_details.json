{
  "hash": "d63326928611600ad65baff54a70f53b02b3cdfe",
  "hash_short": "d6332692",
  "subject": "mm/hibernation: Make hibernation handle unmapped pages",
  "body": "Make hibernate handle unmapped pages on the direct map when\nCONFIG_ARCH_HAS_SET_ALIAS=y is set. These functions allow for setting pages\nto invalid configurations, so now hibernate should check if the pages have\nvalid mappings and handle if they are unmapped when doing a hibernate\nsave operation.\n\nPreviously this checking was already done when CONFIG_DEBUG_PAGEALLOC=y\nwas configured. It does not appear to have a big hibernating performance\nimpact. The speed of the saving operation before this change was measured\nas 819.02 MB/s, and after was measured at 813.32 MB/s.\n\nBefore:\n[    4.670938] PM: Wrote 171996 kbytes in 0.21 seconds (819.02 MB/s)\n\nAfter:\n[    4.504714] PM: Wrote 178932 kbytes in 0.22 seconds (813.32 MB/s)\n\nSigned-off-by: Rick Edgecombe <rick.p.edgecombe@intel.com>\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nAcked-by: Pavel Machek <pavel@ucw.cz>\nCc: <akpm@linux-foundation.org>\nCc: <ard.biesheuvel@linaro.org>\nCc: <deneen.t.dock@intel.com>\nCc: <kernel-hardening@lists.openwall.com>\nCc: <kristen@linux.intel.com>\nCc: <linux_dti@icloud.com>\nCc: <will.deacon@arm.com>\nCc: Andy Lutomirski <luto@kernel.org>\nCc: Borislav Petkov <bp@alien8.de>\nCc: Dave Hansen <dave.hansen@linux.intel.com>\nCc: H. Peter Anvin <hpa@zytor.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Nadav Amit <nadav.amit@gmail.com>\nCc: Rafael J. Wysocki <rjw@rjwysocki.net>\nCc: Rik van Riel <riel@surriel.com>\nCc: Thomas Gleixner <tglx@linutronix.de>\nLink: https://lkml.kernel.org/r/20190426001143.4983-16-namit@vmware.com\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "full_message": "mm/hibernation: Make hibernation handle unmapped pages\n\nMake hibernate handle unmapped pages on the direct map when\nCONFIG_ARCH_HAS_SET_ALIAS=y is set. These functions allow for setting pages\nto invalid configurations, so now hibernate should check if the pages have\nvalid mappings and handle if they are unmapped when doing a hibernate\nsave operation.\n\nPreviously this checking was already done when CONFIG_DEBUG_PAGEALLOC=y\nwas configured. It does not appear to have a big hibernating performance\nimpact. The speed of the saving operation before this change was measured\nas 819.02 MB/s, and after was measured at 813.32 MB/s.\n\nBefore:\n[    4.670938] PM: Wrote 171996 kbytes in 0.21 seconds (819.02 MB/s)\n\nAfter:\n[    4.504714] PM: Wrote 178932 kbytes in 0.22 seconds (813.32 MB/s)\n\nSigned-off-by: Rick Edgecombe <rick.p.edgecombe@intel.com>\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nAcked-by: Pavel Machek <pavel@ucw.cz>\nCc: <akpm@linux-foundation.org>\nCc: <ard.biesheuvel@linaro.org>\nCc: <deneen.t.dock@intel.com>\nCc: <kernel-hardening@lists.openwall.com>\nCc: <kristen@linux.intel.com>\nCc: <linux_dti@icloud.com>\nCc: <will.deacon@arm.com>\nCc: Andy Lutomirski <luto@kernel.org>\nCc: Borislav Petkov <bp@alien8.de>\nCc: Dave Hansen <dave.hansen@linux.intel.com>\nCc: H. Peter Anvin <hpa@zytor.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Nadav Amit <nadav.amit@gmail.com>\nCc: Rafael J. Wysocki <rjw@rjwysocki.net>\nCc: Rik van Riel <riel@surriel.com>\nCc: Thomas Gleixner <tglx@linutronix.de>\nLink: https://lkml.kernel.org/r/20190426001143.4983-16-namit@vmware.com\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "author_name": "Rick Edgecombe",
  "author_email": "rick.p.edgecombe@intel.com",
  "author_date": "Thu Apr 25 17:11:35 2019 -0700",
  "author_date_iso": "2019-04-25T17:11:35-07:00",
  "committer_name": "Ingo Molnar",
  "committer_email": "mingo@kernel.org",
  "committer_date": "Tue Apr 30 12:37:57 2019 +0200",
  "committer_date_iso": "2019-04-30T12:37:57+02:00",
  "files_changed": [
    "arch/x86/mm/pageattr.c",
    "include/linux/mm.h",
    "kernel/power/snapshot.c",
    "mm/page_alloc.c"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "arch/x86/mm/pageattr.c",
      "insertions": 0,
      "deletions": 4
    },
    {
      "file": "include/linux/mm.h",
      "insertions": 6,
      "deletions": 12
    },
    {
      "file": "kernel/power/snapshot.c",
      "insertions": 3,
      "deletions": 2
    },
    {
      "file": "mm/page_alloc.c",
      "insertions": 5,
      "deletions": 2
    }
  ],
  "total_insertions": 14,
  "total_deletions": 20,
  "total_changes": 34,
  "parents": [
    "d253ca0c3865a8d9a8c01143cf20425e0be4d0ce"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.2",
    "v5.2-rc1",
    "v5.2-rc2",
    "v5.2-rc3",
    "v5.2-rc4",
    "v5.2-rc5",
    "v5.2-rc6",
    "v5.2-rc7",
    "v5.3",
    "v5.3-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/mm/pageattr.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/mm.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/power/snapshot.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/page_alloc.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}