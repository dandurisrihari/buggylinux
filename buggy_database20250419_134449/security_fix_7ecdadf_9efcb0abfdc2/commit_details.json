{
  "hash": "7ecdadf7f8c659524f6b2aebf6be7bf619764d90",
  "hash_short": "7ecdadf7",
  "subject": "riscv: stacktrace: Make walk_stackframe cross pt_regs frame",
  "body": "The current walk_stackframe with FRAME_POINTER would stop unwinding at\nret_from_exception:\n  BUG: sleeping function called from invalid context at kernel/locking/rwsem.c:1518\n  in_atomic(): 0, irqs_disabled(): 1, non_block: 0, pid: 1, name: init\n  CPU: 0 PID: 1 Comm: init Not tainted 5.10.113-00021-g15c15974895c-dirty #192\n  Call Trace:\n  [<ffffffe0002038c8>] walk_stackframe+0x0/0xee\n  [<ffffffe000aecf48>] show_stack+0x32/0x4a\n  [<ffffffe000af1618>] dump_stack_lvl+0x72/0x8e\n  [<ffffffe000af1648>] dump_stack+0x14/0x1c\n  [<ffffffe000239ad2>] ___might_sleep+0x12e/0x138\n  [<ffffffe000239aec>] __might_sleep+0x10/0x18\n  [<ffffffe000afe3fe>] down_read+0x22/0xa4\n  [<ffffffe000207588>] do_page_fault+0xb0/0x2fe\n  [<ffffffe000201b80>] ret_from_exception+0x0/0xc\n\nThe optimization would help walk_stackframe cross the pt_regs frame and\nget more backtrace of debug info:\n  BUG: sleeping function called from invalid context at kernel/locking/rwsem.c:1518\n  in_atomic(): 0, irqs_disabled(): 1, non_block: 0, pid: 1, name: init\n  CPU: 0 PID: 1 Comm: init Not tainted 5.10.113-00021-g15c15974895c-dirty #192\n  Call Trace:\n  [<ffffffe0002038c8>] walk_stackframe+0x0/0xee\n  [<ffffffe000aecf48>] show_stack+0x32/0x4a\n  [<ffffffe000af1618>] dump_stack_lvl+0x72/0x8e\n  [<ffffffe000af1648>] dump_stack+0x14/0x1c\n  [<ffffffe000239ad2>] ___might_sleep+0x12e/0x138\n  [<ffffffe000239aec>] __might_sleep+0x10/0x18\n  [<ffffffe000afe3fe>] down_read+0x22/0xa4\n  [<ffffffe000207588>] do_page_fault+0xb0/0x2fe\n  [<ffffffe000201b80>] ret_from_exception+0x0/0xc\n  [<ffffffe000613c06>] riscv_intc_irq+0x1a/0x72\n  [<ffffffe000201b80>] ret_from_exception+0x0/0xc\n  [<ffffffe00033f44a>] vma_link+0x54/0x160\n  [<ffffffe000341d7a>] mmap_region+0x2cc/0x4d0\n  [<ffffffe000342256>] do_mmap+0x2d8/0x3ac\n  [<ffffffe000326318>] vm_mmap_pgoff+0x70/0xb8\n  [<ffffffe00032638a>] vm_mmap+0x2a/0x36\n  [<ffffffe0003cfdde>] elf_map+0x72/0x84\n  [<ffffffe0003d05f8>] load_elf_binary+0x69a/0xec8\n  [<ffffffe000376240>] bprm_execve+0x246/0x53a\n  [<ffffffe00037786c>] kernel_execve+0xe8/0x124\n  [<ffffffe000aecdf2>] run_init_process+0xfa/0x10c\n  [<ffffffe000aece16>] try_to_run_init_process+0x12/0x3c\n  [<ffffffe000afa920>] kernel_init+0xb4/0xf8\n  [<ffffffe000201b80>] ret_from_exception+0x0/0xc\n\nHere is the error injection test code for the above output:\n drivers/irqchip/irq-riscv-intc.c:\n static asmlinkage void riscv_intc_irq(struct pt_regs *regs)\n {\n        unsigned long cause = regs->cause & ~CAUSE_IRQ_FLAG;\n+       u32 tmp; __get_user(tmp, (u32 *)0);\n\nSigned-off-by: Guo Ren <guoren@linux.alibaba.com>\nSigned-off-by: Guo Ren <guoren@kernel.org>\nLink: https://lore.kernel.org/r/20221109064937.3643993-3-guoren@kernel.org\n[Palmer: use SYM_CODE_*]\nSigned-off-by: Palmer Dabbelt <palmer@rivosinc.com>",
  "full_message": "riscv: stacktrace: Make walk_stackframe cross pt_regs frame\n\nThe current walk_stackframe with FRAME_POINTER would stop unwinding at\nret_from_exception:\n  BUG: sleeping function called from invalid context at kernel/locking/rwsem.c:1518\n  in_atomic(): 0, irqs_disabled(): 1, non_block: 0, pid: 1, name: init\n  CPU: 0 PID: 1 Comm: init Not tainted 5.10.113-00021-g15c15974895c-dirty #192\n  Call Trace:\n  [<ffffffe0002038c8>] walk_stackframe+0x0/0xee\n  [<ffffffe000aecf48>] show_stack+0x32/0x4a\n  [<ffffffe000af1618>] dump_stack_lvl+0x72/0x8e\n  [<ffffffe000af1648>] dump_stack+0x14/0x1c\n  [<ffffffe000239ad2>] ___might_sleep+0x12e/0x138\n  [<ffffffe000239aec>] __might_sleep+0x10/0x18\n  [<ffffffe000afe3fe>] down_read+0x22/0xa4\n  [<ffffffe000207588>] do_page_fault+0xb0/0x2fe\n  [<ffffffe000201b80>] ret_from_exception+0x0/0xc\n\nThe optimization would help walk_stackframe cross the pt_regs frame and\nget more backtrace of debug info:\n  BUG: sleeping function called from invalid context at kernel/locking/rwsem.c:1518\n  in_atomic(): 0, irqs_disabled(): 1, non_block: 0, pid: 1, name: init\n  CPU: 0 PID: 1 Comm: init Not tainted 5.10.113-00021-g15c15974895c-dirty #192\n  Call Trace:\n  [<ffffffe0002038c8>] walk_stackframe+0x0/0xee\n  [<ffffffe000aecf48>] show_stack+0x32/0x4a\n  [<ffffffe000af1618>] dump_stack_lvl+0x72/0x8e\n  [<ffffffe000af1648>] dump_stack+0x14/0x1c\n  [<ffffffe000239ad2>] ___might_sleep+0x12e/0x138\n  [<ffffffe000239aec>] __might_sleep+0x10/0x18\n  [<ffffffe000afe3fe>] down_read+0x22/0xa4\n  [<ffffffe000207588>] do_page_fault+0xb0/0x2fe\n  [<ffffffe000201b80>] ret_from_exception+0x0/0xc\n  [<ffffffe000613c06>] riscv_intc_irq+0x1a/0x72\n  [<ffffffe000201b80>] ret_from_exception+0x0/0xc\n  [<ffffffe00033f44a>] vma_link+0x54/0x160\n  [<ffffffe000341d7a>] mmap_region+0x2cc/0x4d0\n  [<ffffffe000342256>] do_mmap+0x2d8/0x3ac\n  [<ffffffe000326318>] vm_mmap_pgoff+0x70/0xb8\n  [<ffffffe00032638a>] vm_mmap+0x2a/0x36\n  [<ffffffe0003cfdde>] elf_map+0x72/0x84\n  [<ffffffe0003d05f8>] load_elf_binary+0x69a/0xec8\n  [<ffffffe000376240>] bprm_execve+0x246/0x53a\n  [<ffffffe00037786c>] kernel_execve+0xe8/0x124\n  [<ffffffe000aecdf2>] run_init_process+0xfa/0x10c\n  [<ffffffe000aece16>] try_to_run_init_process+0x12/0x3c\n  [<ffffffe000afa920>] kernel_init+0xb4/0xf8\n  [<ffffffe000201b80>] ret_from_exception+0x0/0xc\n\nHere is the error injection test code for the above output:\n drivers/irqchip/irq-riscv-intc.c:\n static asmlinkage void riscv_intc_irq(struct pt_regs *regs)\n {\n        unsigned long cause = regs->cause & ~CAUSE_IRQ_FLAG;\n+       u32 tmp; __get_user(tmp, (u32 *)0);\n\nSigned-off-by: Guo Ren <guoren@linux.alibaba.com>\nSigned-off-by: Guo Ren <guoren@kernel.org>\nLink: https://lore.kernel.org/r/20221109064937.3643993-3-guoren@kernel.org\n[Palmer: use SYM_CODE_*]\nSigned-off-by: Palmer Dabbelt <palmer@rivosinc.com>",
  "author_name": "Guo Ren",
  "author_email": "guoren@linux.alibaba.com",
  "author_date": "Wed Nov 9 01:49:37 2022 -0500",
  "author_date_iso": "2022-11-09T01:49:37-05:00",
  "committer_name": "Palmer Dabbelt",
  "committer_email": "palmer@rivosinc.com",
  "committer_date": "Mon Dec 5 18:13:34 2022 -0800",
  "committer_date_iso": "2022-12-05T18:13:34-08:00",
  "files_changed": [
    "arch/riscv/kernel/entry.S",
    "arch/riscv/kernel/stacktrace.c"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "arch/riscv/kernel/entry.S",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "arch/riscv/kernel/stacktrace.c",
      "insertions": 9,
      "deletions": 0
    }
  ],
  "total_insertions": 11,
  "total_deletions": 1,
  "total_changes": 12,
  "parents": [
    "5c3022e4a616d800cf5f4c3a981d7992179e44a1"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/riscv/kernel/entry.S",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/riscv/kernel/stacktrace.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}