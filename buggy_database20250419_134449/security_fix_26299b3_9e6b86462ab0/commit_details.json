{
  "hash": "26299b3f6ba26bfc234b73126d14bdf4dec5275a",
  "hash_short": "26299b3f",
  "subject": "ftrace: arm64: move from REGS to ARGS",
  "body": "This commit replaces arm64's support for FTRACE_WITH_REGS with support\nfor FTRACE_WITH_ARGS. This removes some overhead and complexity, and\nremoves some latent issues with inconsistent presentation of struct\npt_regs (which can only be reliably saved/restored at exception\nboundaries).\n\nFTRACE_WITH_REGS has been supported on arm64 since commit:\n\n  3b23e4991fb66f6d (\"arm64: implement ftrace with regs\")\n\nAs noted in the commit message, the major reasons for implementing\nFTRACE_WITH_REGS were:\n\n(1) To make it possible to use the ftrace graph tracer with pointer\n    authentication, where it's necessary to snapshot/manipulate the LR\n    before it is signed by the instrumented function.\n\n(2) To make it possible to implement LIVEPATCH in future, where we need\n    to hook function entry before an instrumented function manipulates\n    the stack or argument registers. Practically speaking, we need to\n    preserve the argument/return registers, PC, LR, and SP.\n\nNeither of these need a struct pt_regs, and only require the set of\nregisters which are live at function call/return boundaries. Our calling\nconvention is defined by \"Procedure Call Standard for the Arm\u00ae 64-bit\nArchitecture (AArch64)\" (AKA \"AAPCS64\"), which can currently be found\nat:\n\n  https://github.com/ARM-software/abi-aa/blob/main/aapcs64/aapcs64.rst\n\nPer AAPCS64, all function call argument and return values are held in\nthe following GPRs:\n\n* X0 - X7 : parameter / result registers\n* X8      : indirect result location register\n* SP      : stack pointer (AKA SP)\n\nAdditionally, ad function call boundaries, the following GPRs hold\ncontext/return information:\n\n* X29 : frame pointer (AKA FP)\n* X30 : link register (AKA LR)\n\n... and for ftrace we need to capture the instrumented address:\n\n * PC  : program counter\n\nNo other GPRs are relevant, as none of the other arguments hold\nparameters or return values:\n\n* X9  - X17 : temporaries, may be clobbered\n* X18       : shadow call stack pointer (or temorary)\n* X19 - X28 : callee saved\n\nThis patch implements FTRACE_WITH_ARGS for arm64, only saving/restoring\nthe minimal set of registers necessary. This is always sufficient to\nmanipulate control flow (e.g. for live-patching) or to manipulate\nfunction arguments and return values.\n\nThis reduces the necessary stack usage from 336 bytes for pt_regs down\nto 112 bytes for ftrace_regs + 32 bytes for two frame records, freeing\nup 188 bytes. This could be reduced further with changes to the\nunwinder.\n\nAs there is no longer a need to save different sets of registers for\ndifferent features, we no longer need distinct `ftrace_caller` and\n`ftrace_regs_caller` trampolines. This allows the trampoline assembly to\nbe simpler, and simplifies code which previously had to handle the two\ntrampolines.\n\nI've tested this with the ftrace selftests, where there are no\nunexpected failures.\n\nCo-developed-by: Florent Revest <revest@chromium.org>\nSigned-off-by: Mark Rutland <mark.rutland@arm.com>\nSigned-off-by: Florent Revest <revest@chromium.org>\nCc: Catalin Marinas <catalin.marinas@arm.com>\nCc: Masami Hiramatsu <mhiramat@kernel.org>\nCc: Steven Rostedt <rostedt@goodmis.org>\nCc: Will Deacon <will@kernel.org>\nReviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\nReviewed-by: Steven Rostedt (Google) <rostedt@goodmis.org>\nLink: https://lore.kernel.org/r/20221103170520.931305-5-mark.rutland@arm.com\nSigned-off-by: Will Deacon <will@kernel.org>",
  "full_message": "ftrace: arm64: move from REGS to ARGS\n\nThis commit replaces arm64's support for FTRACE_WITH_REGS with support\nfor FTRACE_WITH_ARGS. This removes some overhead and complexity, and\nremoves some latent issues with inconsistent presentation of struct\npt_regs (which can only be reliably saved/restored at exception\nboundaries).\n\nFTRACE_WITH_REGS has been supported on arm64 since commit:\n\n  3b23e4991fb66f6d (\"arm64: implement ftrace with regs\")\n\nAs noted in the commit message, the major reasons for implementing\nFTRACE_WITH_REGS were:\n\n(1) To make it possible to use the ftrace graph tracer with pointer\n    authentication, where it's necessary to snapshot/manipulate the LR\n    before it is signed by the instrumented function.\n\n(2) To make it possible to implement LIVEPATCH in future, where we need\n    to hook function entry before an instrumented function manipulates\n    the stack or argument registers. Practically speaking, we need to\n    preserve the argument/return registers, PC, LR, and SP.\n\nNeither of these need a struct pt_regs, and only require the set of\nregisters which are live at function call/return boundaries. Our calling\nconvention is defined by \"Procedure Call Standard for the Arm\u00ae 64-bit\nArchitecture (AArch64)\" (AKA \"AAPCS64\"), which can currently be found\nat:\n\n  https://github.com/ARM-software/abi-aa/blob/main/aapcs64/aapcs64.rst\n\nPer AAPCS64, all function call argument and return values are held in\nthe following GPRs:\n\n* X0 - X7 : parameter / result registers\n* X8      : indirect result location register\n* SP      : stack pointer (AKA SP)\n\nAdditionally, ad function call boundaries, the following GPRs hold\ncontext/return information:\n\n* X29 : frame pointer (AKA FP)\n* X30 : link register (AKA LR)\n\n... and for ftrace we need to capture the instrumented address:\n\n * PC  : program counter\n\nNo other GPRs are relevant, as none of the other arguments hold\nparameters or return values:\n\n* X9  - X17 : temporaries, may be clobbered\n* X18       : shadow call stack pointer (or temorary)\n* X19 - X28 : callee saved\n\nThis patch implements FTRACE_WITH_ARGS for arm64, only saving/restoring\nthe minimal set of registers necessary. This is always sufficient to\nmanipulate control flow (e.g. for live-patching) or to manipulate\nfunction arguments and return values.\n\nThis reduces the necessary stack usage from 336 bytes for pt_regs down\nto 112 bytes for ftrace_regs + 32 bytes for two frame records, freeing\nup 188 bytes. This could be reduced further with changes to the\nunwinder.\n\nAs there is no longer a need to save different sets of registers for\ndifferent features, we no longer need distinct `ftrace_caller` and\n`ftrace_regs_caller` trampolines. This allows the trampoline assembly to\nbe simpler, and simplifies code which previously had to handle the two\ntrampolines.\n\nI've tested this with the ftrace selftests, where there are no\nunexpected failures.\n\nCo-developed-by: Florent Revest <revest@chromium.org>\nSigned-off-by: Mark Rutland <mark.rutland@arm.com>\nSigned-off-by: Florent Revest <revest@chromium.org>\nCc: Catalin Marinas <catalin.marinas@arm.com>\nCc: Masami Hiramatsu <mhiramat@kernel.org>\nCc: Steven Rostedt <rostedt@goodmis.org>\nCc: Will Deacon <will@kernel.org>\nReviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>\nReviewed-by: Steven Rostedt (Google) <rostedt@goodmis.org>\nLink: https://lore.kernel.org/r/20221103170520.931305-5-mark.rutland@arm.com\nSigned-off-by: Will Deacon <will@kernel.org>",
  "author_name": "Mark Rutland",
  "author_email": "mark.rutland@arm.com",
  "author_date": "Thu Nov 3 17:05:20 2022 +0000",
  "author_date_iso": "2022-11-03T17:05:20+00:00",
  "committer_name": "Will Deacon",
  "committer_email": "will@kernel.org",
  "committer_date": "Fri Nov 18 13:56:41 2022 +0000",
  "committer_date_iso": "2022-11-18T13:56:41+00:00",
  "files_changed": [
    "arch/arm64/Kconfig",
    "arch/arm64/Makefile",
    "arch/arm64/include/asm/ftrace.h",
    "arch/arm64/kernel/asm-offsets.c",
    "arch/arm64/kernel/entry-ftrace.S",
    "arch/arm64/kernel/ftrace.c",
    "arch/arm64/kernel/module.c"
  ],
  "files_changed_count": 7,
  "stats": [
    {
      "file": "arch/arm64/Kconfig",
      "insertions": 10,
      "deletions": 8
    },
    {
      "file": "arch/arm64/Makefile",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/arm64/include/asm/ftrace.h",
      "insertions": 66,
      "deletions": 6
    },
    {
      "file": "arch/arm64/kernel/asm-offsets.c",
      "insertions": 13,
      "deletions": 0
    },
    {
      "file": "arch/arm64/kernel/entry-ftrace.S",
      "insertions": 46,
      "deletions": 71
    },
    {
      "file": "arch/arm64/kernel/ftrace.c",
      "insertions": 48,
      "deletions": 34
    },
    {
      "file": "arch/arm64/kernel/module.c",
      "insertions": 0,
      "deletions": 3
    }
  ],
  "total_insertions": 184,
  "total_deletions": 123,
  "total_changes": 307,
  "parents": [
    "94d095ffa0e16bb7f161a2b73bbe5c2795d499a8"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/arm64/kernel/entry-ftrace.S",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/asm/ftrace.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/asm-offsets.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/Makefile",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/module.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/ftrace.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}