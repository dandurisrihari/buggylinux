commit 26299b3f6ba26bfc234b73126d14bdf4dec5275a
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Thu Nov 3 17:05:20 2022 +0000

    ftrace: arm64: move from REGS to ARGS
    
    This commit replaces arm64's support for FTRACE_WITH_REGS with support
    for FTRACE_WITH_ARGS. This removes some overhead and complexity, and
    removes some latent issues with inconsistent presentation of struct
    pt_regs (which can only be reliably saved/restored at exception
    boundaries).
    
    FTRACE_WITH_REGS has been supported on arm64 since commit:
    
      3b23e4991fb66f6d ("arm64: implement ftrace with regs")
    
    As noted in the commit message, the major reasons for implementing
    FTRACE_WITH_REGS were:
    
    (1) To make it possible to use the ftrace graph tracer with pointer
        authentication, where it's necessary to snapshot/manipulate the LR
        before it is signed by the instrumented function.
    
    (2) To make it possible to implement LIVEPATCH in future, where we need
        to hook function entry before an instrumented function manipulates
        the stack or argument registers. Practically speaking, we need to
        preserve the argument/return registers, PC, LR, and SP.
    
    Neither of these need a struct pt_regs, and only require the set of
    registers which are live at function call/return boundaries. Our calling
    convention is defined by "Procedure Call Standard for the ArmÂ® 64-bit
    Architecture (AArch64)" (AKA "AAPCS64"), which can currently be found
    at:
    
      https://github.com/ARM-software/abi-aa/blob/main/aapcs64/aapcs64.rst
    
    Per AAPCS64, all function call argument and return values are held in
    the following GPRs:
    
    * X0 - X7 : parameter / result registers
    * X8      : indirect result location register
    * SP      : stack pointer (AKA SP)
    
    Additionally, ad function call boundaries, the following GPRs hold
    context/return information:
    
    * X29 : frame pointer (AKA FP)
    * X30 : link register (AKA LR)
    
    ... and for ftrace we need to capture the instrumented address:
    
     * PC  : program counter
    
    No other GPRs are relevant, as none of the other arguments hold
    parameters or return values:
    
    * X9  - X17 : temporaries, may be clobbered
    * X18       : shadow call stack pointer (or temorary)
    * X19 - X28 : callee saved
    
    This patch implements FTRACE_WITH_ARGS for arm64, only saving/restoring
    the minimal set of registers necessary. This is always sufficient to
    manipulate control flow (e.g. for live-patching) or to manipulate
    function arguments and return values.
    
    This reduces the necessary stack usage from 336 bytes for pt_regs down
    to 112 bytes for ftrace_regs + 32 bytes for two frame records, freeing
    up 188 bytes. This could be reduced further with changes to the
    unwinder.
    
    As there is no longer a need to save different sets of registers for
    different features, we no longer need distinct `ftrace_caller` and
    `ftrace_regs_caller` trampolines. This allows the trampoline assembly to
    be simpler, and simplifies code which previously had to handle the two
    trampolines.
    
    I've tested this with the ftrace selftests, where there are no
    unexpected failures.
    
    Co-developed-by: Florent Revest <revest@chromium.org>
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Florent Revest <revest@chromium.org>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Masami Hiramatsu <mhiramat@kernel.org>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: Will Deacon <will@kernel.org>
    Reviewed-by: Masami Hiramatsu (Google) <mhiramat@kernel.org>
    Reviewed-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Link: https://lore.kernel.org/r/20221103170520.931305-5-mark.rutland@arm.com
    Signed-off-by: Will Deacon <will@kernel.org>

diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig
index 505c8a1ccbe0..b6b3305ba701 100644
--- a/arch/arm64/Kconfig
+++ b/arch/arm64/Kconfig
@@ -181,8 +181,10 @@ config ARM64
 	select HAVE_DEBUG_KMEMLEAK
 	select HAVE_DMA_CONTIGUOUS
 	select HAVE_DYNAMIC_FTRACE
+	select HAVE_DYNAMIC_FTRACE_WITH_ARGS \
+		if $(cc-option,-fpatchable-function-entry=2)
 	select FTRACE_MCOUNT_USE_PATCHABLE_FUNCTION_ENTRY \
-		if DYNAMIC_FTRACE_WITH_REGS
+		if DYNAMIC_FTRACE_WITH_ARGS
 	select HAVE_EFFICIENT_UNALIGNED_ACCESS
 	select HAVE_FAST_GUP
 	select HAVE_FTRACE_MCOUNT_RECORD
@@ -233,16 +235,16 @@ config ARM64
 	help
 	  ARM 64-bit (AArch64) Linux support.
 
-config CLANG_SUPPORTS_DYNAMIC_FTRACE_WITH_REGS
+config CLANG_SUPPORTS_DYNAMIC_FTRACE_WITH_ARGS
 	def_bool CC_IS_CLANG
 	# https://github.com/ClangBuiltLinux/linux/issues/1507
 	depends on AS_IS_GNU || (AS_IS_LLVM && (LD_IS_LLD || LD_VERSION >= 23600))
-	select HAVE_DYNAMIC_FTRACE_WITH_REGS
+	select HAVE_DYNAMIC_FTRACE_WITH_ARGS
 
-config GCC_SUPPORTS_DYNAMIC_FTRACE_WITH_REGS
+config GCC_SUPPORTS_DYNAMIC_FTRACE_WITH_ARGS
 	def_bool CC_IS_GCC
 	depends on $(cc-option,-fpatchable-function-entry=2)
-	select HAVE_DYNAMIC_FTRACE_WITH_REGS
+	select HAVE_DYNAMIC_FTRACE_WITH_ARGS
 
 config 64BIT
 	def_bool y
@@ -1816,7 +1818,7 @@ config ARM64_PTR_AUTH_KERNEL
 	# which is only understood by binutils starting with version 2.33.1.
 	depends on LD_IS_LLD || LD_VERSION >= 23301 || (CC_IS_GCC && GCC_VERSION < 90100)
 	depends on !CC_IS_CLANG || AS_HAS_CFI_NEGATE_RA_STATE
-	depends on (!FUNCTION_GRAPH_TRACER || DYNAMIC_FTRACE_WITH_REGS)
+	depends on (!FUNCTION_GRAPH_TRACER || DYNAMIC_FTRACE_WITH_ARGS)
 	help
 	  If the compiler supports the -mbranch-protection or
 	  -msign-return-address flag (e.g. GCC 7 or later), then this option
@@ -1826,7 +1828,7 @@ config ARM64_PTR_AUTH_KERNEL
 	  disabled with minimal loss of protection.
 
 	  This feature works with FUNCTION_GRAPH_TRACER option only if
-	  DYNAMIC_FTRACE_WITH_REGS is enabled.
+	  DYNAMIC_FTRACE_WITH_ARGS is enabled.
 
 config CC_HAS_BRANCH_PROT_PAC_RET
 	# GCC 9 or later, clang 8 or later
@@ -1924,7 +1926,7 @@ config ARM64_BTI_KERNEL
 	depends on !CC_IS_GCC
 	# https://github.com/llvm/llvm-project/commit/a88c722e687e6780dcd6a58718350dc76fcc4cc9
 	depends on !CC_IS_CLANG || CLANG_VERSION >= 120000
-	depends on (!FUNCTION_GRAPH_TRACER || DYNAMIC_FTRACE_WITH_REGS)
+	depends on (!FUNCTION_GRAPH_TRACER || DYNAMIC_FTRACE_WITH_ARGS)
 	help
 	  Build the kernel with Branch Target Identification annotations
 	  and enable enforcement of this for kernel code. When this option