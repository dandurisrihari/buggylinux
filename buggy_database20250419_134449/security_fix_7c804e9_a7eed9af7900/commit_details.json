{
  "hash": "7c804e91df523a37c29e183ea2b10ac73c3a4f3d",
  "hash_short": "7c804e91",
  "subject": "Merge branch 'ipv6-ioam'",
  "body": "Justin Iurman says:\n\n====================\nSupport for the IOAM Pre-allocated Trace with IPv6\n\nv5:\n - Refine types, min/max and default values for new sysctls\n - Introduce a \"_wide\" sysctl for each \"ioam6_id\" sysctl\n - Add more validation on headers before processing data\n - RCU for sc <> ns pointers + appropriate accessors\n - Generic Netlink policies are now per op, not per family anymore\n - Address other comments/remarks from Jakub (thanks again)\n - Revert \"__packed\" to \"__attribute__((packed))\" for uapi headers\n - Add tests to cover the functionality added, as requested by David Ahern\n\nv4:\n - Address warnings from checkpatch (ignore errors related to unnamed bitfields\n   in the first patch)\n - Use of hweight32 (thanks Jakub)\n - Remove inline keyword from static functions in C files and let the compiler\n   decide what to do (thanks Jakub)\n\nv3:\n - Fix warning \"unused label 'out_unregister_genl'\" by adding conditional macro\n - Fix lwtunnel output redirect bug: dst cache useless in this case, use\n   orig_output instead\n\nv2:\n - Fix warning with static for __ioam6_fill_trace_data\n - Fix sparse warning with __force when casting __be64 to __be32\n - Fix unchecked dereference when removing IOAM namespaces or schemas\n - exthdrs.c: Don't drop by default (now: ignore) to match the act bits \"00\"\n - Add control plane support for the inline insertion (lwtunnel)\n - Provide uapi structures\n - Use __net_timestamp if skb->tstamp is empty\n - Add note about the temporary IANA allocation\n - Remove support for \"removable\" TLVs\n - Remove support for virtual/anonymous tunnel decapsulation\n\nIn-situ Operations, Administration, and Maintenance (IOAM) records\noperational and telemetry information in a packet while it traverses\na path between two points in an IOAM domain. It is defined in\ndraft-ietf-ippm-ioam-data [1]. IOAM data fields can be encapsulated\ninto a variety of protocols. The IPv6 encapsulation is defined in\ndraft-ietf-ippm-ioam-ipv6-options [2], via extension headers. IOAM\ncan be used to complement OAM mechanisms based on e.g. ICMP or other\ntypes of probe packets.\n\nThis patchset implements support for the Pre-allocated Trace, carried\nby a Hop-by-Hop. Therefore, a new IPv6 Hop-by-Hop TLV option is\nintroduced, see IANA [3]. The three other IOAM options are not included\nin this patchset (Incremental Trace, Proof-of-Transit and Edge-to-Edge).\nThe main idea behind the IOAM Pre-allocated Trace is that a node\npre-allocates some room in packets for IOAM data. Then, each IOAM node\non the path will insert its data. There exist several interesting use-\ncases, e.g. Fast failure detection/isolation or Smart service selection.\nAnother killer use-case is what we have called Cross-Layer Telemetry,\nsee the demo video on its repository [4], that aims to make the entire\nstack (L2/L3 -> L7) visible for distributed tracing tools (e.g. Jaeger),\ninstead of the current L5 -> L7 limited view. So, basically, this is a\nnice feature for the Linux Kernel.\n\nThis patchset also provides support for the control plane part, but only for the\ninline insertion (host-to-host use case), through lightweight tunnels. Indeed,\nfor in-transit traffic, the solution is to have an IPv6-in-IPv6 encapsulation,\nwhich brings some difficulties and still requires a little bit of work and\ndiscussion (ie anonymous tunnel decapsulation and multi egress resolution).\n\n- Patch 1: IPv6 IOAM headers definition\n- Patch 2: Data plane support for Pre-allocated Trace\n- Patch 3: IOAM Generic Netlink API\n- Patch 4: Support for IOAM injection with lwtunnels\n- Patch 5: Documentation for new IOAM sysctls\n- Patch 6: Test for the IOAM insertion with IPv6\n\n  [1] https://tools.ietf.org/html/draft-ietf-ippm-ioam-data\n  [2] https://tools.ietf.org/html/draft-ietf-ippm-ioam-ipv6-options\n  [3] https://www.iana.org/assignments/ipv6-parameters/ipv6-parameters.xhtml#ipv6-parameters-2\n  [4] https://github.com/iurmanj/cross-layer-telemetry\n====================\n\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "full_message": "Merge branch 'ipv6-ioam'\n\nJustin Iurman says:\n\n====================\nSupport for the IOAM Pre-allocated Trace with IPv6\n\nv5:\n - Refine types, min/max and default values for new sysctls\n - Introduce a \"_wide\" sysctl for each \"ioam6_id\" sysctl\n - Add more validation on headers before processing data\n - RCU for sc <> ns pointers + appropriate accessors\n - Generic Netlink policies are now per op, not per family anymore\n - Address other comments/remarks from Jakub (thanks again)\n - Revert \"__packed\" to \"__attribute__((packed))\" for uapi headers\n - Add tests to cover the functionality added, as requested by David Ahern\n\nv4:\n - Address warnings from checkpatch (ignore errors related to unnamed bitfields\n   in the first patch)\n - Use of hweight32 (thanks Jakub)\n - Remove inline keyword from static functions in C files and let the compiler\n   decide what to do (thanks Jakub)\n\nv3:\n - Fix warning \"unused label 'out_unregister_genl'\" by adding conditional macro\n - Fix lwtunnel output redirect bug: dst cache useless in this case, use\n   orig_output instead\n\nv2:\n - Fix warning with static for __ioam6_fill_trace_data\n - Fix sparse warning with __force when casting __be64 to __be32\n - Fix unchecked dereference when removing IOAM namespaces or schemas\n - exthdrs.c: Don't drop by default (now: ignore) to match the act bits \"00\"\n - Add control plane support for the inline insertion (lwtunnel)\n - Provide uapi structures\n - Use __net_timestamp if skb->tstamp is empty\n - Add note about the temporary IANA allocation\n - Remove support for \"removable\" TLVs\n - Remove support for virtual/anonymous tunnel decapsulation\n\nIn-situ Operations, Administration, and Maintenance (IOAM) records\noperational and telemetry information in a packet while it traverses\na path between two points in an IOAM domain. It is defined in\ndraft-ietf-ippm-ioam-data [1]. IOAM data fields can be encapsulated\ninto a variety of protocols. The IPv6 encapsulation is defined in\ndraft-ietf-ippm-ioam-ipv6-options [2], via extension headers. IOAM\ncan be used to complement OAM mechanisms based on e.g. ICMP or other\ntypes of probe packets.\n\nThis patchset implements support for the Pre-allocated Trace, carried\nby a Hop-by-Hop. Therefore, a new IPv6 Hop-by-Hop TLV option is\nintroduced, see IANA [3]. The three other IOAM options are not included\nin this patchset (Incremental Trace, Proof-of-Transit and Edge-to-Edge).\nThe main idea behind the IOAM Pre-allocated Trace is that a node\npre-allocates some room in packets for IOAM data. Then, each IOAM node\non the path will insert its data. There exist several interesting use-\ncases, e.g. Fast failure detection/isolation or Smart service selection.\nAnother killer use-case is what we have called Cross-Layer Telemetry,\nsee the demo video on its repository [4], that aims to make the entire\nstack (L2/L3 -> L7) visible for distributed tracing tools (e.g. Jaeger),\ninstead of the current L5 -> L7 limited view. So, basically, this is a\nnice feature for the Linux Kernel.\n\nThis patchset also provides support for the control plane part, but only for the\ninline insertion (host-to-host use case), through lightweight tunnels. Indeed,\nfor in-transit traffic, the solution is to have an IPv6-in-IPv6 encapsulation,\nwhich brings some difficulties and still requires a little bit of work and\ndiscussion (ie anonymous tunnel decapsulation and multi egress resolution).\n\n- Patch 1: IPv6 IOAM headers definition\n- Patch 2: Data plane support for Pre-allocated Trace\n- Patch 3: IOAM Generic Netlink API\n- Patch 4: Support for IOAM injection with lwtunnels\n- Patch 5: Documentation for new IOAM sysctls\n- Patch 6: Test for the IOAM insertion with IPv6\n\n  [1] https://tools.ietf.org/html/draft-ietf-ippm-ioam-data\n  [2] https://tools.ietf.org/html/draft-ietf-ippm-ioam-ipv6-options\n  [3] https://www.iana.org/assignments/ipv6-parameters/ipv6-parameters.xhtml#ipv6-parameters-2\n  [4] https://github.com/iurmanj/cross-layer-telemetry\n====================\n\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "author_name": "David S. Miller",
  "author_email": "davem@davemloft.net",
  "author_date": "Wed Jul 21 08:21:39 2021 -0700",
  "author_date_iso": "2021-07-21T08:21:39-07:00",
  "committer_name": "David S. Miller",
  "committer_email": "davem@davemloft.net",
  "committer_date": "Wed Jul 21 08:21:39 2021 -0700",
  "committer_date_iso": "2021-07-21T08:21:39-07:00",
  "files_changed": [],
  "files_changed_count": 0,
  "stats": [
    {
      "file": "Documentation/networking/ioam6-sysctl.rst",
      "insertions": 26,
      "deletions": 0
    },
    {
      "file": "Documentation/networking/ip-sysctl.rst",
      "insertions": 17,
      "deletions": 0
    },
    {
      "file": "include/linux/ioam6.h",
      "insertions": 13,
      "deletions": 0
    },
    {
      "file": "include/linux/ioam6_genl.h",
      "insertions": 13,
      "deletions": 0
    },
    {
      "file": "include/linux/ioam6_iptunnel.h",
      "insertions": 13,
      "deletions": 0
    },
    {
      "file": "include/linux/ipv6.h",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "include/net/ioam6.h",
      "insertions": 67,
      "deletions": 0
    },
    {
      "file": "include/net/netns/ipv6.h",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "include/uapi/linux/in6.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "include/uapi/linux/ioam6.h",
      "insertions": 133,
      "deletions": 0
    },
    {
      "file": "include/uapi/linux/ioam6_genl.h",
      "insertions": 52,
      "deletions": 0
    },
    {
      "file": "include/uapi/linux/ioam6_iptunnel.h",
      "insertions": 20,
      "deletions": 0
    },
    {
      "file": "include/uapi/linux/ipv6.h",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "include/uapi/linux/lwtunnel.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "net/core/lwtunnel.c",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "net/ipv6/Kconfig",
      "insertions": 11,
      "deletions": 0
    },
    {
      "file": "net/ipv6/Makefile",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "net/ipv6/addrconf.c",
      "insertions": 37,
      "deletions": 0
    },
    {
      "file": "net/ipv6/af_inet6.c",
      "insertions": 10,
      "deletions": 0
    },
    {
      "file": "net/ipv6/exthdrs.c",
      "insertions": 61,
      "deletions": 0
    },
    {
      "file": "net/ipv6/ioam6.c",
      "insertions": 910,
      "deletions": 0
    },
    {
      "file": "net/ipv6/ioam6_iptunnel.c",
      "insertions": 274,
      "deletions": 0
    },
    {
      "file": "net/ipv6/sysctl_net_ipv6.c",
      "insertions": 19,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/net/Makefile",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/net/config",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/net/ioam6.sh",
      "insertions": 297,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/net/ioam6_parser.c",
      "insertions": 402,
      "deletions": 0
    }
  ],
  "total_insertions": 2393,
  "total_deletions": 1,
  "total_changes": 2394,
  "parents": [
    "71f4f89a0324459f81656f3f9b20c1c0becaf647",
    "968691c777af78d2daa2ee87cfaeeae825255a58"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": []
}