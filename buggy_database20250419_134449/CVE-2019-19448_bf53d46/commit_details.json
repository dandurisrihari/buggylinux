{
  "hash": "bf53d4687b8f3f6b752f091eb85f62369a515dfd",
  "hash_short": "bf53d468",
  "subject": "btrfs: only search for left_info if there is no right_info in try_merge_free_space",
  "body": "In try_to_merge_free_space we attempt to find entries to the left and\nright of the entry we are adding to see if they can be merged.  We\nsearch for an entry past our current info (saved into right_info), and\nthen if right_info exists and it has a rb_prev() we save the rb_prev()\ninto left_info.\n\nHowever there's a slight problem in the case that we have a right_info,\nbut no entry previous to that entry.  At that point we will search for\nan entry just before the info we're attempting to insert.  This will\nsimply find right_info again, and assign it to left_info, making them\nboth the same pointer.\n\nNow if right_info _can_ be merged with the range we're inserting, we'll\nadd it to the info and free right_info.  However further down we'll\naccess left_info, which was right_info, and thus get a use-after-free.\n\nFix this by only searching for the left entry if we don't find a right\nentry at all.\n\nThe CVE referenced had a specially crafted file system that could\ntrigger this use-after-free. However with the tree checker improvements\nwe no longer trigger the conditions for the UAF.  But the original\nconditions still apply, hence this fix.\n\nReference: CVE-2019-19448\nFixes: 963030817060 (\"Btrfs: use hybrid extents+bitmap rb tree for free space\")\nCC: stable@vger.kernel.org # 4.4+\nSigned-off-by: Josef Bacik <josef@toxicpanda.com>\nSigned-off-by: David Sterba <dsterba@suse.com>",
  "full_message": "btrfs: only search for left_info if there is no right_info in try_merge_free_space\n\nIn try_to_merge_free_space we attempt to find entries to the left and\nright of the entry we are adding to see if they can be merged.  We\nsearch for an entry past our current info (saved into right_info), and\nthen if right_info exists and it has a rb_prev() we save the rb_prev()\ninto left_info.\n\nHowever there's a slight problem in the case that we have a right_info,\nbut no entry previous to that entry.  At that point we will search for\nan entry just before the info we're attempting to insert.  This will\nsimply find right_info again, and assign it to left_info, making them\nboth the same pointer.\n\nNow if right_info _can_ be merged with the range we're inserting, we'll\nadd it to the info and free right_info.  However further down we'll\naccess left_info, which was right_info, and thus get a use-after-free.\n\nFix this by only searching for the left entry if we don't find a right\nentry at all.\n\nThe CVE referenced had a specially crafted file system that could\ntrigger this use-after-free. However with the tree checker improvements\nwe no longer trigger the conditions for the UAF.  But the original\nconditions still apply, hence this fix.\n\nReference: CVE-2019-19448\nFixes: 963030817060 (\"Btrfs: use hybrid extents+bitmap rb tree for free space\")\nCC: stable@vger.kernel.org # 4.4+\nSigned-off-by: Josef Bacik <josef@toxicpanda.com>\nSigned-off-by: David Sterba <dsterba@suse.com>",
  "author_name": "Josef Bacik",
  "author_email": "josef@toxicpanda.com",
  "author_date": "Mon Jul 27 10:28:05 2020 -0400",
  "author_date_iso": "2020-07-27T10:28:05-04:00",
  "committer_name": "David Sterba",
  "committer_email": "dsterba@suse.com",
  "committer_date": "Mon Aug 10 18:58:07 2020 +0200",
  "committer_date_iso": "2020-08-10T18:58:07+02:00",
  "files_changed": [
    "fs/btrfs/free-space-cache.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "fs/btrfs/free-space-cache.c",
      "insertions": 2,
      "deletions": 2
    }
  ],
  "total_insertions": 2,
  "total_deletions": 2,
  "total_changes": 4,
  "parents": [
    "1e6e238c3002ea3611465ce5f32777ddd6a40126"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2019-19448"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "fs/btrfs/free-space-cache.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}