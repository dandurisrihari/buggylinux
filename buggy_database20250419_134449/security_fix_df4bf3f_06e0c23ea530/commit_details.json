{
  "hash": "df4bf3fa1b1e8d03380206fa027f956a62de517b",
  "hash_short": "df4bf3fa",
  "subject": "iommu: Fix crash in report_iommu_fault()",
  "body": "The following crash is observed while handling an IOMMU fault with a\nrecent kernel:\n\nkernel tried to execute NX-protected page - exploit attempt? (uid: 0)\nBUG: unable to handle page fault for address: ffff8c708299f700\nPGD 19ee01067 P4D 19ee01067 PUD 101c10063 PMD 80000001028001e3\nOops: Oops: 0011 [#1] SMP NOPTI\nCPU: 4 UID: 0 PID: 139 Comm: irq/25-AMD-Vi Not tainted 6.15.0-rc1+ #20 PREEMPT(lazy)\nHardware name: LENOVO 21D0/LNVNB161216, BIOS J6CN50WW 09/27/2024\nRIP: 0010:0xffff8c708299f700\nCall Trace:\n <TASK>\n ? report_iommu_fault+0x78/0xd3\n ? amd_iommu_report_page_fault+0x91/0x150\n ? amd_iommu_int_thread+0x77/0x180\n ? __pfx_irq_thread_fn+0x10/0x10\n ? irq_thread_fn+0x23/0x60\n ? irq_thread+0xf9/0x1e0\n ? __pfx_irq_thread_dtor+0x10/0x10\n ? __pfx_irq_thread+0x10/0x10\n ? kthread+0xfc/0x240\n ? __pfx_kthread+0x10/0x10\n ? ret_from_fork+0x34/0x50\n ? __pfx_kthread+0x10/0x10\n ? ret_from_fork_asm+0x1a/0x30\n </TASK>\n\nreport_iommu_fault() checks for an installed handler comparing the\ncorresponding field to NULL. It can (and could before) be called for a\ndomain with a different cookie type - IOMMU_COOKIE_DMA_IOVA, specifically.\nCookie is represented as a union so we may end up with a garbage value\ntreated there if this happens for a domain with another cookie type.\n\nFormerly there were two exclusive cookie types in the union.\nIOMMU_DOMAIN_SVA has a dedicated iommu_report_device_fault().\n\nCall the fault handler only if the passed domain has a required cookie\ntype.\n\nFound by Linux Verification Center (linuxtesting.org).\n\nFixes: 6aa63a4ec947 (\"iommu: Sort out domain user data\")\nSigned-off-by: Fedor Pchelkin <pchelkin@ispras.ru>\nReviewed-by: Kevin Tian <kevin.tian@intel.com>\nReviewed-by: Jason Gunthorpe <jgg@nvidia.com>\nLink: https://lore.kernel.org/r/20250408213342.285955-1-pchelkin@ispras.ru\nSigned-off-by: Joerg Roedel <jroedel@suse.de>",
  "full_message": "iommu: Fix crash in report_iommu_fault()\n\nThe following crash is observed while handling an IOMMU fault with a\nrecent kernel:\n\nkernel tried to execute NX-protected page - exploit attempt? (uid: 0)\nBUG: unable to handle page fault for address: ffff8c708299f700\nPGD 19ee01067 P4D 19ee01067 PUD 101c10063 PMD 80000001028001e3\nOops: Oops: 0011 [#1] SMP NOPTI\nCPU: 4 UID: 0 PID: 139 Comm: irq/25-AMD-Vi Not tainted 6.15.0-rc1+ #20 PREEMPT(lazy)\nHardware name: LENOVO 21D0/LNVNB161216, BIOS J6CN50WW 09/27/2024\nRIP: 0010:0xffff8c708299f700\nCall Trace:\n <TASK>\n ? report_iommu_fault+0x78/0xd3\n ? amd_iommu_report_page_fault+0x91/0x150\n ? amd_iommu_int_thread+0x77/0x180\n ? __pfx_irq_thread_fn+0x10/0x10\n ? irq_thread_fn+0x23/0x60\n ? irq_thread+0xf9/0x1e0\n ? __pfx_irq_thread_dtor+0x10/0x10\n ? __pfx_irq_thread+0x10/0x10\n ? kthread+0xfc/0x240\n ? __pfx_kthread+0x10/0x10\n ? ret_from_fork+0x34/0x50\n ? __pfx_kthread+0x10/0x10\n ? ret_from_fork_asm+0x1a/0x30\n </TASK>\n\nreport_iommu_fault() checks for an installed handler comparing the\ncorresponding field to NULL. It can (and could before) be called for a\ndomain with a different cookie type - IOMMU_COOKIE_DMA_IOVA, specifically.\nCookie is represented as a union so we may end up with a garbage value\ntreated there if this happens for a domain with another cookie type.\n\nFormerly there were two exclusive cookie types in the union.\nIOMMU_DOMAIN_SVA has a dedicated iommu_report_device_fault().\n\nCall the fault handler only if the passed domain has a required cookie\ntype.\n\nFound by Linux Verification Center (linuxtesting.org).\n\nFixes: 6aa63a4ec947 (\"iommu: Sort out domain user data\")\nSigned-off-by: Fedor Pchelkin <pchelkin@ispras.ru>\nReviewed-by: Kevin Tian <kevin.tian@intel.com>\nReviewed-by: Jason Gunthorpe <jgg@nvidia.com>\nLink: https://lore.kernel.org/r/20250408213342.285955-1-pchelkin@ispras.ru\nSigned-off-by: Joerg Roedel <jroedel@suse.de>",
  "author_name": "Fedor Pchelkin",
  "author_email": "pchelkin@ispras.ru",
  "author_date": "Wed Apr 9 00:33:41 2025 +0300",
  "author_date_iso": "2025-04-09T00:33:41+03:00",
  "committer_name": "Joerg Roedel",
  "committer_email": "jroedel@suse.de",
  "committer_date": "Fri Apr 11 09:03:44 2025 +0200",
  "committer_date_iso": "2025-04-11T09:03:44+02:00",
  "files_changed": [
    "drivers/iommu/iommu.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "drivers/iommu/iommu.c",
      "insertions": 2,
      "deletions": 1
    }
  ],
  "total_insertions": 2,
  "total_deletions": 1,
  "total_changes": 3,
  "parents": [
    "0af2f6be1b4281385b618cb86ad946eded089ac8"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/iommu/iommu.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}