commit b04163863caf599d4348a05af5a71cf5d42f11dc
Author: Lukas Wunner <lukas@wunner.de>
Date:   Tue Sep 10 16:30:28 2024 +0200

    crypto: ecdsa - Support P1363 signature decoding
    
    Alternatively to the X9.62 encoding of ecdsa signatures, which uses
    ASN.1 and is already supported by the kernel, there's another common
    encoding called P1363.  It stores r and s as the concatenation of two
    big endian, unsigned integers.  The name originates from IEEE P1363.
    
    Add a P1363 template in support of the forthcoming SPDM library
    (Security Protocol and Data Model) for PCI device authentication.
    
    P1363 is prescribed by SPDM 1.2.1 margin no 44:
    
       "For ECDSA signatures, excluding SM2, in SPDM, the signature shall be
        the concatenation of r and s.  The size of r shall be the size of
        the selected curve.  Likewise, the size of s shall be the size of
        the selected curve.  See BaseAsymAlgo in NEGOTIATE_ALGORITHMS for
        the size of r and s.  The byte order for r and s shall be in big
        endian order.  When placing ECDSA signatures into an SPDM signature
        field, r shall come first followed by s."
    
    Link: https://www.dmtf.org/sites/default/files/standards/documents/DSP0274_1.2.1.pdf
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Stefan Berger <stefanb@linux.ibm.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

diff --git a/crypto/testmgr.h b/crypto/testmgr.h
index 2bd77eaafdf6..55aae1859d2c 100644
--- a/crypto/testmgr.h
+++ b/crypto/testmgr.h
@@ -1805,6 +1805,34 @@ static const struct sig_testvec x962_ecdsa_nist_p521_tv_template[] = {
 	},
 };
 
+/*
+ * ECDSA P1363 test vectors.
+ *
+ * Identical to ECDSA test vectors, except signature in "c" is P1363 encoded.
+ */
+static const struct sig_testvec p1363_ecdsa_nist_p256_tv_template[] = {
+	{
+	.key = /* secp256r1(sha256) */
+	"\x04\xf1\xea\xc4\x53\xf3\xb9\x0e\x9f\x7e\xad\xe3\xea\xd7\x0e\x0f"
+	"\xd6\x98\x9a\xca\x92\x4d\x0a\x80\xdb\x2d\x45\xc7\xec\x4b\x97\x00"
+	"\x2f\xe9\x42\x6c\x29\xdc\x55\x0e\x0b\x53\x12\x9b\x2b\xad\x2c\xe9"
+	"\x80\xe6\xc5\x43\xc2\x1d\x5e\xbb\x65\x21\x50\xb6\x37\xb0\x03\x8e"
+	"\xb8",
+	.key_len = 65,
+	.m =
+	"\x8f\x43\x43\x46\x64\x8f\x6b\x96\xdf\x89\xdd\xa9\x01\xc5\x17\x6b"
+	"\x10\xa6\xd8\x39\x61\xdd\x3c\x1a\xc8\x8b\x59\xb2\xdc\x32\x7a\xa4",
+	.m_size = 32,
+	.c =
+	"\x08\x31\xfa\x74\x0d\x1d\x21\x5d\x09\xdc\x29\x63\xa8\x1a\xad\xfc"
+	"\xac\x44\xc3\xe8\x24\x11\x2d\xa4\x91\xdc\x02\x67\xdc\x0c\xd0\x82"
+	"\xbd\xff\xce\xee\x42\xc3\x97\xff\xf9\xa9\x81\xac\x4a\x50\xd0\x91"
+	"\x0a\x6e\x1b\xc4\xaf\xe1\x83\xc3\x4f\x2a\x65\x35\x23\xe3\x1d\xfa",
+	.c_size = 64,
+	.public_key_vec = true,
+	},
+};
+
 /*
  * EC-RDSA test vectors are generated by gost-engine.
  */