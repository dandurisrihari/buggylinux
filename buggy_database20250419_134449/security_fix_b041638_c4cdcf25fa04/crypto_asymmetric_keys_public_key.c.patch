commit b04163863caf599d4348a05af5a71cf5d42f11dc
Author: Lukas Wunner <lukas@wunner.de>
Date:   Tue Sep 10 16:30:28 2024 +0200

    crypto: ecdsa - Support P1363 signature decoding
    
    Alternatively to the X9.62 encoding of ecdsa signatures, which uses
    ASN.1 and is already supported by the kernel, there's another common
    encoding called P1363.  It stores r and s as the concatenation of two
    big endian, unsigned integers.  The name originates from IEEE P1363.
    
    Add a P1363 template in support of the forthcoming SPDM library
    (Security Protocol and Data Model) for PCI device authentication.
    
    P1363 is prescribed by SPDM 1.2.1 margin no 44:
    
       "For ECDSA signatures, excluding SM2, in SPDM, the signature shall be
        the concatenation of r and s.  The size of r shall be the size of
        the selected curve.  Likewise, the size of s shall be the size of
        the selected curve.  See BaseAsymAlgo in NEGOTIATE_ALGORITHMS for
        the size of r and s.  The byte order for r and s shall be in big
        endian order.  When placing ECDSA signatures into an SPDM signature
        field, r shall come first followed by s."
    
    Link: https://www.dmtf.org/sites/default/files/standards/documents/DSP0274_1.2.1.pdf
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Reviewed-by: Stefan Berger <stefanb@linux.ibm.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

diff --git a/crypto/asymmetric_keys/public_key.c b/crypto/asymmetric_keys/public_key.c
index ec2c0e009b49..c98c1588802b 100644
--- a/crypto/asymmetric_keys/public_key.c
+++ b/crypto/asymmetric_keys/public_key.c
@@ -110,7 +110,8 @@ software_key_determine_akcipher(const struct public_key *pkey,
 			return -EINVAL;
 		*sig = false;
 	} else if (strncmp(pkey->pkey_algo, "ecdsa", 5) == 0) {
-		if (strcmp(encoding, "x962") != 0)
+		if (strcmp(encoding, "x962") != 0 &&
+		    strcmp(encoding, "p1363") != 0)
 			return -EINVAL;
 		/*
 		 * ECDSA signatures are taken over a raw hash, so they don't