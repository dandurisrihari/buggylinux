{
  "hash": "bb5e5ce545f2031c96f7901cd8d1698ea3ca4c9c",
  "hash_short": "bb5e5ce5",
  "subject": "x86/dumpstack: Remove kernel text addresses from stack dump",
  "body": "Printing kernel text addresses in stack dumps is of questionable value,\nespecially now that address randomization is becoming common.\n\nIt can be a security issue because it leaks kernel addresses.  It also\naffects the usefulness of the stack dump.  Linus says:\n\n  \"I actually spend time cleaning up commit messages in logs, because\n  useless data that isn't actually information (random hex numbers) is\n  actively detrimental.\n\n  It makes commit logs less legible.\n\n  It also makes it harder to parse dumps.\n\n  It's not useful. That makes it actively bad.\n\n  I probably look at more oops reports than most people. I have not\n  found the hex numbers useful for the last five years, because they are\n  just randomized crap.\n\n  The stack content thing just makes code scroll off the screen etc, for\n  example.\"\n\nThe only real downside to removing these addresses is that they can be\nused to disambiguate duplicate symbol names.  However such cases are\nrare, and the context of the stack dump should be enough to be able to\nfigure it out.\n\nThere's now a 'faddr2line' script which can be used to convert a\nfunction address to a file name and line:\n\n  $ ./scripts/faddr2line ~/k/vmlinux write_sysrq_trigger+0x51/0x60\n  write_sysrq_trigger+0x51/0x60:\n  write_sysrq_trigger at drivers/tty/sysrq.c:1098\n\nOr gdb can be used:\n\n  $ echo \"list *write_sysrq_trigger+0x51\" |gdb ~/k/vmlinux |grep \"is in\"\n  (gdb) 0xffffffff815b5d83 is in driver_probe_device (/home/jpoimboe/git/linux/drivers/base/dd.c:378).\n\n(But note that when there are duplicate symbol names, gdb will only show\nthe first symbol it finds.  faddr2line is recommended over gdb because\nit handles duplicates and it also does function size checking.)\n\nHere's an example of what a stack dump looks like after this change:\n\n  BUG: unable to handle kernel NULL pointer dereference at           (null)\n  IP: sysrq_handle_crash+0x45/0x80\n  PGD 36bfa067 [   29.650644] PUD 7aca3067\n  Oops: 0002 [#1] PREEMPT SMP\n  Modules linked in: ...\n  CPU: 1 PID: 786 Comm: bash Tainted: G            E   4.9.0-rc1+ #1\n  Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.9.1-1.fc24 04/01/2014\n  task: ffff880078582a40 task.stack: ffffc90000ba8000\n  RIP: 0010:sysrq_handle_crash+0x45/0x80\n  RSP: 0018:ffffc90000babdc8 EFLAGS: 00010296\n  RAX: ffff880078582a40 RBX: 0000000000000063 RCX: 0000000000000001\n  RDX: 0000000000000001 RSI: 0000000000000000 RDI: 0000000000000292\n  RBP: ffffc90000babdc8 R08: 0000000b31866061 R09: 0000000000000000\n  R10: 0000000000000001 R11: 0000000000000000 R12: 0000000000000000\n  R13: 0000000000000007 R14: ffffffff81ee8680 R15: 0000000000000000\n  FS:  00007ffb43869700(0000) GS:ffff88007d400000(0000) knlGS:0000000000000000\n  CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n  CR2: 0000000000000000 CR3: 000000007a3e9000 CR4: 00000000001406e0\n  Stack:\n   ffffc90000babe00 ffffffff81572d08 ffffffff81572bd5 0000000000000002\n   0000000000000000 ffff880079606600 00007ffb4386e000 ffffc90000babe20\n   ffffffff81573201 ffff880036a3fd00 fffffffffffffffb ffffc90000babe40\n  Call Trace:\n   __handle_sysrq+0x138/0x220\n   ? __handle_sysrq+0x5/0x220\n   write_sysrq_trigger+0x51/0x60\n   proc_reg_write+0x42/0x70\n   __vfs_write+0x37/0x140\n   ? preempt_count_sub+0xa1/0x100\n   ? __sb_start_write+0xf5/0x210\n   ? vfs_write+0x183/0x1a0\n   vfs_write+0xb8/0x1a0\n   SyS_write+0x58/0xc0\n   entry_SYSCALL_64_fastpath+0x1f/0xc2\n  RIP: 0033:0x7ffb42f55940\n  RSP: 002b:00007ffd33bb6b18 EFLAGS: 00000246 ORIG_RAX: 0000000000000001\n  RAX: ffffffffffffffda RBX: 0000000000000046 RCX: 00007ffb42f55940\n  RDX: 0000000000000002 RSI: 00007ffb4386e000 RDI: 0000000000000001\n  RBP: 0000000000000011 R08: 00007ffb4321ea40 R09: 00007ffb43869700\n  R10: 00007ffb43869700 R11: 0000000000000246 R12: 0000000000778a10\n  R13: 00007ffd33bb5c00 R14: 0000000000000007 R15: 0000000000000010\n  Code: 34 e8 d0 34 bc ff 48 c7 c2 3b 2b 57 81 be 01 00 00 00 48 c7 c7 e0 dd e5 81 e8 a8 55 ba ff c7 05 0e 3f de 00 01 00 00 00 0f ae f8 <c6> 04 25 00 00 00 00 01 5d c3 e8 4c 49 bc ff 84 c0 75 c3 48 c7\n  RIP: sysrq_handle_crash+0x45/0x80 RSP: ffffc90000babdc8\n  CR2: 0000000000000000\n\nSuggested-by: Linus Torvalds <torvalds@linux-foundation.org>\nSigned-off-by: Josh Poimboeuf <jpoimboe@redhat.com>\nCc: Andy Lutomirski <luto@kernel.org>\nCc: Borislav Petkov <bp@alien8.de>\nCc: Brian Gerst <brgerst@gmail.com>\nCc: Denys Vlasenko <dvlasenk@redhat.com>\nCc: H. Peter Anvin <hpa@zytor.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nLink: http://lkml.kernel.org/r/69329cb29b8f324bb5fcea14d61d224807fb6488.1477405374.git.jpoimboe@redhat.com\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "full_message": "x86/dumpstack: Remove kernel text addresses from stack dump\n\nPrinting kernel text addresses in stack dumps is of questionable value,\nespecially now that address randomization is becoming common.\n\nIt can be a security issue because it leaks kernel addresses.  It also\naffects the usefulness of the stack dump.  Linus says:\n\n  \"I actually spend time cleaning up commit messages in logs, because\n  useless data that isn't actually information (random hex numbers) is\n  actively detrimental.\n\n  It makes commit logs less legible.\n\n  It also makes it harder to parse dumps.\n\n  It's not useful. That makes it actively bad.\n\n  I probably look at more oops reports than most people. I have not\n  found the hex numbers useful for the last five years, because they are\n  just randomized crap.\n\n  The stack content thing just makes code scroll off the screen etc, for\n  example.\"\n\nThe only real downside to removing these addresses is that they can be\nused to disambiguate duplicate symbol names.  However such cases are\nrare, and the context of the stack dump should be enough to be able to\nfigure it out.\n\nThere's now a 'faddr2line' script which can be used to convert a\nfunction address to a file name and line:\n\n  $ ./scripts/faddr2line ~/k/vmlinux write_sysrq_trigger+0x51/0x60\n  write_sysrq_trigger+0x51/0x60:\n  write_sysrq_trigger at drivers/tty/sysrq.c:1098\n\nOr gdb can be used:\n\n  $ echo \"list *write_sysrq_trigger+0x51\" |gdb ~/k/vmlinux |grep \"is in\"\n  (gdb) 0xffffffff815b5d83 is in driver_probe_device (/home/jpoimboe/git/linux/drivers/base/dd.c:378).\n\n(But note that when there are duplicate symbol names, gdb will only show\nthe first symbol it finds.  faddr2line is recommended over gdb because\nit handles duplicates and it also does function size checking.)\n\nHere's an example of what a stack dump looks like after this change:\n\n  BUG: unable to handle kernel NULL pointer dereference at           (null)\n  IP: sysrq_handle_crash+0x45/0x80\n  PGD 36bfa067 [   29.650644] PUD 7aca3067\n  Oops: 0002 [#1] PREEMPT SMP\n  Modules linked in: ...\n  CPU: 1 PID: 786 Comm: bash Tainted: G            E   4.9.0-rc1+ #1\n  Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.9.1-1.fc24 04/01/2014\n  task: ffff880078582a40 task.stack: ffffc90000ba8000\n  RIP: 0010:sysrq_handle_crash+0x45/0x80\n  RSP: 0018:ffffc90000babdc8 EFLAGS: 00010296\n  RAX: ffff880078582a40 RBX: 0000000000000063 RCX: 0000000000000001\n  RDX: 0000000000000001 RSI: 0000000000000000 RDI: 0000000000000292\n  RBP: ffffc90000babdc8 R08: 0000000b31866061 R09: 0000000000000000\n  R10: 0000000000000001 R11: 0000000000000000 R12: 0000000000000000\n  R13: 0000000000000007 R14: ffffffff81ee8680 R15: 0000000000000000\n  FS:  00007ffb43869700(0000) GS:ffff88007d400000(0000) knlGS:0000000000000000\n  CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n  CR2: 0000000000000000 CR3: 000000007a3e9000 CR4: 00000000001406e0\n  Stack:\n   ffffc90000babe00 ffffffff81572d08 ffffffff81572bd5 0000000000000002\n   0000000000000000 ffff880079606600 00007ffb4386e000 ffffc90000babe20\n   ffffffff81573201 ffff880036a3fd00 fffffffffffffffb ffffc90000babe40\n  Call Trace:\n   __handle_sysrq+0x138/0x220\n   ? __handle_sysrq+0x5/0x220\n   write_sysrq_trigger+0x51/0x60\n   proc_reg_write+0x42/0x70\n   __vfs_write+0x37/0x140\n   ? preempt_count_sub+0xa1/0x100\n   ? __sb_start_write+0xf5/0x210\n   ? vfs_write+0x183/0x1a0\n   vfs_write+0xb8/0x1a0\n   SyS_write+0x58/0xc0\n   entry_SYSCALL_64_fastpath+0x1f/0xc2\n  RIP: 0033:0x7ffb42f55940\n  RSP: 002b:00007ffd33bb6b18 EFLAGS: 00000246 ORIG_RAX: 0000000000000001\n  RAX: ffffffffffffffda RBX: 0000000000000046 RCX: 00007ffb42f55940\n  RDX: 0000000000000002 RSI: 00007ffb4386e000 RDI: 0000000000000001\n  RBP: 0000000000000011 R08: 00007ffb4321ea40 R09: 00007ffb43869700\n  R10: 00007ffb43869700 R11: 0000000000000246 R12: 0000000000778a10\n  R13: 00007ffd33bb5c00 R14: 0000000000000007 R15: 0000000000000010\n  Code: 34 e8 d0 34 bc ff 48 c7 c2 3b 2b 57 81 be 01 00 00 00 48 c7 c7 e0 dd e5 81 e8 a8 55 ba ff c7 05 0e 3f de 00 01 00 00 00 0f ae f8 <c6> 04 25 00 00 00 00 01 5d c3 e8 4c 49 bc ff 84 c0 75 c3 48 c7\n  RIP: sysrq_handle_crash+0x45/0x80 RSP: ffffc90000babdc8\n  CR2: 0000000000000000\n\nSuggested-by: Linus Torvalds <torvalds@linux-foundation.org>\nSigned-off-by: Josh Poimboeuf <jpoimboe@redhat.com>\nCc: Andy Lutomirski <luto@kernel.org>\nCc: Borislav Petkov <bp@alien8.de>\nCc: Brian Gerst <brgerst@gmail.com>\nCc: Denys Vlasenko <dvlasenk@redhat.com>\nCc: H. Peter Anvin <hpa@zytor.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nLink: http://lkml.kernel.org/r/69329cb29b8f324bb5fcea14d61d224807fb6488.1477405374.git.jpoimboe@redhat.com\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "author_name": "Josh Poimboeuf",
  "author_email": "jpoimboe@redhat.com",
  "author_date": "Tue Oct 25 09:51:12 2016 -0500",
  "author_date_iso": "2016-10-25T09:51:12-05:00",
  "committer_name": "Ingo Molnar",
  "committer_email": "mingo@kernel.org",
  "committer_date": "Tue Oct 25 18:40:37 2016 +0200",
  "committer_date_iso": "2016-10-25T18:40:37+02:00",
  "files_changed": [
    "arch/x86/include/asm/kdebug.h",
    "arch/x86/kernel/dumpstack.c",
    "arch/x86/kernel/process_32.c",
    "arch/x86/kernel/process_64.c",
    "arch/x86/mm/fault.c",
    "arch/x86/platform/uv/uv_nmi.c"
  ],
  "files_changed_count": 6,
  "stats": [
    {
      "file": "arch/x86/include/asm/kdebug.h",
      "insertions": 0,
      "deletions": 1
    },
    {
      "file": "arch/x86/kernel/dumpstack.c",
      "insertions": 4,
      "deletions": 14
    },
    {
      "file": "arch/x86/kernel/process_32.c",
      "insertions": 3,
      "deletions": 4
    },
    {
      "file": "arch/x86/kernel/process_64.c",
      "insertions": 3,
      "deletions": 3
    },
    {
      "file": "arch/x86/mm/fault.c",
      "insertions": 1,
      "deletions": 2
    },
    {
      "file": "arch/x86/platform/uv/uv_nmi.c",
      "insertions": 2,
      "deletions": 2
    }
  ],
  "total_insertions": 13,
  "total_deletions": 26,
  "total_changes": 39,
  "parents": [
    "efdb4167e676aaba7505bec739785b76e206cb45"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.10",
    "v4.10-rc1",
    "v4.10-rc2",
    "v4.10-rc3",
    "v4.10-rc4",
    "v4.10-rc5",
    "v4.10-rc6",
    "v4.10-rc7",
    "v4.10-rc8",
    "v4.11"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "security issue"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/kernel/dumpstack.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/mm/fault.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/kdebug.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/process_32.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/platform/uv/uv_nmi.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/process_64.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}