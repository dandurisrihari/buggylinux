{
  "hash": "d6a95db3c7ad160bc16b89e36449705309b52bcb",
  "hash_short": "d6a95db3",
  "subject": "quota: fix warning in dqgrab()",
  "body": "There's issue as follows when do fault injection:\nWARNING: CPU: 1 PID: 14870 at include/linux/quotaops.h:51 dquot_disable+0x13b7/0x18c0\nModules linked in:\nCPU: 1 PID: 14870 Comm: fsconfig Not tainted 6.3.0-next-20230505-00006-g5107a9c821af-dirty #541\nRIP: 0010:dquot_disable+0x13b7/0x18c0\nRSP: 0018:ffffc9000acc79e0 EFLAGS: 00010246\nRAX: 0000000000000000 RBX: 0000000000000000 RCX: ffff88825e41b980\nRDX: 0000000000000000 RSI: ffff88825e41b980 RDI: 0000000000000002\nRBP: ffff888179f68000 R08: ffffffff82087ca7 R09: 0000000000000000\nR10: 0000000000000001 R11: ffffed102f3ed026 R12: ffff888179f68130\nR13: ffff888179f68110 R14: dffffc0000000000 R15: ffff888179f68118\nFS:  00007f450a073740(0000) GS:ffff88882fc00000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00007ffe96f2efd8 CR3: 000000025c8ad000 CR4: 00000000000006e0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nCall Trace:\n <TASK>\n dquot_load_quota_sb+0xd53/0x1060\n dquot_resume+0x172/0x230\n ext4_reconfigure+0x1dc6/0x27b0\n reconfigure_super+0x515/0xa90\n __x64_sys_fsconfig+0xb19/0xd20\n do_syscall_64+0x39/0xb0\n entry_SYSCALL_64_after_hwframe+0x63/0xcd\n\nAbove issue may happens as follows:\nProcessA              ProcessB                    ProcessC\nsys_fsconfig\n  vfs_fsconfig_locked\n   reconfigure_super\n     ext4_remount\n      dquot_suspend -> suspend all type quota\n\n                 sys_fsconfig\n                  vfs_fsconfig_locked\n                    reconfigure_super\n                     ext4_remount\n                      dquot_resume\n                       ret = dquot_load_quota_sb\n                        add_dquot_ref\n                                           do_open  -> open file O_RDWR\n                                            vfs_open\n                                             do_dentry_open\n                                              get_write_access\n                                               atomic_inc_unless_negative(&inode->i_writecount)\n                                              ext4_file_open\n                                               dquot_file_open\n                                                dquot_initialize\n                                                  __dquot_initialize\n                                                   dqget\n\t\t\t\t\t\t    atomic_inc(&dquot->dq_count);\n\n                          __dquot_initialize\n                           __dquot_initialize\n                            dqget\n                             if (!test_bit(DQ_ACTIVE_B, &dquot->dq_flags))\n                               ext4_acquire_dquot\n\t\t\t        -> Return error DQ_ACTIVE_B flag isn't set\n                         dquot_disable\n\t\t\t  invalidate_dquots\n\t\t\t   if (atomic_read(&dquot->dq_count))\n\t                    dqgrab\n\t\t\t     WARN_ON_ONCE(!test_bit(DQ_ACTIVE_B, &dquot->dq_flags))\n\t                      -> Trigger warning\n\nIn the above scenario, 'dquot->dq_flags' has no DQ_ACTIVE_B is normal when\ndqgrab().\nTo solve above issue just replace the dqgrab() use in invalidate_dquots() with\natomic_inc(&dquot->dq_count).\n\nSigned-off-by: Ye Bin <yebin10@huawei.com>\nSigned-off-by: Jan Kara <jack@suse.cz>\nMessage-Id: <20230605140731.2427629-3-yebin10@huawei.com>",
  "full_message": "quota: fix warning in dqgrab()\n\nThere's issue as follows when do fault injection:\nWARNING: CPU: 1 PID: 14870 at include/linux/quotaops.h:51 dquot_disable+0x13b7/0x18c0\nModules linked in:\nCPU: 1 PID: 14870 Comm: fsconfig Not tainted 6.3.0-next-20230505-00006-g5107a9c821af-dirty #541\nRIP: 0010:dquot_disable+0x13b7/0x18c0\nRSP: 0018:ffffc9000acc79e0 EFLAGS: 00010246\nRAX: 0000000000000000 RBX: 0000000000000000 RCX: ffff88825e41b980\nRDX: 0000000000000000 RSI: ffff88825e41b980 RDI: 0000000000000002\nRBP: ffff888179f68000 R08: ffffffff82087ca7 R09: 0000000000000000\nR10: 0000000000000001 R11: ffffed102f3ed026 R12: ffff888179f68130\nR13: ffff888179f68110 R14: dffffc0000000000 R15: ffff888179f68118\nFS:  00007f450a073740(0000) GS:ffff88882fc00000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00007ffe96f2efd8 CR3: 000000025c8ad000 CR4: 00000000000006e0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nCall Trace:\n <TASK>\n dquot_load_quota_sb+0xd53/0x1060\n dquot_resume+0x172/0x230\n ext4_reconfigure+0x1dc6/0x27b0\n reconfigure_super+0x515/0xa90\n __x64_sys_fsconfig+0xb19/0xd20\n do_syscall_64+0x39/0xb0\n entry_SYSCALL_64_after_hwframe+0x63/0xcd\n\nAbove issue may happens as follows:\nProcessA              ProcessB                    ProcessC\nsys_fsconfig\n  vfs_fsconfig_locked\n   reconfigure_super\n     ext4_remount\n      dquot_suspend -> suspend all type quota\n\n                 sys_fsconfig\n                  vfs_fsconfig_locked\n                    reconfigure_super\n                     ext4_remount\n                      dquot_resume\n                       ret = dquot_load_quota_sb\n                        add_dquot_ref\n                                           do_open  -> open file O_RDWR\n                                            vfs_open\n                                             do_dentry_open\n                                              get_write_access\n                                               atomic_inc_unless_negative(&inode->i_writecount)\n                                              ext4_file_open\n                                               dquot_file_open\n                                                dquot_initialize\n                                                  __dquot_initialize\n                                                   dqget\n\t\t\t\t\t\t    atomic_inc(&dquot->dq_count);\n\n                          __dquot_initialize\n                           __dquot_initialize\n                            dqget\n                             if (!test_bit(DQ_ACTIVE_B, &dquot->dq_flags))\n                               ext4_acquire_dquot\n\t\t\t        -> Return error DQ_ACTIVE_B flag isn't set\n                         dquot_disable\n\t\t\t  invalidate_dquots\n\t\t\t   if (atomic_read(&dquot->dq_count))\n\t                    dqgrab\n\t\t\t     WARN_ON_ONCE(!test_bit(DQ_ACTIVE_B, &dquot->dq_flags))\n\t                      -> Trigger warning\n\nIn the above scenario, 'dquot->dq_flags' has no DQ_ACTIVE_B is normal when\ndqgrab().\nTo solve above issue just replace the dqgrab() use in invalidate_dquots() with\natomic_inc(&dquot->dq_count).\n\nSigned-off-by: Ye Bin <yebin10@huawei.com>\nSigned-off-by: Jan Kara <jack@suse.cz>\nMessage-Id: <20230605140731.2427629-3-yebin10@huawei.com>",
  "author_name": "Ye Bin",
  "author_email": "yebin10@huawei.com",
  "author_date": "Mon Jun 5 22:07:31 2023 +0800",
  "author_date_iso": "2023-06-05T22:07:31+08:00",
  "committer_name": "Jan Kara",
  "committer_email": "jack@suse.cz",
  "committer_date": "Mon Jun 5 16:50:30 2023 +0200",
  "committer_date_iso": "2023-06-05T16:50:30+02:00",
  "files_changed": [
    "fs/quota/dquot.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "fs/quota/dquot.c",
      "insertions": 1,
      "deletions": 1
    }
  ],
  "total_insertions": 1,
  "total_deletions": 1,
  "total_changes": 2,
  "parents": [
    "6a4e3363792e30177cc3965697e34ddcea8b900b"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/quota/dquot.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}