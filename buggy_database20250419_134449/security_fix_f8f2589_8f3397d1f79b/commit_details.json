{
  "hash": "f8f25893a477a4da4414c3e40ddd51d77fac9cfc",
  "hash_short": "f8f25893",
  "subject": "fs: debugfs: differentiate short fops with proxy ops",
  "body": "Geert reported that my previous short fops debugfs changes\nbroke m68k, because it only has mandatory alignement of two,\nso we can't stash the \"is it short\" information into the\npointer (as we already did with the \"is it real\" bit.)\n\nInstead, exploit the fact that debugfs_file_get() called on\nan already open file will already find that the fsdata is\nno longer the real fops but rather the allocated data that\nalready distinguishes full/short ops, so only open() needs\nto be able to distinguish. We can achieve that by using two\ndifferent open functions.\n\nUnfortunately this requires another set of full file ops,\nincreasing the size by 536 bytes (x86-64), but that's still\na reasonable trade-off given that only converting some of\nthe wireless stack gained over 28k. This brings the total\ncost of this to around 1k, for wins of 28k (all x86-64).\n\nReported-and-tested-by: Geert Uytterhoeven <geert@linux-m68k.org>\nLink: https://lore.kernel.org/CAMuHMdWu_9-L2Te101w8hU7H_2yobJFPXSwwUmGHSJfaPWDKiQ@mail.gmail.com\nFixes: 8dc6d81c6b2a (\"debugfs: add small file operations for most files\")\nSigned-off-by: Johannes Berg <johannes.berg@intel.com>\nTested-by: Geert Uytterhoeven <geert@linux-m68k.org>\nLink: https://lore.kernel.org/r/20241129121536.30989-2-johannes@sipsolutions.net\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
  "full_message": "fs: debugfs: differentiate short fops with proxy ops\n\nGeert reported that my previous short fops debugfs changes\nbroke m68k, because it only has mandatory alignement of two,\nso we can't stash the \"is it short\" information into the\npointer (as we already did with the \"is it real\" bit.)\n\nInstead, exploit the fact that debugfs_file_get() called on\nan already open file will already find that the fsdata is\nno longer the real fops but rather the allocated data that\nalready distinguishes full/short ops, so only open() needs\nto be able to distinguish. We can achieve that by using two\ndifferent open functions.\n\nUnfortunately this requires another set of full file ops,\nincreasing the size by 536 bytes (x86-64), but that's still\na reasonable trade-off given that only converting some of\nthe wireless stack gained over 28k. This brings the total\ncost of this to around 1k, for wins of 28k (all x86-64).\n\nReported-and-tested-by: Geert Uytterhoeven <geert@linux-m68k.org>\nLink: https://lore.kernel.org/CAMuHMdWu_9-L2Te101w8hU7H_2yobJFPXSwwUmGHSJfaPWDKiQ@mail.gmail.com\nFixes: 8dc6d81c6b2a (\"debugfs: add small file operations for most files\")\nSigned-off-by: Johannes Berg <johannes.berg@intel.com>\nTested-by: Geert Uytterhoeven <geert@linux-m68k.org>\nLink: https://lore.kernel.org/r/20241129121536.30989-2-johannes@sipsolutions.net\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
  "author_name": "Johannes Berg",
  "author_email": "johannes.berg@intel.com",
  "author_date": "Fri Nov 29 13:15:37 2024 +0100",
  "author_date_iso": "2024-11-29T13:15:37+01:00",
  "committer_name": "Greg Kroah-Hartman",
  "committer_email": "gregkh@linuxfoundation.org",
  "committer_date": "Tue Jan 7 16:20:08 2025 +0100",
  "committer_date_iso": "2025-01-07T16:20:08+01:00",
  "files_changed": [
    "fs/debugfs/file.c",
    "fs/debugfs/inode.c",
    "fs/debugfs/internal.h"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "fs/debugfs/file.c",
      "insertions": 50,
      "deletions": 22
    },
    {
      "file": "fs/debugfs/inode.c",
      "insertions": 4,
      "deletions": 7
    },
    {
      "file": "fs/debugfs/internal.h",
      "insertions": 1,
      "deletions": 5
    }
  ],
  "total_insertions": 55,
  "total_deletions": 34,
  "total_changes": 89,
  "parents": [
    "78d4f34e2115b517bcbfe7ec0d018bbbb6f9b0b8"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/debugfs/file.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/debugfs/inode.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/debugfs/internal.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}