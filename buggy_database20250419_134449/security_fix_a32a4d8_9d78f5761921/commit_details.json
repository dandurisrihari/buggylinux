{
  "hash": "a32a4d8a815c4eb6dc64b8962dc13a9dfae70868",
  "hash_short": "a32a4d8a",
  "subject": "smp: Run functions concurrently in smp_call_function_many_cond()",
  "body": "Currently, on_each_cpu() and similar functions do not exploit the\npotential of concurrency: the function is first executed remotely and\nonly then it is executed locally. Functions such as TLB flush can take\nconsiderable time, so this provides an opportunity for performance\noptimization.\n\nTo do so, modify smp_call_function_many_cond(), to allows the callers to\nprovide a function that should be executed (remotely/locally), and run\nthem concurrently. Keep other smp_call_function_many() semantic as it is\ntoday for backward compatibility: the called function is not executed in\nthis case locally.\n\nsmp_call_function_many_cond() does not use the optimized version for a\nsingle remote target that smp_call_function_single() implements. For\nsynchronous function call, smp_call_function_single() keeps a\ncall_single_data (which is used for synchronization) on the stack.\nInterestingly, it seems that not using this optimization provides\ngreater performance improvements (greater speedup with a single remote\ntarget than with multiple ones). Presumably, holding data structures\nthat are intended for synchronization on the stack can introduce\noverheads due to TLB misses and false-sharing when the stack is used for\nother purposes.\n\nSigned-off-by: Nadav Amit <namit@vmware.com>\nSigned-off-by: Ingo Molnar <mingo@kernel.org>\nReviewed-by: Dave Hansen <dave.hansen@linux.intel.com>\nLink: https://lore.kernel.org/r/20210220231712.2475218-2-namit@vmware.com",
  "full_message": "smp: Run functions concurrently in smp_call_function_many_cond()\n\nCurrently, on_each_cpu() and similar functions do not exploit the\npotential of concurrency: the function is first executed remotely and\nonly then it is executed locally. Functions such as TLB flush can take\nconsiderable time, so this provides an opportunity for performance\noptimization.\n\nTo do so, modify smp_call_function_many_cond(), to allows the callers to\nprovide a function that should be executed (remotely/locally), and run\nthem concurrently. Keep other smp_call_function_many() semantic as it is\ntoday for backward compatibility: the called function is not executed in\nthis case locally.\n\nsmp_call_function_many_cond() does not use the optimized version for a\nsingle remote target that smp_call_function_single() implements. For\nsynchronous function call, smp_call_function_single() keeps a\ncall_single_data (which is used for synchronization) on the stack.\nInterestingly, it seems that not using this optimization provides\ngreater performance improvements (greater speedup with a single remote\ntarget than with multiple ones). Presumably, holding data structures\nthat are intended for synchronization on the stack can introduce\noverheads due to TLB misses and false-sharing when the stack is used for\nother purposes.\n\nSigned-off-by: Nadav Amit <namit@vmware.com>\nSigned-off-by: Ingo Molnar <mingo@kernel.org>\nReviewed-by: Dave Hansen <dave.hansen@linux.intel.com>\nLink: https://lore.kernel.org/r/20210220231712.2475218-2-namit@vmware.com",
  "author_name": "Nadav Amit",
  "author_email": "namit@vmware.com",
  "author_date": "Sat Feb 20 15:17:04 2021 -0800",
  "author_date_iso": "2021-02-20T15:17:04-08:00",
  "committer_name": "Ingo Molnar",
  "committer_email": "mingo@kernel.org",
  "committer_date": "Sat Mar 6 12:59:09 2021 +0100",
  "committer_date_iso": "2021-03-06T12:59:09+01:00",
  "files_changed": [
    "kernel/smp.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "kernel/smp.c",
      "insertions": 88,
      "deletions": 68
    }
  ],
  "total_insertions": 88,
  "total_deletions": 68,
  "total_changes": 156,
  "parents": [
    "a38fd8748464831584a19438cbb3082b5a2dab15"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "kernel/smp.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}