{
  "hash": "9ced3bddec080e974e910bf887715540a8d9d96b",
  "hash_short": "9ced3bdd",
  "subject": "kconfig: support user-defined function and recursively expanded variable",
  "body": "Now, we got a basic ability to test compiler capability in Kconfig.\n\nconfig CC_HAS_STACKPROTECTOR\n        def_bool $(shell,($(CC) -Werror -fstack-protector -E -x c /dev/null -o /dev/null 2>/dev/null) && echo y || echo n)\n\nThis works, but it is ugly to repeat this long boilerplate.\n\nWe want to describe like this:\n\nconfig CC_HAS_STACKPROTECTOR\n        bool\n        default $(cc-option,-fstack-protector)\n\nIt is straight-forward to add a new function, but I do not like to\nhard-code specialized functions like that.  Hence, here is another\nfeature, user-defined function.  This works as a textual shorthand\nwith parameterization.\n\nA user-defined function is defined by using the = operator, and can\nbe referenced in the same way as built-in functions.  A user-defined\nfunction in Make is referenced like $(call my-func,arg1,arg2), but I\nomitted the 'call' to make the syntax shorter.\n\nThe definition of a user-defined function contains $(1), $(2), etc.\nin its body to reference the parameters.  It is grammatically valid\nto pass more or fewer arguments when calling it.  We already exploit\nthis feature in our makefiles; scripts/Kbuild.include defines cc-option\nwhich takes two arguments at most, but most of the callers pass only\none argument.\n\nBy the way, a variable is supported as a subset of this feature since\na variable is \"a user-defined function with zero argument\".  In this\ncontext, I mean \"variable\" as recursively expanded variable.  I will\nadd a different flavored variable in the next commit.\n\nThe code above can be written as follows:\n\n[Example Code]\n\n  success = $(shell,($(1)) >/dev/null 2>&1 && echo y || echo n)\n  cc-option = $(success,$(CC) -Werror $(1) -E -x c /dev/null -o /dev/null)\n\n  config CC_HAS_STACKPROTECTOR\n          def_bool $(cc-option,-fstack-protector)\n\n[Result]\n  $ make -s alldefconfig && tail -n 1 .config\n  CONFIG_CC_HAS_STACKPROTECTOR=y\n\nSigned-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>",
  "full_message": "kconfig: support user-defined function and recursively expanded variable\n\nNow, we got a basic ability to test compiler capability in Kconfig.\n\nconfig CC_HAS_STACKPROTECTOR\n        def_bool $(shell,($(CC) -Werror -fstack-protector -E -x c /dev/null -o /dev/null 2>/dev/null) && echo y || echo n)\n\nThis works, but it is ugly to repeat this long boilerplate.\n\nWe want to describe like this:\n\nconfig CC_HAS_STACKPROTECTOR\n        bool\n        default $(cc-option,-fstack-protector)\n\nIt is straight-forward to add a new function, but I do not like to\nhard-code specialized functions like that.  Hence, here is another\nfeature, user-defined function.  This works as a textual shorthand\nwith parameterization.\n\nA user-defined function is defined by using the = operator, and can\nbe referenced in the same way as built-in functions.  A user-defined\nfunction in Make is referenced like $(call my-func,arg1,arg2), but I\nomitted the 'call' to make the syntax shorter.\n\nThe definition of a user-defined function contains $(1), $(2), etc.\nin its body to reference the parameters.  It is grammatically valid\nto pass more or fewer arguments when calling it.  We already exploit\nthis feature in our makefiles; scripts/Kbuild.include defines cc-option\nwhich takes two arguments at most, but most of the callers pass only\none argument.\n\nBy the way, a variable is supported as a subset of this feature since\na variable is \"a user-defined function with zero argument\".  In this\ncontext, I mean \"variable\" as recursively expanded variable.  I will\nadd a different flavored variable in the next commit.\n\nThe code above can be written as follows:\n\n[Example Code]\n\n  success = $(shell,($(1)) >/dev/null 2>&1 && echo y || echo n)\n  cc-option = $(success,$(CC) -Werror $(1) -E -x c /dev/null -o /dev/null)\n\n  config CC_HAS_STACKPROTECTOR\n          def_bool $(cc-option,-fstack-protector)\n\n[Result]\n  $ make -s alldefconfig && tail -n 1 .config\n  CONFIG_CC_HAS_STACKPROTECTOR=y\n\nSigned-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>",
  "author_name": "Masahiro Yamada",
  "author_email": "yamada.masahiro@socionext.com",
  "author_date": "Mon May 28 18:21:49 2018 +0900",
  "author_date_iso": "2018-05-28T18:21:49+09:00",
  "committer_name": "Masahiro Yamada",
  "committer_email": "yamada.masahiro@socionext.com",
  "committer_date": "Tue May 29 03:31:19 2018 +0900",
  "committer_date_iso": "2018-05-29T03:31:19+09:00",
  "files_changed": [
    "scripts/kconfig/lkc_proto.h",
    "scripts/kconfig/preprocess.c",
    "scripts/kconfig/zconf.l",
    "scripts/kconfig/zconf.y"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "scripts/kconfig/lkc_proto.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "scripts/kconfig/preprocess.c",
      "insertions": 85,
      "deletions": 1
    },
    {
      "file": "scripts/kconfig/zconf.l",
      "insertions": 15,
      "deletions": 2
    },
    {
      "file": "scripts/kconfig/zconf.y",
      "insertions": 18,
      "deletions": 1
    }
  ],
  "total_insertions": 120,
  "total_deletions": 4,
  "total_changes": 124,
  "parents": [
    "9de071536c87cb814e210bd762fcf7f645d514a9"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.18",
    "v4.18-rc1",
    "v4.18-rc2",
    "v4.18-rc3",
    "v4.18-rc4",
    "v4.18-rc5",
    "v4.18-rc6",
    "v4.18-rc7",
    "v4.18-rc8",
    "v4.19"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "scripts/kconfig/lkc_proto.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "scripts/kconfig/preprocess.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "scripts/kconfig/zconf.l",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "scripts/kconfig/zconf.y",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}