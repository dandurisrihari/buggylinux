{
  "hash": "f9fc1ec28baeeef6259127b3cbeb34986834574f",
  "hash_short": "f9fc1ec2",
  "subject": "crypto: drivers - avoid memcpy size warning",
  "body": "Some configurations with gcc-12 or gcc-13 produce a warning for the source\nand destination of a memcpy() in atmel_sha_hmac_compute_ipad_hash() potentially\noverlapping:\n\nIn file included from include/linux/string.h:254,\n                 from drivers/crypto/atmel-sha.c:15:\ndrivers/crypto/atmel-sha.c: In function 'atmel_sha_hmac_compute_ipad_hash':\ninclude/linux/fortify-string.h:57:33: error: '__builtin_memcpy' accessing 129 or more bytes at offsets 408 and 280 overlaps 1 or more bytes at offset 408 [-Werror=restrict]\n   57 | #define __underlying_memcpy     __builtin_memcpy\n      |                                 ^\ninclude/linux/fortify-string.h:648:9: note: in expansion of macro '__underlying_memcpy'\n  648 |         __underlying_##op(p, q, __fortify_size);                        \\\n      |         ^~~~~~~~~~~~~\ninclude/linux/fortify-string.h:693:26: note: in expansion of macro '__fortify_memcpy_chk'\n  693 | #define memcpy(p, q, s)  __fortify_memcpy_chk(p, q, s,                  \\\n      |                          ^~~~~~~~~~~~~~~~~~~~\ndrivers/crypto/atmel-sha.c:1773:9: note: in expansion of macro 'memcpy'\n 1773 |         memcpy(hmac->opad, hmac->ipad, bs);\n      |         ^~~~~~\n\nThe same thing happens in two more drivers that have the same logic:\n\ndrivers/crypto/chelsio/chcr_algo.c: In function 'chcr_ahash_setkey':\ninclude/linux/fortify-string.h:57:33: error: '__builtin_memcpy' accessing 129 or more bytes at offsets 260 and 132 overlaps 1 or more bytes at offset 260 [-Werror=restrict]\ndrivers/crypto/bcm/cipher.c: In function 'ahash_hmac_setkey':\ninclude/linux/fortify-string.h:57:33: error: '__builtin_memcpy' accessing between 129 and 4294967295 bytes at offsets 840 and 712 overlaps between 1 and 4294967167 bytes at offset 840 [-Werror=restrict]\n\nI don't think it can actually happen because the size is strictly bounded\nto the available block sizes, at most 128 bytes, though inlining decisions\ncould lead gcc to not see that.\n\nUse the unsafe_memcpy() helper instead of memcpy(), with the only difference\nbeing that this skips the hardening checks that produce the warning.\n\nSuggested-by: Herbert Xu <herbert@gondor.apana.org.au>\nSigned-off-by: Arnd Bergmann <arnd@arndb.de>\nSigned-off-by: Herbert Xu <herbert@gondor.apana.org.au>",
  "full_message": "crypto: drivers - avoid memcpy size warning\n\nSome configurations with gcc-12 or gcc-13 produce a warning for the source\nand destination of a memcpy() in atmel_sha_hmac_compute_ipad_hash() potentially\noverlapping:\n\nIn file included from include/linux/string.h:254,\n                 from drivers/crypto/atmel-sha.c:15:\ndrivers/crypto/atmel-sha.c: In function 'atmel_sha_hmac_compute_ipad_hash':\ninclude/linux/fortify-string.h:57:33: error: '__builtin_memcpy' accessing 129 or more bytes at offsets 408 and 280 overlaps 1 or more bytes at offset 408 [-Werror=restrict]\n   57 | #define __underlying_memcpy     __builtin_memcpy\n      |                                 ^\ninclude/linux/fortify-string.h:648:9: note: in expansion of macro '__underlying_memcpy'\n  648 |         __underlying_##op(p, q, __fortify_size);                        \\\n      |         ^~~~~~~~~~~~~\ninclude/linux/fortify-string.h:693:26: note: in expansion of macro '__fortify_memcpy_chk'\n  693 | #define memcpy(p, q, s)  __fortify_memcpy_chk(p, q, s,                  \\\n      |                          ^~~~~~~~~~~~~~~~~~~~\ndrivers/crypto/atmel-sha.c:1773:9: note: in expansion of macro 'memcpy'\n 1773 |         memcpy(hmac->opad, hmac->ipad, bs);\n      |         ^~~~~~\n\nThe same thing happens in two more drivers that have the same logic:\n\ndrivers/crypto/chelsio/chcr_algo.c: In function 'chcr_ahash_setkey':\ninclude/linux/fortify-string.h:57:33: error: '__builtin_memcpy' accessing 129 or more bytes at offsets 260 and 132 overlaps 1 or more bytes at offset 260 [-Werror=restrict]\ndrivers/crypto/bcm/cipher.c: In function 'ahash_hmac_setkey':\ninclude/linux/fortify-string.h:57:33: error: '__builtin_memcpy' accessing between 129 and 4294967295 bytes at offsets 840 and 712 overlaps between 1 and 4294967167 bytes at offset 840 [-Werror=restrict]\n\nI don't think it can actually happen because the size is strictly bounded\nto the available block sizes, at most 128 bytes, though inlining decisions\ncould lead gcc to not see that.\n\nUse the unsafe_memcpy() helper instead of memcpy(), with the only difference\nbeing that this skips the hardening checks that produce the warning.\n\nSuggested-by: Herbert Xu <herbert@gondor.apana.org.au>\nSigned-off-by: Arnd Bergmann <arnd@arndb.de>\nSigned-off-by: Herbert Xu <herbert@gondor.apana.org.au>",
  "author_name": "Arnd Bergmann",
  "author_email": "arnd@arndb.de",
  "author_date": "Fri Aug 11 15:46:33 2023 +0200",
  "author_date_iso": "2023-08-11T15:46:33+02:00",
  "committer_name": "Herbert Xu",
  "committer_email": "herbert@gondor.apana.org.au",
  "committer_date": "Fri Aug 18 17:01:09 2023 +0800",
  "committer_date_iso": "2023-08-18T17:01:09+08:00",
  "files_changed": [
    "drivers/crypto/atmel-sha.c",
    "drivers/crypto/bcm/cipher.c",
    "drivers/crypto/chelsio/chcr_algo.c"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "drivers/crypto/atmel-sha.c",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "drivers/crypto/bcm/cipher.c",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "drivers/crypto/chelsio/chcr_algo.c",
      "insertions": 2,
      "deletions": 1
    }
  ],
  "total_insertions": 6,
  "total_deletions": 3,
  "total_changes": 9,
  "parents": [
    "8e03dd62e5be811efbf0cbeba47e79e793519105"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/crypto/atmel-sha.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/crypto/bcm/cipher.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/crypto/chelsio/chcr_algo.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}