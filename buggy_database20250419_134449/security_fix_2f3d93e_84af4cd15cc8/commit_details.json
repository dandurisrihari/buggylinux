{
  "hash": "2f3d93e210b9c2866c8b3662adae427d5bf511ec",
  "hash_short": "2f3d93e2",
  "subject": "ext4: fix race in buffer_head read fault injection",
  "body": "When I enabled ext4 debug for fault injection testing, I encountered the\nfollowing warning:\n\n  EXT4-fs error (device sda): ext4_read_inode_bitmap:201: comm fsstress:\n         Cannot read inode bitmap - block_group = 8, inode_bitmap = 1051\n  WARNING: CPU: 0 PID: 511 at fs/buffer.c:1181 mark_buffer_dirty+0x1b3/0x1d0\n\nThe root cause of the issue lies in the improper implementation of ext4's\nbuffer_head read fault injection. The actual completion of buffer_head\nread and the buffer_head fault injection are not atomic, which can lead\nto the uptodate flag being cleared on normally used buffer_heads in race\nconditions.\n\n[CPU0]           [CPU1]         [CPU2]\next4_read_inode_bitmap\n  ext4_read_bh()\n  <bh read complete>\n                 ext4_read_inode_bitmap\n                   if (buffer_uptodate(bh))\n                     return bh\n                               jbd2_journal_commit_transaction\n                                 __jbd2_journal_refile_buffer\n                                   __jbd2_journal_unfile_buffer\n                                     __jbd2_journal_temp_unlink_buffer\n  ext4_simulate_fail_bh()\n    clear_buffer_uptodate\n                                      mark_buffer_dirty\n                                        <report warning>\n                                        WARN_ON_ONCE(!buffer_uptodate(bh))\n\nThe best approach would be to perform fault injection in the IO completion\ncallback function, rather than after IO completion. However, the IO\ncompletion callback function cannot get the fault injection code in sb.\n\nFix it by passing the result of fault injection into the bh read function,\nwe simulate faults within the bh read function itself. This requires adding\nan extra parameter to the bh read functions that need fault injection.\n\nFixes: 46f870d690fe (\"ext4: simulate various I/O and checksum errors when reading metadata\")\nSigned-off-by: Long Li <leo.lilong@huawei.com>\nLink: https://patch.msgid.link/20240906091746.510163-1-leo.lilong@huawei.com\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>",
  "full_message": "ext4: fix race in buffer_head read fault injection\n\nWhen I enabled ext4 debug for fault injection testing, I encountered the\nfollowing warning:\n\n  EXT4-fs error (device sda): ext4_read_inode_bitmap:201: comm fsstress:\n         Cannot read inode bitmap - block_group = 8, inode_bitmap = 1051\n  WARNING: CPU: 0 PID: 511 at fs/buffer.c:1181 mark_buffer_dirty+0x1b3/0x1d0\n\nThe root cause of the issue lies in the improper implementation of ext4's\nbuffer_head read fault injection. The actual completion of buffer_head\nread and the buffer_head fault injection are not atomic, which can lead\nto the uptodate flag being cleared on normally used buffer_heads in race\nconditions.\n\n[CPU0]           [CPU1]         [CPU2]\next4_read_inode_bitmap\n  ext4_read_bh()\n  <bh read complete>\n                 ext4_read_inode_bitmap\n                   if (buffer_uptodate(bh))\n                     return bh\n                               jbd2_journal_commit_transaction\n                                 __jbd2_journal_refile_buffer\n                                   __jbd2_journal_unfile_buffer\n                                     __jbd2_journal_temp_unlink_buffer\n  ext4_simulate_fail_bh()\n    clear_buffer_uptodate\n                                      mark_buffer_dirty\n                                        <report warning>\n                                        WARN_ON_ONCE(!buffer_uptodate(bh))\n\nThe best approach would be to perform fault injection in the IO completion\ncallback function, rather than after IO completion. However, the IO\ncompletion callback function cannot get the fault injection code in sb.\n\nFix it by passing the result of fault injection into the bh read function,\nwe simulate faults within the bh read function itself. This requires adding\nan extra parameter to the bh read functions that need fault injection.\n\nFixes: 46f870d690fe (\"ext4: simulate various I/O and checksum errors when reading metadata\")\nSigned-off-by: Long Li <leo.lilong@huawei.com>\nLink: https://patch.msgid.link/20240906091746.510163-1-leo.lilong@huawei.com\nSigned-off-by: Theodore Ts'o <tytso@mit.edu>",
  "author_name": "Long Li",
  "author_email": "leo.lilong@huawei.com",
  "author_date": "Fri Sep 6 17:17:46 2024 +0800",
  "author_date_iso": "2024-09-06T17:17:46+08:00",
  "committer_name": "Theodore Ts'o",
  "committer_email": "tytso@mit.edu",
  "committer_date": "Tue Nov 12 23:54:14 2024 -0500",
  "committer_date_iso": "2024-11-12T23:54:14-05:00",
  "files_changed": [
    "fs/ext4/balloc.c",
    "fs/ext4/ext4.h",
    "fs/ext4/extents.c",
    "fs/ext4/ialloc.c",
    "fs/ext4/indirect.c",
    "fs/ext4/inode.c",
    "fs/ext4/mmp.c",
    "fs/ext4/move_extent.c",
    "fs/ext4/resize.c",
    "fs/ext4/super.c"
  ],
  "files_changed_count": 10,
  "stats": [
    {
      "file": "fs/ext4/balloc.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "fs/ext4/ext4.h",
      "insertions": 2,
      "deletions": 10
    },
    {
      "file": "fs/ext4/extents.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "fs/ext4/ialloc.c",
      "insertions": 3,
      "deletions": 2
    },
    {
      "file": "fs/ext4/indirect.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "fs/ext4/inode.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "fs/ext4/mmp.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "fs/ext4/move_extent.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "fs/ext4/resize.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "fs/ext4/super.c",
      "insertions": 15,
      "deletions": 8
    }
  ],
  "total_insertions": 29,
  "total_deletions": 29,
  "total_changes": 58,
  "parents": [
    "a90825898becb730377b157884c82a725f1d3ffa"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/ext4/ialloc.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/ext4/inode.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/ext4/mmp.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/ext4/balloc.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/ext4/ext4.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/ext4/indirect.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/ext4/extents.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/ext4/resize.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/ext4/move_extent.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/ext4/super.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}