{
  "hash": "f091ec768c52fe7192faeabf47cf212321879176",
  "hash_short": "f091ec76",
  "subject": "docs: sound: add 'pcmtest' driver documentation",
  "body": "Add documentation for the new Virtual PCM Test Driver. It covers all\npossible usage cases: errors and delay injections, random and\npattern-based data generation, playback and ioctl redefinition\nfunctionalities testing.\n\nWe have a lot of different virtual media drivers, which can be used for\ntesting of the userspace applications and media subsystem middle layer.\nHowever, all of them are aimed at testing the video functionality and\nsimulating the video devices. For audio devices we have only snd-dummy\nmodule, which is good in simulating the correct behavior of an ALSA device.\nI decided to write a tool, which would help to test the userspace ALSA\nprograms (and the PCM middle layer as well) under unusual circumstances\nto figure out how they would behave. So I came up with this Virtual PCM\nTest Driver.\n\nThis new Virtual PCM Test Driver has several features which can be useful\nduring the userspace ALSA applications testing/fuzzing, or testing/fuzzing\nof the PCM middle layer. Not all of them can be implemented using the\nexisting virtual drivers (like dummy or loopback). Here is what can this\ndriver do:\n\n- Simulate both capture and playback processes\n- Check the playback stream for containing the looped pattern\n- Generate random or pattern-based capture data\n- Inject delays into the playback and capturing processes\n- Inject errors during the PCM callbacks\n\nAlso, this driver can check the playback stream for containing the\npredefined pattern, which is used in the corresponding selftest to check\nthe PCM middle layer data transferring functionality. Additionally, this\ndriver redefines the default RESET ioctl, and the selftest covers this PCM\nAPI functionality as well.\n\nThe driver supports both interleaved and non-interleaved access modes, and\nhave separate pattern buffers for each channel. The driver supports up to\n4 channels and up to 8 substreams.\n\nSigned-off-by: Ivan Orlov <ivan.orlov0322@gmail.com>\nAcked-by: Jaroslav Kysela <perex@perex.cz>\nLink: https://lore.kernel.org/r/20230606193254.20791-1-ivan.orlov0322@gmail.com\nSigned-off-by: Takashi Iwai <tiwai@suse.de>",
  "full_message": "docs: sound: add 'pcmtest' driver documentation\n\nAdd documentation for the new Virtual PCM Test Driver. It covers all\npossible usage cases: errors and delay injections, random and\npattern-based data generation, playback and ioctl redefinition\nfunctionalities testing.\n\nWe have a lot of different virtual media drivers, which can be used for\ntesting of the userspace applications and media subsystem middle layer.\nHowever, all of them are aimed at testing the video functionality and\nsimulating the video devices. For audio devices we have only snd-dummy\nmodule, which is good in simulating the correct behavior of an ALSA device.\nI decided to write a tool, which would help to test the userspace ALSA\nprograms (and the PCM middle layer as well) under unusual circumstances\nto figure out how they would behave. So I came up with this Virtual PCM\nTest Driver.\n\nThis new Virtual PCM Test Driver has several features which can be useful\nduring the userspace ALSA applications testing/fuzzing, or testing/fuzzing\nof the PCM middle layer. Not all of them can be implemented using the\nexisting virtual drivers (like dummy or loopback). Here is what can this\ndriver do:\n\n- Simulate both capture and playback processes\n- Check the playback stream for containing the looped pattern\n- Generate random or pattern-based capture data\n- Inject delays into the playback and capturing processes\n- Inject errors during the PCM callbacks\n\nAlso, this driver can check the playback stream for containing the\npredefined pattern, which is used in the corresponding selftest to check\nthe PCM middle layer data transferring functionality. Additionally, this\ndriver redefines the default RESET ioctl, and the selftest covers this PCM\nAPI functionality as well.\n\nThe driver supports both interleaved and non-interleaved access modes, and\nhave separate pattern buffers for each channel. The driver supports up to\n4 channels and up to 8 substreams.\n\nSigned-off-by: Ivan Orlov <ivan.orlov0322@gmail.com>\nAcked-by: Jaroslav Kysela <perex@perex.cz>\nLink: https://lore.kernel.org/r/20230606193254.20791-1-ivan.orlov0322@gmail.com\nSigned-off-by: Takashi Iwai <tiwai@suse.de>",
  "author_name": "Ivan Orlov",
  "author_email": "ivan.orlov0322@gmail.com",
  "author_date": "Tue Jun 6 23:32:52 2023 +0400",
  "author_date_iso": "2023-06-06T23:32:52+04:00",
  "committer_name": "Takashi Iwai",
  "committer_email": "tiwai@suse.de",
  "committer_date": "Wed Jun 7 13:08:35 2023 +0200",
  "committer_date_iso": "2023-06-07T13:08:35+02:00",
  "files_changed": [
    "Documentation/sound/cards/index.rst",
    "Documentation/sound/cards/pcmtest.rst"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "Documentation/sound/cards/index.rst",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "Documentation/sound/cards/pcmtest.rst",
      "insertions": 120,
      "deletions": 0
    }
  ],
  "total_insertions": 121,
  "total_deletions": 0,
  "total_changes": 121,
  "parents": [
    "a4d2b8537845c9a4f4b16dd31793af9c08548341"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "Inject"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "Documentation/sound/cards/index.rst",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "Documentation/sound/cards/pcmtest.rst",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}