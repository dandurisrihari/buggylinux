{
  "hash": "1c1a9ce973a7863dd46767226bce2a5f12d48bc6",
  "hash_short": "1c1a9ce9",
  "subject": "KVM: x86: Add support for local interrupt requests from userspace",
  "body": "In order to enable userspace PIC support, the userspace PIC needs to\nbe able to inject local interrupts even when the APICs are in the\nkernel.\n\nKVM_INTERRUPT now supports sending local interrupts to an APIC when\nAPICs are in the kernel.\n\nThe ready_for_interrupt_request flag is now only set when the CPU/APIC\nwill immediately accept and inject an interrupt (i.e. APIC has not\nmasked the PIC).\n\nWhen the PIC wishes to initiate an INTA cycle with, say, CPU0, it\nkicks CPU0 out of the guest, and renedezvous with CPU0 once it arrives\nin userspace.\n\nWhen the CPU/APIC unmasks the PIC, a KVM_EXIT_IRQ_WINDOW_OPEN is\ntriggered, so that userspace has a chance to inject a PIC interrupt\nif it had been pending.\n\nOverall, this design can lead to a small number of spurious userspace\nrenedezvous. In particular, whenever the PIC transistions from low to\nhigh while it is masked and whenever the PIC becomes unmasked while\nit is low.\n\nNote: this does not buffer more than one local interrupt in the\nkernel, so the VMM needs to enter the guest in order to complete\ninterrupt injection before injecting an additional interrupt.\n\nCompiles for x86.\n\nCan pass the KVM Unit Tests.\n\nSigned-off-by: Steve Rutherford <srutherford@google.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
  "full_message": "KVM: x86: Add support for local interrupt requests from userspace\n\nIn order to enable userspace PIC support, the userspace PIC needs to\nbe able to inject local interrupts even when the APICs are in the\nkernel.\n\nKVM_INTERRUPT now supports sending local interrupts to an APIC when\nAPICs are in the kernel.\n\nThe ready_for_interrupt_request flag is now only set when the CPU/APIC\nwill immediately accept and inject an interrupt (i.e. APIC has not\nmasked the PIC).\n\nWhen the PIC wishes to initiate an INTA cycle with, say, CPU0, it\nkicks CPU0 out of the guest, and renedezvous with CPU0 once it arrives\nin userspace.\n\nWhen the CPU/APIC unmasks the PIC, a KVM_EXIT_IRQ_WINDOW_OPEN is\ntriggered, so that userspace has a chance to inject a PIC interrupt\nif it had been pending.\n\nOverall, this design can lead to a small number of spurious userspace\nrenedezvous. In particular, whenever the PIC transistions from low to\nhigh while it is masked and whenever the PIC becomes unmasked while\nit is low.\n\nNote: this does not buffer more than one local interrupt in the\nkernel, so the VMM needs to enter the guest in order to complete\ninterrupt injection before injecting an additional interrupt.\n\nCompiles for x86.\n\nCan pass the KVM Unit Tests.\n\nSigned-off-by: Steve Rutherford <srutherford@google.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
  "author_name": "Steve Rutherford",
  "author_email": "srutherford@google.com",
  "author_date": "Thu Jul 30 11:27:16 2015 +0200",
  "author_date_iso": "2015-07-30T11:27:16+02:00",
  "committer_name": "Paolo Bonzini",
  "committer_email": "pbonzini@redhat.com",
  "committer_date": "Thu Oct 1 15:06:29 2015 +0200",
  "committer_date_iso": "2015-10-01T15:06:29+02:00",
  "files_changed": [
    "Documentation/virtual/kvm/api.txt",
    "arch/x86/include/asm/kvm_host.h",
    "arch/x86/kvm/irq.c",
    "arch/x86/kvm/irq.h",
    "arch/x86/kvm/x86.c"
  ],
  "files_changed_count": 5,
  "stats": [
    {
      "file": "Documentation/virtual/kvm/api.txt",
      "insertions": 10,
      "deletions": 4
    },
    {
      "file": "arch/x86/include/asm/kvm_host.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/kvm/irq.c",
      "insertions": 26,
      "deletions": 6
    },
    {
      "file": "arch/x86/kvm/irq.h",
      "insertions": 8,
      "deletions": 0
    },
    {
      "file": "arch/x86/kvm/x86.c",
      "insertions": 33,
      "deletions": 9
    }
  ],
  "total_insertions": 78,
  "total_deletions": 19,
  "total_changes": 97,
  "parents": [
    "b053b2aef25d00773fa6762dcd4b7f5c9c42d171"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.10",
    "v4.10-rc1",
    "v4.10-rc2",
    "v4.10-rc3",
    "v4.10-rc4",
    "v4.10-rc5",
    "v4.10-rc6",
    "v4.10-rc7",
    "v4.10-rc8",
    "v4.11"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "inject"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "Documentation/virtual/kvm/api.txt",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/kvm_host.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kvm/irq.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kvm/irq.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kvm/x86.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}