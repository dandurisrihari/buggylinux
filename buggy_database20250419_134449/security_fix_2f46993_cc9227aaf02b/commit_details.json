{
  "hash": "2f46993d83ff4abb310ef7b4beced56ba96f0d9d",
  "hash_short": "2f46993d",
  "subject": "x86: change default to spec_store_bypass_disable=prctl spectre_v2_user=prctl",
  "body": "Switch the kernel default of SSBD and STIBP to the ones with\nCONFIG_SECCOMP=n (i.e. spec_store_bypass_disable=prctl\nspectre_v2_user=prctl) even if CONFIG_SECCOMP=y.\n\nSeveral motivations listed below:\n\n- If SMT is enabled the seccomp jail can still attack the rest of the\n  system even with spectre_v2_user=seccomp by using MDS-HT (except on\n  XEON PHI where MDS can be tamed with SMT left enabled, but that's a\n  special case). Setting STIBP become a very expensive window dressing\n  after MDS-HT was discovered.\n\n- The seccomp jail cannot attack the kernel with spectre-v2-HT\n  regardless (even if STIBP is not set), but with MDS-HT the seccomp\n  jail can attack the kernel too.\n\n- With spec_store_bypass_disable=prctl the seccomp jail can attack the\n  other userland (guest or host mode) using spectre-v2-HT, but the\n  userland attack is already mitigated by both ASLR and pid namespaces\n  for host userland and through virt isolation with libkrun or\n  kata. (if something if somebody is worried about spectre-v2-HT it's\n  best to mount proc with hidepid=2,gid=proc on workstations where not\n  all apps may run under container runtimes, rather than slowing down\n  all seccomp jails, but the best is to add pid namespaces to the\n  seccomp jail). As opposed MDS-HT is not mitigated and the seccomp\n  jail can still attack all other host and guest userland if SMT is\n  enabled even with spec_store_bypass_disable=seccomp.\n\n- If full security is required then MDS-HT must also be mitigated with\n  nosmt and then spectre_v2_user=prctl and spectre_v2_user=seccomp\n  would become identical.\n\n- Setting spectre_v2_user=seccomp is overall lower priority than to\n  setting javascript.options.wasm false in about:config to protect\n  against remote wasm MDS-HT, instead of worrying about Spectre-v2-HT\n  and STIBP which again is already statistically well mitigated by\n  other means in userland and it's fully mitigated in kernel with\n  retpolines (unlike the wasm assist call with MDS-HT).\n\n- SSBD is needed to prevent reading the JIT memory and the primary\n  user being the OpenJDK. However the primary user of SSBD wouldn't be\n  covered by spec_store_bypass_disable=seccomp because it doesn't use\n  seccomp and the primary user also explicitly declined to set\n  PR_SET_SPECULATION_CTRL+PR_SPEC_STORE_BYPASS despite it easily\n  could. In fact it would need to set it only when the sandboxing\n  mechanism is enabled for javaws applets, but it still declined it by\n  declaring security within the same user address space as an\n  untenable objective for their JIT, even in the sandboxing case where\n  performance would be a lesser concern (for the record: I kind of\n  disagree in not setting PR_SPEC_STORE_BYPASS in the sandbox case and\n  I prefer to run javaws through a wrapper that sets\n  PR_SPEC_STORE_BYPASS if I need). In turn it can be inferred that\n  even if the primary user of SSBD would use seccomp, they would\n  invoke it with SECCOMP_FILTER_FLAG_SPEC_ALLOW by now.\n\n- runc/crun already set SECCOMP_FILTER_FLAG_SPEC_ALLOW by default, k8s\n  and podman have a default json seccomp allowlist that cannot be\n  slowed down, so for the #1 seccomp user this change is already a\n  noop.\n\n- systemd/sshd or other apps that use seccomp, if they really need\n  STIBP or SSBD, they need to explicitly set the\n  PR_SET_SPECULATION_CTRL by now. The stibp/ssbd seccomp blind\n  catch-all approach was done probably initially with a wishful\n  thinking objective to pretend to have a peace of mind that it could\n  magically fix it all. That was wishful thinking before MDS-HT was\n  discovered, but after MDS-HT has been discovered it become just\n  window dressing.\n\n- For qemu \"-sandbox\" seccomp jail it wouldn't make sense to set STIBP\n  or SSBD. SSBD doesn't help with KVM because there's no JIT (if it's\n  needed with TCG it should be an opt-in with\n  PR_SET_SPECULATION_CTRL+PR_SPEC_STORE_BYPASS and it shouldn't\n  slowdown KVM for nothing). For qemu+KVM STIBP would be even more\n  window dressing than it is for all other apps, because in the\n  qemu+KVM case there's not only the MDS attack to worry about with\n  SMT enabled. Even after disabling SMT, there's still a theoretical\n  spectre-v2 attack possible within the same thread context from guest\n  mode to host ring3 that the host kernel retpoline mitigation has no\n  theoretical chance to mitigate. On some kernels a\n  ibrs-always/ibrs-retpoline opt-in model is provided that will\n  enabled IBRS in the qemu host ring3 userland which fixes this\n  theoretical concern. Only after enabling IBRS in the host userland\n  it would then make sense to proceed and worry about STIBP and an\n  attack on the other host userland, but then again SMT would need to\n  be disabled for full security anyway, so that would render STIBP\n  again a noop.\n\n- last but not the least: the lack of \"spec_store_bypass_disable=prctl\n  spectre_v2_user=prctl\" means the moment a guest boots and\n  sshd/systemd runs, the guest kernel will write to SPEC_CTRL MSR\n  which will make the guest vmexit forever slower, forcing KVM to\n  issue a very slow rdmsr instruction at every vmexit. So the end\n  result is that SPEC_CTRL MSR is only available in GCE. Most other\n  public cloud providers don't expose SPEC_CTRL, which means that not\n  only STIBP/SSBD isn't available, but IBPB isn't available either\n  (which would cause no overhead to the guest or the hypervisor\n  because it's write only and requires no reading during vmexit). So\n  the current default already net loss in security (missing IBPB)\n  which means most public cloud providers cannot achieve a fully\n  secure guest with nosmt (and nosmt is enough to fully mitigate\n  MDS-HT). It also means GCE and is unfairly penalized in performance\n  because it provides the option to enable full security in the guest\n  as an opt-in (i.e. nosmt and IBPB). So this change will allow all\n  cloud providers to expose SPEC_CTRL without incurring into any\n  hypervisor slowdown and at the same time it will remove the unfair\n  penalization of GCE performance for doing the right thing and it'll\n  allow to get full security with nosmt with IBPB being available (and\n  STIBP becoming meaningless).\n\nExample to put things in prospective: the STIBP enabled in seccomp has\nnever been about protecting apps using seccomp like sshd from an\nattack from a malicious userland, but to the contrary it has always\nbeen about protecting the system from an attack from sshd, after a\nsuccessful remote network exploit against sshd. In fact initially it\nwasn't obvious STIBP would work both ways (STIBP was about preventing\nthe task that runs with STIBP to be attacked with spectre-v2-HT, but\naccidentally in the STIBP case it also prevents the attack in the\nother direction). In the hypothetical case that sshd has been remotely\nexploited the last concern should be STIBP being set, because it'll be\nstill possible to obtain info even from the kernel by using MDS if\nnosmt wasn't set (and if it was set, STIBP is a noop in the first\nplace). As opposed kernel cannot leak anything with spectre-v2 HT\nbecause of retpolines and the userland is mitigated by ASLR already\nand ideally PID namespaces too. If something it'd be worth checking if\nsshd run the seccomp thread under pid namespaces too if available in\nthe running kernel. SSBD also would be a noop for sshd, since sshd\nuses no JIT. If sshd prefers to keep doing the STIBP window dressing\nexercise, it still can even after this change of defaults by opting-in\nwith PR_SPEC_INDIRECT_BRANCH.\n\nUltimately setting SSBD and STIBP by default for all seccomp jails is\na bad sweet spot and bad default with more cons than pros that end up\nreducing security in the public cloud (by giving an huge incentive to\nnot expose SPEC_CTRL which would be needed to get full security with\nIBPB after setting nosmt in the guest) and by excessively hurting\nperformance to more secure apps using seccomp that end up having to\nopt out with SECCOMP_FILTER_FLAG_SPEC_ALLOW.\n\nThe following is the verified result of the new default with SMT\nenabled:\n\n(gdb) print spectre_v2_user_stibp\n$1 = SPECTRE_V2_USER_PRCTL\n(gdb) print spectre_v2_user_ibpb\n$2 = SPECTRE_V2_USER_PRCTL\n(gdb) print ssb_mode\n$3 = SPEC_STORE_BYPASS_PRCTL\n\nSigned-off-by: Andrea Arcangeli <aarcange@redhat.com>\nSigned-off-by: Kees Cook <keescook@chromium.org>\nLink: https://lore.kernel.org/r/20201104235054.5678-1-aarcange@redhat.com\nAcked-by: Josh Poimboeuf <jpoimboe@redhat.com>\nLink: https://lore.kernel.org/lkml/AAA2EF2C-293D-4D5B-BFA6-FF655105CD84@redhat.com\nAcked-by: Waiman Long <longman@redhat.com>\nLink: https://lore.kernel.org/lkml/c0722838-06f7-da6b-138f-e0f26362f16a@redhat.com",
  "full_message": "x86: change default to spec_store_bypass_disable=prctl spectre_v2_user=prctl\n\nSwitch the kernel default of SSBD and STIBP to the ones with\nCONFIG_SECCOMP=n (i.e. spec_store_bypass_disable=prctl\nspectre_v2_user=prctl) even if CONFIG_SECCOMP=y.\n\nSeveral motivations listed below:\n\n- If SMT is enabled the seccomp jail can still attack the rest of the\n  system even with spectre_v2_user=seccomp by using MDS-HT (except on\n  XEON PHI where MDS can be tamed with SMT left enabled, but that's a\n  special case). Setting STIBP become a very expensive window dressing\n  after MDS-HT was discovered.\n\n- The seccomp jail cannot attack the kernel with spectre-v2-HT\n  regardless (even if STIBP is not set), but with MDS-HT the seccomp\n  jail can attack the kernel too.\n\n- With spec_store_bypass_disable=prctl the seccomp jail can attack the\n  other userland (guest or host mode) using spectre-v2-HT, but the\n  userland attack is already mitigated by both ASLR and pid namespaces\n  for host userland and through virt isolation with libkrun or\n  kata. (if something if somebody is worried about spectre-v2-HT it's\n  best to mount proc with hidepid=2,gid=proc on workstations where not\n  all apps may run under container runtimes, rather than slowing down\n  all seccomp jails, but the best is to add pid namespaces to the\n  seccomp jail). As opposed MDS-HT is not mitigated and the seccomp\n  jail can still attack all other host and guest userland if SMT is\n  enabled even with spec_store_bypass_disable=seccomp.\n\n- If full security is required then MDS-HT must also be mitigated with\n  nosmt and then spectre_v2_user=prctl and spectre_v2_user=seccomp\n  would become identical.\n\n- Setting spectre_v2_user=seccomp is overall lower priority than to\n  setting javascript.options.wasm false in about:config to protect\n  against remote wasm MDS-HT, instead of worrying about Spectre-v2-HT\n  and STIBP which again is already statistically well mitigated by\n  other means in userland and it's fully mitigated in kernel with\n  retpolines (unlike the wasm assist call with MDS-HT).\n\n- SSBD is needed to prevent reading the JIT memory and the primary\n  user being the OpenJDK. However the primary user of SSBD wouldn't be\n  covered by spec_store_bypass_disable=seccomp because it doesn't use\n  seccomp and the primary user also explicitly declined to set\n  PR_SET_SPECULATION_CTRL+PR_SPEC_STORE_BYPASS despite it easily\n  could. In fact it would need to set it only when the sandboxing\n  mechanism is enabled for javaws applets, but it still declined it by\n  declaring security within the same user address space as an\n  untenable objective for their JIT, even in the sandboxing case where\n  performance would be a lesser concern (for the record: I kind of\n  disagree in not setting PR_SPEC_STORE_BYPASS in the sandbox case and\n  I prefer to run javaws through a wrapper that sets\n  PR_SPEC_STORE_BYPASS if I need). In turn it can be inferred that\n  even if the primary user of SSBD would use seccomp, they would\n  invoke it with SECCOMP_FILTER_FLAG_SPEC_ALLOW by now.\n\n- runc/crun already set SECCOMP_FILTER_FLAG_SPEC_ALLOW by default, k8s\n  and podman have a default json seccomp allowlist that cannot be\n  slowed down, so for the #1 seccomp user this change is already a\n  noop.\n\n- systemd/sshd or other apps that use seccomp, if they really need\n  STIBP or SSBD, they need to explicitly set the\n  PR_SET_SPECULATION_CTRL by now. The stibp/ssbd seccomp blind\n  catch-all approach was done probably initially with a wishful\n  thinking objective to pretend to have a peace of mind that it could\n  magically fix it all. That was wishful thinking before MDS-HT was\n  discovered, but after MDS-HT has been discovered it become just\n  window dressing.\n\n- For qemu \"-sandbox\" seccomp jail it wouldn't make sense to set STIBP\n  or SSBD. SSBD doesn't help with KVM because there's no JIT (if it's\n  needed with TCG it should be an opt-in with\n  PR_SET_SPECULATION_CTRL+PR_SPEC_STORE_BYPASS and it shouldn't\n  slowdown KVM for nothing). For qemu+KVM STIBP would be even more\n  window dressing than it is for all other apps, because in the\n  qemu+KVM case there's not only the MDS attack to worry about with\n  SMT enabled. Even after disabling SMT, there's still a theoretical\n  spectre-v2 attack possible within the same thread context from guest\n  mode to host ring3 that the host kernel retpoline mitigation has no\n  theoretical chance to mitigate. On some kernels a\n  ibrs-always/ibrs-retpoline opt-in model is provided that will\n  enabled IBRS in the qemu host ring3 userland which fixes this\n  theoretical concern. Only after enabling IBRS in the host userland\n  it would then make sense to proceed and worry about STIBP and an\n  attack on the other host userland, but then again SMT would need to\n  be disabled for full security anyway, so that would render STIBP\n  again a noop.\n\n- last but not the least: the lack of \"spec_store_bypass_disable=prctl\n  spectre_v2_user=prctl\" means the moment a guest boots and\n  sshd/systemd runs, the guest kernel will write to SPEC_CTRL MSR\n  which will make the guest vmexit forever slower, forcing KVM to\n  issue a very slow rdmsr instruction at every vmexit. So the end\n  result is that SPEC_CTRL MSR is only available in GCE. Most other\n  public cloud providers don't expose SPEC_CTRL, which means that not\n  only STIBP/SSBD isn't available, but IBPB isn't available either\n  (which would cause no overhead to the guest or the hypervisor\n  because it's write only and requires no reading during vmexit). So\n  the current default already net loss in security (missing IBPB)\n  which means most public cloud providers cannot achieve a fully\n  secure guest with nosmt (and nosmt is enough to fully mitigate\n  MDS-HT). It also means GCE and is unfairly penalized in performance\n  because it provides the option to enable full security in the guest\n  as an opt-in (i.e. nosmt and IBPB). So this change will allow all\n  cloud providers to expose SPEC_CTRL without incurring into any\n  hypervisor slowdown and at the same time it will remove the unfair\n  penalization of GCE performance for doing the right thing and it'll\n  allow to get full security with nosmt with IBPB being available (and\n  STIBP becoming meaningless).\n\nExample to put things in prospective: the STIBP enabled in seccomp has\nnever been about protecting apps using seccomp like sshd from an\nattack from a malicious userland, but to the contrary it has always\nbeen about protecting the system from an attack from sshd, after a\nsuccessful remote network exploit against sshd. In fact initially it\nwasn't obvious STIBP would work both ways (STIBP was about preventing\nthe task that runs with STIBP to be attacked with spectre-v2-HT, but\naccidentally in the STIBP case it also prevents the attack in the\nother direction). In the hypothetical case that sshd has been remotely\nexploited the last concern should be STIBP being set, because it'll be\nstill possible to obtain info even from the kernel by using MDS if\nnosmt wasn't set (and if it was set, STIBP is a noop in the first\nplace). As opposed kernel cannot leak anything with spectre-v2 HT\nbecause of retpolines and the userland is mitigated by ASLR already\nand ideally PID namespaces too. If something it'd be worth checking if\nsshd run the seccomp thread under pid namespaces too if available in\nthe running kernel. SSBD also would be a noop for sshd, since sshd\nuses no JIT. If sshd prefers to keep doing the STIBP window dressing\nexercise, it still can even after this change of defaults by opting-in\nwith PR_SPEC_INDIRECT_BRANCH.\n\nUltimately setting SSBD and STIBP by default for all seccomp jails is\na bad sweet spot and bad default with more cons than pros that end up\nreducing security in the public cloud (by giving an huge incentive to\nnot expose SPEC_CTRL which would be needed to get full security with\nIBPB after setting nosmt in the guest) and by excessively hurting\nperformance to more secure apps using seccomp that end up having to\nopt out with SECCOMP_FILTER_FLAG_SPEC_ALLOW.\n\nThe following is the verified result of the new default with SMT\nenabled:\n\n(gdb) print spectre_v2_user_stibp\n$1 = SPECTRE_V2_USER_PRCTL\n(gdb) print spectre_v2_user_ibpb\n$2 = SPECTRE_V2_USER_PRCTL\n(gdb) print ssb_mode\n$3 = SPEC_STORE_BYPASS_PRCTL\n\nSigned-off-by: Andrea Arcangeli <aarcange@redhat.com>\nSigned-off-by: Kees Cook <keescook@chromium.org>\nLink: https://lore.kernel.org/r/20201104235054.5678-1-aarcange@redhat.com\nAcked-by: Josh Poimboeuf <jpoimboe@redhat.com>\nLink: https://lore.kernel.org/lkml/AAA2EF2C-293D-4D5B-BFA6-FF655105CD84@redhat.com\nAcked-by: Waiman Long <longman@redhat.com>\nLink: https://lore.kernel.org/lkml/c0722838-06f7-da6b-138f-e0f26362f16a@redhat.com",
  "author_name": "Andrea Arcangeli",
  "author_email": "aarcange@redhat.com",
  "author_date": "Wed Nov 4 18:50:54 2020 -0500",
  "author_date_iso": "2020-11-04T18:50:54-05:00",
  "committer_name": "Kees Cook",
  "committer_email": "keescook@chromium.org",
  "committer_date": "Mon Oct 4 12:12:57 2021 -0700",
  "committer_date_iso": "2021-10-04T12:12:57-07:00",
  "files_changed": [
    "Documentation/admin-guide/hw-vuln/spectre.rst",
    "Documentation/admin-guide/kernel-parameters.txt",
    "arch/x86/kernel/cpu/bugs.c"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "Documentation/admin-guide/hw-vuln/spectre.rst",
      "insertions": 4,
      "deletions": 6
    },
    {
      "file": "Documentation/admin-guide/kernel-parameters.txt",
      "insertions": 2,
      "deletions": 3
    },
    {
      "file": "arch/x86/kernel/cpu/bugs.c",
      "insertions": 2,
      "deletions": 2
    }
  ],
  "total_insertions": 8,
  "total_deletions": 11,
  "total_changes": 19,
  "parents": [
    "e4e737bb5c170df6135a127739a9e6148ee3da82"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "Documentation/admin-guide/hw-vuln/spectre.rst",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "Documentation/admin-guide/kernel-parameters.txt",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/cpu/bugs.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}