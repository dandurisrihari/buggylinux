{
  "hash": "6fce1f40e95182ebbfe1ee3096b8fc0b37903269",
  "hash_short": "6fce1f40",
  "subject": "dm verity: add support for signature verification with platform keyring",
  "body": "Add a new configuration CONFIG_DM_VERITY_VERIFY_ROOTHASH_SIG_PLATFORM_KEYRING\nthat enables verifying dm-verity signatures using the platform keyring,\nwhich is populated using the UEFI DB certificates. This is useful for\nself-enrolled systems that do not use MOK, as the secondary keyring which\nis already used for verification, if the relevant kconfig is enabled, is\nlinked to the machine keyring, which gets its certificates loaded from MOK.\nOn datacenter/virtual/cloud deployments it is more common to deploy one's\nown certificate chain directly in DB on first boot in unattended mode,\nrather than relying on MOK, as the latter typically requires interactive\nauthentication to enroll, and is more suited for personal machines.\n\nDefault to the same value as DM_VERITY_VERIFY_ROOTHASH_SIG_SECONDARY_KEYRING\nif not otherwise specified, as it is likely that if one wants to use\nMOK certificates to verify dm-verity volumes, DB certificates are\ngoing to be used too. Keys in DB are allowed to load a full kernel\nalready anyway, so they are already highly privileged.\n\nSigned-off-by: Luca Boccassi <bluca@debian.org>\nSigned-off-by: Mikulas Patocka <mpatocka@redhat.com>",
  "full_message": "dm verity: add support for signature verification with platform keyring\n\nAdd a new configuration CONFIG_DM_VERITY_VERIFY_ROOTHASH_SIG_PLATFORM_KEYRING\nthat enables verifying dm-verity signatures using the platform keyring,\nwhich is populated using the UEFI DB certificates. This is useful for\nself-enrolled systems that do not use MOK, as the secondary keyring which\nis already used for verification, if the relevant kconfig is enabled, is\nlinked to the machine keyring, which gets its certificates loaded from MOK.\nOn datacenter/virtual/cloud deployments it is more common to deploy one's\nown certificate chain directly in DB on first boot in unattended mode,\nrather than relying on MOK, as the latter typically requires interactive\nauthentication to enroll, and is more suited for personal machines.\n\nDefault to the same value as DM_VERITY_VERIFY_ROOTHASH_SIG_SECONDARY_KEYRING\nif not otherwise specified, as it is likely that if one wants to use\nMOK certificates to verify dm-verity volumes, DB certificates are\ngoing to be used too. Keys in DB are allowed to load a full kernel\nalready anyway, so they are already highly privileged.\n\nSigned-off-by: Luca Boccassi <bluca@debian.org>\nSigned-off-by: Mikulas Patocka <mpatocka@redhat.com>",
  "author_name": "Luca Boccassi",
  "author_email": "bluca@debian.org",
  "author_date": "Tue Jul 2 18:16:57 2024 +0200",
  "author_date_iso": "2024-07-02T18:16:57+02:00",
  "committer_name": "Mikulas Patocka",
  "committer_email": "mpatocka@redhat.com",
  "committer_date": "Wed Jul 3 21:41:11 2024 +0200",
  "committer_date_iso": "2024-07-03T21:41:11+02:00",
  "files_changed": [
    "drivers/md/Kconfig",
    "drivers/md/dm-verity-verify-sig.c"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "drivers/md/Kconfig",
      "insertions": 10,
      "deletions": 0
    },
    {
      "file": "drivers/md/dm-verity-verify-sig.c",
      "insertions": 7,
      "deletions": 0
    }
  ],
  "total_insertions": 17,
  "total_deletions": 0,
  "total_changes": 17,
  "parents": [
    "3199a34bfaf7561410e0be1e33a61eba870768fc"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/md/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/md/dm-verity-verify-sig.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}