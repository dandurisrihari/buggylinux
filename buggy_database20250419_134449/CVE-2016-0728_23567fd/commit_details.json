{
  "hash": "23567fd052a9abb6d67fe8e7a9ccdd9800a540f2",
  "hash_short": "23567fd0",
  "subject": "KEYS: Fix keyring ref leak in join_session_keyring()",
  "body": "This fixes CVE-2016-0728.\n\nIf a thread is asked to join as a session keyring the keyring that's already\nset as its session, we leak a keyring reference.\n\nThis can be tested with the following program:\n\n\t#include <stddef.h>\n\t#include <stdio.h>\n\t#include <sys/types.h>\n\t#include <keyutils.h>\n\n\tint main(int argc, const char *argv[])\n\t{\n\t\tint i = 0;\n\t\tkey_serial_t serial;\n\n\t\tserial = keyctl(KEYCTL_JOIN_SESSION_KEYRING,\n\t\t\t\t\"leaked-keyring\");\n\t\tif (serial < 0) {\n\t\t\tperror(\"keyctl\");\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (keyctl(KEYCTL_SETPERM, serial,\n\t\t\t   KEY_POS_ALL | KEY_USR_ALL) < 0) {\n\t\t\tperror(\"keyctl\");\n\t\t\treturn -1;\n\t\t}\n\n\t\tfor (i = 0; i < 100; i++) {\n\t\t\tserial = keyctl(KEYCTL_JOIN_SESSION_KEYRING,\n\t\t\t\t\t\"leaked-keyring\");\n\t\t\tif (serial < 0) {\n\t\t\t\tperror(\"keyctl\");\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\n\t\treturn 0;\n\t}\n\nIf, after the program has run, there something like the following line in\n/proc/keys:\n\n3f3d898f I--Q---   100 perm 3f3f0000     0     0 keyring   leaked-keyring: empty\n\nwith a usage count of 100 * the number of times the program has been run,\nthen the kernel is malfunctioning.  If leaked-keyring has zero usages or\nhas been garbage collected, then the problem is fixed.\n\nReported-by: Yevgeny Pats <yevgeny@perception-point.io>\nSigned-off-by: David Howells <dhowells@redhat.com>\nAcked-by: Don Zickus <dzickus@redhat.com>\nAcked-by: Prarit Bhargava <prarit@redhat.com>\nAcked-by: Jarod Wilson <jarod@redhat.com>\nSigned-off-by: James Morris <james.l.morris@oracle.com>",
  "full_message": "KEYS: Fix keyring ref leak in join_session_keyring()\n\nThis fixes CVE-2016-0728.\n\nIf a thread is asked to join as a session keyring the keyring that's already\nset as its session, we leak a keyring reference.\n\nThis can be tested with the following program:\n\n\t#include <stddef.h>\n\t#include <stdio.h>\n\t#include <sys/types.h>\n\t#include <keyutils.h>\n\n\tint main(int argc, const char *argv[])\n\t{\n\t\tint i = 0;\n\t\tkey_serial_t serial;\n\n\t\tserial = keyctl(KEYCTL_JOIN_SESSION_KEYRING,\n\t\t\t\t\"leaked-keyring\");\n\t\tif (serial < 0) {\n\t\t\tperror(\"keyctl\");\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (keyctl(KEYCTL_SETPERM, serial,\n\t\t\t   KEY_POS_ALL | KEY_USR_ALL) < 0) {\n\t\t\tperror(\"keyctl\");\n\t\t\treturn -1;\n\t\t}\n\n\t\tfor (i = 0; i < 100; i++) {\n\t\t\tserial = keyctl(KEYCTL_JOIN_SESSION_KEYRING,\n\t\t\t\t\t\"leaked-keyring\");\n\t\t\tif (serial < 0) {\n\t\t\t\tperror(\"keyctl\");\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\n\t\treturn 0;\n\t}\n\nIf, after the program has run, there something like the following line in\n/proc/keys:\n\n3f3d898f I--Q---   100 perm 3f3f0000     0     0 keyring   leaked-keyring: empty\n\nwith a usage count of 100 * the number of times the program has been run,\nthen the kernel is malfunctioning.  If leaked-keyring has zero usages or\nhas been garbage collected, then the problem is fixed.\n\nReported-by: Yevgeny Pats <yevgeny@perception-point.io>\nSigned-off-by: David Howells <dhowells@redhat.com>\nAcked-by: Don Zickus <dzickus@redhat.com>\nAcked-by: Prarit Bhargava <prarit@redhat.com>\nAcked-by: Jarod Wilson <jarod@redhat.com>\nSigned-off-by: James Morris <james.l.morris@oracle.com>",
  "author_name": "Yevgeny Pats",
  "author_email": "yevgeny@perception-point.io",
  "author_date": "Tue Jan 19 22:09:04 2016 +0000",
  "author_date_iso": "2016-01-19T22:09:04+00:00",
  "committer_name": "James Morris",
  "committer_email": "james.l.morris@oracle.com",
  "committer_date": "Wed Jan 20 10:50:48 2016 +1100",
  "committer_date_iso": "2016-01-20T10:50:48+11:00",
  "files_changed": [
    "security/keys/process_keys.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "security/keys/process_keys.c",
      "insertions": 1,
      "deletions": 0
    }
  ],
  "total_insertions": 1,
  "total_deletions": 0,
  "total_changes": 1,
  "parents": [
    "d8d803867ac13117b8f6c6572474ab1c90e9036b"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.10",
    "v4.10-rc1",
    "v4.10-rc2",
    "v4.10-rc3",
    "v4.10-rc4",
    "v4.10-rc5",
    "v4.10-rc6",
    "v4.10-rc7",
    "v4.10-rc8",
    "v4.11"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2016-0728"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "security/keys/process_keys.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}