{
  "hash": "8d4abca95ecc82fc8c41912fa0085281f19cc29f",
  "hash_short": "8d4abca9",
  "subject": "media: ngene: Fix out-of-bounds bug in ngene_command_config_free_buf()",
  "body": "Fix an 11-year old bug in ngene_command_config_free_buf() while\naddressing the following warnings caught with -Warray-bounds:\n\narch/alpha/include/asm/string.h:22:16: warning: '__builtin_memcpy' offset [12, 16] from the object at 'com' is out of the bounds of referenced subobject 'config' with type 'unsigned char' at offset 10 [-Warray-bounds]\narch/x86/include/asm/string_32.h:182:25: warning: '__builtin_memcpy' offset [12, 16] from the object at 'com' is out of the bounds of referenced subobject 'config' with type 'unsigned char' at offset 10 [-Warray-bounds]\n\nThe problem is that the original code is trying to copy 6 bytes of\ndata into a one-byte size member _config_ of the wrong structue\nFW_CONFIGURE_BUFFERS, in a single call to memcpy(). This causes a\nlegitimate compiler warning because memcpy() overruns the length\nof &com.cmd.ConfigureBuffers.config. It seems that the right\nstructure is FW_CONFIGURE_FREE_BUFFERS, instead, because it contains\n6 more members apart from the header _hdr_. Also, the name of\nthe function ngene_command_config_free_buf() suggests that the actual\nintention is to ConfigureFreeBuffers, instead of ConfigureBuffers\n(which takes place in the function ngene_command_config_buf(), above).\n\nFix this by enclosing those 6 members of struct FW_CONFIGURE_FREE_BUFFERS\ninto new struct config, and use &com.cmd.ConfigureFreeBuffers.config as\nthe destination address, instead of &com.cmd.ConfigureBuffers.config,\nwhen calling memcpy().\n\nThis also helps with the ongoing efforts to globally enable\n-Warray-bounds and get us closer to being able to tighten the\nFORTIFY_SOURCE routines on memcpy().\n\nLink: https://github.com/KSPP/linux/issues/109\nFixes: dae52d009fc9 (\"V4L/DVB: ngene: Initial check-in\")\nCc: stable@vger.kernel.org\nReported-by: kernel test robot <lkp@intel.com>\nReviewed-by: Kees Cook <keescook@chromium.org>\nSigned-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>\nLink: https://lore.kernel.org/linux-hardening/20210420001631.GA45456@embeddedor/",
  "full_message": "media: ngene: Fix out-of-bounds bug in ngene_command_config_free_buf()\n\nFix an 11-year old bug in ngene_command_config_free_buf() while\naddressing the following warnings caught with -Warray-bounds:\n\narch/alpha/include/asm/string.h:22:16: warning: '__builtin_memcpy' offset [12, 16] from the object at 'com' is out of the bounds of referenced subobject 'config' with type 'unsigned char' at offset 10 [-Warray-bounds]\narch/x86/include/asm/string_32.h:182:25: warning: '__builtin_memcpy' offset [12, 16] from the object at 'com' is out of the bounds of referenced subobject 'config' with type 'unsigned char' at offset 10 [-Warray-bounds]\n\nThe problem is that the original code is trying to copy 6 bytes of\ndata into a one-byte size member _config_ of the wrong structue\nFW_CONFIGURE_BUFFERS, in a single call to memcpy(). This causes a\nlegitimate compiler warning because memcpy() overruns the length\nof &com.cmd.ConfigureBuffers.config. It seems that the right\nstructure is FW_CONFIGURE_FREE_BUFFERS, instead, because it contains\n6 more members apart from the header _hdr_. Also, the name of\nthe function ngene_command_config_free_buf() suggests that the actual\nintention is to ConfigureFreeBuffers, instead of ConfigureBuffers\n(which takes place in the function ngene_command_config_buf(), above).\n\nFix this by enclosing those 6 members of struct FW_CONFIGURE_FREE_BUFFERS\ninto new struct config, and use &com.cmd.ConfigureFreeBuffers.config as\nthe destination address, instead of &com.cmd.ConfigureBuffers.config,\nwhen calling memcpy().\n\nThis also helps with the ongoing efforts to globally enable\n-Warray-bounds and get us closer to being able to tighten the\nFORTIFY_SOURCE routines on memcpy().\n\nLink: https://github.com/KSPP/linux/issues/109\nFixes: dae52d009fc9 (\"V4L/DVB: ngene: Initial check-in\")\nCc: stable@vger.kernel.org\nReported-by: kernel test robot <lkp@intel.com>\nReviewed-by: Kees Cook <keescook@chromium.org>\nSigned-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>\nLink: https://lore.kernel.org/linux-hardening/20210420001631.GA45456@embeddedor/",
  "author_name": "Gustavo A. R. Silva",
  "author_email": "gustavoars@kernel.org",
  "author_date": "Mon Apr 19 18:43:32 2021 -0500",
  "author_date_iso": "2021-04-19T18:43:32-05:00",
  "committer_name": "Gustavo A. R. Silva",
  "committer_email": "gustavoars@kernel.org",
  "committer_date": "Mon Jul 19 19:33:46 2021 -0500",
  "committer_date_iso": "2021-07-19T19:33:46-05:00",
  "files_changed": [
    "drivers/media/pci/ngene/ngene-core.c",
    "drivers/media/pci/ngene/ngene.h"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "drivers/media/pci/ngene/ngene-core.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "drivers/media/pci/ngene/ngene.h",
      "insertions": 8,
      "deletions": 6
    }
  ],
  "total_insertions": 9,
  "total_deletions": 7,
  "total_changes": 16,
  "parents": [
    "2734d6c1b1a089fb593ef6a23d4b70903526fe0c"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/media/pci/ngene/ngene-core.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/media/pci/ngene/ngene.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}