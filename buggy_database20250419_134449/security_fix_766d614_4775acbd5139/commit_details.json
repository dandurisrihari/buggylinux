{
  "hash": "766d61412ef840295f55e98e2c5fb0fc110c6ca4",
  "hash_short": "766d6141",
  "subject": "block, bfq: reset inject limit when think-time state changes",
  "body": "Until the base value of the request service times gets finally\ncomputed for a bfq_queue, the inject limit does depend on the\nthink-time state (short|long). The limit must be 0 or 1 if the think\ntime is deemed, respectively, as short or long. However, such a check\nand possible limit update is performed only periodically, once per\nsecond. So, to make the injection mechanism much more reactive, this\ncommit performs the update also every time the think-time state\nchanges.\n\nIn addition, in the following special case, this commit lets the\ninject limit of a bfq_queue bfqq remain equal to 1 even if bfqq's\nthink time is short: bfqq's I/O is synchronized with that of some\nother queue, i.e., bfqq may receive new I/O only after the I/O of the\nother queue is completed. Keeping the inject limit to 1 allows the\nblocking I/O to be served while bfqq is in service. And this is very\nconvenient both for bfqq and for the total throughput, as explained\nin detail in the comments in bfq_update_has_short_ttime().\n\nReported-by: Srivatsa S. Bhat (VMware) <srivatsa@csail.mit.edu>\nTested-by: Srivatsa S. Bhat (VMware) <srivatsa@csail.mit.edu>\nSigned-off-by: Paolo Valente <paolo.valente@linaro.org>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
  "full_message": "block, bfq: reset inject limit when think-time state changes\n\nUntil the base value of the request service times gets finally\ncomputed for a bfq_queue, the inject limit does depend on the\nthink-time state (short|long). The limit must be 0 or 1 if the think\ntime is deemed, respectively, as short or long. However, such a check\nand possible limit update is performed only periodically, once per\nsecond. So, to make the injection mechanism much more reactive, this\ncommit performs the update also every time the think-time state\nchanges.\n\nIn addition, in the following special case, this commit lets the\ninject limit of a bfq_queue bfqq remain equal to 1 even if bfqq's\nthink time is short: bfqq's I/O is synchronized with that of some\nother queue, i.e., bfqq may receive new I/O only after the I/O of the\nother queue is completed. Keeping the inject limit to 1 allows the\nblocking I/O to be served while bfqq is in service. And this is very\nconvenient both for bfqq and for the total throughput, as explained\nin detail in the comments in bfq_update_has_short_ttime().\n\nReported-by: Srivatsa S. Bhat (VMware) <srivatsa@csail.mit.edu>\nTested-by: Srivatsa S. Bhat (VMware) <srivatsa@csail.mit.edu>\nSigned-off-by: Paolo Valente <paolo.valente@linaro.org>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
  "author_name": "Paolo Valente",
  "author_email": "paolo.valente@linaro.org",
  "author_date": "Tue Jun 25 07:12:43 2019 +0200",
  "author_date_iso": "2019-06-25T07:12:43+02:00",
  "committer_name": "Jens Axboe",
  "committer_email": "axboe@kernel.dk",
  "committer_date": "Tue Jun 25 09:07:34 2019 -0600",
  "committer_date_iso": "2019-06-25T09:07:34-06:00",
  "files_changed": [
    "block/bfq-iosched.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "block/bfq-iosched.c",
      "insertions": 151,
      "deletions": 68
    }
  ],
  "total_insertions": 151,
  "total_deletions": 68,
  "total_changes": 219,
  "parents": [
    "6b2c8e522c8980fedfd24f3d1e69c3bccdb9414d"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.3",
    "v5.3-rc1",
    "v5.3-rc2",
    "v5.3-rc3",
    "v5.3-rc4",
    "v5.3-rc5",
    "v5.3-rc6",
    "v5.3-rc7",
    "v5.3-rc8",
    "v5.4"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "inject"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "block/bfq-iosched.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}