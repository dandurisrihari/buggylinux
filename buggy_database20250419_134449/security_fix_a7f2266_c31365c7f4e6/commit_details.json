{
  "hash": "a7f226604170acd6b142b76472c1a49c12ebb83d",
  "hash_short": "a7f22660",
  "subject": "mm/gup: trigger FAULT_FLAG_UNSHARE when R/O-pinning a possibly shared anonymous page",
  "body": "Whenever GUP currently ends up taking a R/O pin on an anonymous page that\nmight be shared -- mapped R/O and !PageAnonExclusive() -- any write fault\non the page table entry will end up replacing the mapped anonymous page\ndue to COW, resulting in the GUP pin no longer being consistent with the\npage actually mapped into the page table.\n\nThe possible ways to deal with this situation are:\n (1) Ignore and pin -- what we do right now.\n (2) Fail to pin -- which would be rather surprising to callers and\n     could break user space.\n (3) Trigger unsharing and pin the now exclusive page -- reliable R/O\n     pins.\n\nLet's implement 3) because it provides the clearest semantics and allows\nfor checking in unpin_user_pages() and friends for possible BUGs: when\ntrying to unpin a page that's no longer exclusive, clearly something went\nvery wrong and might result in memory corruptions that might be hard to\ndebug.  So we better have a nice way to spot such issues.\n\nThis change implies that whenever user space *wrote* to a private mapping\n(IOW, we have an anonymous page mapped), that GUP pins will always remain\nconsistent: reliable R/O GUP pins of anonymous pages.\n\nAs a side note, this commit fixes the COW security issue for hugetlb with\nFOLL_PIN as documented in:\n  https://lore.kernel.org/r/3ae33b08-d9ef-f846-56fb-645e3b9b4c66@redhat.com\nThe vmsplice reproducer still applies, because vmsplice uses FOLL_GET\ninstead of FOLL_PIN.\n\nNote that follow_huge_pmd() doesn't apply because we cannot end up in\nthere with FOLL_PIN.\n\nThis commit is heavily based on prototype patches by Andrea.\n\nLink: https://lkml.kernel.org/r/20220428083441.37290-17-david@redhat.com\nSigned-off-by: Andrea Arcangeli <aarcange@redhat.com>\nSigned-off-by: David Hildenbrand <david@redhat.com>\nAcked-by: Vlastimil Babka <vbabka@suse.cz>\nCo-developed-by: Andrea Arcangeli <aarcange@redhat.com>\nCc: Christoph Hellwig <hch@lst.de>\nCc: David Rientjes <rientjes@google.com>\nCc: Don Dutile <ddutile@redhat.com>\nCc: Hugh Dickins <hughd@google.com>\nCc: Jan Kara <jack@suse.cz>\nCc: Jann Horn <jannh@google.com>\nCc: Jason Gunthorpe <jgg@nvidia.com>\nCc: John Hubbard <jhubbard@nvidia.com>\nCc: Khalid Aziz <khalid.aziz@oracle.com>\nCc: \"Kirill A. Shutemov\" <kirill.shutemov@linux.intel.com>\nCc: Liang Zhang <zhangliang5@huawei.com>\nCc: \"Matthew Wilcox (Oracle)\" <willy@infradead.org>\nCc: Michal Hocko <mhocko@kernel.org>\nCc: Mike Kravetz <mike.kravetz@oracle.com>\nCc: Mike Rapoport <rppt@linux.ibm.com>\nCc: Nadav Amit <namit@vmware.com>\nCc: Oded Gabbay <oded.gabbay@gmail.com>\nCc: Oleg Nesterov <oleg@redhat.com>\nCc: Pedro Demarchi Gomes <pedrodemargomes@gmail.com>\nCc: Peter Xu <peterx@redhat.com>\nCc: Rik van Riel <riel@surriel.com>\nCc: Roman Gushchin <guro@fb.com>\nCc: Shakeel Butt <shakeelb@google.com>\nCc: Yang Shi <shy828301@gmail.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>",
  "full_message": "mm/gup: trigger FAULT_FLAG_UNSHARE when R/O-pinning a possibly shared anonymous page\n\nWhenever GUP currently ends up taking a R/O pin on an anonymous page that\nmight be shared -- mapped R/O and !PageAnonExclusive() -- any write fault\non the page table entry will end up replacing the mapped anonymous page\ndue to COW, resulting in the GUP pin no longer being consistent with the\npage actually mapped into the page table.\n\nThe possible ways to deal with this situation are:\n (1) Ignore and pin -- what we do right now.\n (2) Fail to pin -- which would be rather surprising to callers and\n     could break user space.\n (3) Trigger unsharing and pin the now exclusive page -- reliable R/O\n     pins.\n\nLet's implement 3) because it provides the clearest semantics and allows\nfor checking in unpin_user_pages() and friends for possible BUGs: when\ntrying to unpin a page that's no longer exclusive, clearly something went\nvery wrong and might result in memory corruptions that might be hard to\ndebug.  So we better have a nice way to spot such issues.\n\nThis change implies that whenever user space *wrote* to a private mapping\n(IOW, we have an anonymous page mapped), that GUP pins will always remain\nconsistent: reliable R/O GUP pins of anonymous pages.\n\nAs a side note, this commit fixes the COW security issue for hugetlb with\nFOLL_PIN as documented in:\n  https://lore.kernel.org/r/3ae33b08-d9ef-f846-56fb-645e3b9b4c66@redhat.com\nThe vmsplice reproducer still applies, because vmsplice uses FOLL_GET\ninstead of FOLL_PIN.\n\nNote that follow_huge_pmd() doesn't apply because we cannot end up in\nthere with FOLL_PIN.\n\nThis commit is heavily based on prototype patches by Andrea.\n\nLink: https://lkml.kernel.org/r/20220428083441.37290-17-david@redhat.com\nSigned-off-by: Andrea Arcangeli <aarcange@redhat.com>\nSigned-off-by: David Hildenbrand <david@redhat.com>\nAcked-by: Vlastimil Babka <vbabka@suse.cz>\nCo-developed-by: Andrea Arcangeli <aarcange@redhat.com>\nCc: Christoph Hellwig <hch@lst.de>\nCc: David Rientjes <rientjes@google.com>\nCc: Don Dutile <ddutile@redhat.com>\nCc: Hugh Dickins <hughd@google.com>\nCc: Jan Kara <jack@suse.cz>\nCc: Jann Horn <jannh@google.com>\nCc: Jason Gunthorpe <jgg@nvidia.com>\nCc: John Hubbard <jhubbard@nvidia.com>\nCc: Khalid Aziz <khalid.aziz@oracle.com>\nCc: \"Kirill A. Shutemov\" <kirill.shutemov@linux.intel.com>\nCc: Liang Zhang <zhangliang5@huawei.com>\nCc: \"Matthew Wilcox (Oracle)\" <willy@infradead.org>\nCc: Michal Hocko <mhocko@kernel.org>\nCc: Mike Kravetz <mike.kravetz@oracle.com>\nCc: Mike Rapoport <rppt@linux.ibm.com>\nCc: Nadav Amit <namit@vmware.com>\nCc: Oded Gabbay <oded.gabbay@gmail.com>\nCc: Oleg Nesterov <oleg@redhat.com>\nCc: Pedro Demarchi Gomes <pedrodemargomes@gmail.com>\nCc: Peter Xu <peterx@redhat.com>\nCc: Rik van Riel <riel@surriel.com>\nCc: Roman Gushchin <guro@fb.com>\nCc: Shakeel Butt <shakeelb@google.com>\nCc: Yang Shi <shy828301@gmail.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>",
  "author_name": "David Hildenbrand",
  "author_email": "david@redhat.com",
  "author_date": "Mon May 9 18:20:45 2022 -0700",
  "author_date_iso": "2022-05-09T18:20:45-07:00",
  "committer_name": "akpm",
  "committer_email": "akpm@linux-foundation.org",
  "committer_date": "Mon May 9 18:20:45 2022 -0700",
  "committer_date_iso": "2022-05-09T18:20:45-07:00",
  "files_changed": [
    "include/linux/mm.h",
    "mm/gup.c",
    "mm/huge_memory.c",
    "mm/hugetlb.c"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "include/linux/mm.h",
      "insertions": 39,
      "deletions": 0
    },
    {
      "file": "mm/gup.c",
      "insertions": 39,
      "deletions": 3
    },
    {
      "file": "mm/huge_memory.c",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "mm/hugetlb.c",
      "insertions": 24,
      "deletions": 3
    }
  ],
  "total_insertions": 105,
  "total_deletions": 6,
  "total_changes": 111,
  "parents": [
    "c89357e27f20dda3fff6791d27bb6c91eae99f4a"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "security issue"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/linux/mm.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/gup.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/huge_memory.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/hugetlb.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}