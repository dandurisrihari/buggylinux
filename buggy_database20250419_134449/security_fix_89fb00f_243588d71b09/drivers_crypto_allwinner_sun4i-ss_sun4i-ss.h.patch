commit 89fb00f245681d0c951cd889d3d165cf9959d70c
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Tue Jul 7 09:31:54 2020 +0300

    crypto: sun4i - permit asynchronous skcipher as fallback
    
    Even though the sun4i driver implements asynchronous versions of ecb(aes)
    and cbc(aes), the fallbacks it allocates are required to be synchronous.
    Given that SIMD based software implementations are usually asynchronous
    as well, even though they rarely complete asynchronously (this typically
    only happens in cases where the request was made from softirq context,
    while SIMD was already in use in the task context that it interrupted),
    these implementations are disregarded, and either the generic C version
    or another table based version implemented in assembler is selected
    instead.
    
    Since falling back to synchronous AES is not only a performance issue, but
    potentially a security issue as well (due to the fact that table based AES
    is not time invariant), let's fix this, by allocating an ordinary skcipher
    as the fallback, and invoke it with the completion routine that was given
    to the outer request.
    
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Tested-by: Corentin Labbe <clabbe.montjoie@gmail.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

diff --git a/drivers/crypto/allwinner/sun4i-ss/sun4i-ss.h b/drivers/crypto/allwinner/sun4i-ss/sun4i-ss.h
index 2b4c6333eb67..163962f9e284 100644
--- a/drivers/crypto/allwinner/sun4i-ss/sun4i-ss.h
+++ b/drivers/crypto/allwinner/sun4i-ss/sun4i-ss.h
@@ -170,11 +170,12 @@ struct sun4i_tfm_ctx {
 	u32 keylen;
 	u32 keymode;
 	struct sun4i_ss_ctx *ss;
-	struct crypto_sync_skcipher *fallback_tfm;
+	struct crypto_skcipher *fallback_tfm;
 };
 
 struct sun4i_cipher_req_ctx {
 	u32 mode;
+	struct skcipher_request fallback_req;   // keep at the end
 };
 
 struct sun4i_req_ctx {