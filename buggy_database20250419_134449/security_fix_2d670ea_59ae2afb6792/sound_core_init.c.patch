commit 2d670ea2bd53a9792f453bb5b97cb8ef695988ff
Author: Hui Wang <hui.wang@canonical.com>
Date:   Wed Jan 27 16:56:39 2021 +0800

    ALSA: jack: implement software jack injection via debugfs
    
    This change adds audio jack injection feature through debugfs, with
    this feature, we could validate alsa userspace changes by injecting
    plugin or plugout events to the non-phantom audio jacks.
    
    With this change, the sound core will build the folders
    $debugfs_mount_dir/sound/cardN if SND_DEBUG and DEBUG_FS are enabled.
    And if users also enable the SND_JACK_INJECTION_DEBUG, the jack
    injection nodes will be built in the folder cardN like below:
    
    $tree $debugfs_mount_dir/sound
    $debugfs_mount_dir/sound
    ├── card0
    │   ├── HDMI_DP_pcm_10_Jack
    │   │   ├── jackin_inject
    │   │   ├── kctl_id
    │   │   ├── mask_bits
    │   │   ├── status
    │   │   ├── sw_inject_enable
    │   │   └── type
    ...
    │   └── HDMI_DP_pcm_9_Jack
    │       ├── jackin_inject
    │       ├── kctl_id
    │       ├── mask_bits
    │       ├── status
    │       ├── sw_inject_enable
    │       └── type
    └── card1
        ├── HDMI_DP_pcm_5_Jack
        │   ├── jackin_inject
        │   ├── kctl_id
        │   ├── mask_bits
        │   ├── status
        │   ├── sw_inject_enable
        │   └── type
        ...
        ├── Headphone_Jack
        │   ├── jackin_inject
        │   ├── kctl_id
        │   ├── mask_bits
        │   ├── status
        │   ├── sw_inject_enable
        │   └── type
        └── Headset_Mic_Jack
            ├── jackin_inject
            ├── kctl_id
            ├── mask_bits
            ├── status
            ├── sw_inject_enable
            └── type
    
    The nodes kctl_id, mask_bits, status and type are read-only, users
    could check jack or jack_kctl's information through them.
    
    The nodes sw_inject_enable and jackin_inject are directly used for
    injection. The sw_inject_enable is read-write, users could check if
    software injection is enabled or not on this jack, and users could
    echo 1 or 0 to enable or disable software injection on this jack. Once
    the injection is enabled, the jack will not change by hardware events
    anymore, once the injection is disabled, the jack will restore the
    last reported hardware events to the jack. The jackin_inject is
    write-only, if the injection is enabled, users could echo 1 or 0 to
    this node to inject plugin or plugout events to this jack.
    
    For the detailed usage information on these nodes, please refer to
    Documentation/sound/designs/jack-injection.rst.
    
    Reviewed-by: Takashi Iwai <tiwai@suse.de>
    Reviewed-by: Jaroslav Kysela <perex@perex.cz>
    Reviewed-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Signed-off-by: Hui Wang <hui.wang@canonical.com>
    Link: https://lore.kernel.org/r/20210127085639.74954-2-hui.wang@canonical.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/core/init.c b/sound/core/init.c
index 56834febc7a4..d4e78b176793 100644
--- a/sound/core/init.c
+++ b/sound/core/init.c
@@ -13,6 +13,7 @@
 #include <linux/time.h>
 #include <linux/ctype.h>
 #include <linux/pm.h>
+#include <linux/debugfs.h>
 #include <linux/completion.h>
 
 #include <sound/core.h>
@@ -161,6 +162,9 @@ int snd_card_new(struct device *parent, int idx, const char *xid,
 {
 	struct snd_card *card;
 	int err;
+#ifdef CONFIG_SND_DEBUG
+	char name[8];
+#endif
 
 	if (snd_BUG_ON(!card_ret))
 		return -EINVAL;
@@ -244,6 +248,12 @@ int snd_card_new(struct device *parent, int idx, const char *xid,
 		dev_err(parent, "unable to create card info\n");
 		goto __error_ctl;
 	}
+
+#ifdef CONFIG_SND_DEBUG
+	sprintf(name, "card%d", idx);
+	card->debugfs_root = debugfs_create_dir(name, sound_debugfs_root);
+#endif
+
 	*card_ret = card;
 	return 0;
 
@@ -526,6 +536,12 @@ int snd_card_free(struct snd_card *card)
 		return ret;
 	/* wait, until all devices are ready for the free operation */
 	wait_for_completion(&released);
+
+#ifdef CONFIG_SND_DEBUG
+	debugfs_remove(card->debugfs_root);
+	card->debugfs_root = NULL;
+#endif
+
 	return 0;
 }
 EXPORT_SYMBOL(snd_card_free);