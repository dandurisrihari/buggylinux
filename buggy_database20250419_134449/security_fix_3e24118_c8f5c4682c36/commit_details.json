{
  "hash": "3e24118ec1859afe2df18062e1ebdabc12e3b8c1",
  "hash_short": "3e24118e",
  "subject": "scsi: libfc: replace deprecated strncpy() with memcpy()",
  "body": "strncpy() is deprecated [1] and as such we should use different apis to\ncopy string data.\n\nWe can see that ct is NUL-initialized with fc_ct_hdr_fill:\n|       ct = fc_ct_hdr_fill(fp, op, sizeof(struct fc_ns_rspn) + len,\n...\n\nIn fc_ct_hdr_fill():\n|       memset(ct, 0, ct_plen);\n\nWe also calculate the length of the source string:\n|       len = strnlen(fc_host_symbolic_name(lport->host), 255);\n\n...then this argument is used in strncpy(), which is bad because the\npattern of (dest, src, strlen(src)) usually leaves the destination\nbuffer without NUL-termination. However, it looks as though we do not\nrequire NUL-termination since fr_name is part of a seq_buf-like\nstructure wherein its length is monitored:\n|       struct fc_ns_rspn {\n|       \tstruct fc_ns_fid fr_fid;\t/* port ID object */\n|       \t__u8\t\tfr_name_len;\n|       \tchar\t\tfr_name[];\n|       } __attribute__((__packed__));\n\nSo, this is really just a byte copy into a length-bounded buffer. Let's use\nmemcpy().\n\nLink: https://www.kernel.org/doc/html/latest/process/deprecated.html#strncpy-on-nul-terminated-strings [1]\nLink: https://github.com/KSPP/linux/issues/90\nCc: linux-hardening@vger.kernel.org\nSigned-off-by: Justin Stitt <justinstitt@google.com>\nLink: https://lore.kernel.org/r/20240221-strncpy-drivers-scsi-libfc-fc_encode-h-v2-1-019a0889c5ca@google.com\nReviewed-by: Kees Cook <keescook@chromium.org>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
  "full_message": "scsi: libfc: replace deprecated strncpy() with memcpy()\n\nstrncpy() is deprecated [1] and as such we should use different apis to\ncopy string data.\n\nWe can see that ct is NUL-initialized with fc_ct_hdr_fill:\n|       ct = fc_ct_hdr_fill(fp, op, sizeof(struct fc_ns_rspn) + len,\n...\n\nIn fc_ct_hdr_fill():\n|       memset(ct, 0, ct_plen);\n\nWe also calculate the length of the source string:\n|       len = strnlen(fc_host_symbolic_name(lport->host), 255);\n\n...then this argument is used in strncpy(), which is bad because the\npattern of (dest, src, strlen(src)) usually leaves the destination\nbuffer without NUL-termination. However, it looks as though we do not\nrequire NUL-termination since fr_name is part of a seq_buf-like\nstructure wherein its length is monitored:\n|       struct fc_ns_rspn {\n|       \tstruct fc_ns_fid fr_fid;\t/* port ID object */\n|       \t__u8\t\tfr_name_len;\n|       \tchar\t\tfr_name[];\n|       } __attribute__((__packed__));\n\nSo, this is really just a byte copy into a length-bounded buffer. Let's use\nmemcpy().\n\nLink: https://www.kernel.org/doc/html/latest/process/deprecated.html#strncpy-on-nul-terminated-strings [1]\nLink: https://github.com/KSPP/linux/issues/90\nCc: linux-hardening@vger.kernel.org\nSigned-off-by: Justin Stitt <justinstitt@google.com>\nLink: https://lore.kernel.org/r/20240221-strncpy-drivers-scsi-libfc-fc_encode-h-v2-1-019a0889c5ca@google.com\nReviewed-by: Kees Cook <keescook@chromium.org>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
  "author_name": "Justin Stitt",
  "author_email": "justinstitt@google.com",
  "author_date": "Wed Feb 21 23:50:26 2024 +0000",
  "author_date_iso": "2024-02-21T23:50:26+00:00",
  "committer_name": "Martin K. Petersen",
  "committer_email": "martin.petersen@oracle.com",
  "committer_date": "Mon Feb 26 21:21:23 2024 -0500",
  "committer_date_iso": "2024-02-26T21:21:23-05:00",
  "files_changed": [
    "drivers/scsi/libfc/fc_encode.h"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "drivers/scsi/libfc/fc_encode.h",
      "insertions": 8,
      "deletions": 6
    }
  ],
  "total_insertions": 8,
  "total_deletions": 6,
  "total_changes": 14,
  "parents": [
    "e100c01efa85c8a0ee7527bf28ef7ea7c3ca57e1"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/scsi/libfc/fc_encode.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}