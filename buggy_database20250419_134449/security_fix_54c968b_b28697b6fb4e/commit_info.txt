Commit Hash: 54c968bec344b101ba3596f2544f0f3b4c1eef2f
Subject: arm64: Apply dynamic shadow call stack patching in two passes


Security Keywords:
- authentication

Full commit message:
arm64: Apply dynamic shadow call stack patching in two passes

Code patching for the dynamically enabled shadow call stack comes down
to finding PACIASP and AUTIASP instructions -which behave as NOPs on
cores that do not implement pointer authentication- and converting them
into shadow call stack pushes and pops, respectively.

Due to past bad experiences with the highly complex and overengineered
DWARF standard that describes the unwind metadata that we are using to
locate these instructions, let's make this patching logic a little bit
more robust so that any issues with the unwind metadata detected at boot
time can de dealt with gracefully.

The DWARF annotations that are used for this are emitted at function
granularity, and due to the fact that the instructions we are patching
will simply behave as NOPs if left unpatched, we can abort on errors as
long as we don't leave any functions in a half-patched state.

So do a dry run of each FDE frame (covering a single function) before
performing the actual patching, and give up if the DWARF metadata cannot
be understood.

Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
Acked-by: Will Deacon <will@kernel.org>
Reviewed-by: Sami Tolvanen <samitolvanen@google.com>
Link: https://lore.kernel.org/r/20221213142849.1629026-1-ardb@kernel.org
Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>

Metadata:
Author: Ard Biesheuvel <ardb@kernel.org>
Author Date: Tue Dec 13 15:28:49 2022 +0100
Committer: Catalin Marinas <catalin.marinas@arm.com>
Commit Date: Thu Jan 26 17:54:15 2023 +0000

Files Changed: 1
Lines Added: 8
Lines Removed: 3
Total Changes: 11
