{
  "hash": "13ec9308a85702af7c31f3638a2720863848a7f2",
  "hash_short": "13ec9308",
  "subject": "KVM: arm64: Retry fault if vma_lookup() results become invalid",
  "body": "Read mmu_invalidate_seq before dropping the mmap_lock so that KVM can\ndetect if the results of vma_lookup() (e.g. vma_shift) become stale\nbefore it acquires kvm->mmu_lock. This fixes a theoretical bug where a\nVMA could be changed by userspace after vma_lookup() and before KVM\nreads the mmu_invalidate_seq, causing KVM to install page table entries\nbased on a (possibly) no-longer-valid vma_shift.\n\nRe-order the MMU cache top-up to earlier in user_mem_abort() so that it\nis not done after KVM has read mmu_invalidate_seq (i.e. so as to avoid\ninducing spurious fault retries).\n\nThis bug has existed since KVM/ARM's inception. It's unlikely that any\nsane userspace currently modifies VMAs in such a way as to trigger this\nrace. And even with directed testing I was unable to reproduce it. But a\nsufficiently motivated host userspace might be able to exploit this\nrace.\n\nFixes: 94f8e6418d39 (\"KVM: ARM: Handle guest faults in KVM\")\nCc: stable@vger.kernel.org\nReported-by: Sean Christopherson <seanjc@google.com>\nSigned-off-by: David Matlack <dmatlack@google.com>\nReviewed-by: Marc Zyngier <maz@kernel.org>\nLink: https://lore.kernel.org/r/20230313235454.2964067-1-dmatlack@google.com\nSigned-off-by: Oliver Upton <oliver.upton@linux.dev>",
  "full_message": "KVM: arm64: Retry fault if vma_lookup() results become invalid\n\nRead mmu_invalidate_seq before dropping the mmap_lock so that KVM can\ndetect if the results of vma_lookup() (e.g. vma_shift) become stale\nbefore it acquires kvm->mmu_lock. This fixes a theoretical bug where a\nVMA could be changed by userspace after vma_lookup() and before KVM\nreads the mmu_invalidate_seq, causing KVM to install page table entries\nbased on a (possibly) no-longer-valid vma_shift.\n\nRe-order the MMU cache top-up to earlier in user_mem_abort() so that it\nis not done after KVM has read mmu_invalidate_seq (i.e. so as to avoid\ninducing spurious fault retries).\n\nThis bug has existed since KVM/ARM's inception. It's unlikely that any\nsane userspace currently modifies VMAs in such a way as to trigger this\nrace. And even with directed testing I was unable to reproduce it. But a\nsufficiently motivated host userspace might be able to exploit this\nrace.\n\nFixes: 94f8e6418d39 (\"KVM: ARM: Handle guest faults in KVM\")\nCc: stable@vger.kernel.org\nReported-by: Sean Christopherson <seanjc@google.com>\nSigned-off-by: David Matlack <dmatlack@google.com>\nReviewed-by: Marc Zyngier <maz@kernel.org>\nLink: https://lore.kernel.org/r/20230313235454.2964067-1-dmatlack@google.com\nSigned-off-by: Oliver Upton <oliver.upton@linux.dev>",
  "author_name": "David Matlack",
  "author_email": "dmatlack@google.com",
  "author_date": "Mon Mar 13 16:54:54 2023 -0700",
  "author_date_iso": "2023-03-13T16:54:54-07:00",
  "committer_name": "Oliver Upton",
  "committer_email": "oliver.upton@linux.dev",
  "committer_date": "Tue Mar 14 16:47:10 2023 +0000",
  "committer_date_iso": "2023-03-14T16:47:10+00:00",
  "files_changed": [
    "arch/arm64/kvm/mmu.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/arm64/kvm/mmu.c",
      "insertions": 21,
      "deletions": 27
    }
  ],
  "total_insertions": 21,
  "total_deletions": 27,
  "total_changes": 48,
  "parents": [
    "f6da81f650fa47b61b847488f3938d43f90d093d"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/arm64/kvm/mmu.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}