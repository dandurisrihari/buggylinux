{
  "hash": "1e207964566738b49b003e80063fd712af75b82c",
  "hash_short": "1e207964",
  "subject": "crypto: dh - implement private key generation primitive for ffdheXYZ(dh)",
  "body": "The support for NVME in-band authentication currently in the works ([1])\nneeds to generate ephemeral DH keys for use with the RFC 7919 safe-prime\nFFDHE groups.\n\nIn analogy to ECDH and its ecc_gen_privkey(), implement a\ndh_safe_prime_gen_privkey() and invoke it from the ffdheXYZ(dh) templates'\ncommon ->set_secret(), i.e. dh_safe_prime_set_secret(), in case the input\n->key_size is zero.\n\nAs the RFC 7919 FFDHE groups are classified as approved safe-prime groups\nby SP800-56Arev3, it's worthwhile to make the new\ndh_safe_prime_gen_privkey() to follow the approach specified in\nSP800-56Arev3, sec. 5.6.1.1.3 (\"Key-Pair Generation Using Extra Random\nBits\") in order to achieve conformance.\n\nSP800-56Arev3 specifies a lower as well as an upper bound on the generated\nkey's length:\n- it must be >= two times the maximum supported security strength of\n  the group in question and\n- it must be <= the length of the domain parameter Q.\n\nFor any safe-prime group Q = (P - 1)/2 by definition and the individual\nmaximum supported security strengths as specified by SP800-56Arev3 have\nbeen made available as part of the FFDHE dh_safe_prime definitions\nintroduced with a previous patch. Make dh_safe_prime_gen_privkey() pick\ntwice the maximum supported strength rounded up to the next power of two\nfor the output key size. This choice respects both, the lower and upper\nbounds given by SP800-90Arev3 for any of the approved safe-prime groups and\nis also in line with the NVME base spec 2.0, which requires the key size to\nbe >= 256bits.\n\n[1] https://lore.kernel.org/r/20211202152358.60116-1-hare@suse.de\n\nSigned-off-by: Nicolai Stange <nstange@suse.de>\nReviewed-by: Hannes Reinecke <hare@suse.de>\nSigned-off-by: Herbert Xu <herbert@gondor.apana.org.au>",
  "full_message": "crypto: dh - implement private key generation primitive for ffdheXYZ(dh)\n\nThe support for NVME in-band authentication currently in the works ([1])\nneeds to generate ephemeral DH keys for use with the RFC 7919 safe-prime\nFFDHE groups.\n\nIn analogy to ECDH and its ecc_gen_privkey(), implement a\ndh_safe_prime_gen_privkey() and invoke it from the ffdheXYZ(dh) templates'\ncommon ->set_secret(), i.e. dh_safe_prime_set_secret(), in case the input\n->key_size is zero.\n\nAs the RFC 7919 FFDHE groups are classified as approved safe-prime groups\nby SP800-56Arev3, it's worthwhile to make the new\ndh_safe_prime_gen_privkey() to follow the approach specified in\nSP800-56Arev3, sec. 5.6.1.1.3 (\"Key-Pair Generation Using Extra Random\nBits\") in order to achieve conformance.\n\nSP800-56Arev3 specifies a lower as well as an upper bound on the generated\nkey's length:\n- it must be >= two times the maximum supported security strength of\n  the group in question and\n- it must be <= the length of the domain parameter Q.\n\nFor any safe-prime group Q = (P - 1)/2 by definition and the individual\nmaximum supported security strengths as specified by SP800-56Arev3 have\nbeen made available as part of the FFDHE dh_safe_prime definitions\nintroduced with a previous patch. Make dh_safe_prime_gen_privkey() pick\ntwice the maximum supported strength rounded up to the next power of two\nfor the output key size. This choice respects both, the lower and upper\nbounds given by SP800-90Arev3 for any of the approved safe-prime groups and\nis also in line with the NVME base spec 2.0, which requires the key size to\nbe >= 256bits.\n\n[1] https://lore.kernel.org/r/20211202152358.60116-1-hare@suse.de\n\nSigned-off-by: Nicolai Stange <nstange@suse.de>\nReviewed-by: Hannes Reinecke <hare@suse.de>\nSigned-off-by: Herbert Xu <herbert@gondor.apana.org.au>",
  "author_name": "Nicolai Stange",
  "author_email": "nstange@suse.de",
  "author_date": "Mon Feb 21 13:10:55 2022 +0100",
  "author_date_iso": "2022-02-21T13:10:55+01:00",
  "committer_name": "Herbert Xu",
  "committer_email": "herbert@gondor.apana.org.au",
  "committer_date": "Thu Mar 3 10:47:51 2022 +1200",
  "committer_date_iso": "2022-03-03T10:47:51+12:00",
  "files_changed": [
    "crypto/Kconfig",
    "crypto/dh.c"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "crypto/Kconfig",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "crypto/dh.c",
      "insertions": 137,
      "deletions": 3
    }
  ],
  "total_insertions": 138,
  "total_deletions": 3,
  "total_changes": 141,
  "parents": [
    "60a273e9aecd8ee8a7d84f78f366795a67607829"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "crypto/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "crypto/dh.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}