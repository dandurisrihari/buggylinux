commit e60adf513275c3a38e5cb67f7fd12387e43a3ff5
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Fri Mar 8 06:38:08 2024 +0100

    bpf: Take return from set_memory_rox() into account with bpf_jit_binary_lock_ro()
    
    set_memory_rox() can fail, leaving memory unprotected.
    
    Check return and bail out when bpf_jit_binary_lock_ro() returns
    an error.
    
    Link: https://github.com/KSPP/linux/issues/7
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Cc: linux-hardening@vger.kernel.org <linux-hardening@vger.kernel.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Puranjay Mohan <puranjay12@gmail.com>
    Reviewed-by: Ilya Leoshkevich <iii@linux.ibm.com>  # s390x
    Acked-by: Tiezhu Yang <yangtiezhu@loongson.cn>  # LoongArch
    Reviewed-by: Johan Almbladh <johan.almbladh@anyfinetworks.com> # MIPS Part
    Message-ID: <036b6393f23a2032ce75a1c92220b2afcb798d5d.1709850515.git.christophe.leroy@csgroup.eu>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/arch/x86/net/bpf_jit_comp32.c b/arch/x86/net/bpf_jit_comp32.c
index c10083a8e68e..de0f9e5f9f73 100644
--- a/arch/x86/net/bpf_jit_comp32.c
+++ b/arch/x86/net/bpf_jit_comp32.c
@@ -2600,8 +2600,7 @@ struct bpf_prog *bpf_int_jit_compile(struct bpf_prog *prog)
 	if (bpf_jit_enable > 1)
 		bpf_jit_dump(prog->len, proglen, pass + 1, image);
 
-	if (image) {
-		bpf_jit_binary_lock_ro(header);
+	if (image && !bpf_jit_binary_lock_ro(header)) {
 		prog->bpf_func = (void *)image;
 		prog->jited = 1;
 		prog->jited_len = proglen;