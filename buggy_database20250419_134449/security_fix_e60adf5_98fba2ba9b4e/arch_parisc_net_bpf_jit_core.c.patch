commit e60adf513275c3a38e5cb67f7fd12387e43a3ff5
Author: Christophe Leroy <christophe.leroy@csgroup.eu>
Date:   Fri Mar 8 06:38:08 2024 +0100

    bpf: Take return from set_memory_rox() into account with bpf_jit_binary_lock_ro()
    
    set_memory_rox() can fail, leaving memory unprotected.
    
    Check return and bail out when bpf_jit_binary_lock_ro() returns
    an error.
    
    Link: https://github.com/KSPP/linux/issues/7
    Signed-off-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Cc: linux-hardening@vger.kernel.org <linux-hardening@vger.kernel.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Puranjay Mohan <puranjay12@gmail.com>
    Reviewed-by: Ilya Leoshkevich <iii@linux.ibm.com>  # s390x
    Acked-by: Tiezhu Yang <yangtiezhu@loongson.cn>  # LoongArch
    Reviewed-by: Johan Almbladh <johan.almbladh@anyfinetworks.com> # MIPS Part
    Message-ID: <036b6393f23a2032ce75a1c92220b2afcb798d5d.1709850515.git.christophe.leroy@csgroup.eu>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>

diff --git a/arch/parisc/net/bpf_jit_core.c b/arch/parisc/net/bpf_jit_core.c
index d6ee2fd45550..979f45d4d1fb 100644
--- a/arch/parisc/net/bpf_jit_core.c
+++ b/arch/parisc/net/bpf_jit_core.c
@@ -167,7 +167,13 @@ struct bpf_prog *bpf_int_jit_compile(struct bpf_prog *prog)
 	bpf_flush_icache(jit_data->header, ctx->insns + ctx->ninsns);
 
 	if (!prog->is_func || extra_pass) {
-		bpf_jit_binary_lock_ro(jit_data->header);
+		if (bpf_jit_binary_lock_ro(jit_data->header)) {
+			bpf_jit_binary_free(jit_data->header);
+			prog->bpf_func = NULL;
+			prog->jited = 0;
+			prog->jited_len = 0;
+			goto out_offset;
+		}
 		prologue_len = ctx->epilogue_offset - ctx->body_len;
 		for (i = 0; i < prog->len; i++)
 			ctx->offset[i] += prologue_len;