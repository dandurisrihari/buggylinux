commit b2ac7541e3777f325c49d900550c9e3dd10c0eda
Author: Raed Salem <raeds@mellanox.com>
Date:   Thu Oct 24 16:11:28 2019 +0300

    net/mlx5e: IPsec: Add Connect-X IPsec Rx data path offload
    
    On receive flow inspect received packets for IPsec offload indication
    using the cqe, for IPsec offloaded packets propagate offload status
    and stack handle to stack for further processing.
    
    Supported statuses:
    - Offload ok.
    - Authentication failure.
    - Bad trailer indication.
    
    Connect-X IPsec does not use mlx5e_ipsec_handle_rx_cqe.
    
    For RX only offload, we see the BW gain. Below is the iperf3
    performance report on two server of 24 cores Intel(R) Xeon(R)
    CPU E5-2620 v3 @ 2.40GHz with ConnectX6-DX.
    We use one thread per IPsec tunnel.
    
    ---------------------------------------------------------------------
    Mode          |  Num tunnel | BW     | Send CPU util | Recv CPU util
                  |             | (Gbps) | (Average %)   | (Average %)
    ---------------------------------------------------------------------
    Cryto offload | 1           | 4.6    | 4.2           | 14.5
    ---------------------------------------------------------------------
    Cryto offload | 24          | 38     | 73            | 63
    ---------------------------------------------------------------------
    Non-offload   | 1           | 4      | 4             | 13
    ---------------------------------------------------------------------
    Non-offload   | 24          | 23     | 52            | 67
    
    Signed-off-by: Raed Salem <raeds@mellanox.com>
    Reviewed-by: Boris Pismenny <borisp@mellanox.com>
    Reviewed-by: Tariq Toukan <tariqt@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_rxtx.h b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_rxtx.h
index ba02643586a5..2a47673da5a4 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_rxtx.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec_rxtx.h
@@ -34,13 +34,17 @@
 #ifndef __MLX5E_IPSEC_RXTX_H__
 #define __MLX5E_IPSEC_RXTX_H__
 
-#ifdef CONFIG_MLX5_EN_IPSEC
-
 #include <linux/skbuff.h>
 #include <net/xfrm.h>
 #include "en.h"
 #include "en/txrx.h"
 
+#define MLX5_IPSEC_METADATA_MARKER_MASK      (0x80)
+#define MLX5_IPSEC_METADATA_SYNDROM_MASK     (0x7F)
+#define MLX5_IPSEC_METADATA_HANDLE(metadata) (((metadata) >> 8) & 0xFF)
+
+#ifdef CONFIG_MLX5_EN_IPSEC
+
 struct sk_buff *mlx5e_ipsec_handle_rx_skb(struct net_device *netdev,
 					  struct sk_buff *skb, u32 *cqe_bcnt);
 void mlx5e_ipsec_handle_rx_cqe(struct mlx5e_rq *rq, struct mlx5_cqe64 *cqe);
@@ -55,7 +59,21 @@ void mlx5e_ipsec_set_iv(struct sk_buff *skb, struct xfrm_state *x,
 bool mlx5e_ipsec_handle_tx_skb(struct mlx5e_priv *priv,
 			       struct mlx5_wqe_eth_seg *eseg,
 			       struct sk_buff *skb);
+void mlx5e_ipsec_offload_handle_rx_skb(struct net_device *netdev,
+				       struct sk_buff *skb,
+				       struct mlx5_cqe64 *cqe);
+static inline bool mlx5_ipsec_is_rx_flow(struct mlx5_cqe64 *cqe)
+{
+	return !!(MLX5_IPSEC_METADATA_MARKER_MASK & be32_to_cpu(cqe->ft_metadata));
+}
+#else
+static inline
+void mlx5e_ipsec_offload_handle_rx_skb(struct net_device *netdev,
+				       struct sk_buff *skb,
+				       struct mlx5_cqe64 *cqe)
+{}
 
+static inline bool mlx5_ipsec_is_rx_flow(struct mlx5_cqe64 *cqe) { return false; }
 #endif /* CONFIG_MLX5_EN_IPSEC */
 
 #endif /* __MLX5E_IPSEC_RXTX_H__ */