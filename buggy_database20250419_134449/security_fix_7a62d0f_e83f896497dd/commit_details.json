{
  "hash": "7a62d0f07377b51a9033eb12fa537c264bcba3e5",
  "hash_short": "7a62d0f0",
  "subject": "btrfs: Handle one more split-brain scenario during fsid change",
  "body": "This commit continues hardening the scanning code to handle cases where\npower loss could have caused disks in a multi-disk filesystem to be\nin inconsistent state. Namely handle the situation that can occur when\nsome of the disks in multi-disk fs have completed their fsid change i.e\nthey have METADATA_UUID incompat flag set, have cleared the\nCHANGING_FSID_V2 flag and their fsid/metadata_uuid are different. At\nthe same time the other half of the disks will have their\nfsid/metadata_uuid unchanged and will only have CHANGING_FSID_V2 flag.\n\nThis is handled by introducing code in the scan path which:\n\n a) Handles the case when a device with CHANGING_FSID_V2 flag is\n scanned and as a result btrfs_fs_devices is created with matching\n fsid/metdata_uuid. Subsequently, when a device with completed fsid\n change is scanned it will detect this via the new code in find_fsid\n i.e that such an fs_devices exist that fsid_change flag is set to true,\n it's metadata_uuid/fsid match and the metadata_uuid of the scanned\n device matches that of the fs_devices. In this case, it's important to\n note that the devices which has its fsid change completed will have a\n higher generation number than the device with FSID_CHANGING_V2 flag\n set, so its superblock block will be used during mount. To prevent an\n assertion triggering because the sb used for mounting will have\n differing fsid/metadata_uuid than the ones in the fs_devices struct\n also add code in device_list_add which overwrites the values in\n fs_devices.\n\n b) Alternatively we can end up with a device that completed its\n fsid change be scanned first which will create the respective\n btrfs_fs_devices struct with differing fsid/metadata_uuid. In this\n case when a device with FSID_CHANGING_V2 flag set is scanned it will\n call the newly added find_fsid_inprogress function which will return\n the correct fs_devices.\n\nSigned-off-by: Nikolay Borisov <nborisov@suse.com>\nReviewed-by: David Sterba <dsterba@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>",
  "full_message": "btrfs: Handle one more split-brain scenario during fsid change\n\nThis commit continues hardening the scanning code to handle cases where\npower loss could have caused disks in a multi-disk filesystem to be\nin inconsistent state. Namely handle the situation that can occur when\nsome of the disks in multi-disk fs have completed their fsid change i.e\nthey have METADATA_UUID incompat flag set, have cleared the\nCHANGING_FSID_V2 flag and their fsid/metadata_uuid are different. At\nthe same time the other half of the disks will have their\nfsid/metadata_uuid unchanged and will only have CHANGING_FSID_V2 flag.\n\nThis is handled by introducing code in the scan path which:\n\n a) Handles the case when a device with CHANGING_FSID_V2 flag is\n scanned and as a result btrfs_fs_devices is created with matching\n fsid/metdata_uuid. Subsequently, when a device with completed fsid\n change is scanned it will detect this via the new code in find_fsid\n i.e that such an fs_devices exist that fsid_change flag is set to true,\n it's metadata_uuid/fsid match and the metadata_uuid of the scanned\n device matches that of the fs_devices. In this case, it's important to\n note that the devices which has its fsid change completed will have a\n higher generation number than the device with FSID_CHANGING_V2 flag\n set, so its superblock block will be used during mount. To prevent an\n assertion triggering because the sb used for mounting will have\n differing fsid/metadata_uuid than the ones in the fs_devices struct\n also add code in device_list_add which overwrites the values in\n fs_devices.\n\n b) Alternatively we can end up with a device that completed its\n fsid change be scanned first which will create the respective\n btrfs_fs_devices struct with differing fsid/metadata_uuid. In this\n case when a device with FSID_CHANGING_V2 flag set is scanned it will\n call the newly added find_fsid_inprogress function which will return\n the correct fs_devices.\n\nSigned-off-by: Nikolay Borisov <nborisov@suse.com>\nReviewed-by: David Sterba <dsterba@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>",
  "author_name": "Nikolay Borisov",
  "author_email": "nborisov@suse.com",
  "author_date": "Tue Oct 30 16:43:27 2018 +0200",
  "author_date_iso": "2018-10-30T16:43:27+02:00",
  "committer_name": "David Sterba",
  "committer_email": "dsterba@suse.com",
  "committer_date": "Mon Dec 17 14:51:38 2018 +0100",
  "committer_date_iso": "2018-12-17T14:51:38+01:00",
  "files_changed": [
    "fs/btrfs/volumes.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "fs/btrfs/volumes.c",
      "insertions": 73,
      "deletions": 4
    }
  ],
  "total_insertions": 73,
  "total_deletions": 4,
  "total_changes": 77,
  "parents": [
    "d1a63002829a4d8014de20dc141b404cc808405e"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.0",
    "v5.0-rc1",
    "v5.0-rc2",
    "v5.0-rc3",
    "v5.0-rc4",
    "v5.0-rc5",
    "v5.0-rc6",
    "v5.0-rc7",
    "v5.0-rc8",
    "v5.1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/btrfs/volumes.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}