commit 2e53b877dc1258d4ac3de98f496bb88ec3bf5e25
Author: Kees Cook <kees@kernel.org>
Date:   Fri Mar 11 12:00:42 2022 -0800

    lkdtm: Add CFI_BACKWARD to test ROP mitigations
    
    In order to test various backward-edge control flow integrity methods,
    add a test that manipulates the return address on the stack. Currently
    only arm64 Pointer Authentication and Shadow Call Stack is supported.
    
     $ echo CFI_BACKWARD | cat >/sys/kernel/debug/provoke-crash/DIRECT
    
    Under SCS, successful test of the mitigation is reported as:
    
     lkdtm: Performing direct entry CFI_BACKWARD
     lkdtm: Attempting unchecked stack return address redirection ...
     lkdtm: ok: redirected stack return address.
     lkdtm: Attempting checked stack return address redirection ...
     lkdtm: ok: control flow unchanged.
    
    Under PAC, successful test of the mitigation is reported by the PAC
    exception handler:
    
     lkdtm: Performing direct entry CFI_BACKWARD
     lkdtm: Attempting unchecked stack return address redirection ...
     lkdtm: ok: redirected stack return address.
     lkdtm: Attempting checked stack return address redirection ...
     Unable to handle kernel paging request at virtual address bfffffc0088d0514
     Mem abort info:
       ESR = 0x86000004
       EC = 0x21: IABT (current EL), IL = 32 bits
       SET = 0, FnV = 0
       EA = 0, S1PTW = 0
       FSC = 0x04: level 0 translation fault
     [bfffffc0088d0514] address between user and kernel address ranges
     ...
    
    If the CONFIGs are missing (or the mitigation isn't working), failure
    is reported as:
    
     lkdtm: Performing direct entry CFI_BACKWARD
     lkdtm: Attempting unchecked stack return address redirection ...
     lkdtm: ok: redirected stack return address.
     lkdtm: Attempting checked stack return address redirection ...
     lkdtm: FAIL: stack return address was redirected!
     lkdtm: This is probably expected, since this kernel was built *without* CONFIG_ARM64_PTR_AUTH_KERNEL=y nor CONFIG_SHADOW_CALL_STACK=y
    
    Co-developed-by: Dan Li <ashimida@linux.alibaba.com>
    Signed-off-by: Dan Li <ashimida@linux.alibaba.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/lkml/20220416001103.1524653-1-keescook@chromium.org

diff --git a/tools/testing/selftests/lkdtm/tests.txt b/tools/testing/selftests/lkdtm/tests.txt
index 243c781f0780..9dace01dbf15 100644
--- a/tools/testing/selftests/lkdtm/tests.txt
+++ b/tools/testing/selftests/lkdtm/tests.txt
@@ -74,6 +74,7 @@ USERCOPY_STACK_BEYOND
 USERCOPY_KERNEL
 STACKLEAK_ERASING OK: the rest of the thread stack is properly erased
 CFI_FORWARD_PROTO
+CFI_BACKWARD call trace:|ok: control flow unchanged
 FORTIFIED_STRSCPY
 FORTIFIED_OBJECT
 FORTIFIED_SUBOBJECT