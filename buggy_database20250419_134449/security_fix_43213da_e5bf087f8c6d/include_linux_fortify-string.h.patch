commit 43213daed6d6cb60e8cf69058a6db8648a556d9d
Author: Kees Cook <kees@kernel.org>
Date:   Tue May 10 19:53:01 2022 -0700

    fortify: Provide a memcpy trap door for sharp corners
    
    As we continue to narrow the scope of what the FORTIFY memcpy() will
    accept and build alternative APIs that give the compiler appropriate
    visibility into more complex memcpy scenarios, there is a need for
    "unfortified" memcpy use in rare cases where combinations of compiler
    behaviors, source code layout, etc, result in cases where the stricter
    memcpy checks need to be bypassed until appropriate solutions can be
    developed (i.e. fix compiler bugs, code refactoring, new API, etc). The
    intention is for this to be used only if there's no other reasonable
    solution, for its use to include a justification that can be used
    to assess future solutions, and for it to be temporary.
    
    Example usage included, based on analysis and discussion from:
    https://lore.kernel.org/netdev/CANn89iLS_2cshtuXPyNUGDPaic=sJiYfvTb_wNLgWrZRyBxZ_g@mail.gmail.com
    
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Cc: Coco Li <lixiaoyan@google.com>
    Cc: Tariq Toukan <tariqt@nvidia.com>
    Cc: Saeed Mahameed <saeedm@nvidia.com>
    Cc: Leon Romanovsky <leon@kernel.org>
    Cc: netdev@vger.kernel.org
    Cc: linux-hardening@vger.kernel.org
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20220511025301.3636666-1-keescook@chromium.org
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>

diff --git a/include/linux/fortify-string.h b/include/linux/fortify-string.h
index 295637a66c46..3b401fa0f374 100644
--- a/include/linux/fortify-string.h
+++ b/include/linux/fortify-string.h
@@ -52,6 +52,22 @@ extern char *__underlying_strncpy(char *p, const char *q, __kernel_size_t size)
 #define __underlying_strncpy	__builtin_strncpy
 #endif
 
+/**
+ * unsafe_memcpy - memcpy implementation with no FORTIFY bounds checking
+ *
+ * @dst: Destination memory address to write to
+ * @src: Source memory address to read from
+ * @bytes: How many bytes to write to @dst from @src
+ * @justification: Free-form text or comment describing why the use is needed
+ *
+ * This should be used for corner cases where the compiler cannot do the
+ * right thing, or during transitions between APIs, etc. It should be used
+ * very rarely, and includes a place for justification detailing where bounds
+ * checking has happened, and why existing solutions cannot be employed.
+ */
+#define unsafe_memcpy(dst, src, bytes, justification)		\
+	__underlying_memcpy(dst, src, bytes)
+
 /*
  * Clang's use of __builtin_object_size() within inlines needs hinting via
  * __pass_object_size(). The preference is to only ever use type 1 (member