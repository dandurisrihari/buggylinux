commit 43213daed6d6cb60e8cf69058a6db8648a556d9d
Author: Kees Cook <kees@kernel.org>
Date:   Tue May 10 19:53:01 2022 -0700

    fortify: Provide a memcpy trap door for sharp corners
    
    As we continue to narrow the scope of what the FORTIFY memcpy() will
    accept and build alternative APIs that give the compiler appropriate
    visibility into more complex memcpy scenarios, there is a need for
    "unfortified" memcpy use in rare cases where combinations of compiler
    behaviors, source code layout, etc, result in cases where the stricter
    memcpy checks need to be bypassed until appropriate solutions can be
    developed (i.e. fix compiler bugs, code refactoring, new API, etc). The
    intention is for this to be used only if there's no other reasonable
    solution, for its use to include a justification that can be used
    to assess future solutions, and for it to be temporary.
    
    Example usage included, based on analysis and discussion from:
    https://lore.kernel.org/netdev/CANn89iLS_2cshtuXPyNUGDPaic=sJiYfvTb_wNLgWrZRyBxZ_g@mail.gmail.com
    
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: Eric Dumazet <edumazet@google.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Paolo Abeni <pabeni@redhat.com>
    Cc: Coco Li <lixiaoyan@google.com>
    Cc: Tariq Toukan <tariqt@nvidia.com>
    Cc: Saeed Mahameed <saeedm@nvidia.com>
    Cc: Leon Romanovsky <leon@kernel.org>
    Cc: netdev@vger.kernel.org
    Cc: linux-hardening@vger.kernel.org
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20220511025301.3636666-1-keescook@chromium.org
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>

diff --git a/include/linux/string.h b/include/linux/string.h
index b6572aeca2f5..61ec7e4f6311 100644
--- a/include/linux/string.h
+++ b/include/linux/string.h
@@ -252,6 +252,10 @@ static inline const char *kbasename(const char *path)
 #if !defined(__NO_FORTIFY) && defined(__OPTIMIZE__) && defined(CONFIG_FORTIFY_SOURCE)
 #include <linux/fortify-string.h>
 #endif
+#ifndef unsafe_memcpy
+#define unsafe_memcpy(dst, src, bytes, justification)		\
+	memcpy(dst, src, bytes)
+#endif
 
 void memcpy_and_pad(void *dest, size_t dest_len, const void *src, size_t count,
 		    int pad);