{
  "hash": "62a679cb2825488387f458c16dff32be41eb3d32",
  "hash_short": "62a679cb",
  "subject": "arm64: simplify ptrauth initialization",
  "body": "Currently __cpu_setup conditionally initializes the address\nauthentication keys and enables them in SCTLR_EL1, doing so differently\nfor the primary CPU and secondary CPUs, and skipping this work for CPUs\nreturning from an idle state. For the latter case, cpu_do_resume\nrestores the keys and SCTLR_EL1 value after the MMU has been enabled.\n\nThis flow is rather difficult to follow, so instead let's move the\nprimary and secondary CPU initialization into their respective boot\npaths. By following the example of cpu_do_resume and doing so once the\nMMU is enabled, we can always initialize the keys from the values in\nthread_struct, and avoid the machinery necessary to pass the keys in\nsecondary_data or open-coding initialization for the boot CPU.\n\nThis means we perform an additional RMW of SCTLR_EL1, but we already do\nthis in the cpu_do_resume path, and for other features in cpufeature.c,\nso this isn't a major concern in a bringup path. Note that even while\nthe enable bits are clear, the key registers are accessible.\n\nAs this now renders the argument to __cpu_setup redundant, let's also\nremove that entirely. Future extensions can follow a similar approach to\ninitialize values that differ for primary/secondary CPUs.\n\nSigned-off-by: Mark Rutland <mark.rutland@arm.com>\nTested-by: Amit Daniel Kachhap <amit.kachhap@arm.com>\nReviewed-by: Amit Daniel Kachhap <amit.kachhap@arm.com>\nCc: Amit Daniel Kachhap <amit.kachhap@arm.com>\nCc: Catalin Marinas <catalin.marinas@arm.com>\nCc: James Morse <james.morse@arm.com>\nCc: Suzuki K Poulose <suzuki.poulose@arm.com>\nCc: Will Deacon <will@kernel.org>\nLink: https://lore.kernel.org/r/20200423101606.37601-3-mark.rutland@arm.com\nSigned-off-by: Will Deacon <will@kernel.org>",
  "full_message": "arm64: simplify ptrauth initialization\n\nCurrently __cpu_setup conditionally initializes the address\nauthentication keys and enables them in SCTLR_EL1, doing so differently\nfor the primary CPU and secondary CPUs, and skipping this work for CPUs\nreturning from an idle state. For the latter case, cpu_do_resume\nrestores the keys and SCTLR_EL1 value after the MMU has been enabled.\n\nThis flow is rather difficult to follow, so instead let's move the\nprimary and secondary CPU initialization into their respective boot\npaths. By following the example of cpu_do_resume and doing so once the\nMMU is enabled, we can always initialize the keys from the values in\nthread_struct, and avoid the machinery necessary to pass the keys in\nsecondary_data or open-coding initialization for the boot CPU.\n\nThis means we perform an additional RMW of SCTLR_EL1, but we already do\nthis in the cpu_do_resume path, and for other features in cpufeature.c,\nso this isn't a major concern in a bringup path. Note that even while\nthe enable bits are clear, the key registers are accessible.\n\nAs this now renders the argument to __cpu_setup redundant, let's also\nremove that entirely. Future extensions can follow a similar approach to\ninitialize values that differ for primary/secondary CPUs.\n\nSigned-off-by: Mark Rutland <mark.rutland@arm.com>\nTested-by: Amit Daniel Kachhap <amit.kachhap@arm.com>\nReviewed-by: Amit Daniel Kachhap <amit.kachhap@arm.com>\nCc: Amit Daniel Kachhap <amit.kachhap@arm.com>\nCc: Catalin Marinas <catalin.marinas@arm.com>\nCc: James Morse <james.morse@arm.com>\nCc: Suzuki K Poulose <suzuki.poulose@arm.com>\nCc: Will Deacon <will@kernel.org>\nLink: https://lore.kernel.org/r/20200423101606.37601-3-mark.rutland@arm.com\nSigned-off-by: Will Deacon <will@kernel.org>",
  "author_name": "Mark Rutland",
  "author_email": "mark.rutland@arm.com",
  "author_date": "Thu Apr 23 11:16:06 2020 +0100",
  "author_date_iso": "2020-04-23T11:16:06+01:00",
  "committer_name": "Will Deacon",
  "committer_email": "will@kernel.org",
  "committer_date": "Tue Apr 28 11:23:21 2020 +0100",
  "committer_date_iso": "2020-04-28T11:23:21+01:00",
  "files_changed": [
    "arch/arm64/include/asm/asm_pointer_auth.h",
    "arch/arm64/include/asm/smp.h",
    "arch/arm64/kernel/asm-offsets.c",
    "arch/arm64/kernel/head.S",
    "arch/arm64/kernel/sleep.S",
    "arch/arm64/kernel/smp.c",
    "arch/arm64/mm/proc.S"
  ],
  "files_changed_count": 7,
  "stats": [
    {
      "file": "arch/arm64/include/asm/asm_pointer_auth.h",
      "insertions": 22,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/smp.h",
      "insertions": 0,
      "deletions": 11
    },
    {
      "file": "arch/arm64/kernel/asm-offsets.c",
      "insertions": 0,
      "deletions": 3
    },
    {
      "file": "arch/arm64/kernel/head.S",
      "insertions": 10,
      "deletions": 2
    },
    {
      "file": "arch/arm64/kernel/sleep.S",
      "insertions": 0,
      "deletions": 1
    },
    {
      "file": "arch/arm64/kernel/smp.c",
      "insertions": 0,
      "deletions": 8
    },
    {
      "file": "arch/arm64/mm/proc.S",
      "insertions": 0,
      "deletions": 44
    }
  ],
  "total_insertions": 32,
  "total_deletions": 69,
  "total_changes": 101,
  "parents": [
    "d0055da5266acd316b8cb22b6086b8f9ac2d72cb"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/arm64/include/asm/smp.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/asm/asm_pointer_auth.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/asm-offsets.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/head.S",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/sleep.S",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/mm/proc.S",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/smp.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}