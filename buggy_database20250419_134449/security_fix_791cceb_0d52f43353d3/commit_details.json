{
  "hash": "791cceb89f7987c0375ff2e8971928a47f62ccae",
  "hash_short": "791cceb8",
  "subject": "toops: Sync tools/include/uapi/linux/bpf.h with the kernel",
  "body": "The way we're using kernel headers in tools/ now, with a copy that is\nmade to the same path prefixed by \"tools/\" plus checking if that copy\ngot stale, i.e. if the kernel counterpart changed, helps in keeping\ntrack with new features that may be useful for tools to exploit.\n\nFor instance, looking at all the changes to bpf.h since it was last\ncopied to tools/include brings this to toolers' attention:\n\nNeed to investigate this one to check how to run a program via perf, setting up\na BPF event, that will take advantage of the way perf already calls clang/LLVM,\nsets up the event and runs the workload in a single command line, helping in\ndebugging such semi cooperative programs:\n\n  96ae52279594 (\"bpf: Add bpf_probe_write_user BPF helper to be called in tracers\")\n\nThis one needs further investigation about using the feature it improves\nin 'perf trace' to do some tcpdumpin' mixed with syscalls, tracepoints,\nprobe points, callgraphs, etc:\n\n  555c8a8623a3 (\"bpf: avoid stack copy and use skb ctx for event output\")\n\nAdd tracing just packets that are related to some container to that mix:\n\n  4a482f34afcc (\"cgroup: bpf: Add bpf_skb_in_cgroup_proto\")\n  4ed8ec521ed5 (\"cgroup: bpf: Add BPF_MAP_TYPE_CGROUP_ARRAY\")\n\nDefinetely needs to have example programs accessing task_struct from a bpf proggie\nstarted from 'perf trace':\n\n  606274c5abd8 (\"bpf: introduce bpf_get_current_task() helper\")\n\nCore networking related, XDP:\n\n  6ce96ca348a9 (\"bpf: add XDP_TX xdp_action for direct forwarding\")\n  6a773a15a1e8 (\"bpf: add XDP prog type for early driver filter\")\n  13c5c240f789 (\"bpf: add bpf_get_hash_recalc helper\")\n  d2485c4242a8 (\"bpf: add bpf_skb_change_type helper\")\n  6578171a7ff0 (\"bpf: add bpf_skb_change_proto helper\")\n\nChanges detected by the tools build system:\n\n  $ make -C tools/perf O=/tmp/build/perf install-bin\n  make: Entering directory '/home/acme/git/linux/tools/perf'\n    BUILD:   Doing 'make -j4' parallel build\n  Warning: tools/include/uapi/linux/bpf.h differs from kernel\n    INSTALL  GTK UI\n    CC       /tmp/build/perf/bench/mem-memcpy-x86-64-asm.o\n  <SNIP>\n  $\n\nCc: Adrian Hunter <adrian.hunter@intel.com>\nCc: Alexei Starovoitov <ast@fb.com>\nCc: Brenden Blanco <bblanco@plumgrid.com>\nCc: Daniel Borkmann <daniel@iogearbox.net>\nCc: David Ahern <dsahern@gmail.com>\nCc: David S. Miller <davem@davemloft.net>\nCc: Jiri Olsa <jolsa@kernel.org>\nCc: Martin KaFai Lau <kafai@fb.com>\nCc: Namhyung Kim <namhyung@kernel.org>\nCc: Sargun Dhillon <sargun@sargun.me>\nCc: Wang Nan <wangnan0@huawei.com>\nLink: http://lkml.kernel.org/n/tip-difq4ts1xvww6eyfs9e7zlft@git.kernel.org\nSigned-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>",
  "full_message": "toops: Sync tools/include/uapi/linux/bpf.h with the kernel\n\nThe way we're using kernel headers in tools/ now, with a copy that is\nmade to the same path prefixed by \"tools/\" plus checking if that copy\ngot stale, i.e. if the kernel counterpart changed, helps in keeping\ntrack with new features that may be useful for tools to exploit.\n\nFor instance, looking at all the changes to bpf.h since it was last\ncopied to tools/include brings this to toolers' attention:\n\nNeed to investigate this one to check how to run a program via perf, setting up\na BPF event, that will take advantage of the way perf already calls clang/LLVM,\nsets up the event and runs the workload in a single command line, helping in\ndebugging such semi cooperative programs:\n\n  96ae52279594 (\"bpf: Add bpf_probe_write_user BPF helper to be called in tracers\")\n\nThis one needs further investigation about using the feature it improves\nin 'perf trace' to do some tcpdumpin' mixed with syscalls, tracepoints,\nprobe points, callgraphs, etc:\n\n  555c8a8623a3 (\"bpf: avoid stack copy and use skb ctx for event output\")\n\nAdd tracing just packets that are related to some container to that mix:\n\n  4a482f34afcc (\"cgroup: bpf: Add bpf_skb_in_cgroup_proto\")\n  4ed8ec521ed5 (\"cgroup: bpf: Add BPF_MAP_TYPE_CGROUP_ARRAY\")\n\nDefinetely needs to have example programs accessing task_struct from a bpf proggie\nstarted from 'perf trace':\n\n  606274c5abd8 (\"bpf: introduce bpf_get_current_task() helper\")\n\nCore networking related, XDP:\n\n  6ce96ca348a9 (\"bpf: add XDP_TX xdp_action for direct forwarding\")\n  6a773a15a1e8 (\"bpf: add XDP prog type for early driver filter\")\n  13c5c240f789 (\"bpf: add bpf_get_hash_recalc helper\")\n  d2485c4242a8 (\"bpf: add bpf_skb_change_type helper\")\n  6578171a7ff0 (\"bpf: add bpf_skb_change_proto helper\")\n\nChanges detected by the tools build system:\n\n  $ make -C tools/perf O=/tmp/build/perf install-bin\n  make: Entering directory '/home/acme/git/linux/tools/perf'\n    BUILD:   Doing 'make -j4' parallel build\n  Warning: tools/include/uapi/linux/bpf.h differs from kernel\n    INSTALL  GTK UI\n    CC       /tmp/build/perf/bench/mem-memcpy-x86-64-asm.o\n  <SNIP>\n  $\n\nCc: Adrian Hunter <adrian.hunter@intel.com>\nCc: Alexei Starovoitov <ast@fb.com>\nCc: Brenden Blanco <bblanco@plumgrid.com>\nCc: Daniel Borkmann <daniel@iogearbox.net>\nCc: David Ahern <dsahern@gmail.com>\nCc: David S. Miller <davem@davemloft.net>\nCc: Jiri Olsa <jolsa@kernel.org>\nCc: Martin KaFai Lau <kafai@fb.com>\nCc: Namhyung Kim <namhyung@kernel.org>\nCc: Sargun Dhillon <sargun@sargun.me>\nCc: Wang Nan <wangnan0@huawei.com>\nLink: http://lkml.kernel.org/n/tip-difq4ts1xvww6eyfs9e7zlft@git.kernel.org\nSigned-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>",
  "author_name": "Arnaldo Carvalho de Melo",
  "author_email": "acme@redhat.com",
  "author_date": "Tue Aug 9 11:48:07 2016 -0300",
  "author_date_iso": "2016-08-09T11:48:07-03:00",
  "committer_name": "Arnaldo Carvalho de Melo",
  "committer_email": "acme@redhat.com",
  "committer_date": "Tue Aug 9 11:48:07 2016 -0300",
  "committer_date_iso": "2016-08-09T11:48:07-03:00",
  "files_changed": [
    "tools/include/uapi/linux/bpf.h"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "tools/include/uapi/linux/bpf.h",
      "insertions": 85,
      "deletions": 1
    }
  ],
  "total_insertions": 85,
  "total_deletions": 1,
  "total_changes": 86,
  "parents": [
    "bebfb730125863aac74607dff24f1bdb9fb02a90"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.10",
    "v4.10-rc1",
    "v4.10-rc2",
    "v4.10-rc3",
    "v4.10-rc4",
    "v4.10-rc5",
    "v4.10-rc6",
    "v4.10-rc7",
    "v4.10-rc8",
    "v4.11"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "tools/include/uapi/linux/bpf.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}