{
  "hash": "a0b09f2d6f30723e1008bd9ddb504e302e329f81",
  "hash_short": "a0b09f2d",
  "subject": "Merge tag 'random-6.0-rc1-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/crng/random",
  "body": "Pull random number generator updates from Jason Donenfeld:\n \"Though there's been a decent amount of RNG-related development during\n  this last cycle, not all of it is coming through this tree, as this\n  cycle saw a shift toward tackling early boot time seeding issues,\n  which took place in other trees as well.\n\n  Here's a summary of the various patches:\n\n   - The CONFIG_ARCH_RANDOM .config option and the \"nordrand\" boot\n     option have been removed, as they overlapped with the more widely\n     supported and more sensible options, CONFIG_RANDOM_TRUST_CPU and\n     \"random.trust_cpu\". This change allowed simplifying a bit of arch\n     code.\n\n   - x86's RDRAND boot time test has been made a bit more robust, with\n     RDRAND disabled if it's clearly producing bogus results. This would\n     be a tip.git commit, technically, but I took it through random.git\n     to avoid a large merge conflict.\n\n   - The RNG has long since mixed in a timestamp very early in boot, on\n     the premise that a computer that does the same things, but does so\n     starting at different points in wall time, could be made to still\n     produce a different RNG state. Unfortunately, the clock isn't set\n     early in boot on all systems, so now we mix in that timestamp when\n     the time is actually set.\n\n   - User Mode Linux now uses the host OS's getrandom() syscall to\n     generate a bootloader RNG seed and later on treats getrandom() as\n     the platform's RDRAND-like faculty.\n\n   - The arch_get_random_{seed_,}_long() family of functions is now\n     arch_get_random_{seed_,}_longs(), which enables certain platforms,\n     such as s390, to exploit considerable performance advantages from\n     requesting multiple CPU random numbers at once, while at the same\n     time compiling down to the same code as before on platforms like\n     x86.\n\n   - A small cleanup changing a cmpxchg() into a try_cmpxchg(), from\n     Uros.\n\n   - A comment spelling fix\"\n\nMore info about other random number changes that come in through various\narchitecture trees in the full commentary in the pull request:\n\n  https://lore.kernel.org/all/20220731232428.2219258-1-Jason@zx2c4.com/\n\n* tag 'random-6.0-rc1-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/crng/random:\n  random: correct spelling of \"overwrites\"\n  random: handle archrandom with multiple longs\n  um: seed rng using host OS rng\n  random: use try_cmpxchg in _credit_init_bits\n  timekeeping: contribute wall clock to rng on time change\n  x86/rdrand: Remove \"nordrand\" flag in favor of \"random.trust_cpu\"\n  random: remove CONFIG_ARCH_RANDOM",
  "full_message": "Merge tag 'random-6.0-rc1-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/crng/random\n\nPull random number generator updates from Jason Donenfeld:\n \"Though there's been a decent amount of RNG-related development during\n  this last cycle, not all of it is coming through this tree, as this\n  cycle saw a shift toward tackling early boot time seeding issues,\n  which took place in other trees as well.\n\n  Here's a summary of the various patches:\n\n   - The CONFIG_ARCH_RANDOM .config option and the \"nordrand\" boot\n     option have been removed, as they overlapped with the more widely\n     supported and more sensible options, CONFIG_RANDOM_TRUST_CPU and\n     \"random.trust_cpu\". This change allowed simplifying a bit of arch\n     code.\n\n   - x86's RDRAND boot time test has been made a bit more robust, with\n     RDRAND disabled if it's clearly producing bogus results. This would\n     be a tip.git commit, technically, but I took it through random.git\n     to avoid a large merge conflict.\n\n   - The RNG has long since mixed in a timestamp very early in boot, on\n     the premise that a computer that does the same things, but does so\n     starting at different points in wall time, could be made to still\n     produce a different RNG state. Unfortunately, the clock isn't set\n     early in boot on all systems, so now we mix in that timestamp when\n     the time is actually set.\n\n   - User Mode Linux now uses the host OS's getrandom() syscall to\n     generate a bootloader RNG seed and later on treats getrandom() as\n     the platform's RDRAND-like faculty.\n\n   - The arch_get_random_{seed_,}_long() family of functions is now\n     arch_get_random_{seed_,}_longs(), which enables certain platforms,\n     such as s390, to exploit considerable performance advantages from\n     requesting multiple CPU random numbers at once, while at the same\n     time compiling down to the same code as before on platforms like\n     x86.\n\n   - A small cleanup changing a cmpxchg() into a try_cmpxchg(), from\n     Uros.\n\n   - A comment spelling fix\"\n\nMore info about other random number changes that come in through various\narchitecture trees in the full commentary in the pull request:\n\n  https://lore.kernel.org/all/20220731232428.2219258-1-Jason@zx2c4.com/\n\n* tag 'random-6.0-rc1-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/crng/random:\n  random: correct spelling of \"overwrites\"\n  random: handle archrandom with multiple longs\n  um: seed rng using host OS rng\n  random: use try_cmpxchg in _credit_init_bits\n  timekeeping: contribute wall clock to rng on time change\n  x86/rdrand: Remove \"nordrand\" flag in favor of \"random.trust_cpu\"\n  random: remove CONFIG_ARCH_RANDOM",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Tue Aug 2 17:31:35 2022 -0700",
  "author_date_iso": "2022-08-02T17:31:35-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Tue Aug 2 17:31:35 2022 -0700",
  "committer_date_iso": "2022-08-02T17:31:35-07:00",
  "files_changed": [
    "Documentation/admin-guide/kernel-parameters.txt",
    "arch/arm64/Kconfig",
    "arch/arm64/kernel/cpufeature.c",
    "arch/powerpc/Kconfig",
    "arch/s390/Kconfig",
    "arch/s390/include/asm/archrandom.h",
    "arch/um/kernel/um_arch.c",
    "arch/x86/Kconfig"
  ],
  "files_changed_count": 8,
  "stats": [
    {
      "file": "Documentation/admin-guide/kernel-parameters.txt",
      "insertions": 0,
      "deletions": 5
    },
    {
      "file": "arch/arm/include/asm/archrandom.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "arch/arm64/Kconfig",
      "insertions": 0,
      "deletions": 8
    },
    {
      "file": "arch/arm64/include/asm/archrandom.h",
      "insertions": 47,
      "deletions": 65
    },
    {
      "file": "arch/arm64/kernel/cpufeature.c",
      "insertions": 0,
      "deletions": 2
    },
    {
      "file": "arch/powerpc/Kconfig",
      "insertions": 0,
      "deletions": 3
    },
    {
      "file": "arch/powerpc/include/asm/archrandom.h",
      "insertions": 6,
      "deletions": 27
    },
    {
      "file": "arch/powerpc/include/asm/machdep.h",
      "insertions": 0,
      "deletions": 2
    },
    {
      "file": "arch/powerpc/kvm/book3s_hv.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/powerpc/platforms/microwatt/Kconfig",
      "insertions": 0,
      "deletions": 1
    },
    {
      "file": "arch/powerpc/platforms/powernv/Kconfig",
      "insertions": 0,
      "deletions": 1
    },
    {
      "file": "arch/powerpc/platforms/pseries/Kconfig",
      "insertions": 0,
      "deletions": 1
    },
    {
      "file": "arch/s390/Kconfig",
      "insertions": 0,
      "deletions": 15
    },
    {
      "file": "arch/s390/configs/zfcpdump_defconfig",
      "insertions": 0,
      "deletions": 1
    },
    {
      "file": "arch/s390/crypto/Makefile",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/s390/include/asm/archrandom.h",
      "insertions": 7,
      "deletions": 26
    },
    {
      "file": "arch/s390/kernel/setup.c",
      "insertions": 0,
      "deletions": 2
    },
    {
      "file": "arch/um/include/asm/archrandom.h",
      "insertions": 25,
      "deletions": 0
    },
    {
      "file": "arch/um/include/shared/os.h",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "arch/um/kernel/um_arch.c",
      "insertions": 8,
      "deletions": 0
    },
    {
      "file": "arch/um/os-Linux/util.c",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "arch/x86/Kconfig",
      "insertions": 0,
      "deletions": 9
    },
    {
      "file": "arch/x86/include/asm/archrandom.h",
      "insertions": 8,
      "deletions": 47
    },
    {
      "file": "arch/x86/kernel/cpu/amd.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/x86/kernel/cpu/rdrand.c",
      "insertions": 21,
      "deletions": 38
    },
    {
      "file": "arch/x86/kernel/espfix_64.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "drivers/char/Kconfig",
      "insertions": 0,
      "deletions": 1
    },
    {
      "file": "drivers/char/hw_random/s390-trng.c",
      "insertions": 0,
      "deletions": 9
    },
    {
      "file": "drivers/char/random.c",
      "insertions": 34,
      "deletions": 17
    },
    {
      "file": "include/asm-generic/Kbuild",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "include/asm-generic/archrandom.h",
      "insertions": 15,
      "deletions": 0
    },
    {
      "file": "include/linux/random.h",
      "insertions": 7,
      "deletions": 14
    },
    {
      "file": "kernel/time/timekeeping.c",
      "insertions": 6,
      "deletions": 1
    },
    {
      "file": "tools/testing/selftests/wireguard/qemu/kernel.config",
      "insertions": 0,
      "deletions": 1
    }
  ],
  "total_insertions": 204,
  "total_deletions": 300,
  "total_changes": 504,
  "parents": [
    "569bede0cff5e98c0f862d486406b79dcada8eea",
    "7f637be4d46029bd7700c9f244945a42dbd976fa"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/powerpc/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "Documentation/admin-guide/kernel-parameters.txt",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/cpufeature.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/s390/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/um/kernel/um_arch.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/s390/include/asm/archrandom.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}