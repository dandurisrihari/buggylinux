{
  "hash": "6d390e4b5d48ec03bb87e63cf0a2bff5f4e116da",
  "hash_short": "6d390e4b",
  "subject": "locks: fix a potential use-after-free problem when wakeup a waiter",
  "body": "'16306a61d3b7 (\"fs/locks: always delete_block after waiting.\")' add the\nlogic to check waiter->fl_blocker without blocked_lock_lock. And it will\ntrigger a UAF when we try to wakeup some waiter\uff1a\n\nThread 1 has create a write flock a on file, and now thread 2 try to\nunlock and delete flock a, thread 3 try to add flock b on the same file.\n\nThread2                         Thread3\n                                flock syscall(create flock b)\n\t                        ...flock_lock_inode_wait\n\t\t\t\t    flock_lock_inode(will insert\n\t\t\t\t    our fl_blocked_member list\n\t\t\t\t    to flock a's fl_blocked_requests)\n\t\t\t\t   sleep\nflock syscall(unlock)\n...flock_lock_inode_wait\n    locks_delete_lock_ctx\n    ...__locks_wake_up_blocks\n        __locks_delete_blocks(\n\tb->fl_blocker = NULL)\n\t...\n                                   break by a signal\n\t\t\t\t   locks_delete_block\n\t\t\t\t    b->fl_blocker == NULL &&\n\t\t\t\t    list_empty(&b->fl_blocked_requests)\n\t                            success, return directly\n\t\t\t\t locks_free_lock b\n\twake_up(&b->fl_waiter)\n\ttrigger UAF\n\nFix it by remove this logic, and this patch may also fix CVE-2019-19769.\n\nCc: stable@vger.kernel.org\nFixes: 16306a61d3b7 (\"fs/locks: always delete_block after waiting.\")\nSigned-off-by: yangerkun <yangerkun@huawei.com>\nSigned-off-by: Jeff Layton <jlayton@kernel.org>",
  "full_message": "locks: fix a potential use-after-free problem when wakeup a waiter\n\n'16306a61d3b7 (\"fs/locks: always delete_block after waiting.\")' add the\nlogic to check waiter->fl_blocker without blocked_lock_lock. And it will\ntrigger a UAF when we try to wakeup some waiter\uff1a\n\nThread 1 has create a write flock a on file, and now thread 2 try to\nunlock and delete flock a, thread 3 try to add flock b on the same file.\n\nThread2                         Thread3\n                                flock syscall(create flock b)\n\t                        ...flock_lock_inode_wait\n\t\t\t\t    flock_lock_inode(will insert\n\t\t\t\t    our fl_blocked_member list\n\t\t\t\t    to flock a's fl_blocked_requests)\n\t\t\t\t   sleep\nflock syscall(unlock)\n...flock_lock_inode_wait\n    locks_delete_lock_ctx\n    ...__locks_wake_up_blocks\n        __locks_delete_blocks(\n\tb->fl_blocker = NULL)\n\t...\n                                   break by a signal\n\t\t\t\t   locks_delete_block\n\t\t\t\t    b->fl_blocker == NULL &&\n\t\t\t\t    list_empty(&b->fl_blocked_requests)\n\t                            success, return directly\n\t\t\t\t locks_free_lock b\n\twake_up(&b->fl_waiter)\n\ttrigger UAF\n\nFix it by remove this logic, and this patch may also fix CVE-2019-19769.\n\nCc: stable@vger.kernel.org\nFixes: 16306a61d3b7 (\"fs/locks: always delete_block after waiting.\")\nSigned-off-by: yangerkun <yangerkun@huawei.com>\nSigned-off-by: Jeff Layton <jlayton@kernel.org>",
  "author_name": "yangerkun",
  "author_email": "yangerkun@huawei.com",
  "author_date": "Wed Mar 4 15:25:56 2020 +0800",
  "author_date_iso": "2020-03-04T15:25:56+08:00",
  "committer_name": "Jeff Layton",
  "committer_email": "jlayton@kernel.org",
  "committer_date": "Fri Mar 6 11:54:13 2020 -0500",
  "committer_date_iso": "2020-03-06T11:54:13-05:00",
  "files_changed": [
    "fs/locks.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "fs/locks.c",
      "insertions": 0,
      "deletions": 14
    }
  ],
  "total_insertions": 0,
  "total_deletions": 14,
  "total_changes": 14,
  "parents": [
    "0a68ff5e2e7cf2263674b7f0418b31e10b2a497f"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.6",
    "v5.6-rc5",
    "v5.6-rc6",
    "v5.6-rc7",
    "v5.7-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2019-19769"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "fs/locks.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}