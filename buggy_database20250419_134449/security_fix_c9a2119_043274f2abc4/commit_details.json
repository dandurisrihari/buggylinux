{
  "hash": "c9a211951c7c79cfb5de888d7d9550872868b086",
  "hash_short": "c9a21195",
  "subject": "bpf: whitelist all syscalls for error injection",
  "body": "Error injection is a useful mechanism to fail arbitrary kernel\nfunctions. However, it is often hard to guarantee an error propagates\nappropriately to user space programs. By injecting into syscalls, we can\nreturn arbitrary values to user space directly; this increases\nflexibility and robustness in testing, allowing us to test user space\nerror paths effectively.\n\nThe following script, for example, fails calls to sys_open() from a\ngiven pid:\n\nfrom bcc import BPF\nfrom sys import argv\n\npid = argv[1]\n\nprog = r\"\"\"\n\nint kprobe__SyS_open(struct pt_regs *ctx, const char *pathname, int flags)\n{\n    u32 pid = bpf_get_current_pid_tgid();\n    if (pid == %s)\n        bpf_override_return(ctx, -ENOMEM);\n    return 0;\n}\n\"\"\" % pid\n\nb = BPF(text=prog)\nwhile 1:\n    b.perf_buffer_poll()\n\nThis patch whitelists all syscalls defined with SYSCALL_DEFINE and\nCOMPAT_SYSCALL_DEFINE for error injection. These changes are not\nintended to be considered stable, and would normally be configured off.\n\nSigned-off-by: Howard McLauchlan <hmclauchlan@fb.com>\nSigned-off-by: Dominik Brodowski <linux@dominikbrodowski.net>",
  "full_message": "bpf: whitelist all syscalls for error injection\n\nError injection is a useful mechanism to fail arbitrary kernel\nfunctions. However, it is often hard to guarantee an error propagates\nappropriately to user space programs. By injecting into syscalls, we can\nreturn arbitrary values to user space directly; this increases\nflexibility and robustness in testing, allowing us to test user space\nerror paths effectively.\n\nThe following script, for example, fails calls to sys_open() from a\ngiven pid:\n\nfrom bcc import BPF\nfrom sys import argv\n\npid = argv[1]\n\nprog = r\"\"\"\n\nint kprobe__SyS_open(struct pt_regs *ctx, const char *pathname, int flags)\n{\n    u32 pid = bpf_get_current_pid_tgid();\n    if (pid == %s)\n        bpf_override_return(ctx, -ENOMEM);\n    return 0;\n}\n\"\"\" % pid\n\nb = BPF(text=prog)\nwhile 1:\n    b.perf_buffer_poll()\n\nThis patch whitelists all syscalls defined with SYSCALL_DEFINE and\nCOMPAT_SYSCALL_DEFINE for error injection. These changes are not\nintended to be considered stable, and would normally be configured off.\n\nSigned-off-by: Howard McLauchlan <hmclauchlan@fb.com>\nSigned-off-by: Dominik Brodowski <linux@dominikbrodowski.net>",
  "author_name": "Howard McLauchlan",
  "author_email": "hmclauchlan@fb.com",
  "author_date": "Wed Mar 21 18:59:08 2018 -0700",
  "author_date_iso": "2018-03-21T18:59:08-07:00",
  "committer_name": "Dominik Brodowski",
  "committer_email": "linux@dominikbrodowski.net",
  "committer_date": "Mon Apr 2 20:16:21 2018 +0200",
  "committer_date_iso": "2018-04-02T20:16:21+02:00",
  "files_changed": [
    "include/linux/compat.h",
    "include/linux/syscalls.h"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "include/linux/compat.h",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "include/linux/syscalls.h",
      "insertions": 3,
      "deletions": 0
    }
  ],
  "total_insertions": 6,
  "total_deletions": 0,
  "total_changes": 6,
  "parents": [
    "67a7acd3773a94df2e671601a288685485463cf9"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.17",
    "v4.17-rc1",
    "v4.17-rc2",
    "v4.17-rc3",
    "v4.17-rc4",
    "v4.17-rc5",
    "v4.17-rc6",
    "v4.17-rc7",
    "v4.18",
    "v4.18-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/linux/compat.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/syscalls.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}