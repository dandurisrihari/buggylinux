Commit Hash: 82e61c3909db51d91b9d3e2071557b6435018b80
Subject: vt: keyboard, extend func_buf_lock to readers

CVE Identifiers:
- CVE-2020-25656

Full commit message:
vt: keyboard, extend func_buf_lock to readers

Both read-side users of func_table/func_buf need locking. Without that,
one can easily confuse the code by repeatedly setting altering strings
like:
while (1)
	for (a = 0; a < 2; a++) {
		struct kbsentry kbs = {};
		strcpy((char *)kbs.kb_string, a ? ".\n" : "88888\n");
		ioctl(fd, KDSKBSENT, &kbs);
	}

When that program runs, one can get unexpected output by holding F1
(note the unxpected period on the last line):
.
88888
.8888

So protect all accesses to 'func_table' (and func_buf) by preexisting
'func_buf_lock'.

It is easy in 'k_fn' handler as 'puts_queue' is expected not to sleep.
On the other hand, KDGKBSENT needs a local (atomic) copy of the string
because copy_to_user can sleep. Use already allocated, but unused
'kbs->kb_string' for that purpose.

Note that the program above needs at least CAP_SYS_TTY_CONFIG.

This depends on the previous patch and on the func_buf_lock lock added
in commit 46ca3f735f34 (tty/vt: fix write/write race in ioctl(KDSKBSENT)
handler) in 5.2.

Likely fixes CVE-2020-25656.

Cc: <stable@vger.kernel.org>
Reported-by: Minh Yuan <yuanmingbuaa@gmail.com>
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
Link: https://lore.kernel.org/r/20201019085517.10176-2-jslaby@suse.cz
Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

Metadata:
Author: Jiri Slaby <jslaby@suse.cz>
Author Date: Mon Oct 19 10:55:17 2020 +0200
Committer: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Commit Date: Wed Oct 28 13:41:02 2020 +0100

Files Changed: 1
Lines Added: 13
Lines Removed: 4
Total Changes: 17
