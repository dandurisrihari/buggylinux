{
  "hash": "82e61c3909db51d91b9d3e2071557b6435018b80",
  "hash_short": "82e61c39",
  "subject": "vt: keyboard, extend func_buf_lock to readers",
  "body": "Both read-side users of func_table/func_buf need locking. Without that,\none can easily confuse the code by repeatedly setting altering strings\nlike:\nwhile (1)\n\tfor (a = 0; a < 2; a++) {\n\t\tstruct kbsentry kbs = {};\n\t\tstrcpy((char *)kbs.kb_string, a ? \".\\n\" : \"88888\\n\");\n\t\tioctl(fd, KDSKBSENT, &kbs);\n\t}\n\nWhen that program runs, one can get unexpected output by holding F1\n(note the unxpected period on the last line):\n.\n88888\n.8888\n\nSo protect all accesses to 'func_table' (and func_buf) by preexisting\n'func_buf_lock'.\n\nIt is easy in 'k_fn' handler as 'puts_queue' is expected not to sleep.\nOn the other hand, KDGKBSENT needs a local (atomic) copy of the string\nbecause copy_to_user can sleep. Use already allocated, but unused\n'kbs->kb_string' for that purpose.\n\nNote that the program above needs at least CAP_SYS_TTY_CONFIG.\n\nThis depends on the previous patch and on the func_buf_lock lock added\nin commit 46ca3f735f34 (tty/vt: fix write/write race in ioctl(KDSKBSENT)\nhandler) in 5.2.\n\nLikely fixes CVE-2020-25656.\n\nCc: <stable@vger.kernel.org>\nReported-by: Minh Yuan <yuanmingbuaa@gmail.com>\nSigned-off-by: Jiri Slaby <jslaby@suse.cz>\nLink: https://lore.kernel.org/r/20201019085517.10176-2-jslaby@suse.cz\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
  "full_message": "vt: keyboard, extend func_buf_lock to readers\n\nBoth read-side users of func_table/func_buf need locking. Without that,\none can easily confuse the code by repeatedly setting altering strings\nlike:\nwhile (1)\n\tfor (a = 0; a < 2; a++) {\n\t\tstruct kbsentry kbs = {};\n\t\tstrcpy((char *)kbs.kb_string, a ? \".\\n\" : \"88888\\n\");\n\t\tioctl(fd, KDSKBSENT, &kbs);\n\t}\n\nWhen that program runs, one can get unexpected output by holding F1\n(note the unxpected period on the last line):\n.\n88888\n.8888\n\nSo protect all accesses to 'func_table' (and func_buf) by preexisting\n'func_buf_lock'.\n\nIt is easy in 'k_fn' handler as 'puts_queue' is expected not to sleep.\nOn the other hand, KDGKBSENT needs a local (atomic) copy of the string\nbecause copy_to_user can sleep. Use already allocated, but unused\n'kbs->kb_string' for that purpose.\n\nNote that the program above needs at least CAP_SYS_TTY_CONFIG.\n\nThis depends on the previous patch and on the func_buf_lock lock added\nin commit 46ca3f735f34 (tty/vt: fix write/write race in ioctl(KDSKBSENT)\nhandler) in 5.2.\n\nLikely fixes CVE-2020-25656.\n\nCc: <stable@vger.kernel.org>\nReported-by: Minh Yuan <yuanmingbuaa@gmail.com>\nSigned-off-by: Jiri Slaby <jslaby@suse.cz>\nLink: https://lore.kernel.org/r/20201019085517.10176-2-jslaby@suse.cz\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
  "author_name": "Jiri Slaby",
  "author_email": "jslaby@suse.cz",
  "author_date": "Mon Oct 19 10:55:17 2020 +0200",
  "author_date_iso": "2020-10-19T10:55:17+02:00",
  "committer_name": "Greg Kroah-Hartman",
  "committer_email": "gregkh@linuxfoundation.org",
  "committer_date": "Wed Oct 28 13:41:02 2020 +0100",
  "committer_date_iso": "2020-10-28T13:41:02+01:00",
  "files_changed": [
    "drivers/tty/vt/keyboard.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "drivers/tty/vt/keyboard.c",
      "insertions": 13,
      "deletions": 4
    }
  ],
  "total_insertions": 13,
  "total_deletions": 4,
  "total_changes": 17,
  "parents": [
    "6ca03f90527e499dd5e32d6522909e2ad390896b"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2020-25656"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "drivers/tty/vt/keyboard.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}