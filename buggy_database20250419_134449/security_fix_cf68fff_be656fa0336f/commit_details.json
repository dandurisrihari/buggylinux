{
  "hash": "cf68fffb66d60d96209446bfc4a15291dc5a5d41",
  "hash_short": "cf68fffb",
  "subject": "add support for Clang CFI",
  "body": "This change adds support for Clang\u2019s forward-edge Control Flow\nIntegrity (CFI) checking. With CONFIG_CFI_CLANG, the compiler\ninjects a runtime check before each indirect function call to ensure\nthe target is a valid function with the correct static type. This\nrestricts possible call targets and makes it more difficult for\nan attacker to exploit bugs that allow the modification of stored\nfunction pointers. For more details, see:\n\n  https://clang.llvm.org/docs/ControlFlowIntegrity.html\n\nClang requires CONFIG_LTO_CLANG to be enabled with CFI to gain\nvisibility to possible call targets. Kernel modules are supported\nwith Clang\u2019s cross-DSO CFI mode, which allows checking between\nindependently compiled components.\n\nWith CFI enabled, the compiler injects a __cfi_check() function into\nthe kernel and each module for validating local call targets. For\ncross-module calls that cannot be validated locally, the compiler\ncalls the global __cfi_slowpath_diag() function, which determines\nthe target module and calls the correct __cfi_check() function. This\npatch includes a slowpath implementation that uses __module_address()\nto resolve call targets, and with CONFIG_CFI_CLANG_SHADOW enabled, a\nshadow map that speeds up module look-ups by ~3x.\n\nClang implements indirect call checking using jump tables and\noffers two methods of generating them. With canonical jump tables,\nthe compiler renames each address-taken function to <function>.cfi\nand points the original symbol to a jump table entry, which passes\n__cfi_check() validation. This isn\u2019t compatible with stand-alone\nassembly code, which the compiler doesn\u2019t instrument, and would\nresult in indirect calls to assembly code to fail. Therefore, we\ndefault to using non-canonical jump tables instead, where the compiler\ngenerates a local jump table entry <function>.cfi_jt for each\naddress-taken function, and replaces all references to the function\nwith the address of the jump table entry.\n\nNote that because non-canonical jump table addresses are local\nto each component, they break cross-module function address\nequality. Specifically, the address of a global function will be\ndifferent in each module, as it's replaced with the address of a local\njump table entry. If this address is passed to a different module,\nit won\u2019t match the address of the same function taken there. This\nmay break code that relies on comparing addresses passed from other\ncomponents.\n\nCFI checking can be disabled in a function with the __nocfi attribute.\nAdditionally, CFI can be disabled for an entire compilation unit by\nfiltering out CC_FLAGS_CFI.\n\nBy default, CFI failures result in a kernel panic to stop a potential\nexploit. CONFIG_CFI_PERMISSIVE enables a permissive mode, where the\nkernel prints out a rate-limited warning instead, and allows execution\nto continue. This option is helpful for locating type mismatches, but\nshould only be enabled during development.\n\nSigned-off-by: Sami Tolvanen <samitolvanen@google.com>\nReviewed-by: Kees Cook <keescook@chromium.org>\nTested-by: Nathan Chancellor <nathan@kernel.org>\nSigned-off-by: Kees Cook <keescook@chromium.org>\nLink: https://lore.kernel.org/r/20210408182843.1754385-2-samitolvanen@google.com",
  "full_message": "add support for Clang CFI\n\nThis change adds support for Clang\u2019s forward-edge Control Flow\nIntegrity (CFI) checking. With CONFIG_CFI_CLANG, the compiler\ninjects a runtime check before each indirect function call to ensure\nthe target is a valid function with the correct static type. This\nrestricts possible call targets and makes it more difficult for\nan attacker to exploit bugs that allow the modification of stored\nfunction pointers. For more details, see:\n\n  https://clang.llvm.org/docs/ControlFlowIntegrity.html\n\nClang requires CONFIG_LTO_CLANG to be enabled with CFI to gain\nvisibility to possible call targets. Kernel modules are supported\nwith Clang\u2019s cross-DSO CFI mode, which allows checking between\nindependently compiled components.\n\nWith CFI enabled, the compiler injects a __cfi_check() function into\nthe kernel and each module for validating local call targets. For\ncross-module calls that cannot be validated locally, the compiler\ncalls the global __cfi_slowpath_diag() function, which determines\nthe target module and calls the correct __cfi_check() function. This\npatch includes a slowpath implementation that uses __module_address()\nto resolve call targets, and with CONFIG_CFI_CLANG_SHADOW enabled, a\nshadow map that speeds up module look-ups by ~3x.\n\nClang implements indirect call checking using jump tables and\noffers two methods of generating them. With canonical jump tables,\nthe compiler renames each address-taken function to <function>.cfi\nand points the original symbol to a jump table entry, which passes\n__cfi_check() validation. This isn\u2019t compatible with stand-alone\nassembly code, which the compiler doesn\u2019t instrument, and would\nresult in indirect calls to assembly code to fail. Therefore, we\ndefault to using non-canonical jump tables instead, where the compiler\ngenerates a local jump table entry <function>.cfi_jt for each\naddress-taken function, and replaces all references to the function\nwith the address of the jump table entry.\n\nNote that because non-canonical jump table addresses are local\nto each component, they break cross-module function address\nequality. Specifically, the address of a global function will be\ndifferent in each module, as it's replaced with the address of a local\njump table entry. If this address is passed to a different module,\nit won\u2019t match the address of the same function taken there. This\nmay break code that relies on comparing addresses passed from other\ncomponents.\n\nCFI checking can be disabled in a function with the __nocfi attribute.\nAdditionally, CFI can be disabled for an entire compilation unit by\nfiltering out CC_FLAGS_CFI.\n\nBy default, CFI failures result in a kernel panic to stop a potential\nexploit. CONFIG_CFI_PERMISSIVE enables a permissive mode, where the\nkernel prints out a rate-limited warning instead, and allows execution\nto continue. This option is helpful for locating type mismatches, but\nshould only be enabled during development.\n\nSigned-off-by: Sami Tolvanen <samitolvanen@google.com>\nReviewed-by: Kees Cook <keescook@chromium.org>\nTested-by: Nathan Chancellor <nathan@kernel.org>\nSigned-off-by: Kees Cook <keescook@chromium.org>\nLink: https://lore.kernel.org/r/20210408182843.1754385-2-samitolvanen@google.com",
  "author_name": "Sami Tolvanen",
  "author_email": "samitolvanen@google.com",
  "author_date": "Thu Apr 8 11:28:26 2021 -0700",
  "author_date_iso": "2021-04-08T11:28:26-07:00",
  "committer_name": "Kees Cook",
  "committer_email": "keescook@chromium.org",
  "committer_date": "Thu Apr 8 16:04:20 2021 -0700",
  "committer_date_iso": "2021-04-08T16:04:20-07:00",
  "files_changed": [
    "Makefile",
    "arch/Kconfig",
    "include/asm-generic/bug.h",
    "include/asm-generic/vmlinux.lds.h",
    "include/linux/cfi.h",
    "include/linux/compiler-clang.h",
    "include/linux/compiler_types.h",
    "include/linux/init.h",
    "include/linux/module.h",
    "init/Kconfig",
    "kernel/Makefile",
    "kernel/cfi.c",
    "kernel/module.c",
    "scripts/Makefile.modfinal"
  ],
  "files_changed_count": 14,
  "stats": [
    {
      "file": "Makefile",
      "insertions": 17,
      "deletions": 0
    },
    {
      "file": "arch/Kconfig",
      "insertions": 45,
      "deletions": 0
    },
    {
      "file": "include/asm-generic/bug.h",
      "insertions": 16,
      "deletions": 0
    },
    {
      "file": "include/asm-generic/vmlinux.lds.h",
      "insertions": 19,
      "deletions": 1
    },
    {
      "file": "include/linux/cfi.h",
      "insertions": 41,
      "deletions": 0
    },
    {
      "file": "include/linux/compiler-clang.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "include/linux/compiler_types.h",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "include/linux/init.h",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "include/linux/module.h",
      "insertions": 11,
      "deletions": 2
    },
    {
      "file": "init/Kconfig",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "kernel/Makefile",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "kernel/cfi.c",
      "insertions": 329,
      "deletions": 0
    },
    {
      "file": "kernel/module.c",
      "insertions": 43,
      "deletions": 0
    },
    {
      "file": "scripts/Makefile.modfinal",
      "insertions": 1,
      "deletions": 1
    }
  ],
  "total_insertions": 534,
  "total_deletions": 6,
  "total_changes": 540,
  "parents": [
    "e49d033bddf5b565044e2abe4241353959bc9120"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/asm-generic/vmlinux.lds.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "Makefile",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/asm-generic/bug.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/cfi.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/init.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/compiler_types.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/compiler-clang.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/module.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/Makefile",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "init/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "scripts/Makefile.modfinal",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/cfi.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/module.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}