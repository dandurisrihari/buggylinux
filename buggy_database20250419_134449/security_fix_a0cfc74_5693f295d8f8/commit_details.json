{
  "hash": "a0cfc74d0b00c5201e1c09e28b2dc01c8088f809",
  "hash_short": "a0cfc74d",
  "subject": "x86/irq: Provide macro for inlining irq stack switching",
  "body": "The effort to make the ASM entry code slim and unified moved the irq stack\nswitching out of the low level ASM code so that the whole return from\ninterrupt work and state handling can be done in C and the ASM code just\nhandles the low level details of entry and exit.\n\nThis ended up being a suboptimal implementation for various reasons\n(including tooling). The main pain points are:\n\n - The indirect call which is expensive thanks to retpoline\n\n - The inability to stay on the irq stack for softirq processing on return\n   from interrupt\n\n - The fact that the stack switching code ends up being an easy to target\n   exploit gadget.\n\nPrepare for inlining the stack switching logic into the C entry points by\nproviding a ASM macro which contains the guts of the switching mechanism:\n\n  1) Store RSP at the top of the irq stack\n  2) Switch RSP to the irq stack\n  3) Invoke code\n  4) Pop the original RSP back\n\nDocument the unholy asm() logic while at it to reduce the amount of head\nscratching required a half year from now.\n\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nReviewed-by: Kees Cook <keescook@chromium.org>\nLink: https://lore.kernel.org/r/20210210002512.578371068@linutronix.de",
  "full_message": "x86/irq: Provide macro for inlining irq stack switching\n\nThe effort to make the ASM entry code slim and unified moved the irq stack\nswitching out of the low level ASM code so that the whole return from\ninterrupt work and state handling can be done in C and the ASM code just\nhandles the low level details of entry and exit.\n\nThis ended up being a suboptimal implementation for various reasons\n(including tooling). The main pain points are:\n\n - The indirect call which is expensive thanks to retpoline\n\n - The inability to stay on the irq stack for softirq processing on return\n   from interrupt\n\n - The fact that the stack switching code ends up being an easy to target\n   exploit gadget.\n\nPrepare for inlining the stack switching logic into the C entry points by\nproviding a ASM macro which contains the guts of the switching mechanism:\n\n  1) Store RSP at the top of the irq stack\n  2) Switch RSP to the irq stack\n  3) Invoke code\n  4) Pop the original RSP back\n\nDocument the unholy asm() logic while at it to reduce the amount of head\nscratching required a half year from now.\n\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nReviewed-by: Kees Cook <keescook@chromium.org>\nLink: https://lore.kernel.org/r/20210210002512.578371068@linutronix.de",
  "author_name": "Thomas Gleixner",
  "author_email": "tglx@linutronix.de",
  "author_date": "Wed Feb 10 00:40:46 2021 +0100",
  "author_date_iso": "2021-02-10T00:40:46+01:00",
  "committer_name": "Thomas Gleixner",
  "committer_email": "tglx@linutronix.de",
  "committer_date": "Wed Feb 10 23:34:14 2021 +0100",
  "committer_date_iso": "2021-02-10T23:34:14+01:00",
  "files_changed": [
    "arch/x86/include/asm/irq_stack.h"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/x86/include/asm/irq_stack.h",
      "insertions": 98,
      "deletions": 0
    }
  ],
  "total_insertions": 98,
  "total_deletions": 0,
  "total_changes": 98,
  "parents": [
    "3c5e0267ec3e6ed7d3f1793273cbf0beb4f86a74"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/include/asm/irq_stack.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}