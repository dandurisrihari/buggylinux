{
  "hash": "81eeb95ddbabbb998a6b39f762bc7edaa2a979b4",
  "hash_short": "81eeb95d",
  "subject": "KVM: arm/arm64: vgic-new: Implement virtual IRQ injection",
  "body": "Provide a vgic_queue_irq_unlock() function which decides whether a\ngiven IRQ needs to be queued to a VCPU's ap_list.\nThis should be called whenever an IRQ becomes pending or enabled,\neither as a result of userspace injection, from in-kernel emulated\ndevices like the architected timer or from MMIO accesses to the\ndistributor emulation.\nAlso provides the necessary functions to allow userland to inject an\nIRQ to a guest.\nSince this is the first code that starts using our locking mechanism, we\nadd some (hopefully) clear documentation of our locking strategy and\nrequirements along with this patch.\n\nSigned-off-by: Christoffer Dall <christoffer.dall@linaro.org>\nSigned-off-by: Andre Przywara <andre.przywara@arm.com>",
  "full_message": "KVM: arm/arm64: vgic-new: Implement virtual IRQ injection\n\nProvide a vgic_queue_irq_unlock() function which decides whether a\ngiven IRQ needs to be queued to a VCPU's ap_list.\nThis should be called whenever an IRQ becomes pending or enabled,\neither as a result of userspace injection, from in-kernel emulated\ndevices like the architected timer or from MMIO accesses to the\ndistributor emulation.\nAlso provides the necessary functions to allow userland to inject an\nIRQ to a guest.\nSince this is the first code that starts using our locking mechanism, we\nadd some (hopefully) clear documentation of our locking strategy and\nrequirements along with this patch.\n\nSigned-off-by: Christoffer Dall <christoffer.dall@linaro.org>\nSigned-off-by: Andre Przywara <andre.przywara@arm.com>",
  "author_name": "Christoffer Dall",
  "author_email": "christoffer.dall@linaro.org",
  "author_date": "Wed Nov 25 10:02:16 2015 -0800",
  "author_date_iso": "2015-11-25T10:02:16-08:00",
  "committer_name": "Christoffer Dall",
  "committer_email": "christoffer.dall@linaro.org",
  "committer_date": "Fri May 20 15:39:46 2016 +0200",
  "committer_date_iso": "2016-05-20T15:39:46+02:00",
  "files_changed": [
    "include/kvm/vgic/vgic.h",
    "virt/kvm/arm/vgic/vgic.c",
    "virt/kvm/arm/vgic/vgic.h"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "include/kvm/vgic/vgic.h",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "virt/kvm/arm/vgic/vgic.c",
      "insertions": 211,
      "deletions": 0
    },
    {
      "file": "virt/kvm/arm/vgic/vgic.h",
      "insertions": 1,
      "deletions": 0
    }
  ],
  "total_insertions": 215,
  "total_deletions": 0,
  "total_changes": 215,
  "parents": [
    "64a959d66e47039833e7f3c8d7e50fd4afa078ca"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.10",
    "v4.10-rc1",
    "v4.10-rc2",
    "v4.10-rc3",
    "v4.10-rc4",
    "v4.10-rc5",
    "v4.10-rc6",
    "v4.10-rc7",
    "v4.10-rc8",
    "v4.11"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/kvm/vgic/vgic.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "virt/kvm/arm/vgic/vgic.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "virt/kvm/arm/vgic/vgic.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}