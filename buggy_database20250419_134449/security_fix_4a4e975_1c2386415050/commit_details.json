{
  "hash": "4a4e975bae37c995b12b4a86d46a6c14fa804277",
  "hash_short": "4a4e975b",
  "subject": "test_firmware: Error injection for firmware upload",
  "body": "Add error injection capability to the test_firmware module specifically\nfor firmware upload testing. Error injection instructions are transferred\nas the first part of the firmware payload. The format of an error\ninjection string is similar to the error strings that may be read from\nthe error sysfs node.\n\nTo inject the error \"programming:hw-error\", one would use the error\ninjection string \"inject:programming:hw-error\" as the firmware payload:\n\n$ echo 1 > loading\n$ echo inject:programming:hw-error > data\n$ echo 0 > loading\n$ cat status\nidle\n$ cat error\nprogramming:hw-error\n\nThe first part of the error string is the progress state of the upload at\nthe time of the error. The progress state would be one of the following:\n\"preparing\", \"transferring\", or \"programming\". The second part of the\nerror string is one of the following: \"hw-error\", \"timeout\", \"device-busy\",\n\"invalid-file-size\", \"read-write-error\", \"flash-wearout\", and \"user-abort\".\n\nNote that all of the error strings except \"user-abort\" will fail without\ndelay. The \"user-abort\" error will cause the firmware upload to stall at\nthe requested progress state for up to 5 minutes to allow you to echo 1\nto the cancel sysfs node. It is this cancellation that causes the\n'user-abort\" error. If the upload is not cancelled within the 5 minute\ntime period, then the upload will complete without an error.\n\nReviewed-by: Luis Chamberlain <mcgrof@kernel.org>\nReviewed-by: Tianfei zhang <tianfei.zhang@intel.com>\nTested-by: Matthew Gerlach <matthew.gerlach@linux.intel.com>\nSigned-off-by: Russ Weight <russell.h.weight@intel.com>\nLink: https://lore.kernel.org/r/20220421212204.36052-8-russell.h.weight@intel.com\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
  "full_message": "test_firmware: Error injection for firmware upload\n\nAdd error injection capability to the test_firmware module specifically\nfor firmware upload testing. Error injection instructions are transferred\nas the first part of the firmware payload. The format of an error\ninjection string is similar to the error strings that may be read from\nthe error sysfs node.\n\nTo inject the error \"programming:hw-error\", one would use the error\ninjection string \"inject:programming:hw-error\" as the firmware payload:\n\n$ echo 1 > loading\n$ echo inject:programming:hw-error > data\n$ echo 0 > loading\n$ cat status\nidle\n$ cat error\nprogramming:hw-error\n\nThe first part of the error string is the progress state of the upload at\nthe time of the error. The progress state would be one of the following:\n\"preparing\", \"transferring\", or \"programming\". The second part of the\nerror string is one of the following: \"hw-error\", \"timeout\", \"device-busy\",\n\"invalid-file-size\", \"read-write-error\", \"flash-wearout\", and \"user-abort\".\n\nNote that all of the error strings except \"user-abort\" will fail without\ndelay. The \"user-abort\" error will cause the firmware upload to stall at\nthe requested progress state for up to 5 minutes to allow you to echo 1\nto the cancel sysfs node. It is this cancellation that causes the\n'user-abort\" error. If the upload is not cancelled within the 5 minute\ntime period, then the upload will complete without an error.\n\nReviewed-by: Luis Chamberlain <mcgrof@kernel.org>\nReviewed-by: Tianfei zhang <tianfei.zhang@intel.com>\nTested-by: Matthew Gerlach <matthew.gerlach@linux.intel.com>\nSigned-off-by: Russ Weight <russell.h.weight@intel.com>\nLink: https://lore.kernel.org/r/20220421212204.36052-8-russell.h.weight@intel.com\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
  "author_name": "Russ Weight",
  "author_email": "russell.h.weight@intel.com",
  "author_date": "Thu Apr 21 14:22:03 2022 -0700",
  "author_date_iso": "2022-04-21T14:22:03-07:00",
  "committer_name": "Greg Kroah-Hartman",
  "committer_email": "gregkh@linuxfoundation.org",
  "committer_date": "Tue Apr 26 12:36:13 2022 +0200",
  "committer_date_iso": "2022-04-26T12:36:13+02:00",
  "files_changed": [
    "lib/test_firmware.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "lib/test_firmware.c",
      "insertions": 122,
      "deletions": 5
    }
  ],
  "total_insertions": 122,
  "total_deletions": 5,
  "total_changes": 127,
  "parents": [
    "a31ad463b72de2ec1a71bb4690acaf1e6dcafb45"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "lib/test_firmware.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}