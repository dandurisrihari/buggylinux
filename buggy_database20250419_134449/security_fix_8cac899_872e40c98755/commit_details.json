{
  "hash": "8cac89909a30807eb4aba56a0e29f55e3b6df42f",
  "hash_short": "8cac8990",
  "subject": "Merge tag 'for-linus-2020-01-18' of git://git.kernel.org/pub/scm/linux/kernel/git/brauner/linux",
  "body": "Pull thread fixes from Christian Brauner:\n \"Here is an urgent fix for ptrace_may_access() permission checking.\n\n  Commit 69f594a38967 (\"ptrace: do not audit capability check when\n  outputing /proc/pid/stat\") introduced the ability to opt out of audit\n  messages for accesses to various proc files since they are not\n  violations of policy.\n\n  While doing so it switched the check from ns_capable() to\n  has_ns_capability{_noaudit}(). That means it switched from checking\n  the subjective credentials (ktask->cred) of the task to using the\n  objective credentials (ktask->real_cred). This is appears to be wrong.\n  ptrace_has_cap() is currently only used in ptrace_may_access() And is\n  used to check whether the calling task (subject) has the\n  CAP_SYS_PTRACE capability in the provided user namespace to operate on\n  the target task (object). According to the cred.h comments this means\n  the subjective credentials of the calling task need to be used.\n\n  With this fix we switch ptrace_has_cap() to use security_capable() and\n  thus back to using the subjective credentials.\n\n  As one example where this might be particularly problematic, Jann\n  pointed out that in combination with the upcoming IORING_OP_OPENAT{2}\n  feature, this bug might allow unprivileged users to bypass the\n  capability checks while asynchronously opening files like /proc/*/mem,\n  because the capability checks for this would be performed against\n  kernel credentials.\n\n  To illustrate on the former point about this being exploitable: When\n  io_uring creates a new context it records the subjective credentials\n  of the caller. Later on, when it starts to do work it creates a kernel\n  thread and registers a callback. The callback runs with kernel creds\n  for ktask->real_cred and ktask->cred.\n\n  To prevent this from becoming a full-blown 0-day io_uring will call\n  override_cred() and override ktask->cred with the subjective\n  credentials of the creator of the io_uring instance. With\n  ptrace_has_cap() currently looking at ktask->real_cred this override\n  will be ineffective and the caller will be able to open arbitray proc\n  files as mentioned above.\n\n  Luckily, this is currently not exploitable but would be so once\n  IORING_OP_OPENAT{2} land in v5.6. Let's fix it now.\n\n  To minimize potential regressions I successfully ran the criu\n  testsuite. criu makes heavy use of ptrace() and extensively hits\n  ptrace_may_access() codepaths and has a good change of detecting any\n  regressions.\n\n  Additionally, I succesfully ran the ptrace and seccomp kernel tests\"\n\n* tag 'for-linus-2020-01-18' of git://git.kernel.org/pub/scm/linux/kernel/git/brauner/linux:\n  ptrace: reintroduce usage of subjective credentials in ptrace_has_cap()",
  "full_message": "Merge tag 'for-linus-2020-01-18' of git://git.kernel.org/pub/scm/linux/kernel/git/brauner/linux\n\nPull thread fixes from Christian Brauner:\n \"Here is an urgent fix for ptrace_may_access() permission checking.\n\n  Commit 69f594a38967 (\"ptrace: do not audit capability check when\n  outputing /proc/pid/stat\") introduced the ability to opt out of audit\n  messages for accesses to various proc files since they are not\n  violations of policy.\n\n  While doing so it switched the check from ns_capable() to\n  has_ns_capability{_noaudit}(). That means it switched from checking\n  the subjective credentials (ktask->cred) of the task to using the\n  objective credentials (ktask->real_cred). This is appears to be wrong.\n  ptrace_has_cap() is currently only used in ptrace_may_access() And is\n  used to check whether the calling task (subject) has the\n  CAP_SYS_PTRACE capability in the provided user namespace to operate on\n  the target task (object). According to the cred.h comments this means\n  the subjective credentials of the calling task need to be used.\n\n  With this fix we switch ptrace_has_cap() to use security_capable() and\n  thus back to using the subjective credentials.\n\n  As one example where this might be particularly problematic, Jann\n  pointed out that in combination with the upcoming IORING_OP_OPENAT{2}\n  feature, this bug might allow unprivileged users to bypass the\n  capability checks while asynchronously opening files like /proc/*/mem,\n  because the capability checks for this would be performed against\n  kernel credentials.\n\n  To illustrate on the former point about this being exploitable: When\n  io_uring creates a new context it records the subjective credentials\n  of the caller. Later on, when it starts to do work it creates a kernel\n  thread and registers a callback. The callback runs with kernel creds\n  for ktask->real_cred and ktask->cred.\n\n  To prevent this from becoming a full-blown 0-day io_uring will call\n  override_cred() and override ktask->cred with the subjective\n  credentials of the creator of the io_uring instance. With\n  ptrace_has_cap() currently looking at ktask->real_cred this override\n  will be ineffective and the caller will be able to open arbitray proc\n  files as mentioned above.\n\n  Luckily, this is currently not exploitable but would be so once\n  IORING_OP_OPENAT{2} land in v5.6. Let's fix it now.\n\n  To minimize potential regressions I successfully ran the criu\n  testsuite. criu makes heavy use of ptrace() and extensively hits\n  ptrace_may_access() codepaths and has a good change of detecting any\n  regressions.\n\n  Additionally, I succesfully ran the ptrace and seccomp kernel tests\"\n\n* tag 'for-linus-2020-01-18' of git://git.kernel.org/pub/scm/linux/kernel/git/brauner/linux:\n  ptrace: reintroduce usage of subjective credentials in ptrace_has_cap()",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Sat Jan 18 12:23:31 2020 -0800",
  "author_date_iso": "2020-01-18T12:23:31-08:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Sat Jan 18 12:23:31 2020 -0800",
  "committer_date_iso": "2020-01-18T12:23:31-08:00",
  "files_changed": [],
  "files_changed_count": 0,
  "stats": [
    {
      "file": "kernel/ptrace.c",
      "insertions": 10,
      "deletions": 5
    }
  ],
  "total_insertions": 10,
  "total_deletions": 5,
  "total_changes": 15,
  "parents": [
    "2324de6fab2223287da7628ba92dc6cfed4f46ca",
    "6b3ad6649a4c75504edeba242d3fd36b3096a57f"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.5",
    "v5.5-rc7",
    "v5.6",
    "v5.6-rc1",
    "v5.6-rc2",
    "v5.6-rc3",
    "v5.6-rc4",
    "v5.6-rc5",
    "v5.6-rc6",
    "v5.6-rc7"
  ],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "bypass"
    ]
  },
  "fix_type": "security",
  "file_results": []
}