{
  "hash": "c1b7fcf3f6d94c2c3528bf77054bf174a5ef63d7",
  "hash_short": "c1b7fcf3",
  "subject": "Merge tag 'for-6.6/io_uring-2023-08-28' of git://git.kernel.dk/linux",
  "body": "Pull io_uring updates from Jens Axboe:\n \"Fairly quiet round in terms of features, mostly just improvements all\n  over the map for existing code. In detail:\n\n   - Initial support for socket operations through io_uring. Latter half\n     of this will likely land with the 6.7 kernel, then allowing things\n     like get/setsockopt (Breno)\n\n   - Cleanup of the cancel code, and then adding support for canceling\n     requests with the opcode as the key (me)\n\n   - Improvements for the io-wq locking (me)\n\n   - Fix affinity setting for SQPOLL based io-wq (me)\n\n   - Remove the io_uring userspace code. These were added initially as\n     copies from liburing, but all of them have since bitrotted and are\n     way out of date at this point. Rather than attempt to keep them in\n     sync, just get rid of them. People will have liburing available\n     anyway for these examples. (Pavel)\n\n   - Series improving the CQ/SQ ring caching (Pavel)\n\n   - Misc fixes and cleanups (Pavel, Yue, me)\"\n\n* tag 'for-6.6/io_uring-2023-08-28' of git://git.kernel.dk/linux: (47 commits)\n  io_uring: move iopoll ctx fields around\n  io_uring: move multishot cqe cache in ctx\n  io_uring: separate task_work/waiting cache line\n  io_uring: banish non-hot data to end of io_ring_ctx\n  io_uring: move non aligned field to the end\n  io_uring: add option to remove SQ indirection\n  io_uring: compact SQ/CQ heads/tails\n  io_uring: force inline io_fill_cqe_req\n  io_uring: merge iopoll and normal completion paths\n  io_uring: reorder cqring_flush and wakeups\n  io_uring: optimise extra io_get_cqe null check\n  io_uring: refactor __io_get_cqe()\n  io_uring: simplify big_cqe handling\n  io_uring: cqe init hardening\n  io_uring: improve cqe !tracing hot path\n  io_uring/rsrc: Annotate struct io_mapped_ubuf with __counted_by\n  io_uring/sqpoll: fix io-wq affinity when IORING_SETUP_SQPOLL is used\n  io_uring: simplify io_run_task_work_sig return\n  io_uring/rsrc: keep one global dummy_ubuf\n  io_uring: never overflow io_aux_cqe\n  ...",
  "full_message": "Merge tag 'for-6.6/io_uring-2023-08-28' of git://git.kernel.dk/linux\n\nPull io_uring updates from Jens Axboe:\n \"Fairly quiet round in terms of features, mostly just improvements all\n  over the map for existing code. In detail:\n\n   - Initial support for socket operations through io_uring. Latter half\n     of this will likely land with the 6.7 kernel, then allowing things\n     like get/setsockopt (Breno)\n\n   - Cleanup of the cancel code, and then adding support for canceling\n     requests with the opcode as the key (me)\n\n   - Improvements for the io-wq locking (me)\n\n   - Fix affinity setting for SQPOLL based io-wq (me)\n\n   - Remove the io_uring userspace code. These were added initially as\n     copies from liburing, but all of them have since bitrotted and are\n     way out of date at this point. Rather than attempt to keep them in\n     sync, just get rid of them. People will have liburing available\n     anyway for these examples. (Pavel)\n\n   - Series improving the CQ/SQ ring caching (Pavel)\n\n   - Misc fixes and cleanups (Pavel, Yue, me)\"\n\n* tag 'for-6.6/io_uring-2023-08-28' of git://git.kernel.dk/linux: (47 commits)\n  io_uring: move iopoll ctx fields around\n  io_uring: move multishot cqe cache in ctx\n  io_uring: separate task_work/waiting cache line\n  io_uring: banish non-hot data to end of io_ring_ctx\n  io_uring: move non aligned field to the end\n  io_uring: add option to remove SQ indirection\n  io_uring: compact SQ/CQ heads/tails\n  io_uring: force inline io_fill_cqe_req\n  io_uring: merge iopoll and normal completion paths\n  io_uring: reorder cqring_flush and wakeups\n  io_uring: optimise extra io_get_cqe null check\n  io_uring: refactor __io_get_cqe()\n  io_uring: simplify big_cqe handling\n  io_uring: cqe init hardening\n  io_uring: improve cqe !tracing hot path\n  io_uring/rsrc: Annotate struct io_mapped_ubuf with __counted_by\n  io_uring/sqpoll: fix io-wq affinity when IORING_SETUP_SQPOLL is used\n  io_uring: simplify io_run_task_work_sig return\n  io_uring/rsrc: keep one global dummy_ubuf\n  io_uring: never overflow io_aux_cqe\n  ...",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Tue Aug 29 20:11:33 2023 -0700",
  "author_date_iso": "2023-08-29T20:11:33-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Tue Aug 29 20:11:33 2023 -0700",
  "committer_date_iso": "2023-08-29T20:11:33-07:00",
  "files_changed": [
    "MAINTAINERS",
    "io_uring/io_uring.c",
    "io_uring/rw.c",
    "net/socket.c"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "MAINTAINERS",
      "insertions": 0,
      "deletions": 1
    },
    {
      "file": "include/linux/io_uring.h",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "include/linux/io_uring_types.h",
      "insertions": 65,
      "deletions": 64
    },
    {
      "file": "include/uapi/linux/io_uring.h",
      "insertions": 20,
      "deletions": 1
    },
    {
      "file": "io_uring/cancel.c",
      "insertions": 46,
      "deletions": 14
    },
    {
      "file": "io_uring/cancel.h",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "io_uring/fdinfo.c",
      "insertions": 6,
      "deletions": 12
    },
    {
      "file": "io_uring/io-wq.c",
      "insertions": 47,
      "deletions": 23
    },
    {
      "file": "io_uring/io-wq.h",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "io_uring/io_uring.c",
      "insertions": 123,
      "deletions": 102
    },
    {
      "file": "io_uring/io_uring.h",
      "insertions": 30,
      "deletions": 49
    },
    {
      "file": "io_uring/net.c",
      "insertions": 4,
      "deletions": 4
    },
    {
      "file": "io_uring/poll.c",
      "insertions": 9,
      "deletions": 12
    },
    {
      "file": "io_uring/rsrc.c",
      "insertions": 10,
      "deletions": 4
    },
    {
      "file": "io_uring/rsrc.h",
      "insertions": 1,
      "deletions": 2
    },
    {
      "file": "io_uring/rw.c",
      "insertions": 5,
      "deletions": 19
    },
    {
      "file": "io_uring/splice.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "io_uring/sqpoll.c",
      "insertions": 15,
      "deletions": 0
    },
    {
      "file": "io_uring/sqpoll.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "io_uring/timeout.c",
      "insertions": 7,
      "deletions": 13
    },
    {
      "file": "io_uring/uring_cmd.c",
      "insertions": 30,
      "deletions": 3
    },
    {
      "file": "net/socket.c",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "tools/io_uring/Makefile",
      "insertions": 0,
      "deletions": 18
    },
    {
      "file": "tools/io_uring/README",
      "insertions": 0,
      "deletions": 29
    },
    {
      "file": "tools/io_uring/barrier.h",
      "insertions": 0,
      "deletions": 16
    },
    {
      "file": "tools/io_uring/io_uring-bench.c",
      "insertions": 0,
      "deletions": 592
    },
    {
      "file": "tools/io_uring/io_uring-cp.c",
      "insertions": 0,
      "deletions": 283
    },
    {
      "file": "tools/io_uring/liburing.h",
      "insertions": 0,
      "deletions": 187
    },
    {
      "file": "tools/io_uring/queue.c",
      "insertions": 0,
      "deletions": 156
    },
    {
      "file": "tools/io_uring/setup.c",
      "insertions": 0,
      "deletions": 107
    },
    {
      "file": "tools/io_uring/syscall.c",
      "insertions": 0,
      "deletions": 52
    }
  ],
  "total_insertions": 432,
  "total_deletions": 1767,
  "total_changes": 2199,
  "parents": [
    "adfd671676c922bada16477eb68b5eb5f065addc",
    "644c4a7a721fb90356cdd42219c9928a3c386230"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "MAINTAINERS",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "io_uring/io_uring.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "io_uring/rw.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/socket.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}