{
  "hash": "2198d07c509f1db4a1185d1f65aaada794c6ea59",
  "hash_short": "2198d07c",
  "subject": "arm64: Always load shadow stack pointer directly from the task struct",
  "body": "All occurrences of the scs_load macro load the value of the shadow call\nstack pointer from the task which is current at that point. So instead\nof taking a task struct register argument in the scs_load macro to\nspecify the task struct to load from, let's always reference the current\ntask directly. This should make it much harder to exploit any\ninstruction sequences reloading the shadow call stack pointer register\nfrom memory.\n\nSigned-off-by: Ard Biesheuvel <ardb@kernel.org>\nAcked-by: Mark Rutland <mark.rutland@arm.com>\nReviewed-by: Kees Cook <keescook@chromium.org>\nLink: https://lore.kernel.org/r/20230109174800.3286265-2-ardb@kernel.org\nSigned-off-by: Catalin Marinas <catalin.marinas@arm.com>",
  "full_message": "arm64: Always load shadow stack pointer directly from the task struct\n\nAll occurrences of the scs_load macro load the value of the shadow call\nstack pointer from the task which is current at that point. So instead\nof taking a task struct register argument in the scs_load macro to\nspecify the task struct to load from, let's always reference the current\ntask directly. This should make it much harder to exploit any\ninstruction sequences reloading the shadow call stack pointer register\nfrom memory.\n\nSigned-off-by: Ard Biesheuvel <ardb@kernel.org>\nAcked-by: Mark Rutland <mark.rutland@arm.com>\nReviewed-by: Kees Cook <keescook@chromium.org>\nLink: https://lore.kernel.org/r/20230109174800.3286265-2-ardb@kernel.org\nSigned-off-by: Catalin Marinas <catalin.marinas@arm.com>",
  "author_name": "Ard Biesheuvel",
  "author_email": "ardb@kernel.org",
  "author_date": "Mon Jan 9 18:47:59 2023 +0100",
  "author_date_iso": "2023-01-09T18:47:59+01:00",
  "committer_name": "Catalin Marinas",
  "committer_email": "catalin.marinas@arm.com",
  "committer_date": "Fri Jan 20 14:26:18 2023 +0000",
  "committer_date_iso": "2023-01-20T14:26:18+00:00",
  "files_changed": [
    "arch/arm64/include/asm/scs.h",
    "arch/arm64/kernel/entry.S",
    "arch/arm64/kernel/head.S"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "arch/arm64/include/asm/scs.h",
      "insertions": 4,
      "deletions": 3
    },
    {
      "file": "arch/arm64/kernel/entry.S",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm64/kernel/head.S",
      "insertions": 1,
      "deletions": 1
    }
  ],
  "total_insertions": 7,
  "total_deletions": 6,
  "total_changes": 13,
  "parents": [
    "b7bfaa761d760e72a969d116517eaa12e404c262"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/arm64/include/asm/scs.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/entry.S",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/head.S",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}