commit 2198d07c509f1db4a1185d1f65aaada794c6ea59
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Mon Jan 9 18:47:59 2023 +0100

    arm64: Always load shadow stack pointer directly from the task struct
    
    All occurrences of the scs_load macro load the value of the shadow call
    stack pointer from the task which is current at that point. So instead
    of taking a task struct register argument in the scs_load macro to
    specify the task struct to load from, let's always reference the current
    task directly. This should make it much harder to exploit any
    instruction sequences reloading the shadow call stack pointer register
    from memory.
    
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Acked-by: Mark Rutland <mark.rutland@arm.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20230109174800.3286265-2-ardb@kernel.org
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>

diff --git a/arch/arm64/kernel/head.S b/arch/arm64/kernel/head.S
index 952e17bd1c0b..b9c1a506798e 100644
--- a/arch/arm64/kernel/head.S
+++ b/arch/arm64/kernel/head.S
@@ -404,7 +404,7 @@ SYM_FUNC_END(create_kernel_mapping)
 	stp	xzr, xzr, [sp, #S_STACKFRAME]
 	add	x29, sp, #S_STACKFRAME
 
-	scs_load \tsk
+	scs_load_current
 
 	adr_l	\tmp1, __per_cpu_offset
 	ldr	w\tmp2, [\tsk, #TSK_TI_CPU]