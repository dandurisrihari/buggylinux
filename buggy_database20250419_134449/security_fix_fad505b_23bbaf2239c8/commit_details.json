{
  "hash": "fad505b2cb838fb52cb72fa22830824c80330f2f",
  "hash_short": "fad505b2",
  "subject": "KVM: x86: Service NMI requests after PMI requests in VM-Enter path",
  "body": "Service NMI and SMI requests after PMI requests in vcpu_enter_guest() so\nthat KVM does not need to cancel and redo the VM-Enter if the guest\nconfigures its PMIs to be delivered as NMIs (likely) or SMIs (unlikely).\nBecause APIC emulation \"injects\" NMIs via KVM_REQ_NMI, handling PMI\nrequests after NMI requests (the likely case) means KVM won't detect the\npending NMI request until the final check for outstanding requests.\nDetecting requests at the final stage is costly as KVM has already loaded\nguest state, potentially queued events for injection, disabled IRQs,\ndropped SRCU, etc., most of which needs to be unwound.\n\nNote that changing the order of request processing doesn't change the end\nresult, as KVM's final check for outstanding requests prevents entering\nthe guest until all requests are serviced.  I.e. KVM will ultimately\ncoalesce events (or not) regardless of the ordering.\n\nUsing SPEC2017 benchmark programs running along with Intel vtune in a VM\ndemonstrates that the following code change reduces 800~1500 canceled\nVM-Enters per second.\n\nSome glory details:\n\nProbe the invocation to vmx_cancel_injection():\n\n    $ perf probe -a vmx_cancel_injection\n    $ perf stat -a -e probe:vmx_cancel_injection -I 10000 # per 10 seconds\n\nPartial results when SPEC2017 with Intel vtune are running in the VM:\n\nOn kernel without the change:\n    10.010018010              14254      probe:vmx_cancel_injection\n    20.037646388              15207      probe:vmx_cancel_injection\n    30.078739816              15261      probe:vmx_cancel_injection\n    40.114033258              15085      probe:vmx_cancel_injection\n    50.149297460              15112      probe:vmx_cancel_injection\n    60.185103088              15104      probe:vmx_cancel_injection\n\nOn kernel with the change:\n    10.003595390                 40      probe:vmx_cancel_injection\n    20.017855682                 31      probe:vmx_cancel_injection\n    30.028355883                 34      probe:vmx_cancel_injection\n    40.038686298                 31      probe:vmx_cancel_injection\n    50.048795162                 20      probe:vmx_cancel_injection\n    60.069057747                 19      probe:vmx_cancel_injection\n\nSuggested-by: Sean Christopherson <seanjc@google.com>\nSigned-off-by: Mingwei Zhang <mizhang@google.com>\nLink: https://lore.kernel.org/r/20231002040839.2630027-1-mizhang@google.com\n[sean: hoist PMU/PMI above SMI too, massage changelog]\nSigned-off-by: Sean Christopherson <seanjc@google.com>",
  "full_message": "KVM: x86: Service NMI requests after PMI requests in VM-Enter path\n\nService NMI and SMI requests after PMI requests in vcpu_enter_guest() so\nthat KVM does not need to cancel and redo the VM-Enter if the guest\nconfigures its PMIs to be delivered as NMIs (likely) or SMIs (unlikely).\nBecause APIC emulation \"injects\" NMIs via KVM_REQ_NMI, handling PMI\nrequests after NMI requests (the likely case) means KVM won't detect the\npending NMI request until the final check for outstanding requests.\nDetecting requests at the final stage is costly as KVM has already loaded\nguest state, potentially queued events for injection, disabled IRQs,\ndropped SRCU, etc., most of which needs to be unwound.\n\nNote that changing the order of request processing doesn't change the end\nresult, as KVM's final check for outstanding requests prevents entering\nthe guest until all requests are serviced.  I.e. KVM will ultimately\ncoalesce events (or not) regardless of the ordering.\n\nUsing SPEC2017 benchmark programs running along with Intel vtune in a VM\ndemonstrates that the following code change reduces 800~1500 canceled\nVM-Enters per second.\n\nSome glory details:\n\nProbe the invocation to vmx_cancel_injection():\n\n    $ perf probe -a vmx_cancel_injection\n    $ perf stat -a -e probe:vmx_cancel_injection -I 10000 # per 10 seconds\n\nPartial results when SPEC2017 with Intel vtune are running in the VM:\n\nOn kernel without the change:\n    10.010018010              14254      probe:vmx_cancel_injection\n    20.037646388              15207      probe:vmx_cancel_injection\n    30.078739816              15261      probe:vmx_cancel_injection\n    40.114033258              15085      probe:vmx_cancel_injection\n    50.149297460              15112      probe:vmx_cancel_injection\n    60.185103088              15104      probe:vmx_cancel_injection\n\nOn kernel with the change:\n    10.003595390                 40      probe:vmx_cancel_injection\n    20.017855682                 31      probe:vmx_cancel_injection\n    30.028355883                 34      probe:vmx_cancel_injection\n    40.038686298                 31      probe:vmx_cancel_injection\n    50.048795162                 20      probe:vmx_cancel_injection\n    60.069057747                 19      probe:vmx_cancel_injection\n\nSuggested-by: Sean Christopherson <seanjc@google.com>\nSigned-off-by: Mingwei Zhang <mizhang@google.com>\nLink: https://lore.kernel.org/r/20231002040839.2630027-1-mizhang@google.com\n[sean: hoist PMU/PMI above SMI too, massage changelog]\nSigned-off-by: Sean Christopherson <seanjc@google.com>",
  "author_name": "Mingwei Zhang",
  "author_email": "mizhang@google.com",
  "author_date": "Mon Oct 2 04:08:39 2023 +0000",
  "author_date_iso": "2023-10-02T04:08:39+00:00",
  "committer_name": "Sean Christopherson",
  "committer_email": "seanjc@google.com",
  "committer_date": "Fri Oct 27 13:20:29 2023 -0700",
  "committer_date_iso": "2023-10-27T13:20:29-07:00",
  "files_changed": [
    "arch/x86/kvm/x86.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/x86/kvm/x86.c",
      "insertions": 4,
      "deletions": 4
    }
  ],
  "total_insertions": 4,
  "total_deletions": 4,
  "total_changes": 8,
  "parents": [
    "2b3f2325e71f09098723727d665e2e8003d455dc"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/kvm/x86.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}