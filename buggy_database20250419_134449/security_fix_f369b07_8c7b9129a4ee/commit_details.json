{
  "hash": "f369b07c861435bd812a9d14493f71b34132ed6f",
  "hash_short": "f369b07c",
  "subject": "mm/uffd: reset write protection when unregister with wp-mode",
  "body": "The motivation of this patch comes from a recent report and patchfix from\nDavid Hildenbrand on hugetlb shared handling of wr-protected page [1].\n\nWith the reproducer provided in commit message of [1], one can leverage\nthe uffd-wp lazy-reset of ptes to trigger a hugetlb issue which can affect\nnot only the attacker process, but also the whole system.\n\nThe lazy-reset mechanism of uffd-wp was used to make unregister faster,\nmeanwhile it has an assumption that any leftover pgtable entries should\nonly affect the process on its own, so not only the user should be aware\nof anything it does, but also it should not affect outside of the process.\n\nBut it seems that this is not true, and it can also be utilized to make\nsome exploit easier.\n\nSo far there's no clue showing that the lazy-reset is important to any\nuserfaultfd users because normally the unregister will only happen once\nfor a specific range of memory of the lifecycle of the process.\n\nConsidering all above, what this patch proposes is to do explicit pte\nresets when unregister an uffd region with wr-protect mode enabled.\n\nIt should be the same as calling ioctl(UFFDIO_WRITEPROTECT, wp=false)\nright before ioctl(UFFDIO_UNREGISTER) for the user.  So potentially it'll\nmake the unregister slower.  From that pov it's a very slight abi change,\nbut hopefully nothing should break with this change either.\n\nRegarding to the change itself - core of uffd write [un]protect operation\nis moved into a separate function (uffd_wp_range()) and it is reused in\nthe unregister code path.\n\nNote that the new function will not check for anything, e.g.  ranges or\nmemory types, because they should have been checked during the previous\nUFFDIO_REGISTER or it should have failed already.  It also doesn't check\nmmap_changing because we're with mmap write lock held anyway.\n\nI added a Fixes upon introducing of uffd-wp shmem+hugetlbfs because that's\nthe only issue reported so far and that's the commit David's reproducer\nwill start working (v5.19+).  But the whole idea actually applies to not\nonly file memories but also anonymous.  It's just that we don't need to\nfix anonymous prior to v5.19- because there's no known way to exploit.\n\nIOW, this patch can also fix the issue reported in [1] as the patch 2 does.\n\n[1] https://lore.kernel.org/all/20220811103435.188481-3-david@redhat.com/\n\nLink: https://lkml.kernel.org/r/20220811201340.39342-1-peterx@redhat.com\nFixes: b1f9e876862d (\"mm/uffd: enable write protection for shmem & hugetlbfs\")\nSigned-off-by: Peter Xu <peterx@redhat.com>\nCc: David Hildenbrand <david@redhat.com>\nCc: Mike Rapoport <rppt@linux.vnet.ibm.com>\nCc: Mike Kravetz <mike.kravetz@oracle.com>\nCc: Andrea Arcangeli <aarcange@redhat.com>\nCc: Nadav Amit <nadav.amit@gmail.com>\nCc: Axel Rasmussen <axelrasmussen@google.com>\nCc: <stable@vger.kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>",
  "full_message": "mm/uffd: reset write protection when unregister with wp-mode\n\nThe motivation of this patch comes from a recent report and patchfix from\nDavid Hildenbrand on hugetlb shared handling of wr-protected page [1].\n\nWith the reproducer provided in commit message of [1], one can leverage\nthe uffd-wp lazy-reset of ptes to trigger a hugetlb issue which can affect\nnot only the attacker process, but also the whole system.\n\nThe lazy-reset mechanism of uffd-wp was used to make unregister faster,\nmeanwhile it has an assumption that any leftover pgtable entries should\nonly affect the process on its own, so not only the user should be aware\nof anything it does, but also it should not affect outside of the process.\n\nBut it seems that this is not true, and it can also be utilized to make\nsome exploit easier.\n\nSo far there's no clue showing that the lazy-reset is important to any\nuserfaultfd users because normally the unregister will only happen once\nfor a specific range of memory of the lifecycle of the process.\n\nConsidering all above, what this patch proposes is to do explicit pte\nresets when unregister an uffd region with wr-protect mode enabled.\n\nIt should be the same as calling ioctl(UFFDIO_WRITEPROTECT, wp=false)\nright before ioctl(UFFDIO_UNREGISTER) for the user.  So potentially it'll\nmake the unregister slower.  From that pov it's a very slight abi change,\nbut hopefully nothing should break with this change either.\n\nRegarding to the change itself - core of uffd write [un]protect operation\nis moved into a separate function (uffd_wp_range()) and it is reused in\nthe unregister code path.\n\nNote that the new function will not check for anything, e.g.  ranges or\nmemory types, because they should have been checked during the previous\nUFFDIO_REGISTER or it should have failed already.  It also doesn't check\nmmap_changing because we're with mmap write lock held anyway.\n\nI added a Fixes upon introducing of uffd-wp shmem+hugetlbfs because that's\nthe only issue reported so far and that's the commit David's reproducer\nwill start working (v5.19+).  But the whole idea actually applies to not\nonly file memories but also anonymous.  It's just that we don't need to\nfix anonymous prior to v5.19- because there's no known way to exploit.\n\nIOW, this patch can also fix the issue reported in [1] as the patch 2 does.\n\n[1] https://lore.kernel.org/all/20220811103435.188481-3-david@redhat.com/\n\nLink: https://lkml.kernel.org/r/20220811201340.39342-1-peterx@redhat.com\nFixes: b1f9e876862d (\"mm/uffd: enable write protection for shmem & hugetlbfs\")\nSigned-off-by: Peter Xu <peterx@redhat.com>\nCc: David Hildenbrand <david@redhat.com>\nCc: Mike Rapoport <rppt@linux.vnet.ibm.com>\nCc: Mike Kravetz <mike.kravetz@oracle.com>\nCc: Andrea Arcangeli <aarcange@redhat.com>\nCc: Nadav Amit <nadav.amit@gmail.com>\nCc: Axel Rasmussen <axelrasmussen@google.com>\nCc: <stable@vger.kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>",
  "author_name": "Peter Xu",
  "author_email": "peterx@redhat.com",
  "author_date": "Thu Aug 11 16:13:40 2022 -0400",
  "author_date_iso": "2022-08-11T16:13:40-04:00",
  "committer_name": "Andrew Morton",
  "committer_email": "akpm@linux-foundation.org",
  "committer_date": "Sat Aug 20 15:17:45 2022 -0700",
  "committer_date_iso": "2022-08-20T15:17:45-07:00",
  "files_changed": [
    "fs/userfaultfd.c",
    "include/linux/userfaultfd_k.h",
    "mm/userfaultfd.c"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "fs/userfaultfd.c",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "include/linux/userfaultfd_k.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "mm/userfaultfd.c",
      "insertions": 18,
      "deletions": 11
    }
  ],
  "total_insertions": 24,
  "total_deletions": 11,
  "total_changes": 35,
  "parents": [
    "efd4149342db2df41b1bbe68972ead853b30e444"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/userfaultfd.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/userfaultfd_k.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/userfaultfd.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}