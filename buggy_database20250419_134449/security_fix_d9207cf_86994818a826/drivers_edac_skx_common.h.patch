commit d9207cf7760f5f5599e9ff7eb0fedf56821a1d59
Author: Qiuxu Zhuo <qiuxu.zhuo@intel.com>
Date:   Fri Feb 14 08:27:28 2025 +0800

    EDAC/{skx_common,i10nm}: Fix some missing error reports on Emerald Rapids
    
    When doing error injection to some memory DIMMs on certain Intel Emerald
    Rapids servers, the i10nm_edac missed error reports for some memory DIMMs.
    
    Certain BIOS configurations may hide some memory controllers, and the
    i10nm_edac doesn't enumerate these hidden memory controllers. However, the
    ADXL decodes memory errors using memory controller physical indices even
    if there are hidden memory controllers. Therefore, the memory controller
    physical indices reported by the ADXL may mismatch the logical indices
    enumerated by the i10nm_edac, resulting in missed error reports for some
    memory DIMMs.
    
    Fix this issue by creating a mapping table from memory controller physical
    indices (used by the ADXL) to logical indices (used by the i10nm_edac) and
    using it to convert the physical indices to the logical indices during the
    error handling process.
    
    Fixes: c545f5e41225 ("EDAC/i10nm: Skip the absent memory controllers")
    Reported-by: Kevin Chang <kevin1.chang@intel.com>
    Tested-by: Kevin Chang <kevin1.chang@intel.com>
    Reported-by: Thomas Chen <Thomas.Chen@intel.com>
    Tested-by: Thomas Chen <Thomas.Chen@intel.com>
    Signed-off-by: Qiuxu Zhuo <qiuxu.zhuo@intel.com>
    Signed-off-by: Tony Luck <tony.luck@intel.com>
    Link: https://lore.kernel.org/r/20250214002728.6287-1-qiuxu.zhuo@intel.com

diff --git a/drivers/edac/skx_common.h b/drivers/edac/skx_common.h
index b0845bdd4516..ca5408803f87 100644
--- a/drivers/edac/skx_common.h
+++ b/drivers/edac/skx_common.h
@@ -93,6 +93,16 @@ struct skx_dev {
 	struct pci_dev *uracu; /* for i10nm CPU */
 	struct pci_dev *pcu_cr3; /* for HBM memory detection */
 	u32 mcroute;
+	/*
+	 * Some server BIOS may hide certain memory controllers, and the
+	 * EDAC driver skips those hidden memory controllers. However, the
+	 * ADXL still decodes memory error address using physical memory
+	 * controller indices. The mapping table is used to convert the
+	 * physical indices (reported by ADXL) to the logical indices
+	 * (used the EDAC driver) of present memory controllers during the
+	 * error handling process.
+	 */
+	u8 mc_mapping[NUM_IMC];
 	struct skx_imc {
 		struct mem_ctl_info *mci;
 		struct pci_dev *mdev; /* for i10nm CPU */
@@ -242,6 +252,7 @@ void skx_adxl_put(void);
 void skx_set_decode(skx_decode_f decode, skx_show_retry_log_f show_retry_log);
 void skx_set_mem_cfg(bool mem_cfg_2lm);
 void skx_set_res_cfg(struct res_config *cfg);
+void skx_set_mc_mapping(struct skx_dev *d, u8 pmc, u8 lmc);
 
 int skx_get_src_id(struct skx_dev *d, int off, u8 *id);