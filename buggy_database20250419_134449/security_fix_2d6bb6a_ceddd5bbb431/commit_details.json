{
  "hash": "2d6bb6adb714b133db92ccd4bfc9c20f75f71f3f",
  "hash_short": "2d6bb6ad",
  "subject": "Merge tag 'stackleak-v4.20-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux",
  "body": "Pull stackleak gcc plugin from Kees Cook:\n \"Please pull this new GCC plugin, stackleak, for v4.20-rc1. This plugin\n  was ported from grsecurity by Alexander Popov. It provides efficient\n  stack content poisoning at syscall exit. This creates a defense\n  against at least two classes of flaws:\n\n   - Uninitialized stack usage. (We continue to work on improving the\n     compiler to do this in other ways: e.g. unconditional zero init was\n     proposed to GCC and Clang, and more plugin work has started too).\n\n   - Stack content exposure. By greatly reducing the lifetime of valid\n     stack contents, exposures via either direct read bugs or unknown\n     cache side-channels become much more difficult to exploit. This\n     complements the existing buddy and heap poisoning options, but\n     provides the coverage for stacks.\n\n  The x86 hooks are included in this series (which have been reviewed by\n  Ingo, Dave Hansen, and Thomas Gleixner). The arm64 hooks have already\n  been merged through the arm64 tree (written by Laura Abbott and\n  reviewed by Mark Rutland and Will Deacon).\n\n  With VLAs having been removed this release, there is no need for\n  alloca() protection, so it has been removed from the plugin\"\n\n* tag 'stackleak-v4.20-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux:\n  arm64: Drop unneeded stackleak_check_alloca()\n  stackleak: Allow runtime disabling of kernel stack erasing\n  doc: self-protection: Add information about STACKLEAK feature\n  fs/proc: Show STACKLEAK metrics in the /proc file system\n  lkdtm: Add a test for STACKLEAK\n  gcc-plugins: Add STACKLEAK plugin for tracking the kernel stack\n  x86/entry: Add STACKLEAK erasing the kernel stack at the end of syscalls",
  "full_message": "Merge tag 'stackleak-v4.20-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux\n\nPull stackleak gcc plugin from Kees Cook:\n \"Please pull this new GCC plugin, stackleak, for v4.20-rc1. This plugin\n  was ported from grsecurity by Alexander Popov. It provides efficient\n  stack content poisoning at syscall exit. This creates a defense\n  against at least two classes of flaws:\n\n   - Uninitialized stack usage. (We continue to work on improving the\n     compiler to do this in other ways: e.g. unconditional zero init was\n     proposed to GCC and Clang, and more plugin work has started too).\n\n   - Stack content exposure. By greatly reducing the lifetime of valid\n     stack contents, exposures via either direct read bugs or unknown\n     cache side-channels become much more difficult to exploit. This\n     complements the existing buddy and heap poisoning options, but\n     provides the coverage for stacks.\n\n  The x86 hooks are included in this series (which have been reviewed by\n  Ingo, Dave Hansen, and Thomas Gleixner). The arm64 hooks have already\n  been merged through the arm64 tree (written by Laura Abbott and\n  reviewed by Mark Rutland and Will Deacon).\n\n  With VLAs having been removed this release, there is no need for\n  alloca() protection, so it has been removed from the plugin\"\n\n* tag 'stackleak-v4.20-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux:\n  arm64: Drop unneeded stackleak_check_alloca()\n  stackleak: Allow runtime disabling of kernel stack erasing\n  doc: self-protection: Add information about STACKLEAK feature\n  fs/proc: Show STACKLEAK metrics in the /proc file system\n  lkdtm: Add a test for STACKLEAK\n  gcc-plugins: Add STACKLEAK plugin for tracking the kernel stack\n  x86/entry: Add STACKLEAK erasing the kernel stack at the end of syscalls",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Thu Nov 1 11:46:27 2018 -0700",
  "author_date_iso": "2018-11-01T11:46:27-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Thu Nov 1 11:46:27 2018 -0700",
  "committer_date_iso": "2018-11-01T11:46:27-07:00",
  "files_changed": [
    "Documentation/x86/x86_64/mm.txt",
    "arch/Kconfig",
    "arch/arm64/kernel/process.c",
    "arch/x86/Kconfig",
    "arch/x86/entry/calling.h",
    "arch/x86/entry/entry_32.S",
    "arch/x86/entry/entry_64.S",
    "drivers/misc/lkdtm/core.c",
    "drivers/misc/lkdtm/lkdtm.h",
    "fs/proc/base.c",
    "include/linux/sched.h",
    "kernel/fork.c"
  ],
  "files_changed_count": 12,
  "stats": [
    {
      "file": "Documentation/security/self-protection.rst",
      "insertions": 5,
      "deletions": 5
    },
    {
      "file": "Documentation/sysctl/kernel.txt",
      "insertions": 18,
      "deletions": 0
    },
    {
      "file": "Documentation/x86/x86_64/mm.txt",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "arch/Kconfig",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "arch/arm64/kernel/process.c",
      "insertions": 0,
      "deletions": 22
    },
    {
      "file": "arch/x86/Kconfig",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/entry/calling.h",
      "insertions": 14,
      "deletions": 0
    },
    {
      "file": "arch/x86/entry/entry_32.S",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "arch/x86/entry/entry_64.S",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "arch/x86/entry/entry_64_compat.S",
      "insertions": 5,
      "deletions": 0
    },
    {
      "file": "drivers/misc/lkdtm/Makefile",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "drivers/misc/lkdtm/core.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "drivers/misc/lkdtm/lkdtm.h",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "drivers/misc/lkdtm/stackleak.c",
      "insertions": 73,
      "deletions": 0
    },
    {
      "file": "fs/proc/base.c",
      "insertions": 18,
      "deletions": 0
    },
    {
      "file": "include/linux/sched.h",
      "insertions": 5,
      "deletions": 0
    },
    {
      "file": "include/linux/stackleak.h",
      "insertions": 35,
      "deletions": 0
    },
    {
      "file": "kernel/Makefile",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "kernel/fork.c",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "kernel/stackleak.c",
      "insertions": 132,
      "deletions": 0
    },
    {
      "file": "kernel/sysctl.c",
      "insertions": 14,
      "deletions": 1
    },
    {
      "file": "scripts/Makefile.gcc-plugins",
      "insertions": 10,
      "deletions": 0
    },
    {
      "file": "scripts/gcc-plugins/Kconfig",
      "insertions": 51,
      "deletions": 0
    },
    {
      "file": "scripts/gcc-plugins/stackleak_plugin.c",
      "insertions": 427,
      "deletions": 0
    }
  ],
  "total_insertions": 841,
  "total_deletions": 28,
  "total_changes": 869,
  "parents": [
    "7c6c54b505b8aea1782ce6a6e8f3b8297d179937",
    "6fcde90466738b84a073e4f4d18c50015ee29fb2"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.20",
    "v4.20-rc1",
    "v4.20-rc2",
    "v4.20-rc3",
    "v4.20-rc4",
    "v4.20-rc5",
    "v4.20-rc6",
    "v4.20-rc7",
    "v5.0",
    "v5.0-rc1"
  ],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "Documentation/x86/x86_64/mm.txt",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/process.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/entry/entry_32.S",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/entry/calling.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/misc/lkdtm/core.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/entry/entry_64.S",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/fork.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/proc/base.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/misc/lkdtm/lkdtm.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/sched.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}