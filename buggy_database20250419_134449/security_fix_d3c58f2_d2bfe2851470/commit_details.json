{
  "hash": "d3c58f24be1bf10fa9e11977080a2398ddcd8361",
  "hash_short": "d3c58f24",
  "subject": "mm, slab/slub: move and improve cache_from_obj()",
  "body": "The function cache_from_obj() was added by commit b9ce5ef49f00 (\"sl[au]b:\nalways get the cache from its page in kmem_cache_free()\") to support\nkmemcg, where per-memcg cache can be different from the root one, so we\ncan't use the kmem_cache pointer given to kmem_cache_free().\n\nPrior to that commit, SLUB already had debugging check+warning that could\nbe enabled to compare the given kmem_cache pointer to one referenced by\nthe slab page where the object-to-be-freed resides.  This check was moved\nto cache_from_obj().  Later the check was also enabled for\nSLAB_FREELIST_HARDENED configs by commit 598a0717a816 (\"mm/slab: validate\ncache membership under freelist hardening\").\n\nThese checks and warnings can be useful especially for the debugging,\nwhich can be improved.  Commit 598a0717a816 changed the pr_err() with\nWARN_ON_ONCE() to WARN_ONCE() so only the first hit is now reported,\nothers are silent.  This patch changes it to WARN() so that all errors are\nreported.\n\nIt's also useful to print SLUB allocation/free tracking info for the\noffending object, if tracking is enabled.  We could export the SLUB\nprint_tracking() function and provide an empty one for SLAB, or realize\nthat both the debugging and hardening cases in cache_from_obj() are only\nsupported by SLUB anyway.  So this patch moves cache_from_obj() from\nslab.h to separate instances in slab.c and slub.c, where the SLAB version\nonly does the kmemcg lookup and even could be completely removed once the\nkmemcg rework [1] is merged.  The SLUB version can thus easily use the\nprint_tracking() function.  It can also use the kmem_cache_debug_flags()\nstatic key check for improved performance in kernels without the hardening\nand with debugging not enabled on boot.\n\n[1] https://lore.kernel.org/r/20200608230654.828134-18-guro@fb.com\n\nSigned-off-by: Vlastimil Babka <vbabka@suse.cz>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nCc: Christoph Lameter <cl@linux.com>\nCc: Jann Horn <jannh@google.com>\nCc: Kees Cook <keescook@chromium.org>\nCc: Vijayanand Jitta <vjitta@codeaurora.org>\nCc: David Rientjes <rientjes@google.com>\nCc: Joonsoo Kim <iamjoonsoo.kim@lge.com>\nCc: Pekka Enberg <penberg@kernel.org>\nLink: http://lkml.kernel.org/r/20200610163135.17364-10-vbabka@suse.cz\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "full_message": "mm, slab/slub: move and improve cache_from_obj()\n\nThe function cache_from_obj() was added by commit b9ce5ef49f00 (\"sl[au]b:\nalways get the cache from its page in kmem_cache_free()\") to support\nkmemcg, where per-memcg cache can be different from the root one, so we\ncan't use the kmem_cache pointer given to kmem_cache_free().\n\nPrior to that commit, SLUB already had debugging check+warning that could\nbe enabled to compare the given kmem_cache pointer to one referenced by\nthe slab page where the object-to-be-freed resides.  This check was moved\nto cache_from_obj().  Later the check was also enabled for\nSLAB_FREELIST_HARDENED configs by commit 598a0717a816 (\"mm/slab: validate\ncache membership under freelist hardening\").\n\nThese checks and warnings can be useful especially for the debugging,\nwhich can be improved.  Commit 598a0717a816 changed the pr_err() with\nWARN_ON_ONCE() to WARN_ONCE() so only the first hit is now reported,\nothers are silent.  This patch changes it to WARN() so that all errors are\nreported.\n\nIt's also useful to print SLUB allocation/free tracking info for the\noffending object, if tracking is enabled.  We could export the SLUB\nprint_tracking() function and provide an empty one for SLAB, or realize\nthat both the debugging and hardening cases in cache_from_obj() are only\nsupported by SLUB anyway.  So this patch moves cache_from_obj() from\nslab.h to separate instances in slab.c and slub.c, where the SLAB version\nonly does the kmemcg lookup and even could be completely removed once the\nkmemcg rework [1] is merged.  The SLUB version can thus easily use the\nprint_tracking() function.  It can also use the kmem_cache_debug_flags()\nstatic key check for improved performance in kernels without the hardening\nand with debugging not enabled on boot.\n\n[1] https://lore.kernel.org/r/20200608230654.828134-18-guro@fb.com\n\nSigned-off-by: Vlastimil Babka <vbabka@suse.cz>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nCc: Christoph Lameter <cl@linux.com>\nCc: Jann Horn <jannh@google.com>\nCc: Kees Cook <keescook@chromium.org>\nCc: Vijayanand Jitta <vjitta@codeaurora.org>\nCc: David Rientjes <rientjes@google.com>\nCc: Joonsoo Kim <iamjoonsoo.kim@lge.com>\nCc: Pekka Enberg <penberg@kernel.org>\nLink: http://lkml.kernel.org/r/20200610163135.17364-10-vbabka@suse.cz\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "author_name": "Vlastimil Babka",
  "author_email": "vbabka@suse.cz",
  "author_date": "Thu Aug 6 23:19:01 2020 -0700",
  "author_date_iso": "2020-08-06T23:19:01-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Fri Aug 7 11:33:22 2020 -0700",
  "committer_date_iso": "2020-08-07T11:33:22-07:00",
  "files_changed": [
    "mm/slab.c",
    "mm/slab.h",
    "mm/slub.c"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "mm/slab.c",
      "insertions": 8,
      "deletions": 0
    },
    {
      "file": "mm/slab.h",
      "insertions": 0,
      "deletions": 23
    },
    {
      "file": "mm/slub.c",
      "insertions": 21,
      "deletions": 0
    }
  ],
  "total_insertions": 29,
  "total_deletions": 23,
  "total_changes": 52,
  "parents": [
    "8fc8d6664247a6e65cba000789e2e85e2288f6f7"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "mm/slab.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/slab.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/slub.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}