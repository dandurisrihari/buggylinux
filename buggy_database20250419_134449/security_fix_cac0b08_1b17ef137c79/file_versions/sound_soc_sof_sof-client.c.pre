commit 6e9548cdb30e5d6724236dd7b89a79a270751485
Author: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
Date:   Thu Feb 10 17:05:23 2022 +0200

    ASoC: SOF: Convert the generic IPC flood test into SOF client
    
    Move the IPC flood test code out from the debug file as separate SOF client
    driver.
    
    Based on the kernel configuration, the device registration for the new IPC
    flood test is going to happen in the core.
    With the separate client driver it is going to be possible to run multiple
    flood tests in parallel to increase the stress, the new Kconfig option can
    be used to select this (defaults to 1).
    In order to preserve backward compatibility with existing SW/scripts, the
    first IPC flood test's debugfs files have been linked to the old files.
    
    Signed-off-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
    Co-developed-by: Fred Oh <fred.oh@linux.intel.com>
    Signed-off-by: Fred Oh <fred.oh@linux.intel.com>
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@linux.intel.com>
    Reviewed-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
    Link: https://lore.kernel.org/r/20220210150525.30756-8-peter.ujfalusi@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/sound/soc/sof/sof-client.c b/sound/soc/sof/sof-client.c
index 932bdea49c24..0ffe7a26a19a 100644
--- a/sound/soc/sof/sof-client.c
+++ b/sound/soc/sof/sof-client.c
@@ -66,18 +66,70 @@ static int sof_client_dev_add_data(struct sof_client_dev *cdev, const void *data
 	return 0;
 }
 
+#if IS_ENABLED(CONFIG_SND_SOC_SOF_DEBUG_IPC_FLOOD_TEST)
+static int sof_register_ipc_flood_test(struct snd_sof_dev *sdev)
+{
+	int ret = 0;
+	int i;
+
+	for (i = 0; i < CONFIG_SND_SOC_SOF_DEBUG_IPC_FLOOD_TEST_NUM; i++) {
+		ret = sof_client_dev_register(sdev, "ipc_flood", i, NULL, 0);
+		if (ret < 0)
+			break;
+	}
+
+	if (ret) {
+		for (; i >= 0; --i)
+			sof_client_dev_unregister(sdev, "ipc_flood", i);
+	}
+
+	return ret;
+}
+
+static void sof_unregister_ipc_flood_test(struct snd_sof_dev *sdev)
+{
+	int i;
+
+	for (i = 0; i < CONFIG_SND_SOC_SOF_DEBUG_IPC_FLOOD_TEST_NUM; i++)
+		sof_client_dev_unregister(sdev, "ipc_flood", i);
+}
+#else
+static inline int sof_register_ipc_flood_test(struct snd_sof_dev *sdev)
+{
+	return 0;
+}
+
+static inline void sof_unregister_ipc_flood_test(struct snd_sof_dev *sdev) {}
+#endif /* CONFIG_SND_SOC_SOF_DEBUG_IPC_FLOOD_TEST */
+
 int sof_register_clients(struct snd_sof_dev *sdev)
 {
+	int ret;
+
+	/* Register platform independent client devices */
+	ret = sof_register_ipc_flood_test(sdev);
+	if (ret) {
+		dev_err(sdev->dev, "IPC flood test client registration failed\n");
+		return ret;
+	}
+
+	/* Platform depndent client device registration */
+
 	if (sof_ops(sdev) && sof_ops(sdev)->register_ipc_clients)
-		return sof_ops(sdev)->register_ipc_clients(sdev);
+		ret = sof_ops(sdev)->register_ipc_clients(sdev);
 
-	return 0;
+	if (ret)
+		sof_unregister_ipc_flood_test(sdev);
+
+	return ret;
 }
 
 void sof_unregister_clients(struct snd_sof_dev *sdev)
 {
 	if (sof_ops(sdev) && sof_ops(sdev)->unregister_ipc_clients)
 		sof_ops(sdev)->unregister_ipc_clients(sdev);
+
+	sof_unregister_ipc_flood_test(sdev);
 }
 
 int sof_client_dev_register(struct snd_sof_dev *sdev, const char *name, u32 id,