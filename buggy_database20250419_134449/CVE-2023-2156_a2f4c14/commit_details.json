{
  "hash": "a2f4c143d76b1a47c91ef9bc46907116b111da0b",
  "hash_short": "a2f4c143",
  "subject": "ipv6: rpl: Fix Route of Death.",
  "body": "A remote DoS vulnerability of RPL Source Routing is assigned CVE-2023-2156.\n\nThe Source Routing Header (SRH) has the following format:\n\n  0                   1                   2                   3\n  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  |  Next Header  |  Hdr Ext Len  | Routing Type  | Segments Left |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  | CmprI | CmprE |  Pad  |               Reserved                |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  |                                                               |\n  .                                                               .\n  .                        Addresses[1..n]                        .\n  .                                                               .\n  |                                                               |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe originator of an SRH places the first hop's IPv6 address in the IPv6\nheader's IPv6 Destination Address and the second hop's IPv6 address as\nthe first address in Addresses[1..n].\n\nThe CmprI and CmprE fields indicate the number of prefix octets that are\nshared with the IPv6 Destination Address.  When CmprI or CmprE is not 0,\nAddresses[1..n] are compressed as follows:\n\n  1..n-1 : (16 - CmprI) bytes\n       n : (16 - CmprE) bytes\n\nSegments Left indicates the number of route segments remaining.  When the\nvalue is not zero, the SRH is forwarded to the next hop.  Its address\nis extracted from Addresses[n - Segment Left + 1] and swapped with IPv6\nDestination Address.\n\nWhen Segment Left is greater than or equal to 2, the size of SRH is not\nchanged because Addresses[1..n-1] are decompressed and recompressed with\nCmprI.\n\nOTOH, when Segment Left changes from 1 to 0, the new SRH could have a\ndifferent size because Addresses[1..n-1] are decompressed with CmprI and\nrecompressed with CmprE.\n\nLet's say CmprI is 15 and CmprE is 0.  When we receive SRH with Segment\nLeft >= 2, Addresses[1..n-1] have 1 byte for each, and Addresses[n] has\n16 bytes.  When Segment Left is 1, Addresses[1..n-1] is decompressed to\n16 bytes and not recompressed.  Finally, the new SRH will need more room\nin the header, and the size is (16 - 1) * (n - 1) bytes.\n\nHere the max value of n is 255 as Segment Left is u8, so in the worst case,\nwe have to allocate 3825 bytes in the skb headroom.  However, now we only\nallocate a small fixed buffer that is IPV6_RPL_SRH_WORST_SWAP_SIZE (16 + 7\nbytes).  If the decompressed size overflows the room, skb_push() hits BUG()\nbelow [0].\n\nInstead of allocating the fixed buffer for every packet, let's allocate\nenough headroom only when we receive SRH with Segment Left 1.\n\n[0]:\nskbuff: skb_under_panic: text:ffffffff81c9f6e2 len:576 put:576 head:ffff8880070b5180 data:ffff8880070b4fb0 tail:0x70 end:0x140 dev:lo\nkernel BUG at net/core/skbuff.c:200!\ninvalid opcode: 0000 [#1] PREEMPT SMP PTI\nCPU: 0 PID: 154 Comm: python3 Not tainted 6.4.0-rc4-00190-gc308e9ec0047 #7\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2014\nRIP: 0010:skb_panic (net/core/skbuff.c:200)\nCode: 4f 70 50 8b 87 bc 00 00 00 50 8b 87 b8 00 00 00 50 ff b7 c8 00 00 00 4c 8b 8f c0 00 00 00 48 c7 c7 80 6e 77 82 e8 ad 8b 60 ff <0f> 0b 66 66 2e 0f 1f 84 00 00 00 00 00 90 90 90 90 90 90 90 90 90\nRSP: 0018:ffffc90000003da0 EFLAGS: 00000246\nRAX: 0000000000000085 RBX: ffff8880058a6600 RCX: 0000000000000000\nRDX: 0000000000000000 RSI: ffff88807dc1c540 RDI: ffff88807dc1c540\nRBP: ffffc90000003e48 R08: ffffffff82b392c8 R09: 00000000ffffdfff\nR10: ffffffff82a592e0 R11: ffffffff82b092e0 R12: ffff888005b1c800\nR13: ffff8880070b51b8 R14: ffff888005b1ca18 R15: ffff8880070b5190\nFS:  00007f4539f0b740(0000) GS:ffff88807dc00000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 000055670baf3000 CR3: 0000000005b0e000 CR4: 00000000007506f0\nPKRU: 55555554\nCall Trace:\n <IRQ>\n skb_push (net/core/skbuff.c:210)\n ipv6_rthdr_rcv (./include/linux/skbuff.h:2880 net/ipv6/exthdrs.c:634 net/ipv6/exthdrs.c:718)\n ip6_protocol_deliver_rcu (net/ipv6/ip6_input.c:437 (discriminator 5))\n ip6_input_finish (./include/linux/rcupdate.h:805 net/ipv6/ip6_input.c:483)\n __netif_receive_skb_one_core (net/core/dev.c:5494)\n process_backlog (./include/linux/rcupdate.h:805 net/core/dev.c:5934)\n __napi_poll (net/core/dev.c:6496)\n net_rx_action (net/core/dev.c:6565 net/core/dev.c:6696)\n __do_softirq (./arch/x86/include/asm/jump_label.h:27 ./include/linux/jump_label.h:207 ./include/trace/events/irq.h:142 kernel/softirq.c:572)\n do_softirq (kernel/softirq.c:472 kernel/softirq.c:459)\n </IRQ>\n <TASK>\n __local_bh_enable_ip (kernel/softirq.c:396)\n __dev_queue_xmit (net/core/dev.c:4272)\n ip6_finish_output2 (./include/net/neighbour.h:544 net/ipv6/ip6_output.c:134)\n rawv6_sendmsg (./include/net/dst.h:458 ./include/linux/netfilter.h:303 net/ipv6/raw.c:656 net/ipv6/raw.c:914)\n sock_sendmsg (net/socket.c:724 net/socket.c:747)\n __sys_sendto (net/socket.c:2144)\n __x64_sys_sendto (net/socket.c:2156 net/socket.c:2152 net/socket.c:2152)\n do_syscall_64 (arch/x86/entry/common.c:50 arch/x86/entry/common.c:80)\n entry_SYSCALL_64_after_hwframe (arch/x86/entry/entry_64.S:120)\nRIP: 0033:0x7f453a138aea\nCode: d8 64 89 02 48 c7 c0 ff ff ff ff eb b8 0f 1f 00 f3 0f 1e fa 41 89 ca 64 8b 04 25 18 00 00 00 85 c0 75 15 b8 2c 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 7e c3 0f 1f 44 00 00 41 54 48 83 ec 30 44 89\nRSP: 002b:00007ffcc212a1c8 EFLAGS: 00000246 ORIG_RAX: 000000000000002c\nRAX: ffffffffffffffda RBX: 00007ffcc212a288 RCX: 00007f453a138aea\nRDX: 0000000000000060 RSI: 00007f4539084c20 RDI: 0000000000000003\nRBP: 00007f4538308e80 R08: 00007ffcc212a300 R09: 000000000000001c\nR10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000\nR13: ffffffffc4653600 R14: 0000000000000001 R15: 00007f4539712d1b\n </TASK>\nModules linked in:\n\nFixes: 8610c7c6e3bd (\"net: ipv6: add support for rpl sr exthdr\")\nReported-by: Max VA\nCloses: https://www.interruptlabs.co.uk/articles/linux-ipv6-route-of-death\nSigned-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>\nReviewed-by: Eric Dumazet <edumazet@google.com>\nLink: https://lore.kernel.org/r/20230605180617.67284-1-kuniyu@amazon.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
  "full_message": "ipv6: rpl: Fix Route of Death.\n\nA remote DoS vulnerability of RPL Source Routing is assigned CVE-2023-2156.\n\nThe Source Routing Header (SRH) has the following format:\n\n  0                   1                   2                   3\n  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  |  Next Header  |  Hdr Ext Len  | Routing Type  | Segments Left |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  | CmprI | CmprE |  Pad  |               Reserved                |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  |                                                               |\n  .                                                               .\n  .                        Addresses[1..n]                        .\n  .                                                               .\n  |                                                               |\n  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nThe originator of an SRH places the first hop's IPv6 address in the IPv6\nheader's IPv6 Destination Address and the second hop's IPv6 address as\nthe first address in Addresses[1..n].\n\nThe CmprI and CmprE fields indicate the number of prefix octets that are\nshared with the IPv6 Destination Address.  When CmprI or CmprE is not 0,\nAddresses[1..n] are compressed as follows:\n\n  1..n-1 : (16 - CmprI) bytes\n       n : (16 - CmprE) bytes\n\nSegments Left indicates the number of route segments remaining.  When the\nvalue is not zero, the SRH is forwarded to the next hop.  Its address\nis extracted from Addresses[n - Segment Left + 1] and swapped with IPv6\nDestination Address.\n\nWhen Segment Left is greater than or equal to 2, the size of SRH is not\nchanged because Addresses[1..n-1] are decompressed and recompressed with\nCmprI.\n\nOTOH, when Segment Left changes from 1 to 0, the new SRH could have a\ndifferent size because Addresses[1..n-1] are decompressed with CmprI and\nrecompressed with CmprE.\n\nLet's say CmprI is 15 and CmprE is 0.  When we receive SRH with Segment\nLeft >= 2, Addresses[1..n-1] have 1 byte for each, and Addresses[n] has\n16 bytes.  When Segment Left is 1, Addresses[1..n-1] is decompressed to\n16 bytes and not recompressed.  Finally, the new SRH will need more room\nin the header, and the size is (16 - 1) * (n - 1) bytes.\n\nHere the max value of n is 255 as Segment Left is u8, so in the worst case,\nwe have to allocate 3825 bytes in the skb headroom.  However, now we only\nallocate a small fixed buffer that is IPV6_RPL_SRH_WORST_SWAP_SIZE (16 + 7\nbytes).  If the decompressed size overflows the room, skb_push() hits BUG()\nbelow [0].\n\nInstead of allocating the fixed buffer for every packet, let's allocate\nenough headroom only when we receive SRH with Segment Left 1.\n\n[0]:\nskbuff: skb_under_panic: text:ffffffff81c9f6e2 len:576 put:576 head:ffff8880070b5180 data:ffff8880070b4fb0 tail:0x70 end:0x140 dev:lo\nkernel BUG at net/core/skbuff.c:200!\ninvalid opcode: 0000 [#1] PREEMPT SMP PTI\nCPU: 0 PID: 154 Comm: python3 Not tainted 6.4.0-rc4-00190-gc308e9ec0047 #7\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.16.0-0-gd239552ce722-prebuilt.qemu.org 04/01/2014\nRIP: 0010:skb_panic (net/core/skbuff.c:200)\nCode: 4f 70 50 8b 87 bc 00 00 00 50 8b 87 b8 00 00 00 50 ff b7 c8 00 00 00 4c 8b 8f c0 00 00 00 48 c7 c7 80 6e 77 82 e8 ad 8b 60 ff <0f> 0b 66 66 2e 0f 1f 84 00 00 00 00 00 90 90 90 90 90 90 90 90 90\nRSP: 0018:ffffc90000003da0 EFLAGS: 00000246\nRAX: 0000000000000085 RBX: ffff8880058a6600 RCX: 0000000000000000\nRDX: 0000000000000000 RSI: ffff88807dc1c540 RDI: ffff88807dc1c540\nRBP: ffffc90000003e48 R08: ffffffff82b392c8 R09: 00000000ffffdfff\nR10: ffffffff82a592e0 R11: ffffffff82b092e0 R12: ffff888005b1c800\nR13: ffff8880070b51b8 R14: ffff888005b1ca18 R15: ffff8880070b5190\nFS:  00007f4539f0b740(0000) GS:ffff88807dc00000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 000055670baf3000 CR3: 0000000005b0e000 CR4: 00000000007506f0\nPKRU: 55555554\nCall Trace:\n <IRQ>\n skb_push (net/core/skbuff.c:210)\n ipv6_rthdr_rcv (./include/linux/skbuff.h:2880 net/ipv6/exthdrs.c:634 net/ipv6/exthdrs.c:718)\n ip6_protocol_deliver_rcu (net/ipv6/ip6_input.c:437 (discriminator 5))\n ip6_input_finish (./include/linux/rcupdate.h:805 net/ipv6/ip6_input.c:483)\n __netif_receive_skb_one_core (net/core/dev.c:5494)\n process_backlog (./include/linux/rcupdate.h:805 net/core/dev.c:5934)\n __napi_poll (net/core/dev.c:6496)\n net_rx_action (net/core/dev.c:6565 net/core/dev.c:6696)\n __do_softirq (./arch/x86/include/asm/jump_label.h:27 ./include/linux/jump_label.h:207 ./include/trace/events/irq.h:142 kernel/softirq.c:572)\n do_softirq (kernel/softirq.c:472 kernel/softirq.c:459)\n </IRQ>\n <TASK>\n __local_bh_enable_ip (kernel/softirq.c:396)\n __dev_queue_xmit (net/core/dev.c:4272)\n ip6_finish_output2 (./include/net/neighbour.h:544 net/ipv6/ip6_output.c:134)\n rawv6_sendmsg (./include/net/dst.h:458 ./include/linux/netfilter.h:303 net/ipv6/raw.c:656 net/ipv6/raw.c:914)\n sock_sendmsg (net/socket.c:724 net/socket.c:747)\n __sys_sendto (net/socket.c:2144)\n __x64_sys_sendto (net/socket.c:2156 net/socket.c:2152 net/socket.c:2152)\n do_syscall_64 (arch/x86/entry/common.c:50 arch/x86/entry/common.c:80)\n entry_SYSCALL_64_after_hwframe (arch/x86/entry/entry_64.S:120)\nRIP: 0033:0x7f453a138aea\nCode: d8 64 89 02 48 c7 c0 ff ff ff ff eb b8 0f 1f 00 f3 0f 1e fa 41 89 ca 64 8b 04 25 18 00 00 00 85 c0 75 15 b8 2c 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 7e c3 0f 1f 44 00 00 41 54 48 83 ec 30 44 89\nRSP: 002b:00007ffcc212a1c8 EFLAGS: 00000246 ORIG_RAX: 000000000000002c\nRAX: ffffffffffffffda RBX: 00007ffcc212a288 RCX: 00007f453a138aea\nRDX: 0000000000000060 RSI: 00007f4539084c20 RDI: 0000000000000003\nRBP: 00007f4538308e80 R08: 00007ffcc212a300 R09: 000000000000001c\nR10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000\nR13: ffffffffc4653600 R14: 0000000000000001 R15: 00007f4539712d1b\n </TASK>\nModules linked in:\n\nFixes: 8610c7c6e3bd (\"net: ipv6: add support for rpl sr exthdr\")\nReported-by: Max VA\nCloses: https://www.interruptlabs.co.uk/articles/linux-ipv6-route-of-death\nSigned-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>\nReviewed-by: Eric Dumazet <edumazet@google.com>\nLink: https://lore.kernel.org/r/20230605180617.67284-1-kuniyu@amazon.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
  "author_name": "Kuniyuki Iwashima",
  "author_email": "kuniyu@amazon.com",
  "author_date": "Mon Jun 5 11:06:17 2023 -0700",
  "author_date_iso": "2023-06-05T11:06:17-07:00",
  "committer_name": "Jakub Kicinski",
  "committer_email": "kuba@kernel.org",
  "committer_date": "Tue Jun 6 20:59:08 2023 -0700",
  "committer_date_iso": "2023-06-06T20:59:08-07:00",
  "files_changed": [
    "include/net/rpl.h",
    "net/ipv6/exthdrs.c"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "include/net/rpl.h",
      "insertions": 0,
      "deletions": 3
    },
    {
      "file": "net/ipv6/exthdrs.c",
      "insertions": 11,
      "deletions": 18
    }
  ],
  "total_insertions": 11,
  "total_deletions": 21,
  "total_changes": 32,
  "parents": [
    "f6ca5baf2a86d0eaff3859844da9e4e29ff750a7"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2023-2156"
    ],
    "security_keywords": [
      "vulnerability"
    ]
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "include/net/rpl.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/ipv6/exthdrs.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}