{
  "hash": "f19b9f74b7ea3b21ddcee55d852a6488239608a4",
  "hash_short": "f19b9f74",
  "subject": "fork: fix error handling in dup_task()",
  "body": "The function dup_task() may fail at the following function calls in the\nfollowing order.\n\n0) alloc_task_struct_node()\n1) alloc_thread_info_node()\n2) arch_dup_task_struct()\n\nError by 0) is not a matter, it can just return.  But error by 1) requires\nreleasing task_struct allocated by 0) before it returns.  Likewise, error\nby 2) requires releasing task_struct and thread_info allocated by 0) and\n1).\n\nThe existing error handling calls free_task_struct() and\nfree_thread_info() which do not only release task_struct and thread_info,\nbut also call architecture specific arch_release_task_struct() and\narch_release_thread_info().\n\nThe problem is that task_struct and thread_info are not fully initialized\nyet at this point, but arch_release_task_struct() and\narch_release_thread_info() are called with them.\n\nFor example, x86 defines its own arch_release_task_struct() that releases\na task_xstate.  If alloc_thread_info_node() fails in dup_task(),\narch_release_task_struct() is called with task_struct which is just\nallocated and filled with garbage in this error handling.\n\nThis actually happened with tools/testing/fault-injection/failcmd.sh\n\n\t# env FAILCMD_TYPE=fail_page_alloc \\\n\t\t./tools/testing/fault-injection/failcmd.sh --times=100 \\\n\t\t--min-order=0 --ignore-gfp-wait=0 \\\n\t\t-- make -C tools/testing/selftests/ run_tests\n\nIn order to fix this issue, make free_{task_struct,thread_info}() not to\ncall arch_release_{task_struct,thread_info}() and call\narch_release_{task_struct,thread_info}() implicitly where needed.\n\nDefault arch_release_task_struct() and arch_release_thread_info() are\ndefined as empty by default.  So this change only affects the\narchitectures which implement their own arch_release_task_struct() or\narch_release_thread_info() as listed below.\n\narch_release_task_struct(): x86, sh\narch_release_thread_info(): mn10300, tile\n\nSigned-off-by: Akinobu Mita <akinobu.mita@gmail.com>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Ingo Molnar <mingo@redhat.com>\nCc: \"H. Peter Anvin\" <hpa@zytor.com>\nCc: David Howells <dhowells@redhat.com>\nCc: Koichi Yasutake <yasutake.koichi@jp.panasonic.com>\nCc: Paul Mundt <lethal@linux-sh.org>\nCc: Chris Metcalf <cmetcalf@tilera.com>\nCc: Salman Qazi <sqazi@google.com>\nCc: Peter Zijlstra <a.p.zijlstra@chello.nl>\nCc: Ingo Molnar <mingo@elte.hu>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "full_message": "fork: fix error handling in dup_task()\n\nThe function dup_task() may fail at the following function calls in the\nfollowing order.\n\n0) alloc_task_struct_node()\n1) alloc_thread_info_node()\n2) arch_dup_task_struct()\n\nError by 0) is not a matter, it can just return.  But error by 1) requires\nreleasing task_struct allocated by 0) before it returns.  Likewise, error\nby 2) requires releasing task_struct and thread_info allocated by 0) and\n1).\n\nThe existing error handling calls free_task_struct() and\nfree_thread_info() which do not only release task_struct and thread_info,\nbut also call architecture specific arch_release_task_struct() and\narch_release_thread_info().\n\nThe problem is that task_struct and thread_info are not fully initialized\nyet at this point, but arch_release_task_struct() and\narch_release_thread_info() are called with them.\n\nFor example, x86 defines its own arch_release_task_struct() that releases\na task_xstate.  If alloc_thread_info_node() fails in dup_task(),\narch_release_task_struct() is called with task_struct which is just\nallocated and filled with garbage in this error handling.\n\nThis actually happened with tools/testing/fault-injection/failcmd.sh\n\n\t# env FAILCMD_TYPE=fail_page_alloc \\\n\t\t./tools/testing/fault-injection/failcmd.sh --times=100 \\\n\t\t--min-order=0 --ignore-gfp-wait=0 \\\n\t\t-- make -C tools/testing/selftests/ run_tests\n\nIn order to fix this issue, make free_{task_struct,thread_info}() not to\ncall arch_release_{task_struct,thread_info}() and call\narch_release_{task_struct,thread_info}() implicitly where needed.\n\nDefault arch_release_task_struct() and arch_release_thread_info() are\ndefined as empty by default.  So this change only affects the\narchitectures which implement their own arch_release_task_struct() or\narch_release_thread_info() as listed below.\n\narch_release_task_struct(): x86, sh\narch_release_thread_info(): mn10300, tile\n\nSigned-off-by: Akinobu Mita <akinobu.mita@gmail.com>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Ingo Molnar <mingo@redhat.com>\nCc: \"H. Peter Anvin\" <hpa@zytor.com>\nCc: David Howells <dhowells@redhat.com>\nCc: Koichi Yasutake <yasutake.koichi@jp.panasonic.com>\nCc: Paul Mundt <lethal@linux-sh.org>\nCc: Chris Metcalf <cmetcalf@tilera.com>\nCc: Salman Qazi <sqazi@google.com>\nCc: Peter Zijlstra <a.p.zijlstra@chello.nl>\nCc: Ingo Molnar <mingo@elte.hu>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "author_name": "Akinobu Mita",
  "author_email": "akinobu.mita@gmail.com",
  "author_date": "Mon Jul 30 14:42:33 2012 -0700",
  "author_date_iso": "2012-07-30T14:42:33-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Mon Jul 30 17:25:20 2012 -0700",
  "committer_date_iso": "2012-07-30T17:25:20-07:00",
  "files_changed": [
    "kernel/fork.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "kernel/fork.c",
      "insertions": 15,
      "deletions": 12
    }
  ],
  "total_insertions": 15,
  "total_deletions": 12,
  "total_changes": 27,
  "parents": [
    "87bec58a52652e2eb2a575692a40f9466c7bd31b"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v3.10",
    "v3.10-rc1",
    "v3.10-rc2",
    "v3.10-rc3",
    "v3.10-rc4",
    "v3.10-rc5",
    "v3.10-rc6",
    "v3.10-rc7",
    "v3.11",
    "v3.11-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "kernel/fork.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}