{
  "hash": "503c1fb98ba3859c13863957c7c65c92371a9e50",
  "hash_short": "503c1fb9",
  "subject": "cfg80211/nl80211: add a port authorized event",
  "body": "Add an event that indicates that a connection is authorized\n(i.e. the 4 way handshake was performed by the driver). This event\nshould be sent by the driver after sending a connect/roamed event.\n\nThis is useful for networks that require 802.1X authentication.\nIn cases that the driver supports 4 way handshake offload, but the\n802.1X authentication is managed by user space, the driver needs to\ninform user space right after the 802.11 association was completed\nso user space can initialize its 802.1X state machine etc.\nHowever, it is also possible that the AP will choose to skip the\n802.1X authentication (e.g. when PMKSA caching is used) and proceed\nwith the 4 way handshake immediately. In this case the driver needs\nto inform user space that 802.1X authentication is no longer required\n(e.g. to prevent user space from disconnecting since it did not get\nany EAPOLs from the AP).\n\nThis is also useful for roaming, in which case it is possible that\nthe driver used the Fast Transition protocol so 802.1X is not\nrequired.\n\nSince there will now be a dedicated notification indicating that the\nconnection is authorized, the authorized flag can be removed from the\nroamed event. Drivers can send the new port authorized event right\nafter sending the roamed event to indicate the new AP is already\nauthorized. This therefore reserves the old PORT_AUTHORIZED attribute.\n\nSigned-off-by: Avraham Stern <avraham.stern@intel.com>\nSigned-off-by: Johannes Berg <johannes.berg@intel.com>",
  "full_message": "cfg80211/nl80211: add a port authorized event\n\nAdd an event that indicates that a connection is authorized\n(i.e. the 4 way handshake was performed by the driver). This event\nshould be sent by the driver after sending a connect/roamed event.\n\nThis is useful for networks that require 802.1X authentication.\nIn cases that the driver supports 4 way handshake offload, but the\n802.1X authentication is managed by user space, the driver needs to\ninform user space right after the 802.11 association was completed\nso user space can initialize its 802.1X state machine etc.\nHowever, it is also possible that the AP will choose to skip the\n802.1X authentication (e.g. when PMKSA caching is used) and proceed\nwith the 4 way handshake immediately. In this case the driver needs\nto inform user space that 802.1X authentication is no longer required\n(e.g. to prevent user space from disconnecting since it did not get\nany EAPOLs from the AP).\n\nThis is also useful for roaming, in which case it is possible that\nthe driver used the Fast Transition protocol so 802.1X is not\nrequired.\n\nSince there will now be a dedicated notification indicating that the\nconnection is authorized, the authorized flag can be removed from the\nroamed event. Drivers can send the new port authorized event right\nafter sending the roamed event to indicate the new AP is already\nauthorized. This therefore reserves the old PORT_AUTHORIZED attribute.\n\nSigned-off-by: Avraham Stern <avraham.stern@intel.com>\nSigned-off-by: Johannes Berg <johannes.berg@intel.com>",
  "author_name": "Avraham Stern",
  "author_email": "avraham.stern@intel.com",
  "author_date": "Fri Sep 29 14:21:49 2017 +0200",
  "author_date_iso": "2017-09-29T14:21:49+02:00",
  "committer_name": "Johannes Berg",
  "committer_email": "johannes.berg@intel.com",
  "committer_date": "Mon Oct 2 14:08:27 2017 +0200",
  "committer_date_iso": "2017-10-02T14:08:27+02:00",
  "files_changed": [
    "include/net/cfg80211.h",
    "include/uapi/linux/nl80211.h",
    "net/wireless/core.h",
    "net/wireless/nl80211.c",
    "net/wireless/nl80211.h",
    "net/wireless/sme.c",
    "net/wireless/util.c"
  ],
  "files_changed_count": 7,
  "stats": [
    {
      "file": "include/net/cfg80211.h",
      "insertions": 17,
      "deletions": 4
    },
    {
      "file": "include/uapi/linux/nl80211.h",
      "insertions": 17,
      "deletions": 11
    },
    {
      "file": "net/wireless/core.h",
      "insertions": 5,
      "deletions": 0
    },
    {
      "file": "net/wireless/nl80211.c",
      "insertions": 31,
      "deletions": 3
    },
    {
      "file": "net/wireless/nl80211.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "net/wireless/sme.c",
      "insertions": 44,
      "deletions": 1
    },
    {
      "file": "net/wireless/util.c",
      "insertions": 3,
      "deletions": 0
    }
  ],
  "total_insertions": 119,
  "total_deletions": 19,
  "total_changes": 138,
  "parents": [
    "66b1bedf662518e9b6367990a87e9601b35a94c1"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.15",
    "v4.15-rc1",
    "v4.15-rc2",
    "v4.15-rc3",
    "v4.15-rc4",
    "v4.15-rc5",
    "v4.15-rc6",
    "v4.15-rc7",
    "v4.15-rc8",
    "v4.15-rc9"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "net/wireless/nl80211.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/wireless/core.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/wireless/util.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/wireless/sme.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/uapi/linux/nl80211.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/net/cfg80211.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/wireless/nl80211.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}