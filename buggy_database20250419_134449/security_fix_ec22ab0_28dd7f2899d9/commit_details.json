{
  "hash": "ec22ab00750d462dae19272610623abe9534b674",
  "hash_short": "ec22ab00",
  "subject": "Merge branch 'macsec-hw-offload'",
  "body": "Antoine Tenart says:\n\n====================\nnet: macsec: initial support for hardware offloading\n\nThis series intends to add support for offloading MACsec transformations\nto hardware enabled devices. The series adds the necessary\ninfrastructure for offloading MACsec configurations to hardware drivers,\nin patches 1 to 5; then introduces MACsec offloading support in the\nMicrosemi MSCC PHY driver, in patches 6 to 10.\n\nThe series can also be found at:\nhttps://github.com/atenart/linux/tree/net-next/macsec\n\nIProute2 modifications can be found at:\nhttps://github.com/atenart/iproute2/tree/macsec\n\nMACsec hardware offloading infrastructure\n-----------------------------------------\n\nLinux has a software implementation of the MACsec standard. There are\nhardware engines supporting MACsec operations, such as the Intel ixgbe\nNIC and some Microsemi PHYs (the one we use in this series). This means\nthe MACsec offloading infrastructure should support networking PHY and\nMAC drivers. Note that MAC driver preliminary support is part of this\nseries, but should not be merged before we actually have a provider for\nthis.\n\nWe do intend in this series to re-use the logic, netlink API and data\nstructures of the existing MACsec software implementation. This allows\nnot to duplicate definitions and structure storing the same information;\nas well as using the same userspace tools to configure both software or\nhardware offloaded MACsec flows (with `ip macsec`).\n\nWhen adding a new MACsec virtual interface the existing logic is kept:\noffloading is disabled by default. A user driven configuration choice is\nneeded to switch to offloading mode (a patch in iproute2 is needed for\nthis). A single MACsec interface can be offloaded for now, and some\nlimitations are there: no flow can be moved from one implementation to\nthe other so the decision needs to be done before configuring the\ninterface.\n\nMACsec offloading ops are called in 2 steps: a preparation one, and a\ncommit one. The first step is allowed to fail and should be used to\ncheck if a provided configuration is compatible with a given MACsec\ncapable hardware. The second step is not allowed to fail and should\nonly be used to enable a given MACsec configuration.\n\nA limitation as of now is the counters and statistics are not reported\nback from the hardware to the software MACsec implementation. This\nisn't an issue when using offloaded MACsec transformations, but it\nshould be added in the future so that the MACsec state can be reported\nto the user (which would also improve the debug).\n\nMicrosemi PHY MACsec support\n----------------------------\n\nIn order to add support for the MACsec offloading feature in the\nMicrosemi MSCC PHY driver, the __phy_read_page and __phy_write_page\nhelpers had to be exported. This is because the initialization of the\nPHY is done while holding the MDIO bus lock, and we need to change the\npage to configure the MACsec block.\n\nThe support itself is then added in three patches. The first one adds\nsupport for configuring the MACsec block within the PHY, so that it is\nup, running and available for future configuration, but is not doing any\nmodification on the traffic passing through the PHY. The second patch\nimplements the phy_device MACsec ops in the Microsemi MSCC PHY driver,\nand introduce helpers to configure MACsec transformations and flows to\nmatch specific packets. The last one adds support for PN rollover.\n\nThanks!\nAntoine\n\nSince v5:\n  - Fixed a compilation issue due to an inclusion from an UAPI header.\n  - Added an EXPORT_SYMBOL_GPL for the PN rollover helper, to fix module\n    compilation issues.\n  - Added a dependency for the MSCC driver on MACSEC || MACSEC=n.\n  - Removed the patches including the MAC offloading support as they are\n    not to be applied for now.\n\nSince v4:\n  - Reworked the MACsec read and write functions in the MSCC PHY driver\n    to remove the conditional locking.\n\nSince v3:\n  - Fixed a check when enabling offloading that was too restrictive.\n  - Fixed the propagation of the changelink event to the underlying\n    device drivers.\n\nSince v2:\n  - Allow selection the offloading from userspace, defaulting to the\n    software implementation when adding a new MACsec interface. The\n    offloading mode is now also reported through netlink.\n  - Added support for letting MKA packets in and out when using MACsec\n    (there are rules to let them bypass the MACsec h/w engine within the\n    PHY).\n  - Added support for PN rollover (following what's currently done in\n    the software implementation: the flow is disabled).\n  - Split patches to remove MAC offloading support for now, as there are\n    no current provider for this (patches are still included).\n  - Improved a few parts of the MACsec support within the MSCC PHY\n    driver (e.g. default rules now block non-MACsec traffic, depending\n    on the configuration).\n  - Many cosmetic fixes & small improvements.\n\nSince v1:\n  - Reworked the MACsec offloading API, moving from a single helper\n    called for all MACsec configuration operations, to a per-operation\n    function that is provided by the underlying hardware drivers.\n  - Those functions now contain a verb to describe the configuration\n    action they're offloading.\n  - Improved the error handling in the MACsec genl helpers to revert\n    the configuration to its previous state when the offloading call\n    failed.\n  - Reworked the file inclusions.\n====================\n\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "full_message": "Merge branch 'macsec-hw-offload'\n\nAntoine Tenart says:\n\n====================\nnet: macsec: initial support for hardware offloading\n\nThis series intends to add support for offloading MACsec transformations\nto hardware enabled devices. The series adds the necessary\ninfrastructure for offloading MACsec configurations to hardware drivers,\nin patches 1 to 5; then introduces MACsec offloading support in the\nMicrosemi MSCC PHY driver, in patches 6 to 10.\n\nThe series can also be found at:\nhttps://github.com/atenart/linux/tree/net-next/macsec\n\nIProute2 modifications can be found at:\nhttps://github.com/atenart/iproute2/tree/macsec\n\nMACsec hardware offloading infrastructure\n-----------------------------------------\n\nLinux has a software implementation of the MACsec standard. There are\nhardware engines supporting MACsec operations, such as the Intel ixgbe\nNIC and some Microsemi PHYs (the one we use in this series). This means\nthe MACsec offloading infrastructure should support networking PHY and\nMAC drivers. Note that MAC driver preliminary support is part of this\nseries, but should not be merged before we actually have a provider for\nthis.\n\nWe do intend in this series to re-use the logic, netlink API and data\nstructures of the existing MACsec software implementation. This allows\nnot to duplicate definitions and structure storing the same information;\nas well as using the same userspace tools to configure both software or\nhardware offloaded MACsec flows (with `ip macsec`).\n\nWhen adding a new MACsec virtual interface the existing logic is kept:\noffloading is disabled by default. A user driven configuration choice is\nneeded to switch to offloading mode (a patch in iproute2 is needed for\nthis). A single MACsec interface can be offloaded for now, and some\nlimitations are there: no flow can be moved from one implementation to\nthe other so the decision needs to be done before configuring the\ninterface.\n\nMACsec offloading ops are called in 2 steps: a preparation one, and a\ncommit one. The first step is allowed to fail and should be used to\ncheck if a provided configuration is compatible with a given MACsec\ncapable hardware. The second step is not allowed to fail and should\nonly be used to enable a given MACsec configuration.\n\nA limitation as of now is the counters and statistics are not reported\nback from the hardware to the software MACsec implementation. This\nisn't an issue when using offloaded MACsec transformations, but it\nshould be added in the future so that the MACsec state can be reported\nto the user (which would also improve the debug).\n\nMicrosemi PHY MACsec support\n----------------------------\n\nIn order to add support for the MACsec offloading feature in the\nMicrosemi MSCC PHY driver, the __phy_read_page and __phy_write_page\nhelpers had to be exported. This is because the initialization of the\nPHY is done while holding the MDIO bus lock, and we need to change the\npage to configure the MACsec block.\n\nThe support itself is then added in three patches. The first one adds\nsupport for configuring the MACsec block within the PHY, so that it is\nup, running and available for future configuration, but is not doing any\nmodification on the traffic passing through the PHY. The second patch\nimplements the phy_device MACsec ops in the Microsemi MSCC PHY driver,\nand introduce helpers to configure MACsec transformations and flows to\nmatch specific packets. The last one adds support for PN rollover.\n\nThanks!\nAntoine\n\nSince v5:\n  - Fixed a compilation issue due to an inclusion from an UAPI header.\n  - Added an EXPORT_SYMBOL_GPL for the PN rollover helper, to fix module\n    compilation issues.\n  - Added a dependency for the MSCC driver on MACSEC || MACSEC=n.\n  - Removed the patches including the MAC offloading support as they are\n    not to be applied for now.\n\nSince v4:\n  - Reworked the MACsec read and write functions in the MSCC PHY driver\n    to remove the conditional locking.\n\nSince v3:\n  - Fixed a check when enabling offloading that was too restrictive.\n  - Fixed the propagation of the changelink event to the underlying\n    device drivers.\n\nSince v2:\n  - Allow selection the offloading from userspace, defaulting to the\n    software implementation when adding a new MACsec interface. The\n    offloading mode is now also reported through netlink.\n  - Added support for letting MKA packets in and out when using MACsec\n    (there are rules to let them bypass the MACsec h/w engine within the\n    PHY).\n  - Added support for PN rollover (following what's currently done in\n    the software implementation: the flow is disabled).\n  - Split patches to remove MAC offloading support for now, as there are\n    no current provider for this (patches are still included).\n  - Improved a few parts of the MACsec support within the MSCC PHY\n    driver (e.g. default rules now block non-MACsec traffic, depending\n    on the configuration).\n  - Many cosmetic fixes & small improvements.\n\nSince v1:\n  - Reworked the MACsec offloading API, moving from a single helper\n    called for all MACsec configuration operations, to a per-operation\n    function that is provided by the underlying hardware drivers.\n  - Those functions now contain a verb to describe the configuration\n    action they're offloading.\n  - Improved the error handling in the MACsec genl helpers to revert\n    the configuration to its previous state when the offloading call\n    failed.\n  - Reworked the file inclusions.\n====================\n\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "author_name": "David S. Miller",
  "author_email": "davem@davemloft.net",
  "author_date": "Tue Jan 14 11:31:41 2020 -0800",
  "author_date_iso": "2020-01-14T11:31:41-08:00",
  "committer_name": "David S. Miller",
  "committer_email": "davem@davemloft.net",
  "committer_date": "Tue Jan 14 11:31:41 2020 -0800",
  "committer_date_iso": "2020-01-14T11:31:41-08:00",
  "files_changed": [],
  "files_changed_count": 0,
  "stats": [
    {
      "file": "drivers/net/macsec.c",
      "insertions": 603,
      "deletions": 184
    },
    {
      "file": "drivers/net/phy/Kconfig",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "drivers/net/phy/mscc.c",
      "insertions": 1132,
      "deletions": 1
    },
    {
      "file": "drivers/net/phy/mscc_fc_buffer.h",
      "insertions": 64,
      "deletions": 0
    },
    {
      "file": "drivers/net/phy/mscc_mac.h",
      "insertions": 159,
      "deletions": 0
    },
    {
      "file": "drivers/net/phy/mscc_macsec.h",
      "insertions": 266,
      "deletions": 0
    },
    {
      "file": "include/linux/phy.h",
      "insertions": 9,
      "deletions": 0
    },
    {
      "file": "include/net/macsec.h",
      "insertions": 224,
      "deletions": 0
    },
    {
      "file": "include/uapi/linux/if_link.h",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "include/uapi/linux/if_macsec.h",
      "insertions": 11,
      "deletions": 0
    },
    {
      "file": "tools/include/uapi/linux/if_link.h",
      "insertions": 7,
      "deletions": 0
    }
  ],
  "total_insertions": 2485,
  "total_deletions": 185,
  "total_changes": 2670,
  "parents": [
    "169af34684b2bdf1b1b807d109038a6dc0159e03",
    "781449a4ae3b381950ee9aec4d8a54e35f66ab9b"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.6",
    "v5.6-rc1",
    "v5.6-rc2",
    "v5.6-rc3",
    "v5.6-rc4",
    "v5.6-rc5",
    "v5.6-rc6",
    "v5.6-rc7",
    "v5.7-rc1"
  ],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "bypass"
    ]
  },
  "fix_type": "security",
  "file_results": []
}