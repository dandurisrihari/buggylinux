{
  "hash": "958f338e96f874a0d29442396d6adf9c1e17aa2d",
  "hash_short": "958f338e",
  "subject": "Merge branch 'l1tf-final' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip",
  "body": "Merge L1 Terminal Fault fixes from Thomas Gleixner:\n \"L1TF, aka L1 Terminal Fault, is yet another speculative hardware\n  engineering trainwreck. It's a hardware vulnerability which allows\n  unprivileged speculative access to data which is available in the\n  Level 1 Data Cache when the page table entry controlling the virtual\n  address, which is used for the access, has the Present bit cleared or\n  other reserved bits set.\n\n  If an instruction accesses a virtual address for which the relevant\n  page table entry (PTE) has the Present bit cleared or other reserved\n  bits set, then speculative execution ignores the invalid PTE and loads\n  the referenced data if it is present in the Level 1 Data Cache, as if\n  the page referenced by the address bits in the PTE was still present\n  and accessible.\n\n  While this is a purely speculative mechanism and the instruction will\n  raise a page fault when it is retired eventually, the pure act of\n  loading the data and making it available to other speculative\n  instructions opens up the opportunity for side channel attacks to\n  unprivileged malicious code, similar to the Meltdown attack.\n\n  While Meltdown breaks the user space to kernel space protection, L1TF\n  allows to attack any physical memory address in the system and the\n  attack works across all protection domains. It allows an attack of SGX\n  and also works from inside virtual machines because the speculation\n  bypasses the extended page table (EPT) protection mechanism.\n\n  The assoicated CVEs are: CVE-2018-3615, CVE-2018-3620, CVE-2018-3646\n\n  The mitigations provided by this pull request include:\n\n   - Host side protection by inverting the upper address bits of a non\n     present page table entry so the entry points to uncacheable memory.\n\n   - Hypervisor protection by flushing L1 Data Cache on VMENTER.\n\n   - SMT (HyperThreading) control knobs, which allow to 'turn off' SMT\n     by offlining the sibling CPU threads. The knobs are available on\n     the kernel command line and at runtime via sysfs\n\n   - Control knobs for the hypervisor mitigation, related to L1D flush\n     and SMT control. The knobs are available on the kernel command line\n     and at runtime via sysfs\n\n   - Extensive documentation about L1TF including various degrees of\n     mitigations.\n\n  Thanks to all people who have contributed to this in various ways -\n  patches, review, testing, backporting - and the fruitful, sometimes\n  heated, but at the end constructive discussions.\n\n  There is work in progress to provide other forms of mitigations, which\n  might be less horrible performance wise for a particular kind of\n  workloads, but this is not yet ready for consumption due to their\n  complexity and limitations\"\n\n* 'l1tf-final' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (75 commits)\n  x86/microcode: Allow late microcode loading with SMT disabled\n  tools headers: Synchronise x86 cpufeatures.h for L1TF additions\n  x86/mm/kmmio: Make the tracer robust against L1TF\n  x86/mm/pat: Make set_memory_np() L1TF safe\n  x86/speculation/l1tf: Make pmd/pud_mknotpresent() invert\n  x86/speculation/l1tf: Invert all not present mappings\n  cpu/hotplug: Fix SMT supported evaluation\n  KVM: VMX: Tell the nested hypervisor to skip L1D flush on vmentry\n  x86/speculation: Use ARCH_CAPABILITIES to skip L1D flush on vmentry\n  x86/speculation: Simplify sysfs report of VMX L1TF vulnerability\n  Documentation/l1tf: Remove Yonah processors from not vulnerable list\n  x86/KVM/VMX: Don't set l1tf_flush_l1d from vmx_handle_external_intr()\n  x86/irq: Let interrupt handlers set kvm_cpu_l1tf_flush_l1d\n  x86: Don't include linux/irq.h from asm/hardirq.h\n  x86/KVM/VMX: Introduce per-host-cpu analogue of l1tf_flush_l1d\n  x86/irq: Demote irq_cpustat_t::__softirq_pending to u16\n  x86/KVM/VMX: Move the l1tf_flush_l1d test to vmx_l1d_flush()\n  x86/KVM/VMX: Replace 'vmx_l1d_flush_always' with 'vmx_l1d_flush_cond'\n  x86/KVM/VMX: Don't set l1tf_flush_l1d to true from vmx_l1d_flush()\n  cpu/hotplug: detect SMT disabled by BIOS\n  ...",
  "full_message": "Merge branch 'l1tf-final' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip\n\nMerge L1 Terminal Fault fixes from Thomas Gleixner:\n \"L1TF, aka L1 Terminal Fault, is yet another speculative hardware\n  engineering trainwreck. It's a hardware vulnerability which allows\n  unprivileged speculative access to data which is available in the\n  Level 1 Data Cache when the page table entry controlling the virtual\n  address, which is used for the access, has the Present bit cleared or\n  other reserved bits set.\n\n  If an instruction accesses a virtual address for which the relevant\n  page table entry (PTE) has the Present bit cleared or other reserved\n  bits set, then speculative execution ignores the invalid PTE and loads\n  the referenced data if it is present in the Level 1 Data Cache, as if\n  the page referenced by the address bits in the PTE was still present\n  and accessible.\n\n  While this is a purely speculative mechanism and the instruction will\n  raise a page fault when it is retired eventually, the pure act of\n  loading the data and making it available to other speculative\n  instructions opens up the opportunity for side channel attacks to\n  unprivileged malicious code, similar to the Meltdown attack.\n\n  While Meltdown breaks the user space to kernel space protection, L1TF\n  allows to attack any physical memory address in the system and the\n  attack works across all protection domains. It allows an attack of SGX\n  and also works from inside virtual machines because the speculation\n  bypasses the extended page table (EPT) protection mechanism.\n\n  The assoicated CVEs are: CVE-2018-3615, CVE-2018-3620, CVE-2018-3646\n\n  The mitigations provided by this pull request include:\n\n   - Host side protection by inverting the upper address bits of a non\n     present page table entry so the entry points to uncacheable memory.\n\n   - Hypervisor protection by flushing L1 Data Cache on VMENTER.\n\n   - SMT (HyperThreading) control knobs, which allow to 'turn off' SMT\n     by offlining the sibling CPU threads. The knobs are available on\n     the kernel command line and at runtime via sysfs\n\n   - Control knobs for the hypervisor mitigation, related to L1D flush\n     and SMT control. The knobs are available on the kernel command line\n     and at runtime via sysfs\n\n   - Extensive documentation about L1TF including various degrees of\n     mitigations.\n\n  Thanks to all people who have contributed to this in various ways -\n  patches, review, testing, backporting - and the fruitful, sometimes\n  heated, but at the end constructive discussions.\n\n  There is work in progress to provide other forms of mitigations, which\n  might be less horrible performance wise for a particular kind of\n  workloads, but this is not yet ready for consumption due to their\n  complexity and limitations\"\n\n* 'l1tf-final' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (75 commits)\n  x86/microcode: Allow late microcode loading with SMT disabled\n  tools headers: Synchronise x86 cpufeatures.h for L1TF additions\n  x86/mm/kmmio: Make the tracer robust against L1TF\n  x86/mm/pat: Make set_memory_np() L1TF safe\n  x86/speculation/l1tf: Make pmd/pud_mknotpresent() invert\n  x86/speculation/l1tf: Invert all not present mappings\n  cpu/hotplug: Fix SMT supported evaluation\n  KVM: VMX: Tell the nested hypervisor to skip L1D flush on vmentry\n  x86/speculation: Use ARCH_CAPABILITIES to skip L1D flush on vmentry\n  x86/speculation: Simplify sysfs report of VMX L1TF vulnerability\n  Documentation/l1tf: Remove Yonah processors from not vulnerable list\n  x86/KVM/VMX: Don't set l1tf_flush_l1d from vmx_handle_external_intr()\n  x86/irq: Let interrupt handlers set kvm_cpu_l1tf_flush_l1d\n  x86: Don't include linux/irq.h from asm/hardirq.h\n  x86/KVM/VMX: Introduce per-host-cpu analogue of l1tf_flush_l1d\n  x86/irq: Demote irq_cpustat_t::__softirq_pending to u16\n  x86/KVM/VMX: Move the l1tf_flush_l1d test to vmx_l1d_flush()\n  x86/KVM/VMX: Replace 'vmx_l1d_flush_always' with 'vmx_l1d_flush_cond'\n  x86/KVM/VMX: Don't set l1tf_flush_l1d to true from vmx_l1d_flush()\n  cpu/hotplug: detect SMT disabled by BIOS\n  ...",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Tue Aug 14 09:46:06 2018 -0700",
  "author_date_iso": "2018-08-14T09:46:06-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Tue Aug 14 09:46:06 2018 -0700",
  "committer_date_iso": "2018-08-14T09:46:06-07:00",
  "files_changed": [
    "Documentation/admin-guide/kernel-parameters.txt",
    "arch/x86/Kconfig",
    "arch/x86/include/asm/cpufeatures.h",
    "arch/x86/include/asm/pgtable-2level.h",
    "arch/x86/include/asm/pgtable-3level.h",
    "arch/x86/include/asm/pgtable.h",
    "arch/x86/include/asm/pgtable_64.h",
    "arch/x86/include/asm/processor.h",
    "arch/x86/kernel/apic/apic.c",
    "arch/x86/kernel/apic/vector.c",
    "arch/x86/kernel/cpu/amd.c",
    "arch/x86/kernel/cpu/bugs.c",
    "arch/x86/kernel/cpu/common.c",
    "arch/x86/kernel/cpu/intel.c",
    "arch/x86/kernel/kvmclock.c",
    "arch/x86/kernel/setup.c",
    "arch/x86/kvm/vmx.c",
    "arch/x86/mm/init.c",
    "arch/x86/mm/pageattr.c",
    "arch/x86/mm/pti.c",
    "arch/x86/platform/uv/tlb_uv.c",
    "include/asm-generic/pgtable.h",
    "include/linux/cpu.h",
    "kernel/cpu.c",
    "kernel/sched/core.c",
    "kernel/sched/fair.c",
    "mm/memory.c"
  ],
  "files_changed_count": 27,
  "stats": [
    {
      "file": "Documentation/ABI/testing/sysfs-devices-system-cpu",
      "insertions": 24,
      "deletions": 0
    },
    {
      "file": "Documentation/admin-guide/index.rst",
      "insertions": 9,
      "deletions": 0
    },
    {
      "file": "Documentation/admin-guide/kernel-parameters.txt",
      "insertions": 78,
      "deletions": 0
    },
    {
      "file": "Documentation/admin-guide/l1tf.rst",
      "insertions": 610,
      "deletions": 0
    },
    {
      "file": "arch/Kconfig",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "arch/x86/Kconfig",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/apic.h",
      "insertions": 9,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/cpufeatures.h",
      "insertions": 4,
      "deletions": 1
    },
    {
      "file": "arch/x86/include/asm/dmi.h",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/x86/include/asm/hardirq.h",
      "insertions": 24,
      "deletions": 2
    },
    {
      "file": "arch/x86/include/asm/kvm_host.h",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/msr-index.h",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/page_32_types.h",
      "insertions": 7,
      "deletions": 2
    },
    {
      "file": "arch/x86/include/asm/pgtable-2level.h",
      "insertions": 17,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/pgtable-3level.h",
      "insertions": 35,
      "deletions": 2
    },
    {
      "file": "arch/x86/include/asm/pgtable-invert.h",
      "insertions": 32,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/pgtable.h",
      "insertions": 51,
      "deletions": 23
    },
    {
      "file": "arch/x86/include/asm/pgtable_64.h",
      "insertions": 27,
      "deletions": 11
    },
    {
      "file": "arch/x86/include/asm/processor.h",
      "insertions": 17,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/topology.h",
      "insertions": 5,
      "deletions": 1
    },
    {
      "file": "arch/x86/include/asm/vmx.h",
      "insertions": 11,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/apic/apic.c",
      "insertions": 16,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/apic/io_apic.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/apic/msi.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/apic/vector.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/cpu/amd.c",
      "insertions": 27,
      "deletions": 24
    },
    {
      "file": "arch/x86/kernel/cpu/bugs.c",
      "insertions": 133,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/cpu/common.c",
      "insertions": 35,
      "deletions": 21
    },
    {
      "file": "arch/x86/kernel/cpu/cpu.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/cpu/intel.c",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/cpu/microcode/core.c",
      "insertions": 12,
      "deletions": 4
    },
    {
      "file": "arch/x86/kernel/cpu/topology.c",
      "insertions": 22,
      "deletions": 19
    },
    {
      "file": "arch/x86/kernel/fpu/core.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/hpet.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/i8259.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/idt.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/irq.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/irq_32.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/irq_64.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/irqinit.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/kvmclock.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/setup.c",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/smp.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/smpboot.c",
      "insertions": 18,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/time.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/kvm/mmu.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/kvm/vmx.c",
      "insertions": 377,
      "deletions": 78
    },
    {
      "file": "arch/x86/kvm/x86.c",
      "insertions": 33,
      "deletions": 1
    },
    {
      "file": "arch/x86/mm/init.c",
      "insertions": 23,
      "deletions": 0
    },
    {
      "file": "arch/x86/mm/kmmio.c",
      "insertions": 15,
      "deletions": 10
    },
    {
      "file": "arch/x86/mm/mmap.c",
      "insertions": 21,
      "deletions": 0
    },
    {
      "file": "arch/x86/mm/pageattr.c",
      "insertions": 4,
      "deletions": 4
    },
    {
      "file": "arch/x86/mm/pti.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/platform/intel-mid/device_libs/platform_mrfld_wdt.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/platform/uv/tlb_uv.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/xen/enlighten.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "drivers/base/cpu.c",
      "insertions": 8,
      "deletions": 0
    },
    {
      "file": "drivers/gpu/drm/i915/i915_pmu.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "drivers/gpu/drm/i915/intel_lpe_audio.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "drivers/pci/controller/pci-hyperv.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "include/asm-generic/pgtable.h",
      "insertions": 12,
      "deletions": 0
    },
    {
      "file": "include/linux/cpu.h",
      "insertions": 21,
      "deletions": 0
    },
    {
      "file": "include/linux/swapfile.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "kernel/cpu.c",
      "insertions": 268,
      "deletions": 12
    },
    {
      "file": "kernel/sched/core.c",
      "insertions": 12,
      "deletions": 18
    },
    {
      "file": "kernel/sched/fair.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "kernel/smp.c",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "mm/memory.c",
      "insertions": 27,
      "deletions": 10
    },
    {
      "file": "mm/mprotect.c",
      "insertions": 49,
      "deletions": 0
    },
    {
      "file": "mm/swapfile.c",
      "insertions": 30,
      "deletions": 16
    },
    {
      "file": "tools/arch/x86/include/asm/cpufeatures.h",
      "insertions": 3,
      "deletions": 0
    }
  ],
  "total_insertions": 2186,
  "total_deletions": 260,
  "total_changes": 2446,
  "parents": [
    "781fca5b104693bc9242199cc47c690dcaf6a4cb",
    "07d981ad4cf1e78361c6db1c28ee5ba105f96cc1"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.19",
    "v4.19-rc1",
    "v4.19-rc2",
    "v4.19-rc3",
    "v4.19-rc4",
    "v4.19-rc5",
    "v4.19-rc6",
    "v4.19-rc7",
    "v4.19-rc8",
    "v4.20"
  ],
  "is_merge": true,
  "security_info": {
    "cve_ids": [
      "CVE-2018-3615",
      "CVE-2018-3620",
      "CVE-2018-3646"
    ],
    "security_keywords": [
      "vulnerability"
    ]
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "arch/x86/include/asm/pgtable-2level.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/pgtable_64.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/cpufeatures.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/pgtable-3level.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/pgtable.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/apic/vector.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/processor.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "Documentation/admin-guide/kernel-parameters.txt",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/apic/apic.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/cpu/bugs.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/kvmclock.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/cpu/common.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/cpu/amd.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/cpu/intel.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/setup.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/mm/init.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/mm/pti.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/platform/uv/tlb_uv.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/cpu.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/mm/pageattr.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/asm-generic/pgtable.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/cpu.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/sched/fair.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/memory.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kvm/vmx.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/sched/core.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}