{
  "hash": "778620364ef525e83597a6edee4d0a69db67fd3d",
  "hash_short": "77862036",
  "subject": "sunrpc/cache: make cache flushing more reliable.",
  "body": "The caches used to store sunrpc authentication information can be\nflushed by writing a timestamp to a file in /proc.\n\nThis timestamp has a one-second resolution and any entry in cache that\nwas last_refreshed *before* that time is treated as expired.\n\nThis is problematic as it is not possible to reliably flush the cache\nwithout interrupting NFS service.\nIf the current time is written to the \"flush\" file, any entry that was\nadded since the current second started will still be treated as valid.\nIf one second beyond than the current time is written to the file\nthen no entries can be valid until the second ticks over.  This will\nmean that no NFS request will be handled for up to 1 second.\n\nTo resolve this issue we make two changes:\n\n1/ treat an entry as expired if the timestamp when it was last_refreshed\n  is before *or the same as* the expiry time.  This means that current\n  code which writes out the current time will now flush the cache\n  reliably.\n\n2/ when a new entry in added to the cache -  set the last_refresh timestamp\n  to 1 second *beyond* the current flush time, when that not in the\n  past.\n  This ensures that newly added entries will always be valid.\n\nNow that we have a very reliable way to flush the cache, and also\nsince we are using \"since-boot\" timestamps which are monotonic,\nchange cache_purge() to set the smallest future flush_time which\nwill work, and leave it there: don't revert to '1'.\n\nAlso disable the setting of the 'flush_time' far into the future.\nThat has never been useful and is now awkward as it would cause\nlast_refresh times to be strange.\nFinally: if a request is made to set the 'flush_time' to the current\nsecond, assume the intent is to flush the cache and advance it, if\nnecessary, to 1 second beyond the current 'flush_time' so that all\nactive entries will be deemed to be expired.\n\nAs part of this we need to add a 'cache_detail' arg to cache_init()\nand cache_fresh_locked() so they can find the current ->flush_time.\n\nSigned-off-by: NeilBrown <neilb@suse.com>\nReported-by: Olaf Kirch <okir@suse.com>\nSigned-off-by: J. Bruce Fields <bfields@redhat.com>",
  "full_message": "sunrpc/cache: make cache flushing more reliable.\n\nThe caches used to store sunrpc authentication information can be\nflushed by writing a timestamp to a file in /proc.\n\nThis timestamp has a one-second resolution and any entry in cache that\nwas last_refreshed *before* that time is treated as expired.\n\nThis is problematic as it is not possible to reliably flush the cache\nwithout interrupting NFS service.\nIf the current time is written to the \"flush\" file, any entry that was\nadded since the current second started will still be treated as valid.\nIf one second beyond than the current time is written to the file\nthen no entries can be valid until the second ticks over.  This will\nmean that no NFS request will be handled for up to 1 second.\n\nTo resolve this issue we make two changes:\n\n1/ treat an entry as expired if the timestamp when it was last_refreshed\n  is before *or the same as* the expiry time.  This means that current\n  code which writes out the current time will now flush the cache\n  reliably.\n\n2/ when a new entry in added to the cache -  set the last_refresh timestamp\n  to 1 second *beyond* the current flush time, when that not in the\n  past.\n  This ensures that newly added entries will always be valid.\n\nNow that we have a very reliable way to flush the cache, and also\nsince we are using \"since-boot\" timestamps which are monotonic,\nchange cache_purge() to set the smallest future flush_time which\nwill work, and leave it there: don't revert to '1'.\n\nAlso disable the setting of the 'flush_time' far into the future.\nThat has never been useful and is now awkward as it would cause\nlast_refresh times to be strange.\nFinally: if a request is made to set the 'flush_time' to the current\nsecond, assume the intent is to flush the cache and advance it, if\nnecessary, to 1 second beyond the current 'flush_time' so that all\nactive entries will be deemed to be expired.\n\nAs part of this we need to add a 'cache_detail' arg to cache_init()\nand cache_fresh_locked() so they can find the current ->flush_time.\n\nSigned-off-by: NeilBrown <neilb@suse.com>\nReported-by: Olaf Kirch <okir@suse.com>\nSigned-off-by: J. Bruce Fields <bfields@redhat.com>",
  "author_name": "Neil Brown",
  "author_email": "neilb@suse.com",
  "author_date": "Fri Oct 16 08:59:08 2015 +1100",
  "author_date_iso": "2015-10-16T08:59:08+11:00",
  "committer_name": "J. Bruce Fields",
  "committer_email": "bfields@redhat.com",
  "committer_date": "Fri Oct 23 15:57:30 2015 -0400",
  "committer_date_iso": "2015-10-23T15:57:30-04:00",
  "files_changed": [
    "include/linux/sunrpc/cache.h",
    "net/sunrpc/cache.c"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "include/linux/sunrpc/cache.h",
      "insertions": 11,
      "deletions": 5
    },
    {
      "file": "net/sunrpc/cache.c",
      "insertions": 40,
      "deletions": 13
    }
  ],
  "total_insertions": 51,
  "total_deletions": 18,
  "total_changes": 69,
  "parents": [
    "825213e59ec24110b0a0f94456db42621f928421"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.10",
    "v4.10-rc1",
    "v4.10-rc2",
    "v4.10-rc3",
    "v4.10-rc4",
    "v4.10-rc5",
    "v4.10-rc6",
    "v4.10-rc7",
    "v4.10-rc8",
    "v4.11"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/linux/sunrpc/cache.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/sunrpc/cache.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}