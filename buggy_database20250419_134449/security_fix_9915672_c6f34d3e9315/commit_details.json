{
  "hash": "9915672d41273f5b77f1b3c29b391ffb7732b84b",
  "hash_short": "9915672d",
  "subject": "af_unix: limit unix_tot_inflight",
  "body": "Vegard Nossum found a unix socket OOM was possible, posting an exploit\nprogram.\n\nMy analysis is we can eat all LOWMEM memory before unix_gc() being\ncalled from unix_release_sock(). Moreover, the thread blocked in\nunix_gc() can consume huge amount of time to perform cleanup because of\nhuge working set.\n\nOne way to handle this is to have a sensible limit on unix_tot_inflight,\ntested from wait_for_unix_gc() and to force a call to unix_gc() if this\nlimit is hit.\n\nThis solves the OOM and also reduce overall latencies, and should not\nslowdown normal workloads.\n\nReported-by: Vegard Nossum <vegard.nossum@gmail.com>\nSigned-off-by: Eric Dumazet <eric.dumazet@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "full_message": "af_unix: limit unix_tot_inflight\n\nVegard Nossum found a unix socket OOM was possible, posting an exploit\nprogram.\n\nMy analysis is we can eat all LOWMEM memory before unix_gc() being\ncalled from unix_release_sock(). Moreover, the thread blocked in\nunix_gc() can consume huge amount of time to perform cleanup because of\nhuge working set.\n\nOne way to handle this is to have a sensible limit on unix_tot_inflight,\ntested from wait_for_unix_gc() and to force a call to unix_gc() if this\nlimit is hit.\n\nThis solves the OOM and also reduce overall latencies, and should not\nslowdown normal workloads.\n\nReported-by: Vegard Nossum <vegard.nossum@gmail.com>\nSigned-off-by: Eric Dumazet <eric.dumazet@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "author_name": "Eric Dumazet",
  "author_email": "eric.dumazet@gmail.com",
  "author_date": "Wed Nov 24 09:15:27 2010 -0800",
  "author_date_iso": "2010-11-24T09:15:27-08:00",
  "committer_name": "David S. Miller",
  "committer_email": "davem@davemloft.net",
  "committer_date": "Wed Nov 24 09:15:27 2010 -0800",
  "committer_date_iso": "2010-11-24T09:15:27-08:00",
  "files_changed": [
    "net/unix/garbage.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "net/unix/garbage.c",
      "insertions": 7,
      "deletions": 0
    }
  ],
  "total_insertions": 7,
  "total_deletions": 0,
  "total_changes": 7,
  "parents": [
    "cf41a51db89850033efc11c18a5257de810b5417"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v2.6.37",
    "v2.6.37-rc4",
    "v2.6.37-rc5",
    "v2.6.37-rc6",
    "v2.6.37-rc7",
    "v2.6.37-rc8",
    "v2.6.38",
    "v2.6.38-rc1",
    "v2.6.38-rc2",
    "v2.6.38-rc3"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "net/unix/garbage.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}