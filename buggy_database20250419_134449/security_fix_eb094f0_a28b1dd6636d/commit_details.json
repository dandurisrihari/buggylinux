{
  "hash": "eb094f06963bb0fd8134c6a9b805d4ad0002a7d4",
  "hash_short": "eb094f06",
  "subject": "Merge branch 'x86-pti-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip",
  "body": "Pull x86 TSX Async Abort and iTLB Multihit mitigations from Thomas Gleixner:\n \"The performance deterioration departement is not proud at all of\n  presenting the seventh installment of speculation mitigations and\n  hardware misfeature workarounds:\n\n   1) TSX Async Abort (TAA) - 'The Annoying Affair'\n\n      TAA is a hardware vulnerability that allows unprivileged\n      speculative access to data which is available in various CPU\n      internal buffers by using asynchronous aborts within an Intel TSX\n      transactional region.\n\n      The mitigation depends on a microcode update providing a new MSR\n      which allows to disable TSX in the CPU. CPUs which have no\n      microcode update can be mitigated by disabling TSX in the BIOS if\n      the BIOS provides a tunable.\n\n      Newer CPUs will have a bit set which indicates that the CPU is not\n      vulnerable, but the MSR to disable TSX will be available\n      nevertheless as it is an architected MSR. That means the kernel\n      provides the ability to disable TSX on the kernel command line,\n      which is useful as TSX is a truly useful mechanism to accelerate\n      side channel attacks of all sorts.\n\n   2) iITLB Multihit (NX) - 'No eXcuses'\n\n      iTLB Multihit is an erratum where some Intel processors may incur\n      a machine check error, possibly resulting in an unrecoverable CPU\n      lockup, when an instruction fetch hits multiple entries in the\n      instruction TLB. This can occur when the page size is changed\n      along with either the physical address or cache type. A malicious\n      guest running on a virtualized system can exploit this erratum to\n      perform a denial of service attack.\n\n      The workaround is that KVM marks huge pages in the extended page\n      tables as not executable (NX). If the guest attempts to execute in\n      such a page, the page is broken down into 4k pages which are\n      marked executable. The workaround comes with a mechanism to\n      recover these shattered huge pages over time.\n\n  Both issues come with full documentation in the hardware\n  vulnerabilities section of the Linux kernel user's and administrator's\n  guide.\n\n  Thanks to all patch authors and reviewers who had the extraordinary\n  priviledge to be exposed to this nuisance.\n\n  Special thanks to Borislav Petkov for polishing the final TAA patch\n  set and to Paolo Bonzini for shepherding the KVM iTLB workarounds and\n  providing also the backports to stable kernels for those!\"\n\n* 'x86-pti-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:\n  x86/speculation/taa: Fix printing of TAA_MSG_SMT on IBRS_ALL CPUs\n  Documentation: Add ITLB_MULTIHIT documentation\n  kvm: x86: mmu: Recovery of shattered NX large pages\n  kvm: Add helper function for creating VM worker threads\n  kvm: mmu: ITLB_MULTIHIT mitigation\n  cpu/speculation: Uninline and export CPU mitigations helpers\n  x86/cpu: Add Tremont to the cpu vulnerability whitelist\n  x86/bugs: Add ITLB_MULTIHIT bug infrastructure\n  x86/tsx: Add config options to set tsx=on|off|auto\n  x86/speculation/taa: Add documentation for TSX Async Abort\n  x86/tsx: Add \"auto\" option to the tsx= cmdline parameter\n  kvm/x86: Export MDS_NO=0 to guests when TSX is enabled\n  x86/speculation/taa: Add sysfs reporting for TSX Async Abort\n  x86/speculation/taa: Add mitigation for TSX Async Abort\n  x86/cpu: Add a \"tsx=\" cmdline option with TSX disabled by default\n  x86/cpu: Add a helper function x86_read_arch_cap_msr()\n  x86/msr: Add the IA32_TSX_CTRL MSR",
  "full_message": "Merge branch 'x86-pti-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip\n\nPull x86 TSX Async Abort and iTLB Multihit mitigations from Thomas Gleixner:\n \"The performance deterioration departement is not proud at all of\n  presenting the seventh installment of speculation mitigations and\n  hardware misfeature workarounds:\n\n   1) TSX Async Abort (TAA) - 'The Annoying Affair'\n\n      TAA is a hardware vulnerability that allows unprivileged\n      speculative access to data which is available in various CPU\n      internal buffers by using asynchronous aborts within an Intel TSX\n      transactional region.\n\n      The mitigation depends on a microcode update providing a new MSR\n      which allows to disable TSX in the CPU. CPUs which have no\n      microcode update can be mitigated by disabling TSX in the BIOS if\n      the BIOS provides a tunable.\n\n      Newer CPUs will have a bit set which indicates that the CPU is not\n      vulnerable, but the MSR to disable TSX will be available\n      nevertheless as it is an architected MSR. That means the kernel\n      provides the ability to disable TSX on the kernel command line,\n      which is useful as TSX is a truly useful mechanism to accelerate\n      side channel attacks of all sorts.\n\n   2) iITLB Multihit (NX) - 'No eXcuses'\n\n      iTLB Multihit is an erratum where some Intel processors may incur\n      a machine check error, possibly resulting in an unrecoverable CPU\n      lockup, when an instruction fetch hits multiple entries in the\n      instruction TLB. This can occur when the page size is changed\n      along with either the physical address or cache type. A malicious\n      guest running on a virtualized system can exploit this erratum to\n      perform a denial of service attack.\n\n      The workaround is that KVM marks huge pages in the extended page\n      tables as not executable (NX). If the guest attempts to execute in\n      such a page, the page is broken down into 4k pages which are\n      marked executable. The workaround comes with a mechanism to\n      recover these shattered huge pages over time.\n\n  Both issues come with full documentation in the hardware\n  vulnerabilities section of the Linux kernel user's and administrator's\n  guide.\n\n  Thanks to all patch authors and reviewers who had the extraordinary\n  priviledge to be exposed to this nuisance.\n\n  Special thanks to Borislav Petkov for polishing the final TAA patch\n  set and to Paolo Bonzini for shepherding the KVM iTLB workarounds and\n  providing also the backports to stable kernels for those!\"\n\n* 'x86-pti-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:\n  x86/speculation/taa: Fix printing of TAA_MSG_SMT on IBRS_ALL CPUs\n  Documentation: Add ITLB_MULTIHIT documentation\n  kvm: x86: mmu: Recovery of shattered NX large pages\n  kvm: Add helper function for creating VM worker threads\n  kvm: mmu: ITLB_MULTIHIT mitigation\n  cpu/speculation: Uninline and export CPU mitigations helpers\n  x86/cpu: Add Tremont to the cpu vulnerability whitelist\n  x86/bugs: Add ITLB_MULTIHIT bug infrastructure\n  x86/tsx: Add config options to set tsx=on|off|auto\n  x86/speculation/taa: Add documentation for TSX Async Abort\n  x86/tsx: Add \"auto\" option to the tsx= cmdline parameter\n  kvm/x86: Export MDS_NO=0 to guests when TSX is enabled\n  x86/speculation/taa: Add sysfs reporting for TSX Async Abort\n  x86/speculation/taa: Add mitigation for TSX Async Abort\n  x86/cpu: Add a \"tsx=\" cmdline option with TSX disabled by default\n  x86/cpu: Add a helper function x86_read_arch_cap_msr()\n  x86/msr: Add the IA32_TSX_CTRL MSR",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Tue Nov 12 10:53:24 2019 -0800",
  "author_date_iso": "2019-11-12T10:53:24-08:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Tue Nov 12 10:53:24 2019 -0800",
  "committer_date_iso": "2019-11-12T10:53:24-08:00",
  "files_changed": [],
  "files_changed_count": 0,
  "stats": [
    {
      "file": "Documentation/ABI/testing/sysfs-devices-system-cpu",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "Documentation/admin-guide/hw-vuln/index.rst",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "Documentation/admin-guide/hw-vuln/multihit.rst",
      "insertions": 163,
      "deletions": 0
    },
    {
      "file": "Documentation/admin-guide/hw-vuln/tsx_async_abort.rst",
      "insertions": 276,
      "deletions": 0
    },
    {
      "file": "Documentation/admin-guide/kernel-parameters.txt",
      "insertions": 92,
      "deletions": 0
    },
    {
      "file": "Documentation/x86/index.rst",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "Documentation/x86/tsx_async_abort.rst",
      "insertions": 117,
      "deletions": 0
    },
    {
      "file": "arch/x86/Kconfig",
      "insertions": 45,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/cpufeatures.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/kvm_host.h",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/msr-index.h",
      "insertions": 16,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/nospec-branch.h",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/x86/include/asm/processor.h",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/cpu/Makefile",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/x86/kernel/cpu/bugs.c",
      "insertions": 155,
      "deletions": 4
    },
    {
      "file": "arch/x86/kernel/cpu/common.c",
      "insertions": 65,
      "deletions": 34
    },
    {
      "file": "arch/x86/kernel/cpu/cpu.h",
      "insertions": 18,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/cpu/intel.c",
      "insertions": 5,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/cpu/tsx.c",
      "insertions": 140,
      "deletions": 0
    },
    {
      "file": "arch/x86/kvm/mmu.c",
      "insertions": 264,
      "deletions": 6
    },
    {
      "file": "arch/x86/kvm/mmu.h",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "arch/x86/kvm/paging_tmpl.h",
      "insertions": 23,
      "deletions": 6
    },
    {
      "file": "arch/x86/kvm/x86.c",
      "insertions": 39,
      "deletions": 0
    },
    {
      "file": "drivers/base/cpu.c",
      "insertions": 17,
      "deletions": 0
    },
    {
      "file": "include/linux/cpu.h",
      "insertions": 7,
      "deletions": 23
    },
    {
      "file": "include/linux/kvm_host.h",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "kernel/cpu.c",
      "insertions": 26,
      "deletions": 1
    },
    {
      "file": "virt/kvm/kvm_main.c",
      "insertions": 112,
      "deletions": 0
    }
  ],
  "total_insertions": 1613,
  "total_deletions": 77,
  "total_changes": 1690,
  "parents": [
    "100d46bd72ec689a5582c2f5f4deadc5bcb92d60",
    "012206a822a8b6ac09125bfaa210a95b9eb8f1c1"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.4",
    "v5.4-rc8",
    "v5.5",
    "v5.5-rc1",
    "v5.5-rc2",
    "v5.5-rc3",
    "v5.5-rc4",
    "v5.5-rc5",
    "v5.5-rc6",
    "v5.5-rc7"
  ],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "vulnerability",
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": []
}