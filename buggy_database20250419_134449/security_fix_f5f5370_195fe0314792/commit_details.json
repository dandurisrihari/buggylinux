{
  "hash": "f5f5370da4b3128b7dfd944b4fcbb5c7b6887348",
  "hash_short": "f5f5370d",
  "subject": "[PATCH] Decrapify asm-generic/local.h",
  "body": "Now that Christoph Lameter's atomic_long_t support is merged in mainline,\nmight as well convert asm-generic/local.h to use it, so the same code can\nbe used for both sizes of 32 and 64-bit unsigned longs.\n\nakpm sayeth:\n\nQ:\n\n  Is there any particular reason why these routines weren't simply\n  implemented with local_save/restore_flags, if they are only meant to\n  guarantee atomicity to the local cpu?  I'm sure on most platforms this\n  would be more efficient than using an atomic...\n\nA:\n\n  The whole _point_ of local_t is to avoid local_irq_disable().  It's\n  designed to exploit the fact that many CPUs can do incs and decs in a way\n  which is atomic wrt local interrupts, but not atomic wrt SMP.\n\nBut this patch makes sense, because asm-generic/local.h is just a fallback\nimplementation for architectures which either cannot perform these\nlocal-irq-atomic operations, or its maintainers haven't yet got around to\nimplementing them.\n\nWe need more work done on local_t in the 2.6.17 timeframe - they're defined as\nunsigned long, but some architectures implement them as signed long.\n\nSigned-off-by: Kyle McMartin <kyle@parisc-linux.org>\nCc: Benjamin LaHaise <bcrl@kvack.org>\nSigned-off-by: Andrew Morton <akpm@osdl.org>\nSigned-off-by: Linus Torvalds <torvalds@osdl.org>",
  "full_message": "[PATCH] Decrapify asm-generic/local.h\n\nNow that Christoph Lameter's atomic_long_t support is merged in mainline,\nmight as well convert asm-generic/local.h to use it, so the same code can\nbe used for both sizes of 32 and 64-bit unsigned longs.\n\nakpm sayeth:\n\nQ:\n\n  Is there any particular reason why these routines weren't simply\n  implemented with local_save/restore_flags, if they are only meant to\n  guarantee atomicity to the local cpu?  I'm sure on most platforms this\n  would be more efficient than using an atomic...\n\nA:\n\n  The whole _point_ of local_t is to avoid local_irq_disable().  It's\n  designed to exploit the fact that many CPUs can do incs and decs in a way\n  which is atomic wrt local interrupts, but not atomic wrt SMP.\n\nBut this patch makes sense, because asm-generic/local.h is just a fallback\nimplementation for architectures which either cannot perform these\nlocal-irq-atomic operations, or its maintainers haven't yet got around to\nimplementing them.\n\nWe need more work done on local_t in the 2.6.17 timeframe - they're defined as\nunsigned long, but some architectures implement them as signed long.\n\nSigned-off-by: Kyle McMartin <kyle@parisc-linux.org>\nCc: Benjamin LaHaise <bcrl@kvack.org>\nSigned-off-by: Andrew Morton <akpm@osdl.org>\nSigned-off-by: Linus Torvalds <torvalds@osdl.org>",
  "author_name": "Kyle McMartin",
  "author_email": "kyle@parisc-linux.org",
  "author_date": "Tue Mar 28 01:56:11 2006 -0800",
  "author_date_iso": "2006-03-28T01:56:11-08:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@g5.osdl.org",
  "committer_date": "Tue Mar 28 09:16:01 2006 -0800",
  "committer_date_iso": "2006-03-28T09:16:01-08:00",
  "files_changed": [
    "include/asm-generic/local.h"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "include/asm-generic/local.h",
      "insertions": 9,
      "deletions": 71
    }
  ],
  "total_insertions": 9,
  "total_deletions": 71,
  "total_changes": 80,
  "parents": [
    "4f3a36a7d0eb420471506fcd46ee46f4b5cd4ebc"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v2.6.17",
    "v2.6.17-rc1",
    "v2.6.17-rc2",
    "v2.6.17-rc3",
    "v2.6.17-rc4",
    "v2.6.17-rc5",
    "v2.6.17-rc6",
    "v2.6.18",
    "v2.6.18-rc1",
    "v2.6.18-rc2"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/asm-generic/local.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}