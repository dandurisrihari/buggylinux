{
  "hash": "afaef01c001537fa97a25092d7f54d764dc7d8c1",
  "hash_short": "afaef01c",
  "subject": "x86/entry: Add STACKLEAK erasing the kernel stack at the end of syscalls",
  "body": "The STACKLEAK feature (initially developed by PaX Team) has the following\nbenefits:\n\n1. Reduces the information that can be revealed through kernel stack leak\n   bugs. The idea of erasing the thread stack at the end of syscalls is\n   similar to CONFIG_PAGE_POISONING and memzero_explicit() in kernel\n   crypto, which all comply with FDP_RIP.2 (Full Residual Information\n   Protection) of the Common Criteria standard.\n\n2. Blocks some uninitialized stack variable attacks (e.g. CVE-2017-17712,\n   CVE-2010-2963). That kind of bugs should be killed by improving C\n   compilers in future, which might take a long time.\n\nThis commit introduces the code filling the used part of the kernel\nstack with a poison value before returning to userspace. Full\nSTACKLEAK feature also contains the gcc plugin which comes in a\nseparate commit.\n\nThe STACKLEAK feature is ported from grsecurity/PaX. More information at:\n  https://grsecurity.net/\n  https://pax.grsecurity.net/\n\nThis code is modified from Brad Spengler/PaX Team's code in the last\npublic patch of grsecurity/PaX based on our understanding of the code.\nChanges or omissions from the original code are ours and don't reflect\nthe original grsecurity/PaX code.\n\nPerformance impact:\n\nHardware: Intel Core i7-4770, 16 GB RAM\n\nTest #1: building the Linux kernel on a single core\n        0.91% slowdown\n\nTest #2: hackbench -s 4096 -l 2000 -g 15 -f 25 -P\n        4.2% slowdown\n\nSo the STACKLEAK description in Kconfig includes: \"The tradeoff is the\nperformance impact: on a single CPU system kernel compilation sees a 1%\nslowdown, other systems and workloads may vary and you are advised to\ntest this feature on your expected workload before deploying it\".\n\nSigned-off-by: Alexander Popov <alex.popov@linux.com>\nAcked-by: Thomas Gleixner <tglx@linutronix.de>\nReviewed-by: Dave Hansen <dave.hansen@linux.intel.com>\nAcked-by: Ingo Molnar <mingo@kernel.org>\nSigned-off-by: Kees Cook <keescook@chromium.org>",
  "full_message": "x86/entry: Add STACKLEAK erasing the kernel stack at the end of syscalls\n\nThe STACKLEAK feature (initially developed by PaX Team) has the following\nbenefits:\n\n1. Reduces the information that can be revealed through kernel stack leak\n   bugs. The idea of erasing the thread stack at the end of syscalls is\n   similar to CONFIG_PAGE_POISONING and memzero_explicit() in kernel\n   crypto, which all comply with FDP_RIP.2 (Full Residual Information\n   Protection) of the Common Criteria standard.\n\n2. Blocks some uninitialized stack variable attacks (e.g. CVE-2017-17712,\n   CVE-2010-2963). That kind of bugs should be killed by improving C\n   compilers in future, which might take a long time.\n\nThis commit introduces the code filling the used part of the kernel\nstack with a poison value before returning to userspace. Full\nSTACKLEAK feature also contains the gcc plugin which comes in a\nseparate commit.\n\nThe STACKLEAK feature is ported from grsecurity/PaX. More information at:\n  https://grsecurity.net/\n  https://pax.grsecurity.net/\n\nThis code is modified from Brad Spengler/PaX Team's code in the last\npublic patch of grsecurity/PaX based on our understanding of the code.\nChanges or omissions from the original code are ours and don't reflect\nthe original grsecurity/PaX code.\n\nPerformance impact:\n\nHardware: Intel Core i7-4770, 16 GB RAM\n\nTest #1: building the Linux kernel on a single core\n        0.91% slowdown\n\nTest #2: hackbench -s 4096 -l 2000 -g 15 -f 25 -P\n        4.2% slowdown\n\nSo the STACKLEAK description in Kconfig includes: \"The tradeoff is the\nperformance impact: on a single CPU system kernel compilation sees a 1%\nslowdown, other systems and workloads may vary and you are advised to\ntest this feature on your expected workload before deploying it\".\n\nSigned-off-by: Alexander Popov <alex.popov@linux.com>\nAcked-by: Thomas Gleixner <tglx@linutronix.de>\nReviewed-by: Dave Hansen <dave.hansen@linux.intel.com>\nAcked-by: Ingo Molnar <mingo@kernel.org>\nSigned-off-by: Kees Cook <keescook@chromium.org>",
  "author_name": "Alexander Popov",
  "author_email": "alex.popov@linux.com",
  "author_date": "Fri Aug 17 01:16:58 2018 +0300",
  "author_date_iso": "2018-08-17T01:16:58+03:00",
  "committer_name": "Kees Cook",
  "committer_email": "keescook@chromium.org",
  "committer_date": "Tue Sep 4 10:35:47 2018 -0700",
  "committer_date_iso": "2018-09-04T10:35:47-07:00",
  "files_changed": [
    "Documentation/x86/x86_64/mm.txt",
    "arch/Kconfig",
    "arch/x86/Kconfig",
    "arch/x86/entry/calling.h",
    "arch/x86/entry/entry_32.S",
    "arch/x86/entry/entry_64.S",
    "arch/x86/entry/entry_64_compat.S",
    "include/linux/sched.h",
    "include/linux/stackleak.h",
    "kernel/Makefile",
    "kernel/fork.c",
    "kernel/stackleak.c",
    "scripts/gcc-plugins/Kconfig"
  ],
  "files_changed_count": 13,
  "stats": [
    {
      "file": "Documentation/x86/x86_64/mm.txt",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "arch/Kconfig",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "arch/x86/Kconfig",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/entry/calling.h",
      "insertions": 14,
      "deletions": 0
    },
    {
      "file": "arch/x86/entry/entry_32.S",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "arch/x86/entry/entry_64.S",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "arch/x86/entry/entry_64_compat.S",
      "insertions": 5,
      "deletions": 0
    },
    {
      "file": "include/linux/sched.h",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "include/linux/stackleak.h",
      "insertions": 26,
      "deletions": 0
    },
    {
      "file": "kernel/Makefile",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "kernel/fork.c",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "kernel/stackleak.c",
      "insertions": 62,
      "deletions": 0
    },
    {
      "file": "scripts/gcc-plugins/Kconfig",
      "insertions": 19,
      "deletions": 0
    }
  ],
  "total_insertions": 157,
  "total_deletions": 0,
  "total_changes": 157,
  "parents": [
    "57361846b52bc686112da6ca5368d11210796804"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.20",
    "v4.20-rc1",
    "v4.20-rc2",
    "v4.20-rc3",
    "v4.20-rc4",
    "v4.20-rc5",
    "v4.20-rc6",
    "v4.20-rc7",
    "v5.0",
    "v5.0-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2017-17712",
      "CVE-2010-2963"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "arch/x86/entry/calling.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/entry/entry_64.S",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/entry/entry_64_compat.S",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/entry/entry_32.S",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "Documentation/x86/x86_64/mm.txt",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/stackleak.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/Makefile",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/sched.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/stackleak.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/fork.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "scripts/gcc-plugins/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}