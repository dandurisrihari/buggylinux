commit 9a93b5a35388aabb061212e906221a540ffdb965
Author: Josef Bacik <josef@toxicpanda.com>
Date:   Tue Feb 7 11:57:25 2023 -0500

    btrfs: abort the transaction if we get an error during snapshot drop
    
    We were seeing weird errors when we were testing our btrfs backports
    before we had the incorrect level check fix.  These errors appeared to
    be improper error handling, but error injection testing uncovered that
    the errors were a result of corruption that occurred from improper error
    handling during snapshot delete.
    
    With snapshot delete if we encounter any errors during walk_down or
    walk_up we'll simply return an error, we won't abort the transaction.
    This is problematic because we will be dropping references for nodes and
    leaves along the way, and if we fail in the middle we will leave the
    file system corrupt because we don't know where we left off in the drop.
    
    Fix this by making sure we abort if we hit any errors during the walk
    down or walk up operations, as we have no idea what operations could
    have been left half done at this point.
    
    Signed-off-by: Josef Bacik <josef@toxicpanda.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

diff --git a/fs/btrfs/extent-tree.c b/fs/btrfs/extent-tree.c
index 30720ea94a82..6b6c59e6805c 100644
--- a/fs/btrfs/extent-tree.c
+++ b/fs/btrfs/extent-tree.c
@@ -5708,12 +5708,14 @@ int btrfs_drop_snapshot(struct btrfs_root *root, int update_ref, int for_reloc)
 
 		ret = walk_down_tree(trans, root, path, wc);
 		if (ret < 0) {
+			btrfs_abort_transaction(trans, ret);
 			err = ret;
 			break;
 		}
 
 		ret = walk_up_tree(trans, root, path, wc, BTRFS_MAX_LEVEL);
 		if (ret < 0) {
+			btrfs_abort_transaction(trans, ret);
 			err = ret;
 			break;
 		}