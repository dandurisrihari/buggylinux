{
  "hash": "9f3a0941fb5efaa4d27911e251dc595034d58baa",
  "hash_short": "9f3a0941",
  "subject": "Merge tag 'libnvdimm-for-4.17' of git://git.kernel.org/pub/scm/linux/kernel/git/nvdimm/nvdimm",
  "body": "Pull libnvdimm updates from Dan Williams:\n \"This cycle was was not something I ever want to repeat as there were\n  several late changes that have only now just settled.\n\n  Half of the branch up to commit d2c997c0f145 (\"fs, dax: use\n  page->mapping to warn...\") have been in -next for several releases.\n  The of_pmem driver and the address range scrub rework were late\n  arrivals, and the dax work was scaled back at the last moment.\n\n  The of_pmem driver missed a previous merge window due to an oversight.\n  A sense of obligation to rectify that miss is why it is included for\n  4.17. It has acks from PowerPC folks. Stephen reported a build failure\n  that only occurs when merging it with your latest tree, for now I have\n  fixed that up by disabling modular builds of of_pmem. A test merge\n  with your tree has received a build success report from the 0day robot\n  over 156 configs.\n\n  An initial version of the ARS rework was submitted before the merge\n  window. It is self contained to libnvdimm, a net code reduction, and\n  passing all unit tests.\n\n  The filesystem-dax changes are based on the wait_var_event()\n  functionality from tip/sched/core. However, late review feedback\n  showed that those changes regressed truncate performance to a large\n  degree. The branch was rewound to drop the truncate behavior change\n  and now only includes preparation patches and cleanups (with full acks\n  and reviews). The finalization of this dax-dma-vs-trnucate work will\n  need to wait for 4.18.\n\n  Summary:\n\n   - A rework of the filesytem-dax implementation provides for detection\n     of unmap operations (truncate / hole punch) colliding with\n     in-progress device-DMA. A fix for these collisions remains a\n     work-in-progress pending resolution of truncate latency and\n     starvation regressions.\n\n   - The of_pmem driver expands the users of libnvdimm outside of x86\n     and ACPI to describe an implementation of persistent memory on\n     PowerPC with Open Firmware / Device tree.\n\n   - Address Range Scrub (ARS) handling is completely rewritten to\n     account for the fact that ARS may run for 100s of seconds and there\n     is no platform defined way to cancel it. ARS will now no longer\n     block namespace initialization.\n\n   - The NVDIMM Namespace Label implementation is updated to handle\n     label areas as small as 1K, down from 128K.\n\n   - Miscellaneous cleanups and updates to unit test infrastructure\"\n\n* tag 'libnvdimm-for-4.17' of git://git.kernel.org/pub/scm/linux/kernel/git/nvdimm/nvdimm: (39 commits)\n  libnvdimm, of_pmem: workaround OF_NUMA=n build error\n  nfit, address-range-scrub: add module option to skip initial ars\n  nfit, address-range-scrub: rework and simplify ARS state machine\n  nfit, address-range-scrub: determine one platform max_ars value\n  powerpc/powernv: Create platform devs for nvdimm buses\n  doc/devicetree: Persistent memory region bindings\n  libnvdimm: Add device-tree based driver\n  libnvdimm: Add of_node to region and bus descriptors\n  libnvdimm, region: quiet region probe\n  libnvdimm, namespace: use a safe lookup for dimm device name\n  libnvdimm, dimm: fix dpa reservation vs uninitialized label area\n  libnvdimm, testing: update the default smart ctrl_temperature\n  libnvdimm, testing: Add emulation for smart injection commands\n  nfit, address-range-scrub: introduce nfit_spa->ars_state\n  libnvdimm: add an api to cast a 'struct nd_region' to its 'struct device'\n  nfit, address-range-scrub: fix scrub in-progress reporting\n  dax, dm: allow device-mapper to operate without dax support\n  dax: introduce CONFIG_DAX_DRIVER\n  fs, dax: use page->mapping to warn if truncate collides with a busy page\n  ext2, dax: introduce ext2_dax_aops\n  ...",
  "full_message": "Merge tag 'libnvdimm-for-4.17' of git://git.kernel.org/pub/scm/linux/kernel/git/nvdimm/nvdimm\n\nPull libnvdimm updates from Dan Williams:\n \"This cycle was was not something I ever want to repeat as there were\n  several late changes that have only now just settled.\n\n  Half of the branch up to commit d2c997c0f145 (\"fs, dax: use\n  page->mapping to warn...\") have been in -next for several releases.\n  The of_pmem driver and the address range scrub rework were late\n  arrivals, and the dax work was scaled back at the last moment.\n\n  The of_pmem driver missed a previous merge window due to an oversight.\n  A sense of obligation to rectify that miss is why it is included for\n  4.17. It has acks from PowerPC folks. Stephen reported a build failure\n  that only occurs when merging it with your latest tree, for now I have\n  fixed that up by disabling modular builds of of_pmem. A test merge\n  with your tree has received a build success report from the 0day robot\n  over 156 configs.\n\n  An initial version of the ARS rework was submitted before the merge\n  window. It is self contained to libnvdimm, a net code reduction, and\n  passing all unit tests.\n\n  The filesystem-dax changes are based on the wait_var_event()\n  functionality from tip/sched/core. However, late review feedback\n  showed that those changes regressed truncate performance to a large\n  degree. The branch was rewound to drop the truncate behavior change\n  and now only includes preparation patches and cleanups (with full acks\n  and reviews). The finalization of this dax-dma-vs-trnucate work will\n  need to wait for 4.18.\n\n  Summary:\n\n   - A rework of the filesytem-dax implementation provides for detection\n     of unmap operations (truncate / hole punch) colliding with\n     in-progress device-DMA. A fix for these collisions remains a\n     work-in-progress pending resolution of truncate latency and\n     starvation regressions.\n\n   - The of_pmem driver expands the users of libnvdimm outside of x86\n     and ACPI to describe an implementation of persistent memory on\n     PowerPC with Open Firmware / Device tree.\n\n   - Address Range Scrub (ARS) handling is completely rewritten to\n     account for the fact that ARS may run for 100s of seconds and there\n     is no platform defined way to cancel it. ARS will now no longer\n     block namespace initialization.\n\n   - The NVDIMM Namespace Label implementation is updated to handle\n     label areas as small as 1K, down from 128K.\n\n   - Miscellaneous cleanups and updates to unit test infrastructure\"\n\n* tag 'libnvdimm-for-4.17' of git://git.kernel.org/pub/scm/linux/kernel/git/nvdimm/nvdimm: (39 commits)\n  libnvdimm, of_pmem: workaround OF_NUMA=n build error\n  nfit, address-range-scrub: add module option to skip initial ars\n  nfit, address-range-scrub: rework and simplify ARS state machine\n  nfit, address-range-scrub: determine one platform max_ars value\n  powerpc/powernv: Create platform devs for nvdimm buses\n  doc/devicetree: Persistent memory region bindings\n  libnvdimm: Add device-tree based driver\n  libnvdimm: Add of_node to region and bus descriptors\n  libnvdimm, region: quiet region probe\n  libnvdimm, namespace: use a safe lookup for dimm device name\n  libnvdimm, dimm: fix dpa reservation vs uninitialized label area\n  libnvdimm, testing: update the default smart ctrl_temperature\n  libnvdimm, testing: Add emulation for smart injection commands\n  nfit, address-range-scrub: introduce nfit_spa->ars_state\n  libnvdimm: add an api to cast a 'struct nd_region' to its 'struct device'\n  nfit, address-range-scrub: fix scrub in-progress reporting\n  dax, dm: allow device-mapper to operate without dax support\n  dax: introduce CONFIG_DAX_DRIVER\n  fs, dax: use page->mapping to warn if truncate collides with a busy page\n  ext2, dax: introduce ext2_dax_aops\n  ...",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Tue Apr 10 10:25:57 2018 -0700",
  "author_date_iso": "2018-04-10T10:25:57-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Tue Apr 10 10:25:57 2018 -0700",
  "committer_date_iso": "2018-04-10T10:25:57-07:00",
  "files_changed": [
    "MAINTAINERS",
    "arch/powerpc/platforms/powernv/opal.c",
    "drivers/acpi/nfit/core.c",
    "drivers/dax/device.c",
    "drivers/md/dm-linear.c",
    "drivers/md/dm-log-writes.c",
    "drivers/md/dm-stripe.c",
    "drivers/md/dm.c",
    "drivers/nvdimm/nd.h",
    "drivers/nvdimm/pmem.c",
    "fs/block_dev.c",
    "fs/ext4/inode.c",
    "fs/xfs/xfs_aops.c",
    "fs/xfs/xfs_iops.c",
    "include/linux/fs.h"
  ],
  "files_changed_count": 15,
  "stats": [
    {
      "file": "Documentation/devicetree/bindings/pmem/pmem-region.txt",
      "insertions": 65,
      "deletions": 0
    },
    {
      "file": "MAINTAINERS",
      "insertions": 8,
      "deletions": 0
    },
    {
      "file": "arch/powerpc/platforms/powernv/opal.c",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "drivers/acpi/nfit/core.c",
      "insertions": 323,
      "deletions": 356
    },
    {
      "file": "drivers/acpi/nfit/mce.c",
      "insertions": 2,
      "deletions": 3
    },
    {
      "file": "drivers/acpi/nfit/nfit.h",
      "insertions": 14,
      "deletions": 8
    },
    {
      "file": "drivers/dax/Kconfig",
      "insertions": 4,
      "deletions": 1
    },
    {
      "file": "drivers/dax/device.c",
      "insertions": 17,
      "deletions": 21
    },
    {
      "file": "drivers/dax/pmem.c",
      "insertions": 4,
      "deletions": 14
    },
    {
      "file": "drivers/dax/super.c",
      "insertions": 12,
      "deletions": 3
    },
    {
      "file": "drivers/md/Kconfig",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "drivers/md/dm-linear.c",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "drivers/md/dm-log-writes.c",
      "insertions": 50,
      "deletions": 45
    },
    {
      "file": "drivers/md/dm-stripe.c",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "drivers/md/dm.c",
      "insertions": 6,
      "deletions": 4
    },
    {
      "file": "drivers/nvdimm/Kconfig",
      "insertions": 12,
      "deletions": 1
    },
    {
      "file": "drivers/nvdimm/Makefile",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "drivers/nvdimm/btt_devs.c",
      "insertions": 10,
      "deletions": 11
    },
    {
      "file": "drivers/nvdimm/bus.c",
      "insertions": 7,
      "deletions": 7
    },
    {
      "file": "drivers/nvdimm/claim.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "drivers/nvdimm/core.c",
      "insertions": 3,
      "deletions": 3
    },
    {
      "file": "drivers/nvdimm/dax_devs.c",
      "insertions": 2,
      "deletions": 3
    },
    {
      "file": "drivers/nvdimm/dimm.c",
      "insertions": 5,
      "deletions": 3
    },
    {
      "file": "drivers/nvdimm/dimm_devs.c",
      "insertions": 3,
      "deletions": 4
    },
    {
      "file": "drivers/nvdimm/label.c",
      "insertions": 47,
      "deletions": 38
    },
    {
      "file": "drivers/nvdimm/label.h",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "drivers/nvdimm/namespace_devs.c",
      "insertions": 18,
      "deletions": 24
    },
    {
      "file": "drivers/nvdimm/nd.h",
      "insertions": 0,
      "deletions": 1
    },
    {
      "file": "drivers/nvdimm/of_pmem.c",
      "insertions": 119,
      "deletions": 0
    },
    {
      "file": "drivers/nvdimm/pfn_devs.c",
      "insertions": 12,
      "deletions": 13
    },
    {
      "file": "drivers/nvdimm/pmem.c",
      "insertions": 2,
      "deletions": 12
    },
    {
      "file": "drivers/nvdimm/region.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "drivers/nvdimm/region_devs.c",
      "insertions": 9,
      "deletions": 0
    },
    {
      "file": "drivers/s390/block/Kconfig",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "fs/block_dev.c",
      "insertions": 0,
      "deletions": 5
    },
    {
      "file": "fs/dax.c",
      "insertions": 94,
      "deletions": 52
    },
    {
      "file": "fs/ext2/ext2.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "fs/ext2/inode.c",
      "insertions": 27,
      "deletions": 19
    },
    {
      "file": "fs/ext2/namei.c",
      "insertions": 2,
      "deletions": 16
    },
    {
      "file": "fs/ext4/inode.c",
      "insertions": 31,
      "deletions": 11
    },
    {
      "file": "fs/libfs.c",
      "insertions": 39,
      "deletions": 0
    },
    {
      "file": "fs/xfs/xfs_aops.c",
      "insertions": 18,
      "deletions": 16
    },
    {
      "file": "fs/xfs/xfs_aops.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "fs/xfs/xfs_iops.c",
      "insertions": 4,
      "deletions": 1
    },
    {
      "file": "include/linux/dax.h",
      "insertions": 33,
      "deletions": 9
    },
    {
      "file": "include/linux/fs.h",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "include/linux/libnvdimm.h",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "include/linux/nd.h",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "tools/testing/nvdimm/test/nfit.c",
      "insertions": 161,
      "deletions": 78
    },
    {
      "file": "tools/testing/nvdimm/test/nfit_test.h",
      "insertions": 16,
      "deletions": 0
    }
  ],
  "total_insertions": 1217,
  "total_deletions": 788,
  "total_changes": 2005,
  "parents": [
    "fbe173e3ffbd897b5a859020d714c0eaf4af2a1a",
    "e13e75b86ef2f88e3a47d672dd4c52a293efb95b"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.17",
    "v4.17-rc1",
    "v4.17-rc2",
    "v4.17-rc3",
    "v4.17-rc4",
    "v4.17-rc5",
    "v4.17-rc6",
    "v4.17-rc7",
    "v4.18",
    "v4.18-rc1"
  ],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/md/dm-linear.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/dax/device.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/powerpc/platforms/powernv/opal.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/nvdimm/nd.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/acpi/nfit/core.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/md/dm-stripe.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/md/dm-log-writes.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/md/dm.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/ext4/inode.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/block_dev.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/nvdimm/pmem.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/xfs/xfs_iops.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/xfs/xfs_aops.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "MAINTAINERS",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/fs.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}