{
  "hash": "71105998845fb012937332fe2e806d443c09e026",
  "hash_short": "71105998",
  "subject": "ALSA: seq: Fix use-after-free at creating a port",
  "body": "There is a potential race window opened at creating and deleting a\nport via ioctl, as spotted by fuzzing.  snd_seq_create_port() creates\na port object and returns its pointer, but it doesn't take the\nrefcount, thus it can be deleted immediately by another thread.\nMeanwhile, snd_seq_ioctl_create_port() still calls the function\nsnd_seq_system_client_ev_port_start() with the created port object\nthat is being deleted, and this triggers use-after-free like:\n\n BUG: KASAN: use-after-free in snd_seq_ioctl_create_port+0x504/0x630 [snd_seq] at addr ffff8801f2241cb1\n =============================================================================\n BUG kmalloc-512 (Tainted: G    B          ): kasan: bad access detected\n -----------------------------------------------------------------------------\n INFO: Allocated in snd_seq_create_port+0x94/0x9b0 [snd_seq] age=1 cpu=3 pid=4511\n \t___slab_alloc+0x425/0x460\n \t__slab_alloc+0x20/0x40\n  \tkmem_cache_alloc_trace+0x150/0x190\n\tsnd_seq_create_port+0x94/0x9b0 [snd_seq]\n\tsnd_seq_ioctl_create_port+0xd1/0x630 [snd_seq]\n \tsnd_seq_do_ioctl+0x11c/0x190 [snd_seq]\n \tsnd_seq_ioctl+0x40/0x80 [snd_seq]\n \tdo_vfs_ioctl+0x54b/0xda0\n \tSyS_ioctl+0x79/0x90\n \tentry_SYSCALL_64_fastpath+0x16/0x75\n INFO: Freed in port_delete+0x136/0x1a0 [snd_seq] age=1 cpu=2 pid=4717\n \t__slab_free+0x204/0x310\n \tkfree+0x15f/0x180\n \tport_delete+0x136/0x1a0 [snd_seq]\n \tsnd_seq_delete_port+0x235/0x350 [snd_seq]\n \tsnd_seq_ioctl_delete_port+0xc8/0x180 [snd_seq]\n \tsnd_seq_do_ioctl+0x11c/0x190 [snd_seq]\n \tsnd_seq_ioctl+0x40/0x80 [snd_seq]\n \tdo_vfs_ioctl+0x54b/0xda0\n \tSyS_ioctl+0x79/0x90\n \tentry_SYSCALL_64_fastpath+0x16/0x75\n Call Trace:\n  [<ffffffff81b03781>] dump_stack+0x63/0x82\n  [<ffffffff81531b3b>] print_trailer+0xfb/0x160\n  [<ffffffff81536db4>] object_err+0x34/0x40\n  [<ffffffff815392d3>] kasan_report.part.2+0x223/0x520\n  [<ffffffffa07aadf4>] ? snd_seq_ioctl_create_port+0x504/0x630 [snd_seq]\n  [<ffffffff815395fe>] __asan_report_load1_noabort+0x2e/0x30\n  [<ffffffffa07aadf4>] snd_seq_ioctl_create_port+0x504/0x630 [snd_seq]\n  [<ffffffffa07aa8f0>] ? snd_seq_ioctl_delete_port+0x180/0x180 [snd_seq]\n  [<ffffffff8136be50>] ? taskstats_exit+0xbc0/0xbc0\n  [<ffffffffa07abc5c>] snd_seq_do_ioctl+0x11c/0x190 [snd_seq]\n  [<ffffffffa07abd10>] snd_seq_ioctl+0x40/0x80 [snd_seq]\n  [<ffffffff8136d433>] ? acct_account_cputime+0x63/0x80\n  [<ffffffff815b515b>] do_vfs_ioctl+0x54b/0xda0\n  .....\n\nWe may fix this in a few different ways, and in this patch, it's fixed\nsimply by taking the refcount properly at snd_seq_create_port() and\nletting the caller unref the object after use.  Also, there is another\npotential use-after-free by sprintf() call in snd_seq_create_port(),\nand this is moved inside the lock.\n\nThis fix covers CVE-2017-15265.\n\nReported-and-tested-by: Michael23 Yu <ycqzsy@gmail.com>\nSuggested-by: Linus Torvalds <torvalds@linux-foundation.org>\nCc: <stable@vger.kernel.org>\nSigned-off-by: Takashi Iwai <tiwai@suse.de>",
  "full_message": "ALSA: seq: Fix use-after-free at creating a port\n\nThere is a potential race window opened at creating and deleting a\nport via ioctl, as spotted by fuzzing.  snd_seq_create_port() creates\na port object and returns its pointer, but it doesn't take the\nrefcount, thus it can be deleted immediately by another thread.\nMeanwhile, snd_seq_ioctl_create_port() still calls the function\nsnd_seq_system_client_ev_port_start() with the created port object\nthat is being deleted, and this triggers use-after-free like:\n\n BUG: KASAN: use-after-free in snd_seq_ioctl_create_port+0x504/0x630 [snd_seq] at addr ffff8801f2241cb1\n =============================================================================\n BUG kmalloc-512 (Tainted: G    B          ): kasan: bad access detected\n -----------------------------------------------------------------------------\n INFO: Allocated in snd_seq_create_port+0x94/0x9b0 [snd_seq] age=1 cpu=3 pid=4511\n \t___slab_alloc+0x425/0x460\n \t__slab_alloc+0x20/0x40\n  \tkmem_cache_alloc_trace+0x150/0x190\n\tsnd_seq_create_port+0x94/0x9b0 [snd_seq]\n\tsnd_seq_ioctl_create_port+0xd1/0x630 [snd_seq]\n \tsnd_seq_do_ioctl+0x11c/0x190 [snd_seq]\n \tsnd_seq_ioctl+0x40/0x80 [snd_seq]\n \tdo_vfs_ioctl+0x54b/0xda0\n \tSyS_ioctl+0x79/0x90\n \tentry_SYSCALL_64_fastpath+0x16/0x75\n INFO: Freed in port_delete+0x136/0x1a0 [snd_seq] age=1 cpu=2 pid=4717\n \t__slab_free+0x204/0x310\n \tkfree+0x15f/0x180\n \tport_delete+0x136/0x1a0 [snd_seq]\n \tsnd_seq_delete_port+0x235/0x350 [snd_seq]\n \tsnd_seq_ioctl_delete_port+0xc8/0x180 [snd_seq]\n \tsnd_seq_do_ioctl+0x11c/0x190 [snd_seq]\n \tsnd_seq_ioctl+0x40/0x80 [snd_seq]\n \tdo_vfs_ioctl+0x54b/0xda0\n \tSyS_ioctl+0x79/0x90\n \tentry_SYSCALL_64_fastpath+0x16/0x75\n Call Trace:\n  [<ffffffff81b03781>] dump_stack+0x63/0x82\n  [<ffffffff81531b3b>] print_trailer+0xfb/0x160\n  [<ffffffff81536db4>] object_err+0x34/0x40\n  [<ffffffff815392d3>] kasan_report.part.2+0x223/0x520\n  [<ffffffffa07aadf4>] ? snd_seq_ioctl_create_port+0x504/0x630 [snd_seq]\n  [<ffffffff815395fe>] __asan_report_load1_noabort+0x2e/0x30\n  [<ffffffffa07aadf4>] snd_seq_ioctl_create_port+0x504/0x630 [snd_seq]\n  [<ffffffffa07aa8f0>] ? snd_seq_ioctl_delete_port+0x180/0x180 [snd_seq]\n  [<ffffffff8136be50>] ? taskstats_exit+0xbc0/0xbc0\n  [<ffffffffa07abc5c>] snd_seq_do_ioctl+0x11c/0x190 [snd_seq]\n  [<ffffffffa07abd10>] snd_seq_ioctl+0x40/0x80 [snd_seq]\n  [<ffffffff8136d433>] ? acct_account_cputime+0x63/0x80\n  [<ffffffff815b515b>] do_vfs_ioctl+0x54b/0xda0\n  .....\n\nWe may fix this in a few different ways, and in this patch, it's fixed\nsimply by taking the refcount properly at snd_seq_create_port() and\nletting the caller unref the object after use.  Also, there is another\npotential use-after-free by sprintf() call in snd_seq_create_port(),\nand this is moved inside the lock.\n\nThis fix covers CVE-2017-15265.\n\nReported-and-tested-by: Michael23 Yu <ycqzsy@gmail.com>\nSuggested-by: Linus Torvalds <torvalds@linux-foundation.org>\nCc: <stable@vger.kernel.org>\nSigned-off-by: Takashi Iwai <tiwai@suse.de>",
  "author_name": "Takashi Iwai",
  "author_email": "tiwai@suse.de",
  "author_date": "Mon Oct 9 11:09:20 2017 +0200",
  "author_date_iso": "2017-10-09T11:09:20+02:00",
  "committer_name": "Takashi Iwai",
  "committer_email": "tiwai@suse.de",
  "committer_date": "Wed Oct 11 09:58:18 2017 +0200",
  "committer_date_iso": "2017-10-11T09:58:18+02:00",
  "files_changed": [
    "sound/core/seq/seq_clientmgr.c",
    "sound/core/seq/seq_ports.c"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "sound/core/seq/seq_clientmgr.c",
      "insertions": 5,
      "deletions": 1
    },
    {
      "file": "sound/core/seq/seq_ports.c",
      "insertions": 5,
      "deletions": 2
    }
  ],
  "total_insertions": 10,
  "total_deletions": 3,
  "total_changes": 13,
  "parents": [
    "124751d5e63c823092060074bd0abaae61aaa9c4"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.14",
    "v4.14-rc5",
    "v4.14-rc6",
    "v4.14-rc7",
    "v4.14-rc8",
    "v4.15",
    "v4.15-rc1",
    "v4.15-rc2",
    "v4.15-rc3",
    "v4.15-rc4"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2017-15265"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "sound/core/seq/seq_clientmgr.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "sound/core/seq/seq_ports.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}