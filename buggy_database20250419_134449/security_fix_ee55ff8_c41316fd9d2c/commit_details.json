{
  "hash": "ee55ff803b383e03d0855661d3416aa1763e54f9",
  "hash_short": "ee55ff80",
  "subject": "riscv: Add support for function error injection",
  "body": "Inspired by the commit 42d038c4fb00 (\"arm64: Add support for function\nerror injection\"), this patch supports function error injection for\nriscv.\n\nThis patch mainly support two functions: one is regs_set_return_value()\nwhich is used to overwrite the return value; the another function is\noverride_function_with_return() which is to override the probed\nfunction returning and jump to its caller.\n\nTest log:\n cd /sys/kernel/debug/fail_function\n echo sys_clone > inject\n echo 100 > probability\n echo 1 > interval\n ls /\n[  313.176875] FAULT_INJECTION: forcing a failure.\n[  313.176875] name fail_function, interval 1, probability 100, space 0, times 1\n[  313.184357] CPU: 0 PID: 87 Comm: sh Not tainted 5.8.0-rc5-00007-g6a758cc #117\n[  313.187616] Call Trace:\n[  313.189100] [<ffffffe0002036b6>] walk_stackframe+0x0/0xc2\n[  313.191626] [<ffffffe00020395c>] show_stack+0x40/0x4c\n[  313.193927] [<ffffffe000556c60>] dump_stack+0x7c/0x96\n[  313.194795] [<ffffffe0005522e8>] should_fail+0x140/0x142\n[  313.195923] [<ffffffe000299ffc>] fei_kprobe_handler+0x2c/0x5a\n[  313.197687] [<ffffffe0009e2ec4>] kprobe_breakpoint_handler+0xb4/0x18a\n[  313.200054] [<ffffffe00020357e>] do_trap_break+0x36/0xca\n[  313.202147] [<ffffffe000201bca>] ret_from_exception+0x0/0xc\n[  313.204556] [<ffffffe000201bbc>] ret_from_syscall+0x0/0x2\n-sh: can't fork: Invalid argument\n\nSigned-off-by: Guo Ren <guoren@linux.alibaba.com>\nReviewed-by: Masami Hiramatsu <mhiramat@kernel.org>\nCc: Palmer Dabbelt <palmerdabbelt@google.com>\nCc: Paul Walmsley <paul.walmsley@sifive.com>\nSigned-off-by: Palmer Dabbelt <palmerdabbelt@google.com>",
  "full_message": "riscv: Add support for function error injection\n\nInspired by the commit 42d038c4fb00 (\"arm64: Add support for function\nerror injection\"), this patch supports function error injection for\nriscv.\n\nThis patch mainly support two functions: one is regs_set_return_value()\nwhich is used to overwrite the return value; the another function is\noverride_function_with_return() which is to override the probed\nfunction returning and jump to its caller.\n\nTest log:\n cd /sys/kernel/debug/fail_function\n echo sys_clone > inject\n echo 100 > probability\n echo 1 > interval\n ls /\n[  313.176875] FAULT_INJECTION: forcing a failure.\n[  313.176875] name fail_function, interval 1, probability 100, space 0, times 1\n[  313.184357] CPU: 0 PID: 87 Comm: sh Not tainted 5.8.0-rc5-00007-g6a758cc #117\n[  313.187616] Call Trace:\n[  313.189100] [<ffffffe0002036b6>] walk_stackframe+0x0/0xc2\n[  313.191626] [<ffffffe00020395c>] show_stack+0x40/0x4c\n[  313.193927] [<ffffffe000556c60>] dump_stack+0x7c/0x96\n[  313.194795] [<ffffffe0005522e8>] should_fail+0x140/0x142\n[  313.195923] [<ffffffe000299ffc>] fei_kprobe_handler+0x2c/0x5a\n[  313.197687] [<ffffffe0009e2ec4>] kprobe_breakpoint_handler+0xb4/0x18a\n[  313.200054] [<ffffffe00020357e>] do_trap_break+0x36/0xca\n[  313.202147] [<ffffffe000201bca>] ret_from_exception+0x0/0xc\n[  313.204556] [<ffffffe000201bbc>] ret_from_syscall+0x0/0x2\n-sh: can't fork: Invalid argument\n\nSigned-off-by: Guo Ren <guoren@linux.alibaba.com>\nReviewed-by: Masami Hiramatsu <mhiramat@kernel.org>\nCc: Palmer Dabbelt <palmerdabbelt@google.com>\nCc: Paul Walmsley <paul.walmsley@sifive.com>\nSigned-off-by: Palmer Dabbelt <palmerdabbelt@google.com>",
  "author_name": "Guo Ren",
  "author_email": "guoren@linux.alibaba.com",
  "author_date": "Thu Dec 17 16:01:45 2020 +0000",
  "author_date_iso": "2020-12-17T16:01:45+00:00",
  "committer_name": "Palmer Dabbelt",
  "committer_email": "palmerdabbelt@google.com",
  "committer_date": "Thu Jan 14 15:09:09 2021 -0800",
  "committer_date_iso": "2021-01-14T15:09:09-08:00",
  "files_changed": [
    "arch/riscv/Kconfig",
    "arch/riscv/include/asm/ptrace.h",
    "arch/riscv/lib/Makefile",
    "arch/riscv/lib/error-inject.c"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "arch/riscv/Kconfig",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/riscv/include/asm/ptrace.h",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "arch/riscv/lib/Makefile",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "arch/riscv/lib/error-inject.c",
      "insertions": 10,
      "deletions": 0
    }
  ],
  "total_insertions": 19,
  "total_deletions": 0,
  "total_changes": 19,
  "parents": [
    "74784081aac8a0f3636965fc230e2d3b7cc123c6"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/riscv/Kconfig",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/riscv/include/asm/ptrace.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/riscv/lib/Makefile",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/riscv/lib/error-inject.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}