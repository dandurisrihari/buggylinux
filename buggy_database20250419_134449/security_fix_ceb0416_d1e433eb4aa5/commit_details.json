{
  "hash": "ceb0416383988dbd5decd6a70141a3507732c160",
  "hash_short": "ceb04163",
  "subject": "md: replace deprecated strncpy with memcpy",
  "body": "`strncpy` is deprecated for use on NUL-terminated destination strings\n[1] and as such we should prefer more robust and less ambiguous string\ninterfaces.\n\nThere are three such strncpy uses that this patch addresses:\n\nThe respective destination buffers are:\n1) mddev->clevel\n2) clevel\n3) mddev->metadata_type\n\nWe expect mddev->clevel to be NUL-terminated due to its use with format\nstrings:\n|       ret = sprintf(page, \"%s\\n\", mddev->clevel);\n\nFurthermore, we can see that mddev->clevel is not expected to be\nNUL-padded as `md_clean()` merely set's its first byte to NULL -- not\nthe entire buffer:\n|       static void md_clean(struct mddev *mddev)\n|       {\n|       \tmddev->array_sectors = 0;\n|       \tmddev->external_size = 0;\n|               ...\n|       \tmddev->level = LEVEL_NONE;\n|       \tmddev->clevel[0] = 0;\n|               ...\n\nA suitable replacement for this instance is `memcpy` as we know the\nnumber of bytes to copy and perform manual NUL-termination at a\nspecified offset. This really decays to just a byte copy from one buffer\nto another. `strscpy` is also a considerable replacement but using\n`slen` as the length argument would result in truncation of the last\nbyte unless something like `slen + 1` was provided which isn't the most\nidiomatic strscpy usage.\n\nFor the next case, the destination buffer `clevel` is expected to be\nNUL-terminated based on its usage within kstrtol() which expects\nNUL-terminated strings. Note that, in context, this code removes a\ntrailing newline which is seemingly not required as kstrtol() can handle\ntrailing newlines implicitly. However, there exists further usage of\nclevel (or buf) that would also like to have the newline removed. All in\nall, with similar reasoning to the first case, let's just use memcpy as\nthis is just a byte copy and NUL-termination is handled manually.\n\nThe third and final case concerning `mddev->metadata_type` is more or\nless the same as the other two. We expect that it be NUL-terminated\nbased on its usage with seq_printf:\n|       seq_printf(seq, \" super external:%s\",\n|       \t   mddev->metadata_type);\n... and we can surmise that NUL-padding isn't required either due to how\nit is handled in md_clean():\n|       static void md_clean(struct mddev *mddev)\n|       {\n|       ...\n|       mddev->metadata_type[0] = 0;\n|       ...\n\nSo really, all these instances have precisely calculated lengths and\npurposeful NUL-termination so we can just use memcpy to remove ambiguity\nsurrounding strncpy.\n\nLink: https://www.kernel.org/doc/html/latest/process/deprecated.html#strncpy-on-nul-terminated-strings [1]\nLink: https://github.com/KSPP/linux/issues/90\nCc: linux-hardening@vger.kernel.org\nSigned-off-by: Justin Stitt <justinstitt@google.com>\nReviewed-by: Kees Cook <keescook@chromium.org>\nSigned-off-by: Song Liu <song@kernel.org>\nLink: https://lore.kernel.org/r/20230925-strncpy-drivers-md-md-c-v1-1-2b0093b89c2b@google.com",
  "full_message": "md: replace deprecated strncpy with memcpy\n\n`strncpy` is deprecated for use on NUL-terminated destination strings\n[1] and as such we should prefer more robust and less ambiguous string\ninterfaces.\n\nThere are three such strncpy uses that this patch addresses:\n\nThe respective destination buffers are:\n1) mddev->clevel\n2) clevel\n3) mddev->metadata_type\n\nWe expect mddev->clevel to be NUL-terminated due to its use with format\nstrings:\n|       ret = sprintf(page, \"%s\\n\", mddev->clevel);\n\nFurthermore, we can see that mddev->clevel is not expected to be\nNUL-padded as `md_clean()` merely set's its first byte to NULL -- not\nthe entire buffer:\n|       static void md_clean(struct mddev *mddev)\n|       {\n|       \tmddev->array_sectors = 0;\n|       \tmddev->external_size = 0;\n|               ...\n|       \tmddev->level = LEVEL_NONE;\n|       \tmddev->clevel[0] = 0;\n|               ...\n\nA suitable replacement for this instance is `memcpy` as we know the\nnumber of bytes to copy and perform manual NUL-termination at a\nspecified offset. This really decays to just a byte copy from one buffer\nto another. `strscpy` is also a considerable replacement but using\n`slen` as the length argument would result in truncation of the last\nbyte unless something like `slen + 1` was provided which isn't the most\nidiomatic strscpy usage.\n\nFor the next case, the destination buffer `clevel` is expected to be\nNUL-terminated based on its usage within kstrtol() which expects\nNUL-terminated strings. Note that, in context, this code removes a\ntrailing newline which is seemingly not required as kstrtol() can handle\ntrailing newlines implicitly. However, there exists further usage of\nclevel (or buf) that would also like to have the newline removed. All in\nall, with similar reasoning to the first case, let's just use memcpy as\nthis is just a byte copy and NUL-termination is handled manually.\n\nThe third and final case concerning `mddev->metadata_type` is more or\nless the same as the other two. We expect that it be NUL-terminated\nbased on its usage with seq_printf:\n|       seq_printf(seq, \" super external:%s\",\n|       \t   mddev->metadata_type);\n... and we can surmise that NUL-padding isn't required either due to how\nit is handled in md_clean():\n|       static void md_clean(struct mddev *mddev)\n|       {\n|       ...\n|       mddev->metadata_type[0] = 0;\n|       ...\n\nSo really, all these instances have precisely calculated lengths and\npurposeful NUL-termination so we can just use memcpy to remove ambiguity\nsurrounding strncpy.\n\nLink: https://www.kernel.org/doc/html/latest/process/deprecated.html#strncpy-on-nul-terminated-strings [1]\nLink: https://github.com/KSPP/linux/issues/90\nCc: linux-hardening@vger.kernel.org\nSigned-off-by: Justin Stitt <justinstitt@google.com>\nReviewed-by: Kees Cook <keescook@chromium.org>\nSigned-off-by: Song Liu <song@kernel.org>\nLink: https://lore.kernel.org/r/20230925-strncpy-drivers-md-md-c-v1-1-2b0093b89c2b@google.com",
  "author_name": "Justin Stitt",
  "author_email": "justinstitt@google.com",
  "author_date": "Mon Sep 25 09:49:17 2023 +0000",
  "author_date_iso": "2023-09-25T09:49:17+00:00",
  "committer_name": "Song Liu",
  "committer_email": "song@kernel.org",
  "committer_date": "Mon Sep 25 14:36:41 2023 -0700",
  "committer_date_iso": "2023-09-25T14:36:41-07:00",
  "files_changed": [
    "drivers/md/md.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "drivers/md/md.c",
      "insertions": 3,
      "deletions": 3
    }
  ],
  "total_insertions": 3,
  "total_deletions": 3,
  "total_changes": 6,
  "parents": [
    "e887544d7620f1d3cef017e45df7bc625182caff"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/md/md.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}