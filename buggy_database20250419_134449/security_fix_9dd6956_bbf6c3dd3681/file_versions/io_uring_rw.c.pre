commit 5b9a7bb72fddbc5247f56ede55d485fab7abdf92
Merge: 5c7ecada25d2 3c85cc43c8e7
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 26 12:40:31 2023 -0700

    Merge tag 'for-6.4/io_uring-2023-04-21' of git://git.kernel.dk/linux
    
    Pull io_uring updates from Jens Axboe:
    
     - Cleanup of the io-wq per-node mapping, notably getting rid of it so
       we just have a single io_wq entry per ring (Breno)
    
     - Followup to the above, move accounting to io_wq as well and
       completely drop struct io_wqe (Gabriel)
    
     - Enable KASAN for the internal io_uring caches (Breno)
    
     - Add support for multishot timeouts. Some applications use timeouts to
       wake someone waiting on completion entries, and this makes it a bit
       easier to just have a recurring timer rather than needing to rearm it
       every time (David)
    
     - Support archs that have shared cache coloring between userspace and
       the kernel, and hence have strict address requirements for mmap'ing
       the ring into userspace. This should only be parisc/hppa. (Helge, me)
    
     - XFS has supported O_DIRECT writes without needing to lock the inode
       exclusively for a long time, and ext4 now supports it as well. This
       is true for the common cases of not extending the file size. Flag the
       fs as having that feature, and utilize that to avoid serializing
       those writes in io_uring (me)
    
     - Enable completion batching for uring commands (me)
    
     - Revert patch adding io_uring restriction to what can be GUP mapped or
       not. This does not belong in io_uring, as io_uring isn't really
       special in this regard. Since this is also getting in the way of
       cleanups and improvements to the GUP code, get rid of if (me)
    
     - A few series greatly reducing the complexity of registered resources,
       like buffers or files. Not only does this clean up the code a lot,
       the simplified code is also a LOT more efficient (Pavel)
    
     - Series optimizing how we wait for events and run task_work related to
       it (Pavel)
    
     - Fixes for file/buffer unregistration with DEFER_TASKRUN (Pavel)
    
     - Misc cleanups and improvements (Pavel, me)
    
    * tag 'for-6.4/io_uring-2023-04-21' of git://git.kernel.dk/linux: (71 commits)
      Revert "io_uring/rsrc: disallow multi-source reg buffers"
      io_uring: add support for multishot timeouts
      io_uring/rsrc: disassociate nodes and rsrc_data
      io_uring/rsrc: devirtualise rsrc put callbacks
      io_uring/rsrc: pass node to io_rsrc_put_work()
      io_uring/rsrc: inline io_rsrc_put_work()
      io_uring/rsrc: add empty flag in rsrc_node
      io_uring/rsrc: merge nodes and io_rsrc_put
      io_uring/rsrc: infer node from ctx on io_queue_rsrc_removal
      io_uring/rsrc: remove unused io_rsrc_node::llist
      io_uring/rsrc: refactor io_queue_rsrc_removal
      io_uring/rsrc: simplify single file node switching
      io_uring/rsrc: clean up __io_sqe_buffers_update()
      io_uring/rsrc: inline switch_start fast path
      io_uring/rsrc: remove rsrc_data refs
      io_uring/rsrc: fix DEFER_TASKRUN rsrc quiesce
      io_uring/rsrc: use wq for quiescing
      io_uring/rsrc: refactor io_rsrc_ref_quiesce
      io_uring/rsrc: remove io_rsrc_node::done
      io_uring/rsrc: use nospec'ed indexes
      ...