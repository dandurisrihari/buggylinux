commit 1dd498e5e26ad71e3e9130daf72cfb6a693fee03
Author: James Morse <james.morse@arm.com>
Date:   Thu Jan 27 12:20:52 2022 +0000

    KVM: arm64: Workaround Cortex-A510's single-step and PAC trap errata
    
    Cortex-A510's erratum #2077057 causes SPSR_EL2 to be corrupted when
    single-stepping authenticated ERET instructions. A single step is
    expected, but a pointer authentication trap is taken instead. The
    erratum causes SPSR_EL1 to be copied to SPSR_EL2, which could allow
    EL1 to cause a return to EL2 with a guest controlled ELR_EL2.
    
    Because the conditions require an ERET into active-not-pending state,
    this is only a problem for the EL2 when EL2 is stepping EL1. In this case
    the previous SPSR_EL2 value is preserved in struct kvm_vcpu, and can be
    restored.
    
    Cc: stable@vger.kernel.org # 53960faf2b73: arm64: Add Cortex-A510 CPU part definition
    Cc: stable@vger.kernel.org
    Signed-off-by: James Morse <james.morse@arm.com>
    [maz: fixup cpucaps ordering]
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20220127122052.1584324-5-james.morse@arm.com

diff --git a/arch/arm64/kernel/cpu_errata.c b/arch/arm64/kernel/cpu_errata.c
index 066098198c24..b217941713a8 100644
--- a/arch/arm64/kernel/cpu_errata.c
+++ b/arch/arm64/kernel/cpu_errata.c
@@ -600,6 +600,14 @@ const struct arm64_cpu_capabilities arm64_errata[] = {
 		CAP_MIDR_RANGE_LIST(trbe_write_out_of_range_cpus),
 	},
 #endif
+#ifdef CONFIG_ARM64_ERRATUM_2077057
+	{
+		.desc = "ARM erratum 2077057",
+		.capability = ARM64_WORKAROUND_2077057,
+		.type = ARM64_CPUCAP_LOCAL_CPU_ERRATUM,
+		ERRATA_MIDR_REV_RANGE(MIDR_CORTEX_A510, 0, 0, 2),
+	},
+#endif
 #ifdef CONFIG_ARM64_ERRATUM_2064142
 	{
 		.desc = "ARM erratum 2064142",