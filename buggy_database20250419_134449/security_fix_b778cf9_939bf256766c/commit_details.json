{
  "hash": "b778cf962d71a0e737923d55d0432f3bd287258e",
  "hash_short": "b778cf96",
  "subject": "btrfs: fix bytes_may_use underflow in prealloc error condtition",
  "body": "I hit the following warning while running my error injection stress\ntesting:\n\n  WARNING: CPU: 3 PID: 1453 at fs/btrfs/space-info.h:108 btrfs_free_reserved_data_space_noquota+0xfd/0x160 [btrfs]\n  RIP: 0010:btrfs_free_reserved_data_space_noquota+0xfd/0x160 [btrfs]\n  Call Trace:\n  btrfs_free_reserved_data_space+0x4f/0x70 [btrfs]\n  __btrfs_prealloc_file_range+0x378/0x470 [btrfs]\n  elfcorehdr_read+0x40/0x40\n  ? elfcorehdr_read+0x40/0x40\n  ? btrfs_commit_transaction+0xca/0xa50 [btrfs]\n  ? dput+0xb4/0x2a0\n  ? btrfs_log_dentry_safe+0x55/0x70 [btrfs]\n  ? btrfs_sync_file+0x30e/0x420 [btrfs]\n  ? do_fsync+0x38/0x70\n  ? __x64_sys_fdatasync+0x13/0x20\n  ? do_syscall_64+0x5b/0x1b0\n  ? entry_SYSCALL_64_after_hwframe+0x44/0xa9\n\nThis happens if we fail to insert our reserved file extent.  At this\npoint we've already converted our reservation from ->bytes_may_use to\n->bytes_reserved.  However once we break we will attempt to free\neverything from [cur_offset, end] from ->bytes_may_use, but our extent\nreservation will overlap part of this.\n\nFix this problem by adding ins.offset (our extent allocation size) to\ncur_offset so we remove the actual remaining part from ->bytes_may_use.\n\nI validated this fix using my inject-error.py script\n\npython inject-error.py -o should_fail_bio -t cache_save_setup -t \\\n\t__btrfs_prealloc_file_range \\\n\t-t insert_reserved_file_extent.constprop.0 \\\n\t-r \"-5\" ./run-fsstress.sh\n\nwhere run-fsstress.sh simply mounts and runs fsstress on a disk.\n\nCC: stable@vger.kernel.org # 4.4+\nReviewed-by: Qu Wenruo <wqu@suse.com>\nSigned-off-by: Josef Bacik <josef@toxicpanda.com>\nReviewed-by: David Sterba <dsterba@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>",
  "full_message": "btrfs: fix bytes_may_use underflow in prealloc error condtition\n\nI hit the following warning while running my error injection stress\ntesting:\n\n  WARNING: CPU: 3 PID: 1453 at fs/btrfs/space-info.h:108 btrfs_free_reserved_data_space_noquota+0xfd/0x160 [btrfs]\n  RIP: 0010:btrfs_free_reserved_data_space_noquota+0xfd/0x160 [btrfs]\n  Call Trace:\n  btrfs_free_reserved_data_space+0x4f/0x70 [btrfs]\n  __btrfs_prealloc_file_range+0x378/0x470 [btrfs]\n  elfcorehdr_read+0x40/0x40\n  ? elfcorehdr_read+0x40/0x40\n  ? btrfs_commit_transaction+0xca/0xa50 [btrfs]\n  ? dput+0xb4/0x2a0\n  ? btrfs_log_dentry_safe+0x55/0x70 [btrfs]\n  ? btrfs_sync_file+0x30e/0x420 [btrfs]\n  ? do_fsync+0x38/0x70\n  ? __x64_sys_fdatasync+0x13/0x20\n  ? do_syscall_64+0x5b/0x1b0\n  ? entry_SYSCALL_64_after_hwframe+0x44/0xa9\n\nThis happens if we fail to insert our reserved file extent.  At this\npoint we've already converted our reservation from ->bytes_may_use to\n->bytes_reserved.  However once we break we will attempt to free\neverything from [cur_offset, end] from ->bytes_may_use, but our extent\nreservation will overlap part of this.\n\nFix this problem by adding ins.offset (our extent allocation size) to\ncur_offset so we remove the actual remaining part from ->bytes_may_use.\n\nI validated this fix using my inject-error.py script\n\npython inject-error.py -o should_fail_bio -t cache_save_setup -t \\\n\t__btrfs_prealloc_file_range \\\n\t-t insert_reserved_file_extent.constprop.0 \\\n\t-r \"-5\" ./run-fsstress.sh\n\nwhere run-fsstress.sh simply mounts and runs fsstress on a disk.\n\nCC: stable@vger.kernel.org # 4.4+\nReviewed-by: Qu Wenruo <wqu@suse.com>\nSigned-off-by: Josef Bacik <josef@toxicpanda.com>\nReviewed-by: David Sterba <dsterba@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>",
  "author_name": "Josef Bacik",
  "author_email": "josef@toxicpanda.com",
  "author_date": "Thu Feb 13 10:47:31 2020 -0500",
  "author_date_iso": "2020-02-13T10:47:31-05:00",
  "committer_name": "David Sterba",
  "committer_email": "dsterba@suse.com",
  "committer_date": "Wed Feb 19 00:39:08 2020 +0100",
  "committer_date_iso": "2020-02-19T00:39:08+01:00",
  "files_changed": [
    "fs/btrfs/inode.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "fs/btrfs/inode.c",
      "insertions": 13,
      "deletions": 3
    }
  ],
  "total_insertions": 13,
  "total_deletions": 3,
  "total_changes": 16,
  "parents": [
    "bd727173e4432fe6cb70ba108dc1f3602c5409d7"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.6",
    "v5.6-rc3",
    "v5.6-rc4",
    "v5.6-rc5",
    "v5.6-rc6",
    "v5.6-rc7",
    "v5.7-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/btrfs/inode.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}