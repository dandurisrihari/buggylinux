{
  "hash": "2796d0c648c940b4796f84384fbcfb0a2399db84",
  "hash_short": "2796d0c6",
  "subject": "bridge: Automatically manage port promiscuous mode.",
  "body": "There exist configurations where the administrator or another management\nentity has the foreknowledge of all the mac addresses of end systems\nthat are being bridged together.\n\nIn these environments, the administrator can statically configure known\naddresses in the bridge FDB and disable flooding and learning on ports.\nThis makes it possible to turn off promiscuous mode on the interfaces\nconnected to the bridge.\n\nHere is why disabling flooding and learning allows us to control\npromiscuity:\n Consider port X.  All traffic coming into this port from outside the\nbridge (ingress) will be either forwarded through other ports of the\nbridge (egress) or dropped.  Forwarding (egress) is defined by FDB\nentries and by flooding in the event that no FDB entry exists.\nIn the event that flooding is disabled, only FDB entries define\nthe egress.  Once learning is disabled, only static FDB entries\nprovided by a management entity define the egress.  If we provide\ninformation from these static FDBs to the ingress port X, then we'll\nbe able to accept all traffic that can be successfully forwarded and\ndrop all the other traffic sooner without spending CPU cycles to\nprocess it.\n Another way to define the above is as following equations:\n    ingress = egress + drop\n expanding egress\n    ingress = static FDB + learned FDB + flooding + drop\n disabling flooding and learning we a left with\n    ingress = static FDB + drop\n\nBy adding addresses from the static FDB entries to the MAC address\nfilter of an ingress port X, we fully define what the bridge can\nprocess without dropping and can thus turn off promiscuous mode,\nthus dropping packets sooner.\n\nThere have been suggestions that we may want to allow learning\nand update the filters with learned addresses as well.  This\nwould require mac-level authentication similar to 802.1x to\nprevent attacks against the hw filters as they are limited\nresource.\n\nAdditionally, if the user places the bridge device in promiscuous mode,\nall ports are placed in promiscuous mode regardless of the changes\nto flooding and learning.\n\nSince the above functionality depends on full static configuration,\nwe have also require that vlan filtering be enabled to take\nadvantage of this.  The reason is that the bridge has to be\nable to receive and process VLAN-tagged frames and the there\nare only 2 ways to accomplish this right now: promiscuous mode\nor vlan filtering.\n\nSuggested-by: Michael S. Tsirkin <mst@redhat.com>\nAcked-by: Michael S. Tsirkin <mst@redhat.com>\nSigned-off-by: Vlad Yasevich <vyasevic@redhat.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "full_message": "bridge: Automatically manage port promiscuous mode.\n\nThere exist configurations where the administrator or another management\nentity has the foreknowledge of all the mac addresses of end systems\nthat are being bridged together.\n\nIn these environments, the administrator can statically configure known\naddresses in the bridge FDB and disable flooding and learning on ports.\nThis makes it possible to turn off promiscuous mode on the interfaces\nconnected to the bridge.\n\nHere is why disabling flooding and learning allows us to control\npromiscuity:\n Consider port X.  All traffic coming into this port from outside the\nbridge (ingress) will be either forwarded through other ports of the\nbridge (egress) or dropped.  Forwarding (egress) is defined by FDB\nentries and by flooding in the event that no FDB entry exists.\nIn the event that flooding is disabled, only FDB entries define\nthe egress.  Once learning is disabled, only static FDB entries\nprovided by a management entity define the egress.  If we provide\ninformation from these static FDBs to the ingress port X, then we'll\nbe able to accept all traffic that can be successfully forwarded and\ndrop all the other traffic sooner without spending CPU cycles to\nprocess it.\n Another way to define the above is as following equations:\n    ingress = egress + drop\n expanding egress\n    ingress = static FDB + learned FDB + flooding + drop\n disabling flooding and learning we a left with\n    ingress = static FDB + drop\n\nBy adding addresses from the static FDB entries to the MAC address\nfilter of an ingress port X, we fully define what the bridge can\nprocess without dropping and can thus turn off promiscuous mode,\nthus dropping packets sooner.\n\nThere have been suggestions that we may want to allow learning\nand update the filters with learned addresses as well.  This\nwould require mac-level authentication similar to 802.1x to\nprevent attacks against the hw filters as they are limited\nresource.\n\nAdditionally, if the user places the bridge device in promiscuous mode,\nall ports are placed in promiscuous mode regardless of the changes\nto flooding and learning.\n\nSince the above functionality depends on full static configuration,\nwe have also require that vlan filtering be enabled to take\nadvantage of this.  The reason is that the bridge has to be\nable to receive and process VLAN-tagged frames and the there\nare only 2 ways to accomplish this right now: promiscuous mode\nor vlan filtering.\n\nSuggested-by: Michael S. Tsirkin <mst@redhat.com>\nAcked-by: Michael S. Tsirkin <mst@redhat.com>\nSigned-off-by: Vlad Yasevich <vyasevic@redhat.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "author_name": "Vlad Yasevich",
  "author_email": "vyasevic@redhat.com",
  "author_date": "Fri May 16 09:59:20 2014 -0400",
  "author_date_iso": "2014-05-16T09:59:20-04:00",
  "committer_name": "David S. Miller",
  "committer_email": "davem@davemloft.net",
  "committer_date": "Fri May 16 17:06:33 2014 -0400",
  "committer_date_iso": "2014-05-16T17:06:33-04:00",
  "files_changed": [
    "net/bridge/br_device.c",
    "net/bridge/br_if.c",
    "net/bridge/br_private.h",
    "net/bridge/br_vlan.c"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "net/bridge/br_device.c",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "net/bridge/br_if.c",
      "insertions": 98,
      "deletions": 7
    },
    {
      "file": "net/bridge/br_private.h",
      "insertions": 10,
      "deletions": 0
    },
    {
      "file": "net/bridge/br_vlan.c",
      "insertions": 1,
      "deletions": 0
    }
  ],
  "total_insertions": 116,
  "total_deletions": 7,
  "total_changes": 123,
  "parents": [
    "145beee8d6bbd18dbebf9f71a40ba99af80d71f7"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v3.16",
    "v3.16-rc1",
    "v3.16-rc2",
    "v3.16-rc3",
    "v3.16-rc4",
    "v3.16-rc5",
    "v3.16-rc6",
    "v3.16-rc7",
    "v3.17",
    "v3.17-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "net/bridge/br_device.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/bridge/br_if.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/bridge/br_private.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/bridge/br_vlan.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}