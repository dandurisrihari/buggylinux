{
  "hash": "526e065dbca6df0b5a130b84b836b8b3c9f54e21",
  "hash_short": "526e065d",
  "subject": "arm64: add sysfs vulnerability show for speculative store bypass",
  "body": "Return status based on ssbd_state and __ssb_safe. If the\nmitigation is disabled, or the firmware isn't responding then\nreturn the expected machine state based on a whitelist of known\ngood cores.\n\nGiven a heterogeneous machine, the overall machine vulnerability\ndefaults to safe but is reset to unsafe when we miss the whitelist\nand the firmware doesn't explicitly tell us the core is safe.\nIn order to make that work we delay transitioning to vulnerable\nuntil we know the firmware isn't responding to avoid a case\nwhere we miss the whitelist, but the firmware goes ahead and\nreports the core is not vulnerable. If all the cores in the\nmachine have SSBS, then __ssb_safe will remain true.\n\nTested-by: Stefan Wahren <stefan.wahren@i2se.com>\nSigned-off-by: Jeremy Linton <jeremy.linton@arm.com>\nSigned-off-by: Will Deacon <will.deacon@arm.com>",
  "full_message": "arm64: add sysfs vulnerability show for speculative store bypass\n\nReturn status based on ssbd_state and __ssb_safe. If the\nmitigation is disabled, or the firmware isn't responding then\nreturn the expected machine state based on a whitelist of known\ngood cores.\n\nGiven a heterogeneous machine, the overall machine vulnerability\ndefaults to safe but is reset to unsafe when we miss the whitelist\nand the firmware doesn't explicitly tell us the core is safe.\nIn order to make that work we delay transitioning to vulnerable\nuntil we know the firmware isn't responding to avoid a case\nwhere we miss the whitelist, but the firmware goes ahead and\nreports the core is not vulnerable. If all the cores in the\nmachine have SSBS, then __ssb_safe will remain true.\n\nTested-by: Stefan Wahren <stefan.wahren@i2se.com>\nSigned-off-by: Jeremy Linton <jeremy.linton@arm.com>\nSigned-off-by: Will Deacon <will.deacon@arm.com>",
  "author_name": "Jeremy Linton",
  "author_email": "jeremy.linton@arm.com",
  "author_date": "Mon Apr 15 16:21:28 2019 -0500",
  "author_date_iso": "2019-04-15T16:21:28-05:00",
  "committer_name": "Will Deacon",
  "committer_email": "will.deacon@arm.com",
  "committer_date": "Wed May 1 14:47:55 2019 +0100",
  "committer_date_iso": "2019-05-01T14:47:55+01:00",
  "files_changed": [
    "arch/arm64/kernel/cpu_errata.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/arm64/kernel/cpu_errata.c",
      "insertions": 42,
      "deletions": 0
    }
  ],
  "total_insertions": 42,
  "total_deletions": 0,
  "total_changes": 42,
  "parents": [
    "d42281b6e49510f078ace15a8ea10f71e6262581"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.2",
    "v5.2-rc1",
    "v5.2-rc2",
    "v5.2-rc3",
    "v5.2-rc4",
    "v5.2-rc5",
    "v5.2-rc6",
    "v5.2-rc7",
    "v5.3",
    "v5.3-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "vulnerability",
      "bypass"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/arm64/kernel/cpu_errata.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}