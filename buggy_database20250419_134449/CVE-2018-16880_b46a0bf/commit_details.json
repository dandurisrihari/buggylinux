{
  "hash": "b46a0bf78ad7b150ef5910da83859f7f5a514ffd",
  "hash_short": "b46a0bf7",
  "subject": "vhost: fix OOB in get_rx_bufs()",
  "body": "After batched used ring updating was introduced in commit e2b3b35eb989\n(\"vhost_net: batch used ring update in rx\"). We tend to batch heads in\nvq->heads for more than one packet. But the quota passed to\nget_rx_bufs() was not correctly limited, which can result a OOB write\nin vq->heads.\n\n        headcount = get_rx_bufs(vq, vq->heads + nvq->done_idx,\n                    vhost_len, &in, vq_log, &log,\n                    likely(mergeable) ? UIO_MAXIOV : 1);\n\nUIO_MAXIOV was still used which is wrong since we could have batched\nused in vq->heads, this will cause OOB if the next buffer needs more\nthan 960 (1024 (UIO_MAXIOV) - 64 (VHOST_NET_BATCH)) heads after we've\nbatched 64 (VHOST_NET_BATCH) heads:\nAcked-by: Stefan Hajnoczi <stefanha@redhat.com>\n\n=============================================================================\nBUG kmalloc-8k (Tainted: G    B            ): Redzone overwritten\n-----------------------------------------------------------------------------\n\nINFO: 0x00000000fd93b7a2-0x00000000f0713384. First byte 0xa9 instead of 0xcc\nINFO: Allocated in alloc_pd+0x22/0x60 age=3933677 cpu=2 pid=2674\n    kmem_cache_alloc_trace+0xbb/0x140\n    alloc_pd+0x22/0x60\n    gen8_ppgtt_create+0x11d/0x5f0\n    i915_ppgtt_create+0x16/0x80\n    i915_gem_create_context+0x248/0x390\n    i915_gem_context_create_ioctl+0x4b/0xe0\n    drm_ioctl_kernel+0xa5/0xf0\n    drm_ioctl+0x2ed/0x3a0\n    do_vfs_ioctl+0x9f/0x620\n    ksys_ioctl+0x6b/0x80\n    __x64_sys_ioctl+0x11/0x20\n    do_syscall_64+0x43/0xf0\n    entry_SYSCALL_64_after_hwframe+0x44/0xa9\nINFO: Slab 0x00000000d13e87af objects=3 used=3 fp=0x          (null) flags=0x200000000010201\nINFO: Object 0x0000000003278802 @offset=17064 fp=0x00000000e2e6652b\n\nFixing this by allocating UIO_MAXIOV + VHOST_NET_BATCH iovs for\nvhost-net. This is done through set the limitation through\nvhost_dev_init(), then set_owner can allocate the number of iov in a\nper device manner.\n\nThis fixes CVE-2018-16880.\n\nFixes: e2b3b35eb989 (\"vhost_net: batch used ring update in rx\")\nSigned-off-by: Jason Wang <jasowang@redhat.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "full_message": "vhost: fix OOB in get_rx_bufs()\n\nAfter batched used ring updating was introduced in commit e2b3b35eb989\n(\"vhost_net: batch used ring update in rx\"). We tend to batch heads in\nvq->heads for more than one packet. But the quota passed to\nget_rx_bufs() was not correctly limited, which can result a OOB write\nin vq->heads.\n\n        headcount = get_rx_bufs(vq, vq->heads + nvq->done_idx,\n                    vhost_len, &in, vq_log, &log,\n                    likely(mergeable) ? UIO_MAXIOV : 1);\n\nUIO_MAXIOV was still used which is wrong since we could have batched\nused in vq->heads, this will cause OOB if the next buffer needs more\nthan 960 (1024 (UIO_MAXIOV) - 64 (VHOST_NET_BATCH)) heads after we've\nbatched 64 (VHOST_NET_BATCH) heads:\nAcked-by: Stefan Hajnoczi <stefanha@redhat.com>\n\n=============================================================================\nBUG kmalloc-8k (Tainted: G    B            ): Redzone overwritten\n-----------------------------------------------------------------------------\n\nINFO: 0x00000000fd93b7a2-0x00000000f0713384. First byte 0xa9 instead of 0xcc\nINFO: Allocated in alloc_pd+0x22/0x60 age=3933677 cpu=2 pid=2674\n    kmem_cache_alloc_trace+0xbb/0x140\n    alloc_pd+0x22/0x60\n    gen8_ppgtt_create+0x11d/0x5f0\n    i915_ppgtt_create+0x16/0x80\n    i915_gem_create_context+0x248/0x390\n    i915_gem_context_create_ioctl+0x4b/0xe0\n    drm_ioctl_kernel+0xa5/0xf0\n    drm_ioctl+0x2ed/0x3a0\n    do_vfs_ioctl+0x9f/0x620\n    ksys_ioctl+0x6b/0x80\n    __x64_sys_ioctl+0x11/0x20\n    do_syscall_64+0x43/0xf0\n    entry_SYSCALL_64_after_hwframe+0x44/0xa9\nINFO: Slab 0x00000000d13e87af objects=3 used=3 fp=0x          (null) flags=0x200000000010201\nINFO: Object 0x0000000003278802 @offset=17064 fp=0x00000000e2e6652b\n\nFixing this by allocating UIO_MAXIOV + VHOST_NET_BATCH iovs for\nvhost-net. This is done through set the limitation through\nvhost_dev_init(), then set_owner can allocate the number of iov in a\nper device manner.\n\nThis fixes CVE-2018-16880.\n\nFixes: e2b3b35eb989 (\"vhost_net: batch used ring update in rx\")\nSigned-off-by: Jason Wang <jasowang@redhat.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "author_name": "Jason Wang",
  "author_email": "jasowang@redhat.com",
  "author_date": "Mon Jan 28 15:05:05 2019 +0800",
  "author_date_iso": "2019-01-28T15:05:05+08:00",
  "committer_name": "David S. Miller",
  "committer_email": "davem@davemloft.net",
  "committer_date": "Mon Jan 28 22:53:09 2019 -0800",
  "committer_date_iso": "2019-01-28T22:53:09-08:00",
  "files_changed": [
    "drivers/vhost/net.c",
    "drivers/vhost/scsi.c",
    "drivers/vhost/vhost.c",
    "drivers/vhost/vhost.h",
    "drivers/vhost/vsock.c"
  ],
  "files_changed_count": 5,
  "stats": [
    {
      "file": "drivers/vhost/net.c",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "drivers/vhost/scsi.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "drivers/vhost/vhost.c",
      "insertions": 4,
      "deletions": 3
    },
    {
      "file": "drivers/vhost/vhost.h",
      "insertions": 3,
      "deletions": 1
    },
    {
      "file": "drivers/vhost/vsock.c",
      "insertions": 1,
      "deletions": 1
    }
  ],
  "total_insertions": 11,
  "total_deletions": 7,
  "total_changes": 18,
  "parents": [
    "bfe2599dd2f958de54ccfb11b209797e737a99b5"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.0",
    "v5.0-rc5",
    "v5.0-rc6",
    "v5.0-rc7",
    "v5.0-rc8",
    "v5.1",
    "v5.1-rc1",
    "v5.1-rc2",
    "v5.1-rc3",
    "v5.1-rc4"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2018-16880"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "drivers/vhost/net.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/vhost/scsi.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/vhost/vhost.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/vhost/vhost.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/vhost/vsock.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}