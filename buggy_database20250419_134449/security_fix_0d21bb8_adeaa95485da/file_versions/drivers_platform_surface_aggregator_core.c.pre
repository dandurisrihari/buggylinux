commit 3a7081f610a0ff6385f38cf65a019383cd34bfdd
Author: Maximilian Luz <luzmaximilian@gmail.com>
Date:   Mon Dec 21 19:39:53 2020 +0100

    platform/surface: aggregator: Add event item allocation caching
    
    Event items are used for completing Surface Aggregator EC events, i.e.
    placing event command data and payload on a workqueue for later
    processing to avoid doing said processing directly on the receiver
    thread. This means that event items are allocated for each incoming
    event, regardless of that event being transmitted via sequenced or
    unsequenced packets.
    
    On the Surface Book 3 and Surface Laptop 3, touchpad HID input events
    (unsequenced), can constitute a larger amount of traffic, and therefore
    allocation of event items. This warrants caching event items to reduce
    memory fragmentation. The size of the cached objects is specifically
    tuned to accommodate keyboard and touchpad input events and their
    payloads on those devices. As a result, this effectively also covers
    most other event types. In case of a larger event payload, event item
    allocation will fall back to kzalloc().
    
    Signed-off-by: Maximilian Luz <luzmaximilian@gmail.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20201221183959.1186143-4-luzmaximilian@gmail.com
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>

diff --git a/drivers/platform/surface/aggregator/core.c b/drivers/platform/surface/aggregator/core.c
index 60d312f71436..37593234fb31 100644
--- a/drivers/platform/surface/aggregator/core.c
+++ b/drivers/platform/surface/aggregator/core.c
@@ -790,12 +790,23 @@ static int __init ssam_core_init(void)
 
 	status = ssh_ctrl_packet_cache_init();
 	if (status)
-		return status;
+		goto err_cpkg;
+
+	status = ssam_event_item_cache_init();
+	if (status)
+		goto err_evitem;
 
 	status = serdev_device_driver_register(&ssam_serial_hub);
 	if (status)
-		ssh_ctrl_packet_cache_destroy();
+		goto err_register;
 
+	return 0;
+
+err_register:
+	ssam_event_item_cache_destroy();
+err_evitem:
+	ssh_ctrl_packet_cache_destroy();
+err_cpkg:
 	return status;
 }
 module_init(ssam_core_init);
@@ -803,6 +814,7 @@ module_init(ssam_core_init);
 static void __exit ssam_core_exit(void)
 {
 	serdev_device_driver_unregister(&ssam_serial_hub);
+	ssam_event_item_cache_destroy();
 	ssh_ctrl_packet_cache_destroy();
 }
 module_exit(ssam_core_exit);