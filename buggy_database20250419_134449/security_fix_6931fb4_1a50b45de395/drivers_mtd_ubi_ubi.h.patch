commit 6931fb44858c3b9da9f35fdc8d9cbeef0b4b50a3
Author: ZhaoLong Wang <wangzhaolong1@huawei.com>
Date:   Tue Dec 26 09:01:09 2023 +0800

    ubi: Use the fault injection framework to enhance the fault injection capability
    
    To make debug parameters configurable at run time, use the
    fault injection framework to reconstruct the debugfs interface,
    and retain the legacy fault injection interface.
    
    Now, the file emulate_failures and fault_attr files control whether
    to enable fault emmulation.
    
    The file emulate_failures receives a mask that controls type and
    process of fault injection. Generally, for ease of use, you can
    directly enter a mask with all 1s.
    
    echo 0xffff > /sys/kernel/debug/ubi/ubi0/emulate_failures
    
    And you need to configure other fault-injection capabilities for
    testing purpose:
    
    echo 100 > /sys/kernel/debug/ubi/fault_inject/emulate_power_cut/probability
    echo 15 > /sys/kernel/debug/ubi/fault_inject/emulate_power_cut/space
    echo 2 > /sys/kernel/debug/ubi/fault_inject/emulate_power_cut/verbose
    echo -1 > /sys/kernel/debug/ubi/fault_inject/emulate_power_cut/times
    
    The CONFIG_MTD_UBI_FAULT_INJECTION to enable the Fault Injection is
    added to kconfig.
    
    Signed-off-by: ZhaoLong Wang <wangzhaolong1@huawei.com>
    Reviewed-by: Zhihao Cheng <chengzhihao1@huawei.com>
    Signed-off-by: Richard Weinberger <richard@nod.at>

diff --git a/drivers/mtd/ubi/ubi.h b/drivers/mtd/ubi/ubi.h
index a5ec566df0d7..cc4777983bd2 100644
--- a/drivers/mtd/ubi/ubi.h
+++ b/drivers/mtd/ubi/ubi.h
@@ -145,17 +145,6 @@ enum {
 	UBI_BAD_FASTMAP,
 };
 
-/*
- * Flags for emulate_power_cut in ubi_debug_info
- *
- * POWER_CUT_EC_WRITE: Emulate a power cut when writing an EC header
- * POWER_CUT_VID_WRITE: Emulate a power cut when writing a VID header
- */
-enum {
-	POWER_CUT_EC_WRITE = 0x01,
-	POWER_CUT_VID_WRITE = 0x02,
-};
-
 /**
  * struct ubi_vid_io_buf - VID buffer used to read/write VID info to/from the
  *			   flash.
@@ -404,6 +393,7 @@ struct ubi_volume_desc {
  * @power_cut_counter: count down for writes left until emulated power cut
  * @power_cut_min: minimum number of writes before emulating a power cut
  * @power_cut_max: maximum number of writes until emulating a power cut
+ * @emulate_failures: emulate failures for testing purposes
  * @dfs_dir_name: name of debugfs directory containing files of this UBI device
  * @dfs_dir: direntry object of the UBI device debugfs directory
  * @dfs_chk_gen: debugfs knob to enable UBI general extra checks
@@ -415,6 +405,7 @@ struct ubi_volume_desc {
  * @dfs_emulate_power_cut: debugfs knob to emulate power cuts
  * @dfs_power_cut_min: debugfs knob for minimum writes before power cut
  * @dfs_power_cut_max: debugfs knob for maximum writes until power cut
+ * @dfs_emulate_failures: debugfs entry to control the fault injection type
  */
 struct ubi_debug_info {
 	unsigned int chk_gen:1;
@@ -427,6 +418,7 @@ struct ubi_debug_info {
 	unsigned int power_cut_counter;
 	unsigned int power_cut_min;
 	unsigned int power_cut_max;
+	unsigned int emulate_failures;
 	char dfs_dir_name[UBI_DFS_DIR_LEN + 1];
 	struct dentry *dfs_dir;
 	struct dentry *dfs_chk_gen;
@@ -438,6 +430,7 @@ struct ubi_debug_info {
 	struct dentry *dfs_emulate_power_cut;
 	struct dentry *dfs_power_cut_min;
 	struct dentry *dfs_power_cut_max;
+	struct dentry *dfs_emulate_failures;
 };
 
 /**