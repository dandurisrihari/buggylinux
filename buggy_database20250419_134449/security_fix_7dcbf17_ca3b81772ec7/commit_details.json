{
  "hash": "7dcbf17e3f917f691d2ae9ed4a34283bd0e74a95",
  "hash_short": "7dcbf17e",
  "subject": "hfsplus: refactor copy_name to not use strncpy",
  "body": "strncpy() is deprecated with NUL-terminated destination strings [1].\n\nThe copy_name() method does a lot of manual buffer manipulation to\neventually arrive with its desired string. If we don't know the\nnamespace this attr has or belongs to we want to prepend \"osx.\" to our\nfinal string. Following this, we're copying xattr_name and doing a\nbizarre manual NUL-byte assignment with a memset where n=1.\n\nReally, we can use some more obvious string APIs to acomplish this,\nimproving readability and security. Following the same control flow as\nbefore: if we don't know the namespace let's use scnprintf() to form our\nprefix + xattr_name pairing (while NUL-terminating too!). Otherwise, use\nstrscpy() to return the number of bytes copied into our buffer.\nAdditionally, for non-empty strings, include the NUL-byte in the length\n-- matching the behavior of the previous implementation.\n\nNote that strscpy() _can_ return -E2BIG but this is already handled by\nall callsites:\n\nIn both hfsplus_listxattr_finder_info() and hfsplus_listxattr(), ret is\nalready type ssize_t so we can change the return type of copy_name() to\nmatch (understanding that scnprintf()'s return type is different yet\nfully representable by ssize_t). Furthermore, listxattr() in fs/xattr.c\nis well-equipped to handle a potential -E2BIG return result from\nvfs_listxattr():\n|\tssize_t error;\n...\n|\terror = vfs_listxattr(d, klist, size);\n|\tif (error > 0) {\n|\t\tif (size && copy_to_user(list, klist, error))\n|\t\t\terror = -EFAULT;\n|\t} else if (error == -ERANGE && size >= XATTR_LIST_MAX) {\n|\t\t/* The file system tried to returned a list bigger\n|\t\t\tthan XATTR_LIST_MAX bytes. Not possible. */\n|\t\terror = -E2BIG;\n|\t}\n... the error can potentially already be -E2BIG, skipping this else-if\nand ending up at the same state as other errors.\n\nLink: https://www.kernel.org/doc/html/latest/process/deprecated.html#strncpy-on-nul-terminated-strings [1]\nLink: https://manpages.debian.org/testing/linux-manual-4.8/strscpy.9.en.html\nLink: https://github.com/KSPP/linux/issues/90\nCc:  <linux-hardening@vger.kernel.org>\nSigned-off-by: Justin Stitt <justinstitt@google.com>\nReviewed-by: Kees Cook <keescook@chromium.org>\nLink: https://lore.kernel.org/r/20240401-strncpy-fs-hfsplus-xattr-c-v2-1-6e089999355e@google.com\nSigned-off-by: Kees Cook <keescook@chromium.org>",
  "full_message": "hfsplus: refactor copy_name to not use strncpy\n\nstrncpy() is deprecated with NUL-terminated destination strings [1].\n\nThe copy_name() method does a lot of manual buffer manipulation to\neventually arrive with its desired string. If we don't know the\nnamespace this attr has or belongs to we want to prepend \"osx.\" to our\nfinal string. Following this, we're copying xattr_name and doing a\nbizarre manual NUL-byte assignment with a memset where n=1.\n\nReally, we can use some more obvious string APIs to acomplish this,\nimproving readability and security. Following the same control flow as\nbefore: if we don't know the namespace let's use scnprintf() to form our\nprefix + xattr_name pairing (while NUL-terminating too!). Otherwise, use\nstrscpy() to return the number of bytes copied into our buffer.\nAdditionally, for non-empty strings, include the NUL-byte in the length\n-- matching the behavior of the previous implementation.\n\nNote that strscpy() _can_ return -E2BIG but this is already handled by\nall callsites:\n\nIn both hfsplus_listxattr_finder_info() and hfsplus_listxattr(), ret is\nalready type ssize_t so we can change the return type of copy_name() to\nmatch (understanding that scnprintf()'s return type is different yet\nfully representable by ssize_t). Furthermore, listxattr() in fs/xattr.c\nis well-equipped to handle a potential -E2BIG return result from\nvfs_listxattr():\n|\tssize_t error;\n...\n|\terror = vfs_listxattr(d, klist, size);\n|\tif (error > 0) {\n|\t\tif (size && copy_to_user(list, klist, error))\n|\t\t\terror = -EFAULT;\n|\t} else if (error == -ERANGE && size >= XATTR_LIST_MAX) {\n|\t\t/* The file system tried to returned a list bigger\n|\t\t\tthan XATTR_LIST_MAX bytes. Not possible. */\n|\t\terror = -E2BIG;\n|\t}\n... the error can potentially already be -E2BIG, skipping this else-if\nand ending up at the same state as other errors.\n\nLink: https://www.kernel.org/doc/html/latest/process/deprecated.html#strncpy-on-nul-terminated-strings [1]\nLink: https://manpages.debian.org/testing/linux-manual-4.8/strscpy.9.en.html\nLink: https://github.com/KSPP/linux/issues/90\nCc:  <linux-hardening@vger.kernel.org>\nSigned-off-by: Justin Stitt <justinstitt@google.com>\nReviewed-by: Kees Cook <keescook@chromium.org>\nLink: https://lore.kernel.org/r/20240401-strncpy-fs-hfsplus-xattr-c-v2-1-6e089999355e@google.com\nSigned-off-by: Kees Cook <keescook@chromium.org>",
  "author_name": "Justin Stitt",
  "author_email": "justinstitt@google.com",
  "author_date": "Mon Apr 1 18:10:48 2024 +0000",
  "author_date_iso": "2024-04-01T18:10:48+00:00",
  "committer_name": "Kees Cook",
  "committer_email": "keescook@chromium.org",
  "committer_date": "Wed Apr 24 16:55:28 2024 -0700",
  "committer_date_iso": "2024-04-24T16:55:28-07:00",
  "files_changed": [
    "fs/hfsplus/xattr.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "fs/hfsplus/xattr.c",
      "insertions": 10,
      "deletions": 12
    }
  ],
  "total_insertions": 10,
  "total_deletions": 12,
  "total_changes": 22,
  "parents": [
    "31ca7e77fd7efc3f98582bf682fcaadc31a7d505"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/hfsplus/xattr.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}