{
  "hash": "614c0b9fee711dd89b1dd65c88ba83612a373fdc",
  "hash_short": "614c0b9f",
  "subject": "arm64: prevent instrumentation of bp hardening callbacks",
  "body": "We may call arm64_apply_bp_hardening() early during entry (e.g. in\nel0_ia()) before it is safe to run instrumented code. Unfortunately this\nmay result in running instrumented code in two cases:\n\n* The hardening callbacks called by arm64_apply_bp_hardening() are not\n  marked as `noinstr`, and have been observed to be instrumented when\n  compiled with either GCC or LLVM.\n\n* Since arm64_apply_bp_hardening() itself is only marked as `inline`\n  rather than `__always_inline`, it is possible that the compiler\n  decides to place it out-of-line, whereupon it may be instrumented.\n\nFor example, with defconfig built with clang 13.0.0,\ncall_hvc_arch_workaround_1() is compiled as:\n\n| <call_hvc_arch_workaround_1>:\n|        d503233f        paciasp\n|        f81f0ffe        str     x30, [sp, #-16]!\n|        320183e0        mov     w0, #0x80008000\n|        d503201f        nop\n|        d4000002        hvc     #0x0\n|        f84107fe        ldr     x30, [sp], #16\n|        d50323bf        autiasp\n|        d65f03c0        ret\n\n... but when CONFIG_FTRACE=y and CONFIG_KCOV=y this is compiled as:\n\n| <call_hvc_arch_workaround_1>:\n|        d503245f        bti     c\n|        d503201f        nop\n|        d503201f        nop\n|        d503233f        paciasp\n|        a9bf7bfd        stp     x29, x30, [sp, #-16]!\n|        910003fd        mov     x29, sp\n|        94000000        bl      0 <__sanitizer_cov_trace_pc>\n|        320183e0        mov     w0, #0x80008000\n|        d503201f        nop\n|        d4000002        hvc     #0x0\n|        a8c17bfd        ldp     x29, x30, [sp], #16\n|        d50323bf        autiasp\n|        d65f03c0        ret\n\n... with a patchable function entry registered with ftrace, and a direct\ncall to __sanitizer_cov_trace_pc(). Neither of these are safe early\nduring entry sequences.\n\nThis patch avoids the unsafe instrumentation by marking\narm64_apply_bp_hardening() as `__always_inline` and by marking the\nhardening functions as `noinstr`. This avoids the potential for\ninstrumentation, and causes clang to consistently generate the function\nas with the defconfig sample.\n\nNote: in the defconfig compilation, when CONFIG_SVE=y, x30 is spilled to\nthe stack without being placed in a frame record, which will result in a\nmissing entry if call_hvc_arch_workaround_1() is backtraced. Similar is\ntrue of qcom_link_stack_sanitisation(), where inline asm spills the LR\nto a GPR prior to corrupting it. This is not a significant issue\npresently as we will only backtrace here if an exception is taken, and\nin such cases we may omit entries for other reasons today.\n\nThe relevant hardening functions were introduced in commits:\n\n  ec82b567a74fbdff (\"arm64: Implement branch predictor hardening for Falkor\")\n  b092201e00206141 (\"arm64: Add ARM_SMCCC_ARCH_WORKAROUND_1 BP hardening support\")\n\n... and these were subsequently moved in commit:\n\n  d4647f0a2ad71110 (\"arm64: Rewrite Spectre-v2 mitigation code\")\n\nThe arm64_apply_bp_hardening() function was introduced in commit:\n\n  0f15adbb2861ce6f (\"arm64: Add skeleton to harden the branch predictor against aliasing attacks\")\n\n... and was subsequently moved and reworked in commit:\n\n  6279017e807708a0 (\"KVM: arm64: Move BP hardening helpers into spectre.h\")\n\nFixes: ec82b567a74fbdff (\"arm64: Implement branch predictor hardening for Falkor\")\nFixes: b092201e00206141 (\"arm64: Add ARM_SMCCC_ARCH_WORKAROUND_1 BP hardening support\")\nFixes: d4647f0a2ad71110 (\"arm64: Rewrite Spectre-v2 mitigation code\")\nFixes: 0f15adbb2861ce6f (\"arm64: Add skeleton to harden the branch predictor against aliasing attacks\")\nFixes: 6279017e807708a0 (\"KVM: arm64: Move BP hardening helpers into spectre.h\")\nSigned-off-by: Mark Rutland <mark.rutland@arm.com>\nCc: Ard Biesheuvel <ardb@kernel.org>\nCc: Catalin Marinas <catalin.marinas@arm.com>\nCc: James Morse <james.morse@arm.com>\nCc: Marc Zyngier <maz@kernel.org>\nCc: Mark Brown <broonie@kernel.org>\nCc: Will Deacon <will@kernel.org>\nAcked-by: Marc Zyngier <maz@kernel.org>\nReviewed-by: Mark Brown <broonie@kernel.org>\nLink: https://lore.kernel.org/r/20220224181028.512873-1-mark.rutland@arm.com\nSigned-off-by: Will Deacon <will@kernel.org>",
  "full_message": "arm64: prevent instrumentation of bp hardening callbacks\n\nWe may call arm64_apply_bp_hardening() early during entry (e.g. in\nel0_ia()) before it is safe to run instrumented code. Unfortunately this\nmay result in running instrumented code in two cases:\n\n* The hardening callbacks called by arm64_apply_bp_hardening() are not\n  marked as `noinstr`, and have been observed to be instrumented when\n  compiled with either GCC or LLVM.\n\n* Since arm64_apply_bp_hardening() itself is only marked as `inline`\n  rather than `__always_inline`, it is possible that the compiler\n  decides to place it out-of-line, whereupon it may be instrumented.\n\nFor example, with defconfig built with clang 13.0.0,\ncall_hvc_arch_workaround_1() is compiled as:\n\n| <call_hvc_arch_workaround_1>:\n|        d503233f        paciasp\n|        f81f0ffe        str     x30, [sp, #-16]!\n|        320183e0        mov     w0, #0x80008000\n|        d503201f        nop\n|        d4000002        hvc     #0x0\n|        f84107fe        ldr     x30, [sp], #16\n|        d50323bf        autiasp\n|        d65f03c0        ret\n\n... but when CONFIG_FTRACE=y and CONFIG_KCOV=y this is compiled as:\n\n| <call_hvc_arch_workaround_1>:\n|        d503245f        bti     c\n|        d503201f        nop\n|        d503201f        nop\n|        d503233f        paciasp\n|        a9bf7bfd        stp     x29, x30, [sp, #-16]!\n|        910003fd        mov     x29, sp\n|        94000000        bl      0 <__sanitizer_cov_trace_pc>\n|        320183e0        mov     w0, #0x80008000\n|        d503201f        nop\n|        d4000002        hvc     #0x0\n|        a8c17bfd        ldp     x29, x30, [sp], #16\n|        d50323bf        autiasp\n|        d65f03c0        ret\n\n... with a patchable function entry registered with ftrace, and a direct\ncall to __sanitizer_cov_trace_pc(). Neither of these are safe early\nduring entry sequences.\n\nThis patch avoids the unsafe instrumentation by marking\narm64_apply_bp_hardening() as `__always_inline` and by marking the\nhardening functions as `noinstr`. This avoids the potential for\ninstrumentation, and causes clang to consistently generate the function\nas with the defconfig sample.\n\nNote: in the defconfig compilation, when CONFIG_SVE=y, x30 is spilled to\nthe stack without being placed in a frame record, which will result in a\nmissing entry if call_hvc_arch_workaround_1() is backtraced. Similar is\ntrue of qcom_link_stack_sanitisation(), where inline asm spills the LR\nto a GPR prior to corrupting it. This is not a significant issue\npresently as we will only backtrace here if an exception is taken, and\nin such cases we may omit entries for other reasons today.\n\nThe relevant hardening functions were introduced in commits:\n\n  ec82b567a74fbdff (\"arm64: Implement branch predictor hardening for Falkor\")\n  b092201e00206141 (\"arm64: Add ARM_SMCCC_ARCH_WORKAROUND_1 BP hardening support\")\n\n... and these were subsequently moved in commit:\n\n  d4647f0a2ad71110 (\"arm64: Rewrite Spectre-v2 mitigation code\")\n\nThe arm64_apply_bp_hardening() function was introduced in commit:\n\n  0f15adbb2861ce6f (\"arm64: Add skeleton to harden the branch predictor against aliasing attacks\")\n\n... and was subsequently moved and reworked in commit:\n\n  6279017e807708a0 (\"KVM: arm64: Move BP hardening helpers into spectre.h\")\n\nFixes: ec82b567a74fbdff (\"arm64: Implement branch predictor hardening for Falkor\")\nFixes: b092201e00206141 (\"arm64: Add ARM_SMCCC_ARCH_WORKAROUND_1 BP hardening support\")\nFixes: d4647f0a2ad71110 (\"arm64: Rewrite Spectre-v2 mitigation code\")\nFixes: 0f15adbb2861ce6f (\"arm64: Add skeleton to harden the branch predictor against aliasing attacks\")\nFixes: 6279017e807708a0 (\"KVM: arm64: Move BP hardening helpers into spectre.h\")\nSigned-off-by: Mark Rutland <mark.rutland@arm.com>\nCc: Ard Biesheuvel <ardb@kernel.org>\nCc: Catalin Marinas <catalin.marinas@arm.com>\nCc: James Morse <james.morse@arm.com>\nCc: Marc Zyngier <maz@kernel.org>\nCc: Mark Brown <broonie@kernel.org>\nCc: Will Deacon <will@kernel.org>\nAcked-by: Marc Zyngier <maz@kernel.org>\nReviewed-by: Mark Brown <broonie@kernel.org>\nLink: https://lore.kernel.org/r/20220224181028.512873-1-mark.rutland@arm.com\nSigned-off-by: Will Deacon <will@kernel.org>",
  "author_name": "Mark Rutland",
  "author_email": "mark.rutland@arm.com",
  "author_date": "Thu Feb 24 18:10:28 2022 +0000",
  "author_date_iso": "2022-02-24T18:10:28+00:00",
  "committer_name": "Will Deacon",
  "committer_email": "will@kernel.org",
  "committer_date": "Mon Mar 7 21:35:06 2022 +0000",
  "committer_date_iso": "2022-03-07T21:35:06+00:00",
  "files_changed": [
    "arch/arm64/include/asm/spectre.h",
    "arch/arm64/kernel/proton-pack.c"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "arch/arm64/include/asm/spectre.h",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "arch/arm64/kernel/proton-pack.c",
      "insertions": 6,
      "deletions": 3
    }
  ],
  "total_insertions": 8,
  "total_deletions": 4,
  "total_changes": 12,
  "parents": [
    "032e6c33790dc51836a40ef702de4c9e0941145f"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/arm64/include/asm/spectre.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/proton-pack.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}