{
  "hash": "22fca621bd1bbc5366e9cd941eb1c07c0963d984",
  "hash_short": "22fca621",
  "subject": "ACPI: APEI: EINJ: Add support for vendor defined error types",
  "body": "Vendor-Defined Error types are supported by the platform apart from\nstandard error types if bit 31 is set in the output of GET_ERROR_TYPE\nError Injection Action.[1] While the errors themselves and the length\nof their associated \"OEM Defined data structure\" might vary between\nvendors, the physical address of this structure can be computed through\nvendor_extension and length fields of \"SET_ERROR_TYPE_WITH_ADDRESS\" and\n\"Vendor Error Type Extension\" Structures respectively.[2][3]\n\nCurrently, however, the einj module only computes the physical address of\nVendor Error Type Extension Structure. Neither does it compute the physical\naddress of OEM Defined structure nor does it establish the memory mapping\nrequired for injecting Vendor-defined errors. Consequently, userspace\ntools have to establish the very mapping through /dev/mem, nopat kernel\nparameter and system calls like mmap/munmap initially before injecting\nVendor-defined errors.\n\nCircumvent the issue by computing the physical address of OEM Defined data\nstructure and establishing the required mapping with the structure. Create\na new file \"oem_error\", if the system supports Vendor-defined errors, to\nexport this mapping, through debugfs_create_blob(). Userspace tools can\nthen populate their respective OEM Defined structure instances and just\nwrite to the file as part of injecting Vendor-defined Errors. Similarly,\nthe tools can also read from the file if the system firmware provides some\ninformation through the OEM defined structure after error injection.\n\n[1] ACPI specification 6.5, section 18.6.4\n[2] ACPI specification 6.5, Table 18.31\n[3] ACPI specification 6.5, Table 18.32\n\nSuggested-by: Yazen Ghannam <yazen.ghannam@amd.com>\nSigned-off-by: Avadhut Naik <Avadhut.Naik@amd.com>\nReviewed-by: Tony Luck <tony.luck@intel.com>\nReviewed-by: Borislav Petkov (AMD) <bp@alien8.de>\nSigned-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>",
  "full_message": "ACPI: APEI: EINJ: Add support for vendor defined error types\n\nVendor-Defined Error types are supported by the platform apart from\nstandard error types if bit 31 is set in the output of GET_ERROR_TYPE\nError Injection Action.[1] While the errors themselves and the length\nof their associated \"OEM Defined data structure\" might vary between\nvendors, the physical address of this structure can be computed through\nvendor_extension and length fields of \"SET_ERROR_TYPE_WITH_ADDRESS\" and\n\"Vendor Error Type Extension\" Structures respectively.[2][3]\n\nCurrently, however, the einj module only computes the physical address of\nVendor Error Type Extension Structure. Neither does it compute the physical\naddress of OEM Defined structure nor does it establish the memory mapping\nrequired for injecting Vendor-defined errors. Consequently, userspace\ntools have to establish the very mapping through /dev/mem, nopat kernel\nparameter and system calls like mmap/munmap initially before injecting\nVendor-defined errors.\n\nCircumvent the issue by computing the physical address of OEM Defined data\nstructure and establishing the required mapping with the structure. Create\na new file \"oem_error\", if the system supports Vendor-defined errors, to\nexport this mapping, through debugfs_create_blob(). Userspace tools can\nthen populate their respective OEM Defined structure instances and just\nwrite to the file as part of injecting Vendor-defined Errors. Similarly,\nthe tools can also read from the file if the system firmware provides some\ninformation through the OEM defined structure after error injection.\n\n[1] ACPI specification 6.5, section 18.6.4\n[2] ACPI specification 6.5, Table 18.31\n[3] ACPI specification 6.5, Table 18.32\n\nSuggested-by: Yazen Ghannam <yazen.ghannam@amd.com>\nSigned-off-by: Avadhut Naik <Avadhut.Naik@amd.com>\nReviewed-by: Tony Luck <tony.luck@intel.com>\nReviewed-by: Borislav Petkov (AMD) <bp@alien8.de>\nSigned-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>",
  "author_name": "Avadhut Naik",
  "author_email": "Avadhut.Naik@amd.com",
  "author_date": "Thu Nov 16 16:47:25 2023 -0600",
  "author_date_iso": "2023-11-16T16:47:25-06:00",
  "committer_name": "Rafael J. Wysocki",
  "committer_email": "rafael.j.wysocki@intel.com",
  "committer_date": "Tue Nov 21 21:10:44 2023 +0100",
  "committer_date_iso": "2023-11-21T21:10:44+01:00",
  "files_changed": [
    "drivers/acpi/apei/einj.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "drivers/acpi/apei/einj.c",
      "insertions": 24,
      "deletions": 0
    }
  ],
  "total_insertions": 24,
  "total_deletions": 0,
  "total_changes": 24,
  "parents": [
    "0706526ec7704dcd046239078ac175d11a88a95e"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "Injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/acpi/apei/einj.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}