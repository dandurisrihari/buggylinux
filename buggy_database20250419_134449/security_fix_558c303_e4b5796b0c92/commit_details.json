{
  "hash": "558c303c9734af5a813739cd284879227f7297d2",
  "hash_short": "558c303c",
  "subject": "arm64: Mitigate spectre style branch history side channels",
  "body": "Speculation attacks against some high-performance processors can\nmake use of branch history to influence future speculation.\nWhen taking an exception from user-space, a sequence of branches\nor a firmware call overwrites or invalidates the branch history.\n\nThe sequence of branches is added to the vectors, and should appear\nbefore the first indirect branch. For systems using KPTI the sequence\nis added to the kpti trampoline where it has a free register as the exit\nfrom the trampoline is via a 'ret'. For systems not using KPTI, the same\nregister tricks are used to free up a register in the vectors.\n\nFor the firmware call, arch-workaround-3 clobbers 4 registers, so\nthere is no choice but to save them to the EL1 stack. This only happens\nfor entry from EL0, so if we take an exception due to the stack access,\nit will not become re-entrant.\n\nFor KVM, the existing branch-predictor-hardening vectors are used.\nWhen a spectre version of these vectors is in use, the firmware call\nis sufficient to mitigate against Spectre-BHB. For the non-spectre\nversions, the sequence of branches is added to the indirect vector.\n\nReviewed-by: Catalin Marinas <catalin.marinas@arm.com>\nSigned-off-by: James Morse <james.morse@arm.com>",
  "full_message": "arm64: Mitigate spectre style branch history side channels\n\nSpeculation attacks against some high-performance processors can\nmake use of branch history to influence future speculation.\nWhen taking an exception from user-space, a sequence of branches\nor a firmware call overwrites or invalidates the branch history.\n\nThe sequence of branches is added to the vectors, and should appear\nbefore the first indirect branch. For systems using KPTI the sequence\nis added to the kpti trampoline where it has a free register as the exit\nfrom the trampoline is via a 'ret'. For systems not using KPTI, the same\nregister tricks are used to free up a register in the vectors.\n\nFor the firmware call, arch-workaround-3 clobbers 4 registers, so\nthere is no choice but to save them to the EL1 stack. This only happens\nfor entry from EL0, so if we take an exception due to the stack access,\nit will not become re-entrant.\n\nFor KVM, the existing branch-predictor-hardening vectors are used.\nWhen a spectre version of these vectors is in use, the firmware call\nis sufficient to mitigate against Spectre-BHB. For the non-spectre\nversions, the sequence of branches is added to the indirect vector.\n\nReviewed-by: Catalin Marinas <catalin.marinas@arm.com>\nSigned-off-by: James Morse <james.morse@arm.com>",
  "author_name": "James Morse",
  "author_email": "james.morse@arm.com",
  "author_date": "Wed Nov 10 14:48:00 2021 +0000",
  "author_date_iso": "2021-11-10T14:48:00+00:00",
  "committer_name": "James Morse",
  "committer_email": "james.morse@arm.com",
  "committer_date": "Thu Feb 24 13:58:52 2022 +0000",
  "committer_date_iso": "2022-02-24T13:58:52+00:00",
  "files_changed": [
    "arch/arm64/Kconfig",
    "arch/arm64/include/asm/assembler.h",
    "arch/arm64/include/asm/cpufeature.h",
    "arch/arm64/include/asm/cputype.h",
    "arch/arm64/include/asm/spectre.h",
    "arch/arm64/include/asm/sysreg.h",
    "arch/arm64/include/asm/vectors.h",
    "arch/arm64/kernel/cpu_errata.c",
    "arch/arm64/kernel/image-vars.h",
    "arch/arm64/kernel/proton-pack.c",
    "arch/arm64/kvm/hyp/hyp-entry.S",
    "arch/arm64/tools/cpucaps"
  ],
  "files_changed_count": 12,
  "stats": [
    {
      "file": "arch/arm64/Kconfig",
      "insertions": 9,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/assembler.h",
      "insertions": 13,
      "deletions": 1
    },
    {
      "file": "arch/arm64/include/asm/cpufeature.h",
      "insertions": 16,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/cputype.h",
      "insertions": 8,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/spectre.h",
      "insertions": 3,
      "deletions": 1
    },
    {
      "file": "arch/arm64/include/asm/sysreg.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/vectors.h",
      "insertions": 5,
      "deletions": 0
    },
    {
      "file": "arch/arm64/kernel/cpu_errata.c",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "arch/arm64/kernel/image-vars.h",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "arch/arm64/kernel/proton-pack.c",
      "insertions": 278,
      "deletions": 0
    },
    {
      "file": "arch/arm64/kvm/hyp/hyp-entry.S",
      "insertions": 8,
      "deletions": 0
    },
    {
      "file": "arch/arm64/tools/cpucaps",
      "insertions": 1,
      "deletions": 0
    }
  ],
  "total_insertions": 352,
  "total_deletions": 2,
  "total_changes": 354,
  "parents": [
    "dee435be76f4117410bbd90573a881fd33488f37"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/arm64/include/asm/cpufeature.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/asm/cputype.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/asm/assembler.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/asm/vectors.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/proton-pack.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/image-vars.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/asm/sysreg.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/cpu_errata.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/asm/spectre.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kvm/hyp/hyp-entry.S",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/tools/cpucaps",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}