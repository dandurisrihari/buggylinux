commit ab68d2e36532806b8f86ff2f60861dbb8443f0be
Author: Brendan Jackman <jackmanb@google.com>
Date:   Fri Dec 20 15:18:33 2024 +0000

    x86/cpu: Enable modifying CPU bug flags with '{clear,set}puid='
    
    Sometimes it can be very useful to run CPU vulnerability mitigations on
    systems where they aren't known to mitigate any real-world
    vulnerabilities. This can be handy for mundane reasons like debugging
    HW-agnostic logic on whatever machine is to hand, but also for research
    reasons: while some mitigations are focused on individual vulns and
    uarches, others are fairly general, and it's strategically useful to
    have an idea how they'd perform on systems where they aren't currently
    needed.
    
    As evidence for this being useful, a flag specifically for Retbleed was
    added in:
    
      5c9a92dec323 ("x86/bugs: Add retbleed=force").
    
    Since CPU bugs are tracked using the same basic mechanism as features,
    and there are already parameters for manipulating them by hand, extend
    that mechanism to support bug as well as capabilities.
    
    With this patch and setcpuid=srso, a QEMU guest running on an Intel host
    will boot with Safe-RET enabled.
    
    Signed-off-by: Brendan Jackman <jackmanb@google.com>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Link: https://lore.kernel.org/r/20241220-force-cpu-bug-v2-3-7dc71bce742a@google.com

diff --git a/arch/x86/include/asm/cpufeature.h b/arch/x86/include/asm/cpufeature.h
index de1ad09fe8d7..e5fc0038c8f6 100644
--- a/arch/x86/include/asm/cpufeature.h
+++ b/arch/x86/include/asm/cpufeature.h
@@ -50,6 +50,7 @@ extern const char * const x86_power_flags[32];
  * X86_BUG_<name> - NCAPINTS*32.
  */
 extern const char * const x86_bug_flags[NBUGINTS*32];
+#define x86_bug_flag(flag) x86_bug_flags[flag]
 
 #define test_cpu_cap(c, bit)						\
 	 arch_test_bit(bit, (unsigned long *)((c)->x86_capability))