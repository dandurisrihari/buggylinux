{
  "hash": "84ab1277ce5a90a8d1f377707d662ac43cc0918a",
  "hash_short": "84ab1277",
  "subject": "Merge tag 'v6.6-vfs.fs_context' of git://git.kernel.org/pub/scm/linux/kernel/git/vfs/vfs",
  "body": "Pull mount API updates from Christian Brauner:\n \"This introduces FSCONFIG_CMD_CREATE_EXCL which allows userspace to\n  implement something like\n\n      $ mount -t ext4 --exclusive /dev/sda /B\n\n  which fails if a superblock for the requested filesystem does already\n  exist instead of silently reusing an existing superblock.\n\n  Without it, in the sequence\n\n      $ move-mount -f xfs -o       source=/dev/sda4 /A\n      $ move-mount -f xfs -o noacl,source=/dev/sda4 /B\n\n  the initial mounter will create a superblock. The second mounter will\n  reuse the existing superblock, creating a bind-mount (see [1] for the\n  source of the move-mount binary).\n\n  The problem is that reusing an existing superblock means all mount\n  options other than read-only and read-write will be silently ignored\n  even if they are incompatible requests. For example, the second mount\n  has requested no POSIX ACL support but since the existing superblock\n  is reused POSIX ACL support will remain enabled.\n\n  Such silent superblock reuse can easily become a security issue.\n\n  After adding support for FSCONFIG_CMD_CREATE_EXCL to mount(8) in\n  util-linux this can be fixed:\n\n      $ move-mount -f xfs --exclusive -o       source=/dev/sda4 /A\n      $ move-mount -f xfs --exclusive -o noacl,source=/dev/sda4 /B\n      Device or resource busy | move-mount.c: 300: do_fsconfig: i xfs: reusing existing filesystem not allowed\n\n  This requires the new mount api. With the old mount api it would be\n  necessary to plumb this through every legacy filesystem's\n  file_system_type->mount() method. If they want this feature they are\n  most welcome to switch to the new mount api\"\n\nLink: https://github.com/brauner/move-mount-beneath [1]\nLink: https://lore.kernel.org/linux-block/20230704-fasching-wertarbeit-7c6ffb01c83d@brauner\nLink: https://lore.kernel.org/linux-block/20230705-pumpwerk-vielversprechend-a4b1fd947b65@brauner\nLink: https://lore.kernel.org/linux-fsdevel/20230725-einnahmen-warnschilder-17779aec0a97@brauner\nLink: https://lore.kernel.org/lkml/20230824-anzog-allheilmittel-e8c63e429a79@brauner/\n\n* tag 'v6.6-vfs.fs_context' of git://git.kernel.org/pub/scm/linux/kernel/git/vfs/vfs:\n  fs: add FSCONFIG_CMD_CREATE_EXCL\n  fs: add vfs_cmd_reconfigure()\n  fs: add vfs_cmd_create()\n  super: remove get_tree_single_reconf()",
  "full_message": "Merge tag 'v6.6-vfs.fs_context' of git://git.kernel.org/pub/scm/linux/kernel/git/vfs/vfs\n\nPull mount API updates from Christian Brauner:\n \"This introduces FSCONFIG_CMD_CREATE_EXCL which allows userspace to\n  implement something like\n\n      $ mount -t ext4 --exclusive /dev/sda /B\n\n  which fails if a superblock for the requested filesystem does already\n  exist instead of silently reusing an existing superblock.\n\n  Without it, in the sequence\n\n      $ move-mount -f xfs -o       source=/dev/sda4 /A\n      $ move-mount -f xfs -o noacl,source=/dev/sda4 /B\n\n  the initial mounter will create a superblock. The second mounter will\n  reuse the existing superblock, creating a bind-mount (see [1] for the\n  source of the move-mount binary).\n\n  The problem is that reusing an existing superblock means all mount\n  options other than read-only and read-write will be silently ignored\n  even if they are incompatible requests. For example, the second mount\n  has requested no POSIX ACL support but since the existing superblock\n  is reused POSIX ACL support will remain enabled.\n\n  Such silent superblock reuse can easily become a security issue.\n\n  After adding support for FSCONFIG_CMD_CREATE_EXCL to mount(8) in\n  util-linux this can be fixed:\n\n      $ move-mount -f xfs --exclusive -o       source=/dev/sda4 /A\n      $ move-mount -f xfs --exclusive -o noacl,source=/dev/sda4 /B\n      Device or resource busy | move-mount.c: 300: do_fsconfig: i xfs: reusing existing filesystem not allowed\n\n  This requires the new mount api. With the old mount api it would be\n  necessary to plumb this through every legacy filesystem's\n  file_system_type->mount() method. If they want this feature they are\n  most welcome to switch to the new mount api\"\n\nLink: https://github.com/brauner/move-mount-beneath [1]\nLink: https://lore.kernel.org/linux-block/20230704-fasching-wertarbeit-7c6ffb01c83d@brauner\nLink: https://lore.kernel.org/linux-block/20230705-pumpwerk-vielversprechend-a4b1fd947b65@brauner\nLink: https://lore.kernel.org/linux-fsdevel/20230725-einnahmen-warnschilder-17779aec0a97@brauner\nLink: https://lore.kernel.org/lkml/20230824-anzog-allheilmittel-e8c63e429a79@brauner/\n\n* tag 'v6.6-vfs.fs_context' of git://git.kernel.org/pub/scm/linux/kernel/git/vfs/vfs:\n  fs: add FSCONFIG_CMD_CREATE_EXCL\n  fs: add vfs_cmd_reconfigure()\n  fs: add vfs_cmd_create()\n  super: remove get_tree_single_reconf()",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Mon Aug 28 09:00:09 2023 -0700",
  "author_date_iso": "2023-08-28T09:00:09-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Mon Aug 28 09:00:09 2023 -0700",
  "committer_date_iso": "2023-08-28T09:00:09-07:00",
  "files_changed": [],
  "files_changed_count": 0,
  "stats": [
    {
      "file": "fs/fs_context.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "fs/fsopen.c",
      "insertions": 71,
      "deletions": 35
    },
    {
      "file": "fs/super.c",
      "insertions": 32,
      "deletions": 32
    },
    {
      "file": "include/linux/fs_context.h",
      "insertions": 1,
      "deletions": 3
    },
    {
      "file": "include/uapi/linux/mount.h",
      "insertions": 2,
      "deletions": 1
    }
  ],
  "total_insertions": 107,
  "total_deletions": 71,
  "total_changes": 178,
  "parents": [
    "2dde18cd1d8fac735875f2e4987f11817cc0bc2c",
    "22ed7ecdaefe0cac0c6e6295e83048af60435b13"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "security issue"
    ]
  },
  "fix_type": "security",
  "file_results": []
}