{
  "hash": "f67986b0119c048c6537cdc93da511f7ffdb2338",
  "hash_short": "f67986b0",
  "subject": "drm/i915/pxp: Promote pxp subsystem to top-level of i915",
  "body": "Starting with MTL, there will be two GT-tiles, a render and media\ntile. PXP as a service for supporting workloads with protected\ncontexts and protected buffers can be subscribed by process\nworkloads on any tile. However, depending on the platform,\nonly one of the tiles is used for control events pertaining to PXP\noperation (such as creating the arbitration session and session\ntear-down).\n\nPXP as a global feature is accessible via batch buffer instructions\non any engine/tile and the coherency across tiles is handled implicitly\nby the HW. In fact, for the foreseeable future, we are expecting this\nsingle-control-tile for the PXP subsystem.\n\nIn MTL, it's the standalone media tile (not the root tile) because\nit contains the VDBOX and KCR engine (among the assets PXP relies on\nfor those events).\n\nLooking at the current code design, each tile is represented by the\nintel_gt structure while the intel_pxp structure currently hangs off the\nintel_gt structure.\n\nKeeping the intel_pxp structure within the intel_gt structure makes some\ninternal functionalities more straight forward but adds code complexity to\ncode readability and maintainibility to many external-to-pxp subsystems\nwhich may need to pick the correct intel_gt structure. An example of this\nwould be the intel_pxp_is_active or intel_pxp_is_enabled functionality\nwhich should be viewed as a global level inquiry, not a per-gt inquiry.\n\nThat said, this series promotes the intel_pxp structure into the\ndrm_i915_private structure making it a top-level subsystem and the PXP\nsubsystem will select the control gt internally and keep a pointer to\nit for internal reference.\n\nThis promotion comes with two noteworthy changes:\n\n1. Exported pxp functions that are called by external subsystems\n   (such as intel_pxp_enabled/active) will have to check implicitly\n   if i915->pxp is valid as that structure will not be allocated\n   for HW that doesn't support PXP.\n\n2. Since GT is now considered a soft-dependency of PXP we are\n   ensuring that GT init happens before PXP init and vice versa\n   for fini. This causes a minor ordering change whereby we previously\n   called intel_pxp_suspend after intel_uc_suspend but now is before\n   i915_gem_suspend_late but the change is required for correct\n   dependency flows. Additionally, this re-order change doesn't\n   have any impact because at that point in either case, the top level\n   entry to i915 won't observe any PXP events (since the GPU was\n   quiesced during suspend_prepare). Also, any PXP event doesn't\n   really matter when we disable the PXP HW (global GT irqs are\n   already off anyway, so even if there was a bug that generated\n   spurious events we wouldn't see it and we would just clean it\n   up on resume which is okay since the default fallback action\n   for PXP would be to keep the sessions off at this suspend stage).\n\nChanges from prior revs:\n  v11: - Reformat a comment (Tvrtko).\n  v10: - Change the code flow for intel_pxp_init to make it more\n         cleaner and readible with better comments explaining the\n         difference between full-PXP-feature vs the partial-teelink\n         inits depending on the platform. Additionally, only do\n         the pxp allocation when we are certain the subsystem is\n         needed. (Tvrtko).\n   v9: - Cosmetic cleanups in supported/enabled/active. (Daniele).\n       - Add comments for intel_pxp_init and pxp_get_ctrl_gt that\n         explain the functional flow for when PXP is not supported\n         but the backend-assets are needed for HuC authentication\n         (Daniele and Tvrtko).\n       - Fix two remaining functions that are accessible outside\n         PXP that need to be checking pxp ptrs before using them:\n         intel_pxp_irq_handler and intel_pxp_huc_load_and_auth\n         (Tvrtko and Daniele).\n       - User helper macro in pxp-debugfs (Tvrtko).\n   v8: - Remove pxp_to_gt macro (Daniele).\n       - Fix a bug in pxp_get_ctrl_gt for the case of MTL and we don't\n         support GSC-FW on it. (Daniele).\n       - Leave i915->pxp as NULL if we dont support PXP and in line\n         with that, do additional validity check on i915->pxp for\n         intel_pxp_is_supported/enabled/active (Daniele).\n       - Remove unncessary include header from intel_gt_debugfs.c\n         and check drm_minor i915->drm.primary (Daniele).\n       - Other cosmetics / minor issues / more comments on suspend\n         flow order change (Daniele).\n   v7: - Drop i915_dev_to_pxp and in intel_pxp_init use 'i915->pxp'\n         through out instead of local variable newpxp. (Rodrigo)\n       - In the case intel_pxp_fini is called during driver unload but\n         after i915 loading failed without pxp being allocated, check\n         i915->pxp before referencing it. (Alan)\n   v6: - Remove HAS_PXP macro and replace it with intel_pxp_is_supported\n         because : [1] introduction of 'ctrl_gt' means we correct this\n         for MTL's upcoming series now. [2] Also, this has little impact\n         globally as its only used by PXP-internal callers at the moment.\n       - Change intel_pxp_init/fini to take in i915 as its input to avoid\n         ptr-to-ptr in init/fini calls.(Jani).\n       - Remove the backpointer from pxp->i915 since we can use\n         pxp->ctrl_gt->i915 if we need it. (Rodrigo).\n   v5: - Switch from series to single patch (Rodrigo).\n       - change function name from pxp_get_kcr_owner_gt to\n         pxp_get_ctrl_gt.\n       - Fix CI BAT failure by removing redundant call to intel_pxp_fini\n         from driver-remove.\n       - NOTE: remaining open still persists on using ptr-to-ptr\n         and back-ptr.\n   v4: - Instead of maintaining intel_pxp as an intel_gt structure member\n         and creating a number of convoluted helpers that takes in i915 as\n         input and redirects to the correct intel_gt or takes any intel_gt\n         and internally replaces with the correct intel_gt, promote it to\n         be a top-level i915 structure.\n   v3: - Rename gt level helper functions to \"intel_pxp_is_enabled/\n         supported/ active_on_gt\" (Daniele)\n       - Upgrade _gt_supports_pxp to replace what was intel_gtpxp_is\n         supported as the new intel_pxp_is_supported_on_gt to check for\n         PXP feature support vs the tee support for huc authentication.\n         Fix pxp-debugfs-registration to use only the former to decide\n         support. (Daniele)\n       - Couple minor optimizations.\n   v2: - Avoid introduction of new device info or gt variables and use\n         existing checks / macros to differentiate the correct GT->PXP\n         control ownership (Daniele Ceraolo Spurio)\n       - Don't reuse the updated global-checkers for per-GT callers (such\n         as other files within PXP) to avoid unnecessary GT-reparsing,\n         expose a replacement helper like the prior ones. (Daniele).\n   v1: - Add one more patch to the series for the intel_pxp suspend/resume\n         for similar refactoring\n\nReferences: https://patchwork.freedesktop.org/patch/msgid/20221202011407.4068371-1-alan.previn.teres.alexis@intel.com\nSigned-off-by: Alan Previn <alan.previn.teres.alexis@intel.com>\nReviewed-by: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>\nAcked-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nSigned-off-by: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>\nLink: https://patchwork.freedesktop.org/patch/msgid/20221208180542.998148-1-alan.previn.teres.alexis@intel.com",
  "full_message": "drm/i915/pxp: Promote pxp subsystem to top-level of i915\n\nStarting with MTL, there will be two GT-tiles, a render and media\ntile. PXP as a service for supporting workloads with protected\ncontexts and protected buffers can be subscribed by process\nworkloads on any tile. However, depending on the platform,\nonly one of the tiles is used for control events pertaining to PXP\noperation (such as creating the arbitration session and session\ntear-down).\n\nPXP as a global feature is accessible via batch buffer instructions\non any engine/tile and the coherency across tiles is handled implicitly\nby the HW. In fact, for the foreseeable future, we are expecting this\nsingle-control-tile for the PXP subsystem.\n\nIn MTL, it's the standalone media tile (not the root tile) because\nit contains the VDBOX and KCR engine (among the assets PXP relies on\nfor those events).\n\nLooking at the current code design, each tile is represented by the\nintel_gt structure while the intel_pxp structure currently hangs off the\nintel_gt structure.\n\nKeeping the intel_pxp structure within the intel_gt structure makes some\ninternal functionalities more straight forward but adds code complexity to\ncode readability and maintainibility to many external-to-pxp subsystems\nwhich may need to pick the correct intel_gt structure. An example of this\nwould be the intel_pxp_is_active or intel_pxp_is_enabled functionality\nwhich should be viewed as a global level inquiry, not a per-gt inquiry.\n\nThat said, this series promotes the intel_pxp structure into the\ndrm_i915_private structure making it a top-level subsystem and the PXP\nsubsystem will select the control gt internally and keep a pointer to\nit for internal reference.\n\nThis promotion comes with two noteworthy changes:\n\n1. Exported pxp functions that are called by external subsystems\n   (such as intel_pxp_enabled/active) will have to check implicitly\n   if i915->pxp is valid as that structure will not be allocated\n   for HW that doesn't support PXP.\n\n2. Since GT is now considered a soft-dependency of PXP we are\n   ensuring that GT init happens before PXP init and vice versa\n   for fini. This causes a minor ordering change whereby we previously\n   called intel_pxp_suspend after intel_uc_suspend but now is before\n   i915_gem_suspend_late but the change is required for correct\n   dependency flows. Additionally, this re-order change doesn't\n   have any impact because at that point in either case, the top level\n   entry to i915 won't observe any PXP events (since the GPU was\n   quiesced during suspend_prepare). Also, any PXP event doesn't\n   really matter when we disable the PXP HW (global GT irqs are\n   already off anyway, so even if there was a bug that generated\n   spurious events we wouldn't see it and we would just clean it\n   up on resume which is okay since the default fallback action\n   for PXP would be to keep the sessions off at this suspend stage).\n\nChanges from prior revs:\n  v11: - Reformat a comment (Tvrtko).\n  v10: - Change the code flow for intel_pxp_init to make it more\n         cleaner and readible with better comments explaining the\n         difference between full-PXP-feature vs the partial-teelink\n         inits depending on the platform. Additionally, only do\n         the pxp allocation when we are certain the subsystem is\n         needed. (Tvrtko).\n   v9: - Cosmetic cleanups in supported/enabled/active. (Daniele).\n       - Add comments for intel_pxp_init and pxp_get_ctrl_gt that\n         explain the functional flow for when PXP is not supported\n         but the backend-assets are needed for HuC authentication\n         (Daniele and Tvrtko).\n       - Fix two remaining functions that are accessible outside\n         PXP that need to be checking pxp ptrs before using them:\n         intel_pxp_irq_handler and intel_pxp_huc_load_and_auth\n         (Tvrtko and Daniele).\n       - User helper macro in pxp-debugfs (Tvrtko).\n   v8: - Remove pxp_to_gt macro (Daniele).\n       - Fix a bug in pxp_get_ctrl_gt for the case of MTL and we don't\n         support GSC-FW on it. (Daniele).\n       - Leave i915->pxp as NULL if we dont support PXP and in line\n         with that, do additional validity check on i915->pxp for\n         intel_pxp_is_supported/enabled/active (Daniele).\n       - Remove unncessary include header from intel_gt_debugfs.c\n         and check drm_minor i915->drm.primary (Daniele).\n       - Other cosmetics / minor issues / more comments on suspend\n         flow order change (Daniele).\n   v7: - Drop i915_dev_to_pxp and in intel_pxp_init use 'i915->pxp'\n         through out instead of local variable newpxp. (Rodrigo)\n       - In the case intel_pxp_fini is called during driver unload but\n         after i915 loading failed without pxp being allocated, check\n         i915->pxp before referencing it. (Alan)\n   v6: - Remove HAS_PXP macro and replace it with intel_pxp_is_supported\n         because : [1] introduction of 'ctrl_gt' means we correct this\n         for MTL's upcoming series now. [2] Also, this has little impact\n         globally as its only used by PXP-internal callers at the moment.\n       - Change intel_pxp_init/fini to take in i915 as its input to avoid\n         ptr-to-ptr in init/fini calls.(Jani).\n       - Remove the backpointer from pxp->i915 since we can use\n         pxp->ctrl_gt->i915 if we need it. (Rodrigo).\n   v5: - Switch from series to single patch (Rodrigo).\n       - change function name from pxp_get_kcr_owner_gt to\n         pxp_get_ctrl_gt.\n       - Fix CI BAT failure by removing redundant call to intel_pxp_fini\n         from driver-remove.\n       - NOTE: remaining open still persists on using ptr-to-ptr\n         and back-ptr.\n   v4: - Instead of maintaining intel_pxp as an intel_gt structure member\n         and creating a number of convoluted helpers that takes in i915 as\n         input and redirects to the correct intel_gt or takes any intel_gt\n         and internally replaces with the correct intel_gt, promote it to\n         be a top-level i915 structure.\n   v3: - Rename gt level helper functions to \"intel_pxp_is_enabled/\n         supported/ active_on_gt\" (Daniele)\n       - Upgrade _gt_supports_pxp to replace what was intel_gtpxp_is\n         supported as the new intel_pxp_is_supported_on_gt to check for\n         PXP feature support vs the tee support for huc authentication.\n         Fix pxp-debugfs-registration to use only the former to decide\n         support. (Daniele)\n       - Couple minor optimizations.\n   v2: - Avoid introduction of new device info or gt variables and use\n         existing checks / macros to differentiate the correct GT->PXP\n         control ownership (Daniele Ceraolo Spurio)\n       - Don't reuse the updated global-checkers for per-GT callers (such\n         as other files within PXP) to avoid unnecessary GT-reparsing,\n         expose a replacement helper like the prior ones. (Daniele).\n   v1: - Add one more patch to the series for the intel_pxp suspend/resume\n         for similar refactoring\n\nReferences: https://patchwork.freedesktop.org/patch/msgid/20221202011407.4068371-1-alan.previn.teres.alexis@intel.com\nSigned-off-by: Alan Previn <alan.previn.teres.alexis@intel.com>\nReviewed-by: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>\nAcked-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>\nSigned-off-by: Daniele Ceraolo Spurio <daniele.ceraolospurio@intel.com>\nLink: https://patchwork.freedesktop.org/patch/msgid/20221208180542.998148-1-alan.previn.teres.alexis@intel.com",
  "author_name": "Alan Previn",
  "author_email": "alan.previn.teres.alexis@intel.com",
  "author_date": "Thu Dec 8 10:05:42 2022 -0800",
  "author_date_iso": "2022-12-08T10:05:42-08:00",
  "committer_name": "Daniele Ceraolo Spurio",
  "committer_email": "daniele.ceraolospurio@intel.com",
  "committer_date": "Fri Dec 9 08:36:30 2022 -0800",
  "committer_date_iso": "2022-12-09T08:36:30-08:00",
  "files_changed": [
    "drivers/gpu/drm/i915/display/skl_universal_plane.c",
    "drivers/gpu/drm/i915/gem/i915_gem_context.c",
    "drivers/gpu/drm/i915/gem/i915_gem_create.c",
    "drivers/gpu/drm/i915/gem/i915_gem_execbuffer.c",
    "drivers/gpu/drm/i915/gt/intel_gt.c",
    "drivers/gpu/drm/i915/gt/intel_gt_debugfs.c",
    "drivers/gpu/drm/i915/gt/intel_gt_irq.c",
    "drivers/gpu/drm/i915/gt/intel_gt_pm.c",
    "drivers/gpu/drm/i915/gt/intel_gt_types.h",
    "drivers/gpu/drm/i915/gt/uc/intel_huc_fw.c",
    "drivers/gpu/drm/i915/i915_driver.c",
    "drivers/gpu/drm/i915/i915_drv.h",
    "drivers/gpu/drm/i915/pxp/intel_pxp.c",
    "drivers/gpu/drm/i915/pxp/intel_pxp.h",
    "drivers/gpu/drm/i915/pxp/intel_pxp_cmd.c",
    "drivers/gpu/drm/i915/pxp/intel_pxp_debugfs.c",
    "drivers/gpu/drm/i915/pxp/intel_pxp_debugfs.h",
    "drivers/gpu/drm/i915/pxp/intel_pxp_huc.c",
    "drivers/gpu/drm/i915/pxp/intel_pxp_irq.c",
    "drivers/gpu/drm/i915/pxp/intel_pxp_pm.c",
    "drivers/gpu/drm/i915/pxp/intel_pxp_session.c",
    "drivers/gpu/drm/i915/pxp/intel_pxp_tee.c",
    "drivers/gpu/drm/i915/pxp/intel_pxp_types.h"
  ],
  "files_changed_count": 23,
  "stats": [
    {
      "file": "drivers/gpu/drm/i915/display/skl_universal_plane.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "drivers/gpu/drm/i915/gem/i915_gem_context.c",
      "insertions": 3,
      "deletions": 3
    },
    {
      "file": "drivers/gpu/drm/i915/gem/i915_gem_create.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "drivers/gpu/drm/i915/gem/i915_gem_execbuffer.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "drivers/gpu/drm/i915/gt/intel_gt.c",
      "insertions": 0,
      "deletions": 5
    },
    {
      "file": "drivers/gpu/drm/i915/gt/intel_gt_debugfs.c",
      "insertions": 0,
      "deletions": 2
    },
    {
      "file": "drivers/gpu/drm/i915/gt/intel_gt_irq.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "drivers/gpu/drm/i915/gt/intel_gt_pm.c",
      "insertions": 0,
      "deletions": 8
    },
    {
      "file": "drivers/gpu/drm/i915/gt/intel_gt_types.h",
      "insertions": 0,
      "deletions": 3
    },
    {
      "file": "drivers/gpu/drm/i915/gt/uc/intel_huc_fw.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "drivers/gpu/drm/i915/i915_driver.c",
      "insertions": 18,
      "deletions": 0
    },
    {
      "file": "drivers/gpu/drm/i915/i915_drv.h",
      "insertions": 3,
      "deletions": 4
    },
    {
      "file": "drivers/gpu/drm/i915/pxp/intel_pxp.c",
      "insertions": 100,
      "deletions": 28
    },
    {
      "file": "drivers/gpu/drm/i915/pxp/intel_pxp.h",
      "insertions": 5,
      "deletions": 4
    },
    {
      "file": "drivers/gpu/drm/i915/pxp/intel_pxp_cmd.c",
      "insertions": 5,
      "deletions": 3
    },
    {
      "file": "drivers/gpu/drm/i915/pxp/intel_pxp_debugfs.c",
      "insertions": 21,
      "deletions": 15
    },
    {
      "file": "drivers/gpu/drm/i915/pxp/intel_pxp_debugfs.h",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "drivers/gpu/drm/i915/pxp/intel_pxp_huc.c",
      "insertions": 6,
      "deletions": 3
    },
    {
      "file": "drivers/gpu/drm/i915/pxp/intel_pxp_irq.c",
      "insertions": 12,
      "deletions": 6
    },
    {
      "file": "drivers/gpu/drm/i915/pxp/intel_pxp_pm.c",
      "insertions": 4,
      "deletions": 2
    },
    {
      "file": "drivers/gpu/drm/i915/pxp/intel_pxp_session.c",
      "insertions": 5,
      "deletions": 5
    },
    {
      "file": "drivers/gpu/drm/i915/pxp/intel_pxp_tee.c",
      "insertions": 13,
      "deletions": 18
    },
    {
      "file": "drivers/gpu/drm/i915/pxp/intel_pxp_types.h",
      "insertions": 8,
      "deletions": 0
    }
  ],
  "total_insertions": 210,
  "total_deletions": 116,
  "total_changes": 326,
  "parents": [
    "e6d6e9d0b83d49c330f89ee8d3d1728a930c933e"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/gpu/drm/i915/gem/i915_gem_create.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/i915/display/skl_universal_plane.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/i915/gt/intel_gt.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/i915/gt/intel_gt_pm.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/i915/gem/i915_gem_context.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/i915/gt/intel_gt_debugfs.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/i915/gem/i915_gem_execbuffer.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/i915/gt/intel_gt_irq.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/i915/gt/uc/intel_huc_fw.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/i915/i915_drv.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/i915/gt/intel_gt_types.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/i915/pxp/intel_pxp.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/i915/i915_driver.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/i915/pxp/intel_pxp_cmd.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/i915/pxp/intel_pxp_debugfs.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/i915/pxp/intel_pxp_debugfs.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/i915/pxp/intel_pxp_pm.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/i915/pxp/intel_pxp_irq.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/i915/pxp/intel_pxp.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/i915/pxp/intel_pxp_huc.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/i915/pxp/intel_pxp_tee.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/i915/pxp/intel_pxp_session.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/i915/pxp/intel_pxp_types.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}