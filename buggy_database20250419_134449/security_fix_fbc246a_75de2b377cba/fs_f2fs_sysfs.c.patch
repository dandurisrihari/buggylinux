commit fbc246a12aac27f7b25a37f9398bb3bc552cec92
Merge: 7ce1e15d9a85 fbbf779989d2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Sep 21 14:26:33 2019 -0700

    Merge tag 'f2fs-for-5.4' of git://git.kernel.org/pub/scm/linux/kernel/git/jaegeuk/f2fs
    
    Pull f2fs updates from Jaegeuk Kim:
     "In this round, we introduced casefolding support in f2fs, and fixed
      various bugs in individual features such as IO alignment,
      checkpoint=disable, quota, and swapfile.
    
      Enhancement:
       - support casefolding w/ enhancement in ext4
       - support fiemap for directory
       - support FS_IO_GET|SET_FSLABEL
    
      Bug fix:
       - fix IO stuck during checkpoint=disable
       - avoid infinite GC loop
       - fix panic/overflow related to IO alignment feature
       - fix livelock in swap file
       - fix discard command leak
       - disallow dio for atomic_write"
    
    * tag 'f2fs-for-5.4' of git://git.kernel.org/pub/scm/linux/kernel/git/jaegeuk/f2fs: (51 commits)
      f2fs: add a condition to detect overflow in f2fs_ioc_gc_range()
      f2fs: fix to add missing F2FS_IO_ALIGNED() condition
      f2fs: fix to fallback to buffered IO in IO aligned mode
      f2fs: fix to handle error path correctly in f2fs_map_blocks
      f2fs: fix extent corrupotion during directIO in LFS mode
      f2fs: check all the data segments against all node ones
      f2fs: Add a small clarification to CONFIG_FS_F2FS_FS_SECURITY
      f2fs: fix inode rwsem regression
      f2fs: fix to avoid accessing uninitialized field of inode page in is_alive()
      f2fs: avoid infinite GC loop due to stale atomic files
      f2fs: Fix indefinite loop in f2fs_gc()
      f2fs: convert inline_data in prior to i_size_write
      f2fs: fix error path of f2fs_convert_inline_page()
      f2fs: add missing documents of reserve_root/resuid/resgid
      f2fs: fix flushing node pages when checkpoint is disabled
      f2fs: enhance f2fs_is_checkpoint_ready()'s readability
      f2fs: clean up __bio_alloc()'s parameter
      f2fs: fix wrong error injection path in inc_valid_block_count()
      f2fs: fix to writeout dirty inode during node flush
      f2fs: optimize case-insensitive lookups
      ...

diff --cc fs/f2fs/sysfs.c
index 0cd64f994068,f9fcca695db9..b558b64a4c9c
--- a/fs/f2fs/sysfs.c
+++ b/fs/f2fs/sysfs.c
@@@ -367,8 -381,8 +384,9 @@@ enum feat_id 
  	FEAT_QUOTA_INO,
  	FEAT_INODE_CRTIME,
  	FEAT_LOST_FOUND,
 +	FEAT_VERITY,
  	FEAT_SB_CHECKSUM,
+ 	FEAT_CASEFOLD,
  };
  
  static ssize_t f2fs_feature_show(struct f2fs_attr *a,
@@@ -385,8 -399,8 +403,9 @@@
  	case FEAT_QUOTA_INO:
  	case FEAT_INODE_CRTIME:
  	case FEAT_LOST_FOUND:
 +	case FEAT_VERITY:
  	case FEAT_SB_CHECKSUM:
+ 	case FEAT_CASEFOLD:
  		return snprintf(buf, PAGE_SIZE, "supported\n");
  	}
  	return 0;
@@@ -475,10 -490,8 +495,11 @@@ F2FS_FEATURE_RO_ATTR(flexible_inline_xa
  F2FS_FEATURE_RO_ATTR(quota_ino, FEAT_QUOTA_INO);
  F2FS_FEATURE_RO_ATTR(inode_crtime, FEAT_INODE_CRTIME);
  F2FS_FEATURE_RO_ATTR(lost_found, FEAT_LOST_FOUND);
 +#ifdef CONFIG_FS_VERITY
 +F2FS_FEATURE_RO_ATTR(verity, FEAT_VERITY);
 +#endif
  F2FS_FEATURE_RO_ATTR(sb_checksum, FEAT_SB_CHECKSUM);
+ F2FS_FEATURE_RO_ATTR(casefold, FEAT_CASEFOLD);
  
  #define ATTR_LIST(name) (&f2fs_attr_##name.attr)
  static struct attribute *f2fs_attrs[] = {
@@@ -542,10 -556,8 +564,11 @@@ static struct attribute *f2fs_feat_attr
  	ATTR_LIST(quota_ino),
  	ATTR_LIST(inode_crtime),
  	ATTR_LIST(lost_found),
 +#ifdef CONFIG_FS_VERITY
 +	ATTR_LIST(verity),
 +#endif
  	ATTR_LIST(sb_checksum),
+ 	ATTR_LIST(casefold),
  	NULL,
  };
  ATTRIBUTE_GROUPS(f2fs_feat);