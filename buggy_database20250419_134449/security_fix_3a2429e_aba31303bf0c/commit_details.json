{
  "hash": "3a2429e1faf40b2aaa481aa4b001a74d222c7e8b",
  "hash_short": "3a2429e1",
  "subject": "kbuild: change if_changed_rule for multi-line recipe",
  "body": "The 'define' ... 'endef' directive is useful to confine a series of\nshell commands into a single macro:\n\n  define foo\n          [action1]\n          [action2]\n          [action3]\n  endif\n\nEach action is executed in a separate subshell.\n\nHowever, rule_cc_o_c and rule_as_o_S in scripts/Makefile.build are\nwritten as follows (with a trailing semicolon in each cmd_*):\n\n  define rule_cc_o_c\n          [action1] ; \\\n          [action2] ; \\\n          [action3] ;\n  endef\n\nAll shell commands are concatenated with '; \\' so that it looks like\na single command from the Makefile point of view. This does not\nexploit the benefits of 'define' ... 'endef' form because a single\nshell command can be more simply written, like this:\n\n  rule_cc_o_c = \\\n          [action1] ; \\\n          [action2] ; \\\n          [action3] ;\n\nI guess the intention for the command concatenation was to let the\n'@set -e' in if_changed_rule cover all the commands.\n\nWe can improve the readability by moving '@set -e' to the 'cmd' macro.\nThe combo of $(call echo-cmd,*) $(cmd_*) in rule_cc_o_c and rule_as_o_S\nhave been replaced with $(call cmd,*). The trailing back-slashes have\nbeen removed.\n\nHere is a note about the performance: the commands in rule_cc_o_c and\nrule_as_o_S were previously executed all together in a single subshell,\nbut now each line in a separate subshell. This means Make will spawn\nextra subshells [1]. I measured the build performance for\n  x86_64_defconfig + CONFIG_MODVERSIONS + CONFIG_TRIM_UNUSED_KSYMS\nand I saw slight performance regression, but I believe code readability\nand maintainability wins.\n\n[1] Precisely, GNU Make may optimize this by executing the command\n    directly instead of forking a subshell, if no shell special\n    characters are found in the command line and omitting the subshell\n    will not change the behavior.\n\nSigned-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>",
  "full_message": "kbuild: change if_changed_rule for multi-line recipe\n\nThe 'define' ... 'endef' directive is useful to confine a series of\nshell commands into a single macro:\n\n  define foo\n          [action1]\n          [action2]\n          [action3]\n  endif\n\nEach action is executed in a separate subshell.\n\nHowever, rule_cc_o_c and rule_as_o_S in scripts/Makefile.build are\nwritten as follows (with a trailing semicolon in each cmd_*):\n\n  define rule_cc_o_c\n          [action1] ; \\\n          [action2] ; \\\n          [action3] ;\n  endef\n\nAll shell commands are concatenated with '; \\' so that it looks like\na single command from the Makefile point of view. This does not\nexploit the benefits of 'define' ... 'endef' form because a single\nshell command can be more simply written, like this:\n\n  rule_cc_o_c = \\\n          [action1] ; \\\n          [action2] ; \\\n          [action3] ;\n\nI guess the intention for the command concatenation was to let the\n'@set -e' in if_changed_rule cover all the commands.\n\nWe can improve the readability by moving '@set -e' to the 'cmd' macro.\nThe combo of $(call echo-cmd,*) $(cmd_*) in rule_cc_o_c and rule_as_o_S\nhave been replaced with $(call cmd,*). The trailing back-slashes have\nbeen removed.\n\nHere is a note about the performance: the commands in rule_cc_o_c and\nrule_as_o_S were previously executed all together in a single subshell,\nbut now each line in a separate subshell. This means Make will spawn\nextra subshells [1]. I measured the build performance for\n  x86_64_defconfig + CONFIG_MODVERSIONS + CONFIG_TRIM_UNUSED_KSYMS\nand I saw slight performance regression, but I believe code readability\nand maintainability wins.\n\n[1] Precisely, GNU Make may optimize this by executing the command\n    directly instead of forking a subshell, if no shell special\n    characters are found in the command line and omitting the subshell\n    will not change the behavior.\n\nSigned-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>",
  "author_name": "Masahiro Yamada",
  "author_email": "yamada.masahiro@socionext.com",
  "author_date": "Fri Nov 30 10:05:27 2018 +0900",
  "author_date_iso": "2018-11-30T10:05:27+09:00",
  "committer_name": "Masahiro Yamada",
  "committer_email": "yamada.masahiro@socionext.com",
  "committer_date": "Sat Dec 1 23:13:14 2018 +0900",
  "committer_date_iso": "2018-12-01T23:13:14+09:00",
  "files_changed": [
    "scripts/Kbuild.include",
    "scripts/Makefile.build"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "scripts/Kbuild.include",
      "insertions": 4,
      "deletions": 8
    },
    {
      "file": "scripts/Makefile.build",
      "insertions": 11,
      "deletions": 11
    }
  ],
  "total_insertions": 15,
  "total_deletions": 19,
  "total_changes": 34,
  "parents": [
    "bbda5ec671d3fe62faefa1cab7270aa586042a4b"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.0",
    "v5.0-rc1",
    "v5.0-rc2",
    "v5.0-rc3",
    "v5.0-rc4",
    "v5.0-rc5",
    "v5.0-rc6",
    "v5.0-rc7",
    "v5.0-rc8",
    "v5.1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "scripts/Kbuild.include",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "scripts/Makefile.build",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}