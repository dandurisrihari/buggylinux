{
  "hash": "5ceac4402f5d975e5a01c806438eb4e554771577",
  "hash_short": "5ceac440",
  "subject": "xhci: Handle TD clearing for multiple streams case",
  "body": "When multiple streams are in use, multiple TDs might be in flight when\nan endpoint is stopped. We need to issue a Set TR Dequeue Pointer for\neach, to ensure everything is reset properly and the caches cleared.\nChange the logic so that any N>1 TDs found active for different streams\nare deferred until after the first one is processed, calling\nxhci_invalidate_cancelled_tds() again from xhci_handle_cmd_set_deq() to\nqueue another command until we are done with all of them. Also change\nthe error/\"should never happen\" paths to ensure we at least clear any\naffected TDs, even if we can't issue a command to clear the hardware\ncache, and complain loudly with an xhci_warn() if this ever happens.\n\nThis problem case dates back to commit e9df17eb1408 (\"USB: xhci: Correct\nassumptions about number of rings per endpoint.\") early on in the XHCI\ndriver's life, when stream support was first added.\nIt was then identified but not fixed nor made into a warning in commit\n674f8438c121 (\"xhci: split handling halted endpoints into two steps\"),\nwhich added a FIXME comment for the problem case (without materially\nchanging the behavior as far as I can tell, though the new logic made\nthe problem more obvious).\n\nThen later, in commit 94f339147fc3 (\"xhci: Fix failure to give back some\ncached cancelled URBs.\"), it was acknowledged again.\n\n[Mathias: commit 94f339147fc3 (\"xhci: Fix failure to give back some cached\ncancelled URBs.\") was a targeted regression fix to the previously mentioned\npatch. Users reported issues with usb stuck after unmounting/disconnecting\nUAS devices. This rolled back the TD clearing of multiple streams to its\noriginal state.]\n\nApparently the commit author was aware of the problem (yet still chose\nto submit it): It was still mentioned as a FIXME, an xhci_dbg() was\nadded to log the problem condition, and the remaining issue was mentioned\nin the commit description. The choice of making the log type xhci_dbg()\nfor what is, at this point, a completely unhandled and known broken\ncondition is puzzling and unfortunate, as it guarantees that no actual\nusers would see the log in production, thereby making it nigh\nundebuggable (indeed, even if you turn on DEBUG, the message doesn't\nreally hint at there being a problem at all).\n\nIt took me *months* of random xHC crashes to finally find a reliable\nrepro and be able to do a deep dive debug session, which could all have\nbeen avoided had this unhandled, broken condition been actually reported\nwith a warning, as it should have been as a bug intentionally left in\nunfixed (never mind that it shouldn't have been left in at all).\n\n> Another fix to solve clearing the caches of all stream rings with\n> cancelled TDs is needed, but not as urgent.\n\n3 years after that statement and 14 years after the original bug was\nintroduced, I think it's finally time to fix it. And maybe next time\nlet's not leave bugs unfixed (that are actually worse than the original\nbug), and let's actually get people to review kernel commits please.\n\nFixes xHC crashes and IOMMU faults with UAS devices when handling\nerrors/faults. Easiest repro is to use `hdparm` to mark an early sector\n(e.g. 1024) on a disk as bad, then `cat /dev/sdX > /dev/null` in a loop.\nAt least in the case of JMicron controllers, the read errors end up\nhaving to cancel two TDs (for two queued requests to different streams)\nand the one that didn't get cleared properly ends up faulting the xHC\nentirely when it tries to access DMA pages that have since been unmapped,\nreferred to by the stale TDs. This normally happens quickly (after two\nor three loops). After this fix, I left the `cat` in a loop running\novernight and experienced no xHC failures, with all read errors\nrecovered properly. Repro'd and tested on an Apple M1 Mac Mini\n(dwc3 host).\n\nOn systems without an IOMMU, this bug would instead silently corrupt\nfreed memory, making this a security bug (even on systems with IOMMUs\nthis could silently corrupt memory belonging to other USB devices on the\nsame controller, so it's still a security bug). Given that the kernel\nautoprobes partition tables, I'm pretty sure a malicious USB device\npretending to be a UAS device and reporting an error with the right\ntiming could deliberately trigger a UAF and write to freed memory, with\nno user action.\n\n[Mathias: Commit message and code comment edit, original at:]\nhttps://lore.kernel.org/linux-usb/20240524-xhci-streams-v1-1-6b1f13819bea@marcan.st/\n\nFixes: e9df17eb1408 (\"USB: xhci: Correct assumptions about number of rings per endpoint.\")\nFixes: 94f339147fc3 (\"xhci: Fix failure to give back some cached cancelled URBs.\")\nFixes: 674f8438c121 (\"xhci: split handling halted endpoints into two steps\")\nCc: stable@vger.kernel.org\nCc: security@kernel.org\nReviewed-by: Neal Gompa <neal@gompa.dev>\nSigned-off-by: Hector Martin <marcan@marcan.st>\nSigned-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>\nLink: https://lore.kernel.org/r/20240611120610.3264502-5-mathias.nyman@linux.intel.com\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
  "full_message": "xhci: Handle TD clearing for multiple streams case\n\nWhen multiple streams are in use, multiple TDs might be in flight when\nan endpoint is stopped. We need to issue a Set TR Dequeue Pointer for\neach, to ensure everything is reset properly and the caches cleared.\nChange the logic so that any N>1 TDs found active for different streams\nare deferred until after the first one is processed, calling\nxhci_invalidate_cancelled_tds() again from xhci_handle_cmd_set_deq() to\nqueue another command until we are done with all of them. Also change\nthe error/\"should never happen\" paths to ensure we at least clear any\naffected TDs, even if we can't issue a command to clear the hardware\ncache, and complain loudly with an xhci_warn() if this ever happens.\n\nThis problem case dates back to commit e9df17eb1408 (\"USB: xhci: Correct\nassumptions about number of rings per endpoint.\") early on in the XHCI\ndriver's life, when stream support was first added.\nIt was then identified but not fixed nor made into a warning in commit\n674f8438c121 (\"xhci: split handling halted endpoints into two steps\"),\nwhich added a FIXME comment for the problem case (without materially\nchanging the behavior as far as I can tell, though the new logic made\nthe problem more obvious).\n\nThen later, in commit 94f339147fc3 (\"xhci: Fix failure to give back some\ncached cancelled URBs.\"), it was acknowledged again.\n\n[Mathias: commit 94f339147fc3 (\"xhci: Fix failure to give back some cached\ncancelled URBs.\") was a targeted regression fix to the previously mentioned\npatch. Users reported issues with usb stuck after unmounting/disconnecting\nUAS devices. This rolled back the TD clearing of multiple streams to its\noriginal state.]\n\nApparently the commit author was aware of the problem (yet still chose\nto submit it): It was still mentioned as a FIXME, an xhci_dbg() was\nadded to log the problem condition, and the remaining issue was mentioned\nin the commit description. The choice of making the log type xhci_dbg()\nfor what is, at this point, a completely unhandled and known broken\ncondition is puzzling and unfortunate, as it guarantees that no actual\nusers would see the log in production, thereby making it nigh\nundebuggable (indeed, even if you turn on DEBUG, the message doesn't\nreally hint at there being a problem at all).\n\nIt took me *months* of random xHC crashes to finally find a reliable\nrepro and be able to do a deep dive debug session, which could all have\nbeen avoided had this unhandled, broken condition been actually reported\nwith a warning, as it should have been as a bug intentionally left in\nunfixed (never mind that it shouldn't have been left in at all).\n\n> Another fix to solve clearing the caches of all stream rings with\n> cancelled TDs is needed, but not as urgent.\n\n3 years after that statement and 14 years after the original bug was\nintroduced, I think it's finally time to fix it. And maybe next time\nlet's not leave bugs unfixed (that are actually worse than the original\nbug), and let's actually get people to review kernel commits please.\n\nFixes xHC crashes and IOMMU faults with UAS devices when handling\nerrors/faults. Easiest repro is to use `hdparm` to mark an early sector\n(e.g. 1024) on a disk as bad, then `cat /dev/sdX > /dev/null` in a loop.\nAt least in the case of JMicron controllers, the read errors end up\nhaving to cancel two TDs (for two queued requests to different streams)\nand the one that didn't get cleared properly ends up faulting the xHC\nentirely when it tries to access DMA pages that have since been unmapped,\nreferred to by the stale TDs. This normally happens quickly (after two\nor three loops). After this fix, I left the `cat` in a loop running\novernight and experienced no xHC failures, with all read errors\nrecovered properly. Repro'd and tested on an Apple M1 Mac Mini\n(dwc3 host).\n\nOn systems without an IOMMU, this bug would instead silently corrupt\nfreed memory, making this a security bug (even on systems with IOMMUs\nthis could silently corrupt memory belonging to other USB devices on the\nsame controller, so it's still a security bug). Given that the kernel\nautoprobes partition tables, I'm pretty sure a malicious USB device\npretending to be a UAS device and reporting an error with the right\ntiming could deliberately trigger a UAF and write to freed memory, with\nno user action.\n\n[Mathias: Commit message and code comment edit, original at:]\nhttps://lore.kernel.org/linux-usb/20240524-xhci-streams-v1-1-6b1f13819bea@marcan.st/\n\nFixes: e9df17eb1408 (\"USB: xhci: Correct assumptions about number of rings per endpoint.\")\nFixes: 94f339147fc3 (\"xhci: Fix failure to give back some cached cancelled URBs.\")\nFixes: 674f8438c121 (\"xhci: split handling halted endpoints into two steps\")\nCc: stable@vger.kernel.org\nCc: security@kernel.org\nReviewed-by: Neal Gompa <neal@gompa.dev>\nSigned-off-by: Hector Martin <marcan@marcan.st>\nSigned-off-by: Mathias Nyman <mathias.nyman@linux.intel.com>\nLink: https://lore.kernel.org/r/20240611120610.3264502-5-mathias.nyman@linux.intel.com\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
  "author_name": "Hector Martin",
  "author_email": "marcan@marcan.st",
  "author_date": "Tue Jun 11 15:06:10 2024 +0300",
  "author_date_iso": "2024-06-11T15:06:10+03:00",
  "committer_name": "Greg Kroah-Hartman",
  "committer_email": "gregkh@linuxfoundation.org",
  "committer_date": "Wed Jun 12 09:43:36 2024 +0200",
  "committer_date_iso": "2024-06-12T09:43:36+02:00",
  "files_changed": [
    "drivers/usb/host/xhci-ring.c",
    "drivers/usb/host/xhci.h"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "drivers/usb/host/xhci-ring.c",
      "insertions": 43,
      "deletions": 11
    },
    {
      "file": "drivers/usb/host/xhci.h",
      "insertions": 1,
      "deletions": 0
    }
  ],
  "total_insertions": 44,
  "total_deletions": 11,
  "total_changes": 55,
  "parents": [
    "91f7a1524a92c70ffe264db8bdfa075f15bbbeb9"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "security bug"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/usb/host/xhci-ring.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/usb/host/xhci.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}