{
  "hash": "6b3ad6649a4c75504edeba242d3fd36b3096a57f",
  "hash_short": "6b3ad664",
  "subject": "ptrace: reintroduce usage of subjective credentials in ptrace_has_cap()",
  "body": "Commit 69f594a38967 (\"ptrace: do not audit capability check when outputing /proc/pid/stat\")\nintroduced the ability to opt out of audit messages for accesses to various\nproc files since they are not violations of policy.  While doing so it\nsomehow switched the check from ns_capable() to\nhas_ns_capability{_noaudit}(). That means it switched from checking the\nsubjective credentials of the task to using the objective credentials. This\nis wrong since. ptrace_has_cap() is currently only used in\nptrace_may_access() And is used to check whether the calling task (subject)\nhas the CAP_SYS_PTRACE capability in the provided user namespace to operate\non the target task (object). According to the cred.h comments this would\nmean the subjective credentials of the calling task need to be used.\nThis switches ptrace_has_cap() to use security_capable(). Because we only\ncall ptrace_has_cap() in ptrace_may_access() and in there we already have a\nstable reference to the calling task's creds under rcu_read_lock() there's\nno need to go through another series of dereferences and rcu locking done\nin ns_capable{_noaudit}().\n\nAs one example where this might be particularly problematic, Jann pointed\nout that in combination with the upcoming IORING_OP_OPENAT feature, this\nbug might allow unprivileged users to bypass the capability checks while\nasynchronously opening files like /proc/*/mem, because the capability\nchecks for this would be performed against kernel credentials.\n\nTo illustrate on the former point about this being exploitable: When\nio_uring creates a new context it records the subjective credentials of the\ncaller. Later on, when it starts to do work it creates a kernel thread and\nregisters a callback. The callback runs with kernel creds for\nktask->real_cred and ktask->cred. To prevent this from becoming a\nfull-blown 0-day io_uring will call override_cred() and override\nktask->cred with the subjective credentials of the creator of the io_uring\ninstance. With ptrace_has_cap() currently looking at ktask->real_cred this\noverride will be ineffective and the caller will be able to open arbitray\nproc files as mentioned above.\nLuckily, this is currently not exploitable but will turn into a 0-day once\nIORING_OP_OPENAT{2} land in v5.6. Fix it now!\n\nCc: Oleg Nesterov <oleg@redhat.com>\nCc: Eric Paris <eparis@redhat.com>\nCc: stable@vger.kernel.org\nReviewed-by: Kees Cook <keescook@chromium.org>\nReviewed-by: Serge Hallyn <serge@hallyn.com>\nReviewed-by: Jann Horn <jannh@google.com>\nFixes: 69f594a38967 (\"ptrace: do not audit capability check when outputing /proc/pid/stat\")\nSigned-off-by: Christian Brauner <christian.brauner@ubuntu.com>",
  "full_message": "ptrace: reintroduce usage of subjective credentials in ptrace_has_cap()\n\nCommit 69f594a38967 (\"ptrace: do not audit capability check when outputing /proc/pid/stat\")\nintroduced the ability to opt out of audit messages for accesses to various\nproc files since they are not violations of policy.  While doing so it\nsomehow switched the check from ns_capable() to\nhas_ns_capability{_noaudit}(). That means it switched from checking the\nsubjective credentials of the task to using the objective credentials. This\nis wrong since. ptrace_has_cap() is currently only used in\nptrace_may_access() And is used to check whether the calling task (subject)\nhas the CAP_SYS_PTRACE capability in the provided user namespace to operate\non the target task (object). According to the cred.h comments this would\nmean the subjective credentials of the calling task need to be used.\nThis switches ptrace_has_cap() to use security_capable(). Because we only\ncall ptrace_has_cap() in ptrace_may_access() and in there we already have a\nstable reference to the calling task's creds under rcu_read_lock() there's\nno need to go through another series of dereferences and rcu locking done\nin ns_capable{_noaudit}().\n\nAs one example where this might be particularly problematic, Jann pointed\nout that in combination with the upcoming IORING_OP_OPENAT feature, this\nbug might allow unprivileged users to bypass the capability checks while\nasynchronously opening files like /proc/*/mem, because the capability\nchecks for this would be performed against kernel credentials.\n\nTo illustrate on the former point about this being exploitable: When\nio_uring creates a new context it records the subjective credentials of the\ncaller. Later on, when it starts to do work it creates a kernel thread and\nregisters a callback. The callback runs with kernel creds for\nktask->real_cred and ktask->cred. To prevent this from becoming a\nfull-blown 0-day io_uring will call override_cred() and override\nktask->cred with the subjective credentials of the creator of the io_uring\ninstance. With ptrace_has_cap() currently looking at ktask->real_cred this\noverride will be ineffective and the caller will be able to open arbitray\nproc files as mentioned above.\nLuckily, this is currently not exploitable but will turn into a 0-day once\nIORING_OP_OPENAT{2} land in v5.6. Fix it now!\n\nCc: Oleg Nesterov <oleg@redhat.com>\nCc: Eric Paris <eparis@redhat.com>\nCc: stable@vger.kernel.org\nReviewed-by: Kees Cook <keescook@chromium.org>\nReviewed-by: Serge Hallyn <serge@hallyn.com>\nReviewed-by: Jann Horn <jannh@google.com>\nFixes: 69f594a38967 (\"ptrace: do not audit capability check when outputing /proc/pid/stat\")\nSigned-off-by: Christian Brauner <christian.brauner@ubuntu.com>",
  "author_name": "Christian Brauner",
  "author_email": "christian.brauner@ubuntu.com",
  "author_date": "Wed Jan 15 14:42:34 2020 +0100",
  "author_date_iso": "2020-01-15T14:42:34+01:00",
  "committer_name": "Christian Brauner",
  "committer_email": "christian.brauner@ubuntu.com",
  "committer_date": "Sat Jan 18 13:51:39 2020 +0100",
  "committer_date_iso": "2020-01-18T13:51:39+01:00",
  "files_changed": [
    "kernel/ptrace.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "kernel/ptrace.c",
      "insertions": 10,
      "deletions": 5
    }
  ],
  "total_insertions": 10,
  "total_deletions": 5,
  "total_changes": 15,
  "parents": [
    "b3a987b0264d3ddbb24293ebff10eddfc472f653"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.5",
    "v5.5-rc7",
    "v5.6",
    "v5.6-rc1",
    "v5.6-rc2",
    "v5.6-rc3",
    "v5.6-rc4",
    "v5.6-rc5",
    "v5.6-rc6",
    "v5.6-rc7"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "bypass"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "kernel/ptrace.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}