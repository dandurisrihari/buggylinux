commit 1e562deacecca1f1bec7d23da526904a1e87525e
Author: Lukas Wunner <lukas@wunner.de>
Date:   Tue Sep 10 16:30:16 2024 +0200

    crypto: rsassa-pkcs1 - Migrate to sig_alg backend
    
    A sig_alg backend has just been introduced with the intent of moving all
    asymmetric sign/verify algorithms to it one by one.
    
    Migrate the sign/verify operations from rsa-pkcs1pad.c to a separate
    rsassa-pkcs1.c which uses the new backend.
    
    Consequently there are now two templates which build on the "rsa"
    akcipher_alg:
    
    * The existing "pkcs1pad" template, which is instantiated as an
      akcipher_instance and retains the encrypt/decrypt operations of
      RSAES-PKCS1-v1_5 (RFC 8017 sec 7.2).
    
    * The new "pkcs1" template, which is instantiated as a sig_instance
      and contains the sign/verify operations of RSASSA-PKCS1-v1_5
      (RFC 8017 sec 8.2).
    
    In a separate step, rsa-pkcs1pad.c could optionally be renamed to
    rsaes-pkcs1.c for clarity.  Additional "oaep" and "pss" templates
    could be added for RSAES-OAEP and RSASSA-PSS.
    
    Note that it's currently allowed to allocate a "pkcs1pad(rsa)" transform
    without specifying a hash algorithm.  That makes sense if the transform
    is only used for encrypt/decrypt and continues to be supported.  But for
    sign/verify, such transforms previously did not insert the Full Hash
    Prefix into the padding.  The resulting message encoding was incompliant
    with EMSA-PKCS1-v1_5 (RFC 8017 sec 9.2) and therefore nonsensical.
    
    From here on in, it is no longer allowed to allocate a transform without
    specifying a hash algorithm if the transform is used for sign/verify
    operations.  This simplifies the code because the insertion of the Full
    Hash Prefix is no longer optional, so various "if (digest_info)" clauses
    can be removed.
    
    There has been a previous attempt to forbid transform allocation without
    specifying a hash algorithm, namely by commit c0d20d22e0ad ("crypto:
    rsa-pkcs1pad - Require hash to be present").  It had to be rolled back
    with commit b3a8c8a5ebb5 ("crypto: rsa-pkcs1pad: Allow hash to be
    optional [ver #2]"), presumably because it broke allocation of a
    transform which was solely used for encrypt/decrypt, not sign/verify.
    Avoid such breakage by allowing transform allocation for encrypt/decrypt
    with and without specifying a hash algorithm (and simply ignoring the
    hash algorithm in the former case).
    
    So again, specifying a hash algorithm is now mandatory for sign/verify,
    but optional and ignored for encrypt/decrypt.
    
    The new sig_alg API uses kernel buffers instead of sglists, which
    avoids the overhead of copying signature and digest from sglists back
    into kernel buffers.  rsassa-pkcs1.c is thus simplified quite a bit.
    
    sig_alg is always synchronous, whereas the underlying "rsa" akcipher_alg
    may be asynchronous.  So await the result of the akcipher_alg, similar
    to crypto_akcipher_sync_{en,de}crypt().
    
    As part of the migration, rename "rsa_digest_info" to "hash_prefix" to
    adhere to the spec language in RFC 9580.  Otherwise keep the code
    unmodified wherever possible to ease reviewing and bisecting.  Leave
    several simplification and hardening opportunities to separate commits.
    
    rsassa-pkcs1.c uses modern __free() syntax for allocation of buffers
    which need to be freed by kfree_sensitive(), hence a DEFINE_FREE()
    clause for kfree_sensitive() is introduced herein as a byproduct.
    
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

diff --git a/include/crypto/internal/rsa.h b/include/crypto/internal/rsa.h
index 754f687134df..071a1951b992 100644
--- a/include/crypto/internal/rsa.h
+++ b/include/crypto/internal/rsa.h
@@ -82,4 +82,5 @@ static inline int rsa_set_key(struct crypto_akcipher *child,
 }
 
 extern struct crypto_template rsa_pkcs1pad_tmpl;
+extern struct crypto_template rsassa_pkcs1_tmpl;
 #endif