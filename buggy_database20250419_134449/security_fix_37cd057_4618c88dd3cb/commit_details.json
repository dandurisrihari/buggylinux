{
  "hash": "37cd0575b8510159992d279c530c05f872990b02",
  "hash_short": "37cd0575",
  "subject": "userfaultfd: add UFFD_USER_MODE_ONLY",
  "body": "Patch series \"Control over userfaultfd kernel-fault handling\", v6.\n\nThis patch series is split from [1].  The other series enables SELinux\nsupport for userfaultfd file descriptors so that its creation and movement\ncan be controlled.\n\nIt has been demonstrated on various occasions that suspending kernel code\nexecution for an arbitrary amount of time at any access to userspace\nmemory (copy_from_user()/copy_to_user()/...) can be exploited to change\nthe intended behavior of the kernel.  For instance, handling page faults\nin kernel-mode using userfaultfd has been exploited in [2, 3].  Likewise,\nFUSE, which is similar to userfaultfd in this respect, has been exploited\nin [4, 5] for similar outcome.\n\nThis small patch series adds a new flag to userfaultfd(2) that allows\ncallers to give up the ability to handle kernel-mode faults with the\nresulting UFFD file object.  It then adds a 'user-mode only' option to the\nunprivileged_userfaultfd sysctl knob to require unprivileged callers to\nuse this new flag.\n\nThe purpose of this new interface is to decrease the chance of an\nunprivileged userfaultfd user taking advantage of userfaultfd to enhance\nsecurity vulnerabilities by lengthening the race window in kernel code.\n\n[1] https://lore.kernel.org/lkml/20200211225547.235083-1-dancol@google.com/\n[2] https://duasynt.com/blog/linux-kernel-heap-spray\n[3] https://duasynt.com/blog/cve-2016-6187-heap-off-by-one-exploit\n[4] https://googleprojectzero.blogspot.com/2016/06/exploiting-recursion-in-linux-kernel_20.html\n[5] https://bugs.chromium.org/p/project-zero/issues/detail?id=808\n\nThis patch (of 2):\n\nuserfaultfd handles page faults from both user and kernel code.  Add a new\nUFFD_USER_MODE_ONLY flag for userfaultfd(2) that makes the resulting\nuserfaultfd object refuse to handle faults from kernel mode, treating\nthese faults as if SIGBUS were always raised, causing the kernel code to\nfail with EFAULT.\n\nA future patch adds a knob allowing administrators to give some processes\nthe ability to create userfaultfd file objects only if they pass\nUFFD_USER_MODE_ONLY, reducing the likelihood that these processes will\nexploit userfaultfd's ability to delay kernel page faults to open timing\nwindows for future exploits.\n\nLink: https://lkml.kernel.org/r/20201120030411.2690816-1-lokeshgidra@google.com\nLink: https://lkml.kernel.org/r/20201120030411.2690816-2-lokeshgidra@google.com\nSigned-off-by: Daniel Colascione <dancol@google.com>\nSigned-off-by: Lokesh Gidra <lokeshgidra@google.com>\nReviewed-by: Andrea Arcangeli <aarcange@redhat.com>\nCc: Alexander Viro <viro@zeniv.linux.org.uk>\nCc: <calin@google.com>\nCc: Daniel Colascione <dancol@dancol.org>\nCc: Eric Biggers <ebiggers@kernel.org>\nCc: Iurii Zaikin <yzaikin@google.com>\nCc: Jeff Vander Stoep <jeffv@google.com>\nCc: Jerome Glisse <jglisse@redhat.com>\nCc: \"Joel Fernandes (Google)\" <joel@joelfernandes.org>\nCc: Johannes Weiner <hannes@cmpxchg.org>\nCc: Jonathan Corbet <corbet@lwn.net>\nCc: Kalesh Singh <kaleshsingh@google.com>\nCc: Kees Cook <keescook@chromium.org>\nCc: Luis Chamberlain <mcgrof@kernel.org>\nCc: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>\nCc: Mel Gorman <mgorman@techsingularity.net>\nCc: Mike Rapoport <rppt@linux.vnet.ibm.com>\nCc: Nitin Gupta <nigupta@nvidia.com>\nCc: Peter Xu <peterx@redhat.com>\nCc: Sebastian Andrzej Siewior <bigeasy@linutronix.de>\nCc: Shaohua Li <shli@fb.com>\nCc: Stephen Smalley <stephen.smalley.work@gmail.com>\nCc: Suren Baghdasaryan <surenb@google.com>\nCc: Vlastimil Babka <vbabka@suse.cz>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "full_message": "userfaultfd: add UFFD_USER_MODE_ONLY\n\nPatch series \"Control over userfaultfd kernel-fault handling\", v6.\n\nThis patch series is split from [1].  The other series enables SELinux\nsupport for userfaultfd file descriptors so that its creation and movement\ncan be controlled.\n\nIt has been demonstrated on various occasions that suspending kernel code\nexecution for an arbitrary amount of time at any access to userspace\nmemory (copy_from_user()/copy_to_user()/...) can be exploited to change\nthe intended behavior of the kernel.  For instance, handling page faults\nin kernel-mode using userfaultfd has been exploited in [2, 3].  Likewise,\nFUSE, which is similar to userfaultfd in this respect, has been exploited\nin [4, 5] for similar outcome.\n\nThis small patch series adds a new flag to userfaultfd(2) that allows\ncallers to give up the ability to handle kernel-mode faults with the\nresulting UFFD file object.  It then adds a 'user-mode only' option to the\nunprivileged_userfaultfd sysctl knob to require unprivileged callers to\nuse this new flag.\n\nThe purpose of this new interface is to decrease the chance of an\nunprivileged userfaultfd user taking advantage of userfaultfd to enhance\nsecurity vulnerabilities by lengthening the race window in kernel code.\n\n[1] https://lore.kernel.org/lkml/20200211225547.235083-1-dancol@google.com/\n[2] https://duasynt.com/blog/linux-kernel-heap-spray\n[3] https://duasynt.com/blog/cve-2016-6187-heap-off-by-one-exploit\n[4] https://googleprojectzero.blogspot.com/2016/06/exploiting-recursion-in-linux-kernel_20.html\n[5] https://bugs.chromium.org/p/project-zero/issues/detail?id=808\n\nThis patch (of 2):\n\nuserfaultfd handles page faults from both user and kernel code.  Add a new\nUFFD_USER_MODE_ONLY flag for userfaultfd(2) that makes the resulting\nuserfaultfd object refuse to handle faults from kernel mode, treating\nthese faults as if SIGBUS were always raised, causing the kernel code to\nfail with EFAULT.\n\nA future patch adds a knob allowing administrators to give some processes\nthe ability to create userfaultfd file objects only if they pass\nUFFD_USER_MODE_ONLY, reducing the likelihood that these processes will\nexploit userfaultfd's ability to delay kernel page faults to open timing\nwindows for future exploits.\n\nLink: https://lkml.kernel.org/r/20201120030411.2690816-1-lokeshgidra@google.com\nLink: https://lkml.kernel.org/r/20201120030411.2690816-2-lokeshgidra@google.com\nSigned-off-by: Daniel Colascione <dancol@google.com>\nSigned-off-by: Lokesh Gidra <lokeshgidra@google.com>\nReviewed-by: Andrea Arcangeli <aarcange@redhat.com>\nCc: Alexander Viro <viro@zeniv.linux.org.uk>\nCc: <calin@google.com>\nCc: Daniel Colascione <dancol@dancol.org>\nCc: Eric Biggers <ebiggers@kernel.org>\nCc: Iurii Zaikin <yzaikin@google.com>\nCc: Jeff Vander Stoep <jeffv@google.com>\nCc: Jerome Glisse <jglisse@redhat.com>\nCc: \"Joel Fernandes (Google)\" <joel@joelfernandes.org>\nCc: Johannes Weiner <hannes@cmpxchg.org>\nCc: Jonathan Corbet <corbet@lwn.net>\nCc: Kalesh Singh <kaleshsingh@google.com>\nCc: Kees Cook <keescook@chromium.org>\nCc: Luis Chamberlain <mcgrof@kernel.org>\nCc: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>\nCc: Mel Gorman <mgorman@techsingularity.net>\nCc: Mike Rapoport <rppt@linux.vnet.ibm.com>\nCc: Nitin Gupta <nigupta@nvidia.com>\nCc: Peter Xu <peterx@redhat.com>\nCc: Sebastian Andrzej Siewior <bigeasy@linutronix.de>\nCc: Shaohua Li <shli@fb.com>\nCc: Stephen Smalley <stephen.smalley.work@gmail.com>\nCc: Suren Baghdasaryan <surenb@google.com>\nCc: Vlastimil Babka <vbabka@suse.cz>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "author_name": "Lokesh Gidra",
  "author_email": "lokeshgidra@google.com",
  "author_date": "Mon Dec 14 19:13:49 2020 -0800",
  "author_date_iso": "2020-12-14T19:13:49-08:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Tue Dec 15 12:13:46 2020 -0800",
  "committer_date_iso": "2020-12-15T12:13:46-08:00",
  "files_changed": [
    "fs/userfaultfd.c",
    "include/uapi/linux/userfaultfd.h"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "fs/userfaultfd.c",
      "insertions": 9,
      "deletions": 1
    },
    {
      "file": "include/uapi/linux/userfaultfd.h",
      "insertions": 9,
      "deletions": 0
    }
  ],
  "total_insertions": 18,
  "total_deletions": 1,
  "total_changes": 19,
  "parents": [
    "f289041ed4cf9a3f6e8a32068fef9ffb2acc5662"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/userfaultfd.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/uapi/linux/userfaultfd.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}