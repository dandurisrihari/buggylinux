commit 12079a59ce52e72a342c49cfacf0281213fd6f32
Author: Breno Leitao <leitao@debian.org>
Date:   Thu Nov 7 08:11:44 2024 -0800

    net: Implement fault injection forcing skb reallocation
    
    Introduce a fault injection mechanism to force skb reallocation. The
    primary goal is to catch bugs related to pointer invalidation after
    potential skb reallocation.
    
    The fault injection mechanism aims to identify scenarios where callers
    retain pointers to various headers in the skb but fail to reload these
    pointers after calling a function that may reallocate the data. This
    type of bug can lead to memory corruption or crashes if the old,
    now-invalid pointers are used.
    
    By forcing reallocation through fault injection, we can stress-test code
    paths and ensure proper pointer management after potential skb
    reallocations.
    
    Add a hook for fault injection in the following functions:
    
     * pskb_trim_rcsum()
     * pskb_may_pull_reason()
     * pskb_trim()
    
    As the other fault injection mechanism, protect it under a debug Kconfig
    called CONFIG_FAIL_SKB_REALLOC.
    
    This patch was *heavily* inspired by Jakub's proposal from:
    https://lore.kernel.org/all/20240719174140.47a868e6@kernel.org/
    
    CC: Akinobu Mita <akinobu.mita@gmail.com>
    Suggested-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Breno Leitao <leitao@debian.org>
    Reviewed-by: Akinobu Mita <akinobu.mita@gmail.com>
    Acked-by: Paolo Abeni <pabeni@redhat.com>
    Acked-by: Guillaume Nault <gnault@redhat.com>
    Link: https://patch.msgid.link/20241107-fault_v6-v6-1-1b82cb6ecacd@debian.org
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>

diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index 60535c706851..58009fa66102 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -2682,6 +2682,12 @@ static inline void skb_assert_len(struct sk_buff *skb)
 #endif /* CONFIG_DEBUG_NET */
 }
 
+#if defined(CONFIG_FAIL_SKB_REALLOC)
+void skb_might_realloc(struct sk_buff *skb);
+#else
+static inline void skb_might_realloc(struct sk_buff *skb) {}
+#endif
+
 /*
  *	Add data to an sk_buff
  */
@@ -2782,6 +2788,7 @@ static inline enum skb_drop_reason
 pskb_may_pull_reason(struct sk_buff *skb, unsigned int len)
 {
 	DEBUG_NET_WARN_ON_ONCE(len > INT_MAX);
+	skb_might_realloc(skb);
 
 	if (likely(len <= skb_headlen(skb)))
 		return SKB_NOT_DROPPED_YET;
@@ -3240,6 +3247,7 @@ static inline int __pskb_trim(struct sk_buff *skb, unsigned int len)
 
 static inline int pskb_trim(struct sk_buff *skb, unsigned int len)
 {
+	skb_might_realloc(skb);
 	return (len < skb->len) ? __pskb_trim(skb, len) : 0;
 }
 
@@ -3994,6 +4002,7 @@ int pskb_trim_rcsum_slow(struct sk_buff *skb, unsigned int len);
 
 static inline int pskb_trim_rcsum(struct sk_buff *skb, unsigned int len)
 {
+	skb_might_realloc(skb);
 	if (likely(len >= skb->len))
 		return 0;
 	return pskb_trim_rcsum_slow(skb, len);