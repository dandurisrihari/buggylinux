{
  "hash": "87797fad6cce28ec9be3c13f031776ff4f104cfc",
  "hash_short": "87797fad",
  "subject": "xen/events: replace evtchn_rwlock with RCU",
  "body": "In unprivileged Xen guests event handling can cause a deadlock with\nXen console handling. The evtchn_rwlock and the hvc_lock are taken in\nopposite sequence in __hvc_poll() and in Xen console IRQ handling.\nNormally this is no problem, as the evtchn_rwlock is taken as a reader\nin both paths, but as soon as an event channel is being closed, the\nlock will be taken as a writer, which will cause read_lock() to block:\n\nCPU0                     CPU1                CPU2\n(IRQ handling)           (__hvc_poll())      (closing event channel)\n\nread_lock(evtchn_rwlock)\n                         spin_lock(hvc_lock)\n                                             write_lock(evtchn_rwlock)\n                                                 [blocks]\nspin_lock(hvc_lock)\n    [blocks]\n                        read_lock(evtchn_rwlock)\n                            [blocks due to writer waiting,\n                             and not in_interrupt()]\n\nThis issue can be avoided by replacing evtchn_rwlock with RCU in\nxen_free_irq(). Note that RCU is used only to delay freeing of the\nirq_info memory. There is no RCU based dereferencing or replacement of\npointers involved.\n\nIn order to avoid potential races between removing the irq_info\nreference and handling of interrupts, set the irq_info pointer to NULL\nonly when freeing its memory. The IRQ itself must be freed at that\ntime, too, as otherwise the same IRQ number could be allocated again\nbefore handling of the old instance would have been finished.\n\nThis is XSA-441 / CVE-2023-34324.\n\nFixes: 54c9de89895e (\"xen/events: add a new \"late EOI\" evtchn framework\")\nReported-by: Marek Marczykowski-G\u00f3recki <marmarek@invisiblethingslab.com>\nSigned-off-by: Juergen Gross <jgross@suse.com>\nReviewed-by: Julien Grall <jgrall@amazon.com>\nSigned-off-by: Juergen Gross <jgross@suse.com>",
  "full_message": "xen/events: replace evtchn_rwlock with RCU\n\nIn unprivileged Xen guests event handling can cause a deadlock with\nXen console handling. The evtchn_rwlock and the hvc_lock are taken in\nopposite sequence in __hvc_poll() and in Xen console IRQ handling.\nNormally this is no problem, as the evtchn_rwlock is taken as a reader\nin both paths, but as soon as an event channel is being closed, the\nlock will be taken as a writer, which will cause read_lock() to block:\n\nCPU0                     CPU1                CPU2\n(IRQ handling)           (__hvc_poll())      (closing event channel)\n\nread_lock(evtchn_rwlock)\n                         spin_lock(hvc_lock)\n                                             write_lock(evtchn_rwlock)\n                                                 [blocks]\nspin_lock(hvc_lock)\n    [blocks]\n                        read_lock(evtchn_rwlock)\n                            [blocks due to writer waiting,\n                             and not in_interrupt()]\n\nThis issue can be avoided by replacing evtchn_rwlock with RCU in\nxen_free_irq(). Note that RCU is used only to delay freeing of the\nirq_info memory. There is no RCU based dereferencing or replacement of\npointers involved.\n\nIn order to avoid potential races between removing the irq_info\nreference and handling of interrupts, set the irq_info pointer to NULL\nonly when freeing its memory. The IRQ itself must be freed at that\ntime, too, as otherwise the same IRQ number could be allocated again\nbefore handling of the old instance would have been finished.\n\nThis is XSA-441 / CVE-2023-34324.\n\nFixes: 54c9de89895e (\"xen/events: add a new \"late EOI\" evtchn framework\")\nReported-by: Marek Marczykowski-G\u00f3recki <marmarek@invisiblethingslab.com>\nSigned-off-by: Juergen Gross <jgross@suse.com>\nReviewed-by: Julien Grall <jgrall@amazon.com>\nSigned-off-by: Juergen Gross <jgross@suse.com>",
  "author_name": "Juergen Gross",
  "author_email": "jgross@suse.com",
  "author_date": "Mon Aug 28 08:09:47 2023 +0200",
  "author_date_iso": "2023-08-28T08:09:47+02:00",
  "committer_name": "Juergen Gross",
  "committer_email": "jgross@suse.com",
  "committer_date": "Mon Oct 9 09:21:16 2023 +0200",
  "committer_date_iso": "2023-10-09T09:21:16+02:00",
  "files_changed": [
    "drivers/xen/events/events_base.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "drivers/xen/events/events_base.c",
      "insertions": 46,
      "deletions": 41
    }
  ],
  "total_insertions": 46,
  "total_deletions": 41,
  "total_changes": 87,
  "parents": [
    "94f6f0550c625fab1f373bb86a6669b45e9748b3"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2023-34324"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "drivers/xen/events/events_base.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}