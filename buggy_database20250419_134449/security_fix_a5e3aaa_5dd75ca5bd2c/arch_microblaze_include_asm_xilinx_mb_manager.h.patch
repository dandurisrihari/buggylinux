commit a5e3aaa654c15760afdfb85d0b6fd825ce068efc
Author: Appana Durga Kedareswara rao <appana.durga.rao@xilinx.com>
Date:   Mon Jun 27 12:10:22 2022 +0530

    microblaze: Add xmb_manager_register function
    
    Triple Modular Redundancy (TMR) Microblaze solution provides soft error
    injection, detection, correction and recovery for Microblaze cores in the
    system. The Xilinx/AMD Triple Modular Redundancy (TMR) solution in Vivado
    provides all the necessary building blocks to implement a redundant
    triplicated MicroBlaze subsystem. This processing subsystem is
    fault-tolerant and continues to operate nominally after encountering an
    error. Together with the capability to detect and recover from errors,
    the implementation ensures the reliability of the entire subsystem.
    
    When the break vector gets asserted because of error injection,
    the break signal must be blocked before exiting from the break handler,
    This commit adds support for xmb_manager_register api which updates the
    TMR manager address and control register and error count and reset callback
    function arguments, which will be used by the break handler to block the
    break and call the error count callback function and reset callback
    function.
    
    Signed-off-by: Appana Durga Kedareswara rao <appana.durga.rao@xilinx.com>
    Link: https://lore.kernel.org/r/20220627064024.771037-2-appana.durga.rao@xilinx.com
    Signed-off-by: Michal Simek <michal.simek@amd.com>

diff --git a/arch/microblaze/include/asm/xilinx_mb_manager.h b/arch/microblaze/include/asm/xilinx_mb_manager.h
new file mode 100644
index 000000000000..392c3aa278dc
--- /dev/null
+++ b/arch/microblaze/include/asm/xilinx_mb_manager.h
@@ -0,0 +1,21 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (C) 2022 Xilinx, Inc.
+ */
+#ifndef _XILINX_MB_MANAGER_H
+#define _XILINX_MB_MANAGER_H
+
+#include <linux/of_address.h>
+
+/*
+ * When the break vector gets asserted because of error injection, the break
+ * signal must be blocked before exiting from the break handler, Below api
+ * updates the manager address and control register and error counter callback
+ * arguments, which will be used by the break handler to block the break and
+ * call the callback function.
+ */
+void xmb_manager_register(uintptr_t phys_baseaddr, u32 cr_val,
+			  void (*callback)(void *data),
+			  void *priv, void (*reset_callback)(void *data));
+
+#endif /* _XILINX_MB_MANAGER_H */