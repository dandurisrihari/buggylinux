{
  "hash": "33d2f09fcb357fd1861c4959d1d3505492bf91f8",
  "hash_short": "33d2f09f",
  "subject": "dm crypt: introduce new format of cipher with \"capi:\" prefix",
  "body": "For the new authenticated encryption we have to support generic composed\nmodes (combination of encryption algorithm and authenticator) because\nthis is how the kernel crypto API accesses such algorithms.\n\nTo simplify the interface, we accept an algorithm directly in crypto API\nformat.  The new format is recognised by the \"capi:\" prefix.  The\ndmcrypt internal IV specification is the same as for the old format.\n\nThe crypto API cipher specifications format is:\n     capi:cipher_api_spec-ivmode[:ivopts]\nExamples:\n     capi:cbc(aes)-essiv:sha256 (equivalent to old aes-cbc-essiv:sha256)\n     capi:xts(aes)-plain64      (equivalent to old aes-xts-plain64)\nExamples of authenticated modes:\n     capi:gcm(aes)-random\n     capi:authenc(hmac(sha256),xts(aes))-random\n     capi:rfc7539(chacha20,poly1305)-random\n\nAuthenticated modes can only be configured using the new cipher format.\nNote that this format allows user to specify arbitrary combinations that\ncan be insecure. (Policy decision is done in cryptsetup userspace.)\n\nAuthenticated encryption algorithms can be of two types, either native\nmodes (like GCM) that performs both encryption and authentication\ninternally, or composed modes where user can compose AEAD with separate\nspecification of encryption algorithm and authenticator.\n\nFor composed mode with HMAC (length-preserving encryption mode like an\nXTS and HMAC as an authenticator) we have to calculate HMAC digest size\n(the separate authentication key is the same size as the HMAC digest).\nIntroduce crypt_ctr_auth_cipher() to parse the crypto API string to get\nHMAC algorithm and retrieve digest size from it.\n\nAlso, for HMAC composed mode we need to parse the crypto API string to\nget the cipher mode nested in the specification.  For native AEAD mode\n(like GCM), we can use crypto_tfm_alg_name() API to get the cipher\nspecification.\n\nBecause the HMAC composed mode is not processed the same as the native\nAEAD mode, the CRYPT_MODE_INTEGRITY_HMAC flag is no longer needed and\n\"hmac\" specification for the table integrity argument is removed.\n\nSigned-off-by: Milan Broz <gmazyland@gmail.com>\nSigned-off-by: Mike Snitzer <snitzer@redhat.com>",
  "full_message": "dm crypt: introduce new format of cipher with \"capi:\" prefix\n\nFor the new authenticated encryption we have to support generic composed\nmodes (combination of encryption algorithm and authenticator) because\nthis is how the kernel crypto API accesses such algorithms.\n\nTo simplify the interface, we accept an algorithm directly in crypto API\nformat.  The new format is recognised by the \"capi:\" prefix.  The\ndmcrypt internal IV specification is the same as for the old format.\n\nThe crypto API cipher specifications format is:\n     capi:cipher_api_spec-ivmode[:ivopts]\nExamples:\n     capi:cbc(aes)-essiv:sha256 (equivalent to old aes-cbc-essiv:sha256)\n     capi:xts(aes)-plain64      (equivalent to old aes-xts-plain64)\nExamples of authenticated modes:\n     capi:gcm(aes)-random\n     capi:authenc(hmac(sha256),xts(aes))-random\n     capi:rfc7539(chacha20,poly1305)-random\n\nAuthenticated modes can only be configured using the new cipher format.\nNote that this format allows user to specify arbitrary combinations that\ncan be insecure. (Policy decision is done in cryptsetup userspace.)\n\nAuthenticated encryption algorithms can be of two types, either native\nmodes (like GCM) that performs both encryption and authentication\ninternally, or composed modes where user can compose AEAD with separate\nspecification of encryption algorithm and authenticator.\n\nFor composed mode with HMAC (length-preserving encryption mode like an\nXTS and HMAC as an authenticator) we have to calculate HMAC digest size\n(the separate authentication key is the same size as the HMAC digest).\nIntroduce crypt_ctr_auth_cipher() to parse the crypto API string to get\nHMAC algorithm and retrieve digest size from it.\n\nAlso, for HMAC composed mode we need to parse the crypto API string to\nget the cipher mode nested in the specification.  For native AEAD mode\n(like GCM), we can use crypto_tfm_alg_name() API to get the cipher\nspecification.\n\nBecause the HMAC composed mode is not processed the same as the native\nAEAD mode, the CRYPT_MODE_INTEGRITY_HMAC flag is no longer needed and\n\"hmac\" specification for the table integrity argument is removed.\n\nSigned-off-by: Milan Broz <gmazyland@gmail.com>\nSigned-off-by: Mike Snitzer <snitzer@redhat.com>",
  "author_name": "Milan Broz",
  "author_email": "gmazyland@gmail.com",
  "author_date": "Thu Mar 16 15:39:40 2017 +0100",
  "author_date_iso": "2017-03-16T15:39:40+01:00",
  "committer_name": "Mike Snitzer",
  "committer_email": "snitzer@redhat.com",
  "committer_date": "Fri Mar 24 15:54:20 2017 -0400",
  "committer_date_iso": "2017-03-24T15:54:20-04:00",
  "files_changed": [
    "Documentation/device-mapper/dm-crypt.txt",
    "drivers/md/dm-crypt.c"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "Documentation/device-mapper/dm-crypt.txt",
      "insertions": 30,
      "deletions": 17
    },
    {
      "file": "drivers/md/dm-crypt.c",
      "insertions": 193,
      "deletions": 82
    }
  ],
  "total_insertions": 223,
  "total_deletions": 99,
  "total_changes": 322,
  "parents": [
    "e889f97a3e35a4e8f48ebc04c27031ca8805aa7e"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.12",
    "v4.12-rc1",
    "v4.12-rc2",
    "v4.12-rc3",
    "v4.12-rc4",
    "v4.12-rc5",
    "v4.12-rc6",
    "v4.12-rc7",
    "v4.13",
    "v4.13-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "Documentation/device-mapper/dm-crypt.txt",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/md/dm-crypt.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}