{
  "hash": "f938b29d277a506dd6a22007b9417b2eef6e331d",
  "hash_short": "f938b29d",
  "subject": "Merge tag 'scmi-updates-6.3' of git://git.kernel.org/pub/scm/linux/kernel/git/sudeep.holla/linux into soc/drivers",
  "body": "Arm SCMI updates for v6.3\n\nThe main addition is a unified userspace interface for SCMI irrespective\nof the underlying transport and along with some changed to refactor the\nSCMI stack probing sequence.\n\n1. SCMI unified userspace interface\n\n   This is to have a unified way of testing an SCMI platform firmware\n   implementation for compliance, fuzzing etc., from the perspective of\n   the non-secure OSPM irrespective of the underlying transport supporting\n   SCMI. It is just for testing/development and not a feature intended fo\n   use in production.\n\n   Currently an SCMI Compliance Suite[1] can only work by injecting SCMI\n   messages using the mailbox test driver only which makes it transport\n   specific and can't be used with any other transport like virtio,\n   smc/hvc, optee, etc. Also the shared memory can be transport specific\n   and it is better to even abstract/hide those details while providing\n   the userspace access. So in order to scale with any transport, we need\n   a unified interface for the same.\n\n   In order to achieve that, SCMI \"raw mode support\" is being added through\n   debugfs which is more configurable as well. A userspace application\n   can inject bare SCMI binary messages into the SCMI core stack; such\n   messages will be routed by the SCMI regular kernel stack to the backend\n   platform firmware using the configured transport transparently. This\n   eliminates the to know about the specific underlying transport\n   internals that will be taken care of by the SCMI core stack itself.\n   Further no additional changes needed in the device tree like in the\n   mailbox-test driver.\n\n[1] https://gitlab.arm.com/tests/scmi-tests\n\n2. Refactoring of the SCMI stack probing sequence\n\n   On some platforms, SCMI transport can be provide by OPTEE/TEE which\n   introduces certain dependency in the probe ordering. In order to address\n   the same, the SCMI bus is split into its own module which continues to\n   be initialized at subsys_initcall, while the SCMI core stack, including\n   its various transport backends (like optee, mailbox, virtio, smc), is\n   now moved into a separate module at module_init level.\n\n   This allows the other possibly dependent subsystems to register and/or\n   access SCMI bus well before the core SCMI stack and its dependent\n   transport backends.\n\n* tag 'scmi-updates-6.3' of git://git.kernel.org/pub/scm/linux/kernel/git/sudeep.holla/linux: (31 commits)\n  firmware: arm_scmi: Clarify raw per-channel ABI documentation\n  firmware: arm_scmi: Add per-channel raw injection support\n  firmware: arm_scmi: Add the raw mode co-existence support\n  firmware: arm_scmi: Call raw mode hooks from the core stack\n  firmware: arm_scmi: Reject SCMI drivers when configured in raw mode\n  firmware: arm_scmi: Add debugfs ABI documentation for raw mode\n  firmware: arm_scmi: Add core raw transmission support\n  firmware: arm_scmi: Add debugfs ABI documentation for common entries\n  firmware: arm_scmi: Populate a common SCMI debugfs root\n  debugfs: Export debugfs_create_str symbol\n  include: trace: Add platform and channel instance references\n  firmware: arm_scmi: Add internal platform/channel identifiers\n  firmware: arm_scmi: Move errors defs and code to common.h\n  firmware: arm_scmi: Add xfer helpers to provide raw access\n  firmware: arm_scmi: Add flags field to xfer\n  firmware: arm_scmi: Refactor scmi_wait_for_message_response\n  firmware: arm_scmi: Refactor polling helpers\n  firmware: arm_scmi: Refactor xfer in-flight registration routines\n  firmware: arm_scmi: Split bus and driver into distinct modules\n  firmware: arm_scmi: Introduce a new lifecycle for protocol devices\n  ...\n\nLink: https://lore.kernel.org/r/20230120162152.1438456-1-sudeep.holla@arm.com\nSigned-off-by: Arnd Bergmann <arnd@arndb.de>",
  "full_message": "Merge tag 'scmi-updates-6.3' of git://git.kernel.org/pub/scm/linux/kernel/git/sudeep.holla/linux into soc/drivers\n\nArm SCMI updates for v6.3\n\nThe main addition is a unified userspace interface for SCMI irrespective\nof the underlying transport and along with some changed to refactor the\nSCMI stack probing sequence.\n\n1. SCMI unified userspace interface\n\n   This is to have a unified way of testing an SCMI platform firmware\n   implementation for compliance, fuzzing etc., from the perspective of\n   the non-secure OSPM irrespective of the underlying transport supporting\n   SCMI. It is just for testing/development and not a feature intended fo\n   use in production.\n\n   Currently an SCMI Compliance Suite[1] can only work by injecting SCMI\n   messages using the mailbox test driver only which makes it transport\n   specific and can't be used with any other transport like virtio,\n   smc/hvc, optee, etc. Also the shared memory can be transport specific\n   and it is better to even abstract/hide those details while providing\n   the userspace access. So in order to scale with any transport, we need\n   a unified interface for the same.\n\n   In order to achieve that, SCMI \"raw mode support\" is being added through\n   debugfs which is more configurable as well. A userspace application\n   can inject bare SCMI binary messages into the SCMI core stack; such\n   messages will be routed by the SCMI regular kernel stack to the backend\n   platform firmware using the configured transport transparently. This\n   eliminates the to know about the specific underlying transport\n   internals that will be taken care of by the SCMI core stack itself.\n   Further no additional changes needed in the device tree like in the\n   mailbox-test driver.\n\n[1] https://gitlab.arm.com/tests/scmi-tests\n\n2. Refactoring of the SCMI stack probing sequence\n\n   On some platforms, SCMI transport can be provide by OPTEE/TEE which\n   introduces certain dependency in the probe ordering. In order to address\n   the same, the SCMI bus is split into its own module which continues to\n   be initialized at subsys_initcall, while the SCMI core stack, including\n   its various transport backends (like optee, mailbox, virtio, smc), is\n   now moved into a separate module at module_init level.\n\n   This allows the other possibly dependent subsystems to register and/or\n   access SCMI bus well before the core SCMI stack and its dependent\n   transport backends.\n\n* tag 'scmi-updates-6.3' of git://git.kernel.org/pub/scm/linux/kernel/git/sudeep.holla/linux: (31 commits)\n  firmware: arm_scmi: Clarify raw per-channel ABI documentation\n  firmware: arm_scmi: Add per-channel raw injection support\n  firmware: arm_scmi: Add the raw mode co-existence support\n  firmware: arm_scmi: Call raw mode hooks from the core stack\n  firmware: arm_scmi: Reject SCMI drivers when configured in raw mode\n  firmware: arm_scmi: Add debugfs ABI documentation for raw mode\n  firmware: arm_scmi: Add core raw transmission support\n  firmware: arm_scmi: Add debugfs ABI documentation for common entries\n  firmware: arm_scmi: Populate a common SCMI debugfs root\n  debugfs: Export debugfs_create_str symbol\n  include: trace: Add platform and channel instance references\n  firmware: arm_scmi: Add internal platform/channel identifiers\n  firmware: arm_scmi: Move errors defs and code to common.h\n  firmware: arm_scmi: Add xfer helpers to provide raw access\n  firmware: arm_scmi: Add flags field to xfer\n  firmware: arm_scmi: Refactor scmi_wait_for_message_response\n  firmware: arm_scmi: Refactor polling helpers\n  firmware: arm_scmi: Refactor xfer in-flight registration routines\n  firmware: arm_scmi: Split bus and driver into distinct modules\n  firmware: arm_scmi: Introduce a new lifecycle for protocol devices\n  ...\n\nLink: https://lore.kernel.org/r/20230120162152.1438456-1-sudeep.holla@arm.com\nSigned-off-by: Arnd Bergmann <arnd@arndb.de>",
  "author_name": "Arnd Bergmann",
  "author_email": "arnd@arndb.de",
  "author_date": "Tue Jan 24 21:44:03 2023 +0100",
  "author_date_iso": "2023-01-24T21:44:03+01:00",
  "committer_name": "Arnd Bergmann",
  "committer_email": "arnd@arndb.de",
  "committer_date": "Tue Jan 24 21:44:52 2023 +0100",
  "committer_date_iso": "2023-01-24T21:44:52+01:00",
  "files_changed": [],
  "files_changed_count": 0,
  "stats": [
    {
      "file": "Documentation/ABI/testing/debugfs-scmi",
      "insertions": 70,
      "deletions": 0
    },
    {
      "file": "Documentation/ABI/testing/debugfs-scmi-raw",
      "insertions": 117,
      "deletions": 0
    },
    {
      "file": "drivers/firmware/arm_scmi/Kconfig",
      "insertions": 32,
      "deletions": 0
    },
    {
      "file": "drivers/firmware/arm_scmi/Makefile",
      "insertions": 7,
      "deletions": 2
    },
    {
      "file": "drivers/firmware/arm_scmi/bus.c",
      "insertions": 302,
      "deletions": 93
    },
    {
      "file": "drivers/firmware/arm_scmi/common.h",
      "insertions": 85,
      "deletions": 15
    },
    {
      "file": "drivers/firmware/arm_scmi/driver.c",
      "insertions": 791,
      "deletions": 434
    },
    {
      "file": "drivers/firmware/arm_scmi/mailbox.c",
      "insertions": 2,
      "deletions": 4
    },
    {
      "file": "drivers/firmware/arm_scmi/optee.c",
      "insertions": 2,
      "deletions": 4
    },
    {
      "file": "drivers/firmware/arm_scmi/protocols.h",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "drivers/firmware/arm_scmi/raw_mode.c",
      "insertions": 1443,
      "deletions": 0
    },
    {
      "file": "drivers/firmware/arm_scmi/raw_mode.h",
      "insertions": 31,
      "deletions": 0
    },
    {
      "file": "drivers/firmware/arm_scmi/shmem.c",
      "insertions": 6,
      "deletions": 3
    },
    {
      "file": "drivers/firmware/arm_scmi/smc.c",
      "insertions": 2,
      "deletions": 4
    },
    {
      "file": "drivers/firmware/arm_scmi/virtio.c",
      "insertions": 7,
      "deletions": 4
    },
    {
      "file": "fs/debugfs/file.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "include/linux/scmi_protocol.h",
      "insertions": 0,
      "deletions": 5
    },
    {
      "file": "include/trace/events/scmi.h",
      "insertions": 12,
      "deletions": 6
    }
  ],
  "total_insertions": 2917,
  "total_deletions": 574,
  "total_changes": 3491,
  "parents": [
    "faa4cd063bcee3875ec8fa9085075dc1abbba8db",
    "32a55bbdd74e2bb76a76979bc4f37e7e7ebe620d"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "inject"
    ]
  },
  "fix_type": "security",
  "file_results": []
}