commit b59db45d7eba9894e7834d768ec4236fca39bd7d
Author: Shachar Kagan <skagan@nvidia.com>
Date:   Tue Jan 2 11:00:57 2024 +0200

    tcp: Revert no longer abort SYN_SENT when receiving some ICMP
    
    This reverts commit 0a8de364ff7a14558e9676f424283148110384d6.
    
    Shachar reported that Vagrant (https://www.vagrantup.com/), which is
    very popular tool to manage fleet of VMs stopped to work after commit
    citied in Fixes line.
    
    The issue appears while using Vagrant to manage nested VMs.
    The steps are:
    * create vagrant file
    * vagrant up
    * vagrant halt (VM is created but shut down)
    * vagrant up - fail
    
    Vagrant up stdout:
    Bringing machine 'player1' up with 'libvirt' provider...
    ==> player1: Creating shared folders metadata...
    ==> player1: Starting domain.
    ==> player1: Domain launching with graphics connection settings...
    ==> player1:  -- Graphics Port:      5900
    ==> player1:  -- Graphics IP:        127.0.0.1
    ==> player1:  -- Graphics Password:  Not defined
    ==> player1:  -- Graphics Websocket: 5700
    ==> player1: Waiting for domain to get an IP address...
    ==> player1: Waiting for machine to boot. This may take a few minutes...
        player1: SSH address: 192.168.123.61:22
        player1: SSH username: vagrant
        player1: SSH auth method: private key
    ==> player1: Attempting graceful shutdown of VM...
    ==> player1: Attempting graceful shutdown of VM...
    ==> player1: Attempting graceful shutdown of VM...
        player1: Guest communication could not be established! This is usually because
        player1: SSH is not running, the authentication information was changed,
        player1: or some other networking issue. Vagrant will force halt, if
        player1: capable.
    ==> player1: Attempting direct shutdown of domain...
    
    Fixes: 0a8de364ff7a ("tcp: no longer abort SYN_SENT when receiving some ICMP")
    Closes: https://lore.kernel.org/all/MN2PR12MB44863139E562A59329E89DBEB982A@MN2PR12MB4486.namprd12.prod.outlook.com
    Signed-off-by: Shachar Kagan <skagan@nvidia.com>
    Signed-off-by: Leon Romanovsky <leonro@nvidia.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Link: https://lore.kernel.org/r/14459261ea9f9c7d7dfb28eb004ce8734fa83ade.1704185904.git.leonro@nvidia.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

diff --git a/net/ipv6/tcp_ipv6.c b/net/ipv6/tcp_ipv6.c
index d1307d77a6f0..57b25b1fc9d9 100644
--- a/net/ipv6/tcp_ipv6.c
+++ b/net/ipv6/tcp_ipv6.c
@@ -381,7 +381,7 @@ static int tcp_v6_err(struct sk_buff *skb, struct inet6_skb_parm *opt,
 	struct tcp_sock *tp;
 	__u32 seq, snd_una;
 	struct sock *sk;
-	bool harderr;
+	bool fatal;
 	int err;
 
 	sk = __inet6_lookup_established(net, net->ipv4.tcp_death_row.hashinfo,
@@ -402,9 +402,9 @@ static int tcp_v6_err(struct sk_buff *skb, struct inet6_skb_parm *opt,
 		return 0;
 	}
 	seq = ntohl(th->seq);
-	harderr = icmpv6_err_convert(type, code, &err);
+	fatal = icmpv6_err_convert(type, code, &err);
 	if (sk->sk_state == TCP_NEW_SYN_RECV) {
-		tcp_req_err(sk, seq, harderr);
+		tcp_req_err(sk, seq, fatal);
 		return 0;
 	}
 
@@ -489,9 +489,6 @@ static int tcp_v6_err(struct sk_buff *skb, struct inet6_skb_parm *opt,
 
 		ipv6_icmp_error(sk, skb, err, th->dest, ntohl(info), (u8 *)th);
 
-		if (!harderr)
-			break;
-
 		if (!sock_owned_by_user(sk)) {
 			WRITE_ONCE(sk->sk_err, err);
 			sk_error_report(sk);		/* Wake people up to see the error (see connect in sock.c) */