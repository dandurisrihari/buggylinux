{
  "hash": "6565243c0677aa2befa5a953cf11bc7b4a6f0a47",
  "hash_short": "6565243c",
  "subject": "net: mscc: ocelot: add locking for the port TX timestamp ID",
  "body": "The ocelot_port->ts_id is used to:\n(a) populate skb->cb[0] for matching the TX timestamp in the PTP IRQ\n    with an skb.\n(b) populate the REW_OP from the injection header of the ongoing skb.\nOnly then is ocelot_port->ts_id incremented.\n\nThis is a problem because, at least theoretically, another timestampable\nskb might use the same ocelot_port->ts_id before that is incremented.\nNormally all transmit calls are serialized by the netdev transmit\nspinlock, but in this case, ocelot_port_add_txtstamp_skb() is also\ncalled by DSA, which has started declaring the NETIF_F_LLTX feature\nsince commit 2b86cb829976 (\"net: dsa: declare lockless TX feature for\nslave ports\").  So the logic of using and incrementing the timestamp id\nshould be atomic per port.\n\nThe solution is to use the global ocelot_port->ts_id only while\nprotected by the associated ocelot_port->ts_id_lock. That's where we\npopulate skb->cb[0]. Note that for ocelot, ocelot_port_add_txtstamp_skb\nis called for the actual skb, but for felix, it is called for the skb's\nclone. That is something which will also be changed in the future.\n\nSigned-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>\nReviewed-by: Horatiu Vultur <horatiu.vultur@microchip.com>\nReviewed-by: Florian Fainelli <f.fainelli@gmail.com>\nTested-by: Alexandre Belloni <alexandre.belloni@bootlin.com>\nReviewed-by: Alexandre Belloni <alexandre.belloni@bootlin.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "full_message": "net: mscc: ocelot: add locking for the port TX timestamp ID\n\nThe ocelot_port->ts_id is used to:\n(a) populate skb->cb[0] for matching the TX timestamp in the PTP IRQ\n    with an skb.\n(b) populate the REW_OP from the injection header of the ongoing skb.\nOnly then is ocelot_port->ts_id incremented.\n\nThis is a problem because, at least theoretically, another timestampable\nskb might use the same ocelot_port->ts_id before that is incremented.\nNormally all transmit calls are serialized by the netdev transmit\nspinlock, but in this case, ocelot_port_add_txtstamp_skb() is also\ncalled by DSA, which has started declaring the NETIF_F_LLTX feature\nsince commit 2b86cb829976 (\"net: dsa: declare lockless TX feature for\nslave ports\").  So the logic of using and incrementing the timestamp id\nshould be atomic per port.\n\nThe solution is to use the global ocelot_port->ts_id only while\nprotected by the associated ocelot_port->ts_id_lock. That's where we\npopulate skb->cb[0]. Note that for ocelot, ocelot_port_add_txtstamp_skb\nis called for the actual skb, but for felix, it is called for the skb's\nclone. That is something which will also be changed in the future.\n\nSigned-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>\nReviewed-by: Horatiu Vultur <horatiu.vultur@microchip.com>\nReviewed-by: Florian Fainelli <f.fainelli@gmail.com>\nTested-by: Alexandre Belloni <alexandre.belloni@bootlin.com>\nReviewed-by: Alexandre Belloni <alexandre.belloni@bootlin.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "author_name": "Vladimir Oltean",
  "author_email": "vladimir.oltean@nxp.com",
  "author_date": "Fri Sep 18 04:07:24 2020 +0300",
  "author_date_iso": "2020-09-18T04:07:24+03:00",
  "committer_name": "David S. Miller",
  "committer_email": "davem@davemloft.net",
  "committer_date": "Fri Sep 18 13:52:33 2020 -0700",
  "committer_date_iso": "2020-09-18T13:52:33-07:00",
  "files_changed": [
    "drivers/net/ethernet/mscc/ocelot.c",
    "drivers/net/ethernet/mscc/ocelot_net.c",
    "include/soc/mscc/ocelot.h",
    "net/dsa/tag_ocelot.c"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "drivers/net/ethernet/mscc/ocelot.c",
      "insertions": 7,
      "deletions": 1
    },
    {
      "file": "drivers/net/ethernet/mscc/ocelot_net.c",
      "insertions": 2,
      "deletions": 4
    },
    {
      "file": "include/soc/mscc/ocelot.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "net/dsa/tag_ocelot.c",
      "insertions": 7,
      "deletions": 4
    }
  ],
  "total_insertions": 17,
  "total_deletions": 9,
  "total_changes": 26,
  "parents": [
    "9dda66acddcbcd5c9e94a1292c679738ba999345"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/net/ethernet/mscc/ocelot.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/net/ethernet/mscc/ocelot_net.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/soc/mscc/ocelot.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/dsa/tag_ocelot.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}