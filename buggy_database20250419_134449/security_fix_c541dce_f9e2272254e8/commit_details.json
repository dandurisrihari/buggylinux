{
  "hash": "c541dce86c537714b6761a79a969c1623dfa222b",
  "hash_short": "c541dce8",
  "subject": "fs: Protect reconfiguration of sb read-write from racing writes",
  "body": "The reconfigure / remount code takes a lot of effort to protect\nfilesystem's reconfiguration code from racing writes on remounting\nread-only. However during remounting read-only filesystem to read-write\nmode userspace writes can start immediately once we clear SB_RDONLY\nflag. This is inconvenient for example for ext4 because we need to do\nsome writes to the filesystem (such as preparation of quota files)\nbefore we can take userspace writes so we are clearing SB_RDONLY flag\nbefore we are fully ready to accept userpace writes and syzbot has found\na way to exploit this [1]. Also as far as I'm reading the code\nthe filesystem remount code was protected from racing writes in the\nlegacy mount path by the mount's MNT_READONLY flag so this is relatively\nnew problem. It is actually fairly easy to protect remount read-write\nfrom racing writes using sb->s_readonly_remount flag so let's just do\nthat instead of having to workaround these races in the filesystem code.\n\n[1] https://lore.kernel.org/all/00000000000006a0df05f6667499@google.com/T/\n\nSigned-off-by: Jan Kara <jack@suse.cz>\nMessage-Id: <20230615113848.8439-1-jack@suse.cz>\nSigned-off-by: Christian Brauner <brauner@kernel.org>",
  "full_message": "fs: Protect reconfiguration of sb read-write from racing writes\n\nThe reconfigure / remount code takes a lot of effort to protect\nfilesystem's reconfiguration code from racing writes on remounting\nread-only. However during remounting read-only filesystem to read-write\nmode userspace writes can start immediately once we clear SB_RDONLY\nflag. This is inconvenient for example for ext4 because we need to do\nsome writes to the filesystem (such as preparation of quota files)\nbefore we can take userspace writes so we are clearing SB_RDONLY flag\nbefore we are fully ready to accept userpace writes and syzbot has found\na way to exploit this [1]. Also as far as I'm reading the code\nthe filesystem remount code was protected from racing writes in the\nlegacy mount path by the mount's MNT_READONLY flag so this is relatively\nnew problem. It is actually fairly easy to protect remount read-write\nfrom racing writes using sb->s_readonly_remount flag so let's just do\nthat instead of having to workaround these races in the filesystem code.\n\n[1] https://lore.kernel.org/all/00000000000006a0df05f6667499@google.com/T/\n\nSigned-off-by: Jan Kara <jack@suse.cz>\nMessage-Id: <20230615113848.8439-1-jack@suse.cz>\nSigned-off-by: Christian Brauner <brauner@kernel.org>",
  "author_name": "Jan Kara",
  "author_email": "jack@suse.cz",
  "author_date": "Thu Jun 15 13:38:48 2023 +0200",
  "author_date_iso": "2023-06-15T13:38:48+02:00",
  "committer_name": "Christian Brauner",
  "committer_email": "brauner@kernel.org",
  "committer_date": "Thu Jun 15 16:58:04 2023 +0200",
  "committer_date_iso": "2023-06-15T16:58:04+02:00",
  "files_changed": [
    "fs/super.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "fs/super.c",
      "insertions": 10,
      "deletions": 1
    }
  ],
  "total_insertions": 10,
  "total_deletions": 1,
  "total_changes": 11,
  "parents": [
    "2d8c9dcf7158060fcec9f891c0292ffdb4397523"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/super.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}