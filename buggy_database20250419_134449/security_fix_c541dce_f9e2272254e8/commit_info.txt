Commit Hash: c541dce86c537714b6761a79a969c1623dfa222b
Subject: fs: Protect reconfiguration of sb read-write from racing writes


Security Keywords:
- exploit

Full commit message:
fs: Protect reconfiguration of sb read-write from racing writes

The reconfigure / remount code takes a lot of effort to protect
filesystem's reconfiguration code from racing writes on remounting
read-only. However during remounting read-only filesystem to read-write
mode userspace writes can start immediately once we clear SB_RDONLY
flag. This is inconvenient for example for ext4 because we need to do
some writes to the filesystem (such as preparation of quota files)
before we can take userspace writes so we are clearing SB_RDONLY flag
before we are fully ready to accept userpace writes and syzbot has found
a way to exploit this [1]. Also as far as I'm reading the code
the filesystem remount code was protected from racing writes in the
legacy mount path by the mount's MNT_READONLY flag so this is relatively
new problem. It is actually fairly easy to protect remount read-write
from racing writes using sb->s_readonly_remount flag so let's just do
that instead of having to workaround these races in the filesystem code.

[1] https://lore.kernel.org/all/00000000000006a0df05f6667499@google.com/T/

Signed-off-by: Jan Kara <jack@suse.cz>
Message-Id: <20230615113848.8439-1-jack@suse.cz>
Signed-off-by: Christian Brauner <brauner@kernel.org>

Metadata:
Author: Jan Kara <jack@suse.cz>
Author Date: Thu Jun 15 13:38:48 2023 +0200
Committer: Christian Brauner <brauner@kernel.org>
Commit Date: Thu Jun 15 16:58:04 2023 +0200

Files Changed: 1
Lines Added: 10
Lines Removed: 1
Total Changes: 11
