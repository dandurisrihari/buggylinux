{
  "hash": "97d6786e0669daa5c2f2d07a057f574e849dfd3e",
  "hash_short": "97d6786e",
  "subject": "arm64: mm: account for hotplug memory when randomizing the linear region",
  "body": "As a hardening measure, we currently randomize the placement of\nphysical memory inside the linear region when KASLR is in effect.\nSince the random offset at which to place the available physical\nmemory inside the linear region is chosen early at boot, it is\nbased on the memblock description of memory, which does not cover\nhotplug memory. The consequence of this is that the randomization\noffset may be chosen such that any hotplugged memory located above\nmemblock_end_of_DRAM() that appears later is pushed off the end of\nthe linear region, where it cannot be accessed.\n\nSo let's limit this randomization of the linear region to ensure\nthat this can no longer happen, by using the CPU's addressable PA\nrange instead. As it is guaranteed that no hotpluggable memory will\nappear that falls outside of that range, we can safely put this PA\nrange sized window anywhere in the linear region.\n\nSigned-off-by: Ard Biesheuvel <ardb@kernel.org>\nCc: Anshuman Khandual <anshuman.khandual@arm.com>\nCc: Will Deacon <will@kernel.org>\nCc: Steven Price <steven.price@arm.com>\nCc: Robin Murphy <robin.murphy@arm.com>\nLink: https://lore.kernel.org/r/20201014081857.3288-1-ardb@kernel.org\nSigned-off-by: Catalin Marinas <catalin.marinas@arm.com>",
  "full_message": "arm64: mm: account for hotplug memory when randomizing the linear region\n\nAs a hardening measure, we currently randomize the placement of\nphysical memory inside the linear region when KASLR is in effect.\nSince the random offset at which to place the available physical\nmemory inside the linear region is chosen early at boot, it is\nbased on the memblock description of memory, which does not cover\nhotplug memory. The consequence of this is that the randomization\noffset may be chosen such that any hotplugged memory located above\nmemblock_end_of_DRAM() that appears later is pushed off the end of\nthe linear region, where it cannot be accessed.\n\nSo let's limit this randomization of the linear region to ensure\nthat this can no longer happen, by using the CPU's addressable PA\nrange instead. As it is guaranteed that no hotpluggable memory will\nappear that falls outside of that range, we can safely put this PA\nrange sized window anywhere in the linear region.\n\nSigned-off-by: Ard Biesheuvel <ardb@kernel.org>\nCc: Anshuman Khandual <anshuman.khandual@arm.com>\nCc: Will Deacon <will@kernel.org>\nCc: Steven Price <steven.price@arm.com>\nCc: Robin Murphy <robin.murphy@arm.com>\nLink: https://lore.kernel.org/r/20201014081857.3288-1-ardb@kernel.org\nSigned-off-by: Catalin Marinas <catalin.marinas@arm.com>",
  "author_name": "Ard Biesheuvel",
  "author_email": "ardb@kernel.org",
  "author_date": "Wed Oct 14 10:18:57 2020 +0200",
  "author_date_iso": "2020-10-14T10:18:57+02:00",
  "committer_name": "Catalin Marinas",
  "committer_email": "catalin.marinas@arm.com",
  "committer_date": "Tue Nov 10 18:43:25 2020 +0000",
  "committer_date_iso": "2020-11-10T18:43:25+00:00",
  "files_changed": [
    "arch/arm64/mm/init.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/arm64/mm/init.c",
      "insertions": 8,
      "deletions": 5
    }
  ],
  "total_insertions": 8,
  "total_deletions": 5,
  "total_changes": 13,
  "parents": [
    "f8394f232b1eab649ce2df5c5f15b0e528c92091"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/arm64/mm/init.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}