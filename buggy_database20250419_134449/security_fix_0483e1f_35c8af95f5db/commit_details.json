{
  "hash": "0483e1fa6e09d4948272680f691dccb1edb9677f",
  "hash_short": "0483e1fa",
  "subject": "x86/mm: Implement ASLR for kernel memory regions",
  "body": "Randomizes the virtual address space of kernel memory regions for\nx86_64. This first patch adds the infrastructure and does not randomize\nany region. The following patches will randomize the physical memory\nmapping, vmalloc and vmemmap regions.\n\nThis security feature mitigates exploits relying on predictable kernel\naddresses. These addresses can be used to disclose the kernel modules\nbase addresses or corrupt specific structures to elevate privileges\nbypassing the current implementation of KASLR. This feature can be\nenabled with the CONFIG_RANDOMIZE_MEMORY option.\n\nThe order of each memory region is not changed. The feature looks at the\navailable space for the regions based on different configuration options\nand randomizes the base and space between each. The size of the physical\nmemory mapping is the available physical memory. No performance impact\nwas detected while testing the feature.\n\nEntropy is generated using the KASLR early boot functions now shared in\nthe lib directory (originally written by Kees Cook). Randomization is\ndone on PGD & PUD page table levels to increase possible addresses. The\nphysical memory mapping code was adapted to support PUD level virtual\naddresses. This implementation on the best configuration provides 30,000\npossible virtual addresses in average for each memory region.  An\nadditional low memory page is used to ensure each CPU can start with a\nPGD aligned virtual address (for realmode).\n\nx86/dump_pagetable was updated to correctly display each region.\n\nUpdated documentation on x86_64 memory layout accordingly.\n\nPerformance data, after all patches in the series:\n\nKernbench shows almost no difference (-+ less than 1%):\n\nBefore:\n\nAverage Optimal load -j 12 Run (std deviation): Elapsed Time 102.63 (1.2695)\nUser Time 1034.89 (1.18115) System Time 87.056 (0.456416) Percent CPU 1092.9\n(13.892) Context Switches 199805 (3455.33) Sleeps 97907.8 (900.636)\n\nAfter:\n\nAverage Optimal load -j 12 Run (std deviation): Elapsed Time 102.489 (1.10636)\nUser Time 1034.86 (1.36053) System Time 87.764 (0.49345) Percent CPU 1095\n(12.7715) Context Switches 199036 (4298.1) Sleeps 97681.6 (1031.11)\n\nHackbench shows 0% difference on average (hackbench 90 repeated 10 times):\n\nattemp,before,after 1,0.076,0.069 2,0.072,0.069 3,0.066,0.066 4,0.066,0.068\n5,0.066,0.067 6,0.066,0.069 7,0.067,0.066 8,0.063,0.067 9,0.067,0.065\n10,0.068,0.071 average,0.0677,0.0677\n\nSigned-off-by: Thomas Garnier <thgarnie@google.com>\nSigned-off-by: Kees Cook <keescook@chromium.org>\nCc: Alexander Kuleshov <kuleshovmail@gmail.com>\nCc: Alexander Popov <alpopov@ptsecurity.com>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Andy Lutomirski <luto@kernel.org>\nCc: Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com>\nCc: Baoquan He <bhe@redhat.com>\nCc: Boris Ostrovsky <boris.ostrovsky@oracle.com>\nCc: Borislav Petkov <bp@alien8.de>\nCc: Borislav Petkov <bp@suse.de>\nCc: Brian Gerst <brgerst@gmail.com>\nCc: Christian Borntraeger <borntraeger@de.ibm.com>\nCc: Dan Williams <dan.j.williams@intel.com>\nCc: Dave Hansen <dave.hansen@linux.intel.com>\nCc: Dave Young <dyoung@redhat.com>\nCc: Denys Vlasenko <dvlasenk@redhat.com>\nCc: Dmitry Vyukov <dvyukov@google.com>\nCc: H. Peter Anvin <hpa@zytor.com>\nCc: Jan Beulich <JBeulich@suse.com>\nCc: Joerg Roedel <jroedel@suse.de>\nCc: Jonathan Corbet <corbet@lwn.net>\nCc: Josh Poimboeuf <jpoimboe@redhat.com>\nCc: Juergen Gross <jgross@suse.com>\nCc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Lv Zheng <lv.zheng@intel.com>\nCc: Mark Salter <msalter@redhat.com>\nCc: Martin Schwidefsky <schwidefsky@de.ibm.com>\nCc: Matt Fleming <matt@codeblueprint.co.uk>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Stephen Smalley <sds@tycho.nsa.gov>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Toshi Kani <toshi.kani@hpe.com>\nCc: Xiao Guangrong <guangrong.xiao@linux.intel.com>\nCc: Yinghai Lu <yinghai@kernel.org>\nCc: kernel-hardening@lists.openwall.com\nCc: linux-doc@vger.kernel.org\nLink: http://lkml.kernel.org/r/1466556426-32664-6-git-send-email-keescook@chromium.org\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "full_message": "x86/mm: Implement ASLR for kernel memory regions\n\nRandomizes the virtual address space of kernel memory regions for\nx86_64. This first patch adds the infrastructure and does not randomize\nany region. The following patches will randomize the physical memory\nmapping, vmalloc and vmemmap regions.\n\nThis security feature mitigates exploits relying on predictable kernel\naddresses. These addresses can be used to disclose the kernel modules\nbase addresses or corrupt specific structures to elevate privileges\nbypassing the current implementation of KASLR. This feature can be\nenabled with the CONFIG_RANDOMIZE_MEMORY option.\n\nThe order of each memory region is not changed. The feature looks at the\navailable space for the regions based on different configuration options\nand randomizes the base and space between each. The size of the physical\nmemory mapping is the available physical memory. No performance impact\nwas detected while testing the feature.\n\nEntropy is generated using the KASLR early boot functions now shared in\nthe lib directory (originally written by Kees Cook). Randomization is\ndone on PGD & PUD page table levels to increase possible addresses. The\nphysical memory mapping code was adapted to support PUD level virtual\naddresses. This implementation on the best configuration provides 30,000\npossible virtual addresses in average for each memory region.  An\nadditional low memory page is used to ensure each CPU can start with a\nPGD aligned virtual address (for realmode).\n\nx86/dump_pagetable was updated to correctly display each region.\n\nUpdated documentation on x86_64 memory layout accordingly.\n\nPerformance data, after all patches in the series:\n\nKernbench shows almost no difference (-+ less than 1%):\n\nBefore:\n\nAverage Optimal load -j 12 Run (std deviation): Elapsed Time 102.63 (1.2695)\nUser Time 1034.89 (1.18115) System Time 87.056 (0.456416) Percent CPU 1092.9\n(13.892) Context Switches 199805 (3455.33) Sleeps 97907.8 (900.636)\n\nAfter:\n\nAverage Optimal load -j 12 Run (std deviation): Elapsed Time 102.489 (1.10636)\nUser Time 1034.86 (1.36053) System Time 87.764 (0.49345) Percent CPU 1095\n(12.7715) Context Switches 199036 (4298.1) Sleeps 97681.6 (1031.11)\n\nHackbench shows 0% difference on average (hackbench 90 repeated 10 times):\n\nattemp,before,after 1,0.076,0.069 2,0.072,0.069 3,0.066,0.066 4,0.066,0.068\n5,0.066,0.067 6,0.066,0.069 7,0.067,0.066 8,0.063,0.067 9,0.067,0.065\n10,0.068,0.071 average,0.0677,0.0677\n\nSigned-off-by: Thomas Garnier <thgarnie@google.com>\nSigned-off-by: Kees Cook <keescook@chromium.org>\nCc: Alexander Kuleshov <kuleshovmail@gmail.com>\nCc: Alexander Popov <alpopov@ptsecurity.com>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Andy Lutomirski <luto@kernel.org>\nCc: Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com>\nCc: Baoquan He <bhe@redhat.com>\nCc: Boris Ostrovsky <boris.ostrovsky@oracle.com>\nCc: Borislav Petkov <bp@alien8.de>\nCc: Borislav Petkov <bp@suse.de>\nCc: Brian Gerst <brgerst@gmail.com>\nCc: Christian Borntraeger <borntraeger@de.ibm.com>\nCc: Dan Williams <dan.j.williams@intel.com>\nCc: Dave Hansen <dave.hansen@linux.intel.com>\nCc: Dave Young <dyoung@redhat.com>\nCc: Denys Vlasenko <dvlasenk@redhat.com>\nCc: Dmitry Vyukov <dvyukov@google.com>\nCc: H. Peter Anvin <hpa@zytor.com>\nCc: Jan Beulich <JBeulich@suse.com>\nCc: Joerg Roedel <jroedel@suse.de>\nCc: Jonathan Corbet <corbet@lwn.net>\nCc: Josh Poimboeuf <jpoimboe@redhat.com>\nCc: Juergen Gross <jgross@suse.com>\nCc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Lv Zheng <lv.zheng@intel.com>\nCc: Mark Salter <msalter@redhat.com>\nCc: Martin Schwidefsky <schwidefsky@de.ibm.com>\nCc: Matt Fleming <matt@codeblueprint.co.uk>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Stephen Smalley <sds@tycho.nsa.gov>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Toshi Kani <toshi.kani@hpe.com>\nCc: Xiao Guangrong <guangrong.xiao@linux.intel.com>\nCc: Yinghai Lu <yinghai@kernel.org>\nCc: kernel-hardening@lists.openwall.com\nCc: linux-doc@vger.kernel.org\nLink: http://lkml.kernel.org/r/1466556426-32664-6-git-send-email-keescook@chromium.org\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "author_name": "Thomas Garnier",
  "author_email": "thgarnie@google.com",
  "author_date": "Tue Jun 21 17:47:02 2016 -0700",
  "author_date_iso": "2016-06-21T17:47:02-07:00",
  "committer_name": "Ingo Molnar",
  "committer_email": "mingo@kernel.org",
  "committer_date": "Fri Jul 8 17:33:46 2016 +0200",
  "committer_date_iso": "2016-07-08T17:33:46+02:00",
  "files_changed": [
    "Documentation/x86/x86_64/mm.txt",
    "arch/x86/Kconfig",
    "arch/x86/include/asm/kaslr.h",
    "arch/x86/include/asm/pgtable.h",
    "arch/x86/kernel/setup.c",
    "arch/x86/mm/Makefile",
    "arch/x86/mm/dump_pagetables.c",
    "arch/x86/mm/init.c",
    "arch/x86/mm/kaslr.c"
  ],
  "files_changed_count": 9,
  "stats": [
    {
      "file": "Documentation/x86/x86_64/mm.txt",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "arch/x86/Kconfig",
      "insertions": 17,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/kaslr.h",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/pgtable.h",
      "insertions": 6,
      "deletions": 1
    },
    {
      "file": "arch/x86/kernel/setup.c",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "arch/x86/mm/Makefile",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/mm/dump_pagetables.c",
      "insertions": 12,
      "deletions": 4
    },
    {
      "file": "arch/x86/mm/init.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/mm/kaslr.c",
      "insertions": 152,
      "deletions": 0
    }
  ],
  "total_insertions": 202,
  "total_deletions": 5,
  "total_changes": 207,
  "parents": [
    "b234e8a09003af108d3573f0369e25c080676b14"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.10",
    "v4.10-rc1",
    "v4.10-rc2",
    "v4.10-rc3",
    "v4.10-rc4",
    "v4.10-rc5",
    "v4.10-rc6",
    "v4.10-rc7",
    "v4.10-rc8",
    "v4.11"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/kernel/setup.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/kaslr.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "Documentation/x86/x86_64/mm.txt",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/pgtable.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/mm/kaslr.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/mm/Makefile",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/mm/dump_pagetables.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/mm/init.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}