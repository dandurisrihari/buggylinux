{
  "hash": "2bb69f5fc72183e1c62547d900f560d0e9334925",
  "hash_short": "2bb69f5f",
  "subject": "Merge tag 'nativebhi' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip",
  "body": "Pull x86 mitigations from Thomas Gleixner:\n \"Mitigations for the native BHI hardware vulnerabilty:\n\n  Branch History Injection (BHI) attacks may allow a malicious\n  application to influence indirect branch prediction in kernel by\n  poisoning the branch history. eIBRS isolates indirect branch targets\n  in ring0. The BHB can still influence the choice of indirect branch\n  predictor entry, and although branch predictor entries are isolated\n  between modes when eIBRS is enabled, the BHB itself is not isolated\n  between modes.\n\n  Add mitigations against it either with the help of microcode or with\n  software sequences for the affected CPUs\"\n\n[ This also ends up enabling the full mitigation by default despite the\n  system call hardening, because apparently there are other indirect\n  calls that are still sufficiently reachable, and the 'auto' case just\n  isn't hardened enough.\n\n  We'll have some more inevitable tweaking in the future    - Linus ]\n\n* tag 'nativebhi' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:\n  KVM: x86: Add BHI_NO\n  x86/bhi: Mitigate KVM by default\n  x86/bhi: Add BHI mitigation knob\n  x86/bhi: Enumerate Branch History Injection (BHI) bug\n  x86/bhi: Define SPEC_CTRL_BHI_DIS_S\n  x86/bhi: Add support for clearing branch history at syscall entry\n  x86/syscall: Don't force use of indirect calls for system calls\n  x86/bugs: Change commas to semicolons in 'spectre_v2' sysfs file",
  "full_message": "Merge tag 'nativebhi' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip\n\nPull x86 mitigations from Thomas Gleixner:\n \"Mitigations for the native BHI hardware vulnerabilty:\n\n  Branch History Injection (BHI) attacks may allow a malicious\n  application to influence indirect branch prediction in kernel by\n  poisoning the branch history. eIBRS isolates indirect branch targets\n  in ring0. The BHB can still influence the choice of indirect branch\n  predictor entry, and although branch predictor entries are isolated\n  between modes when eIBRS is enabled, the BHB itself is not isolated\n  between modes.\n\n  Add mitigations against it either with the help of microcode or with\n  software sequences for the affected CPUs\"\n\n[ This also ends up enabling the full mitigation by default despite the\n  system call hardening, because apparently there are other indirect\n  calls that are still sufficiently reachable, and the 'auto' case just\n  isn't hardened enough.\n\n  We'll have some more inevitable tweaking in the future    - Linus ]\n\n* tag 'nativebhi' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:\n  KVM: x86: Add BHI_NO\n  x86/bhi: Mitigate KVM by default\n  x86/bhi: Add BHI mitigation knob\n  x86/bhi: Enumerate Branch History Injection (BHI) bug\n  x86/bhi: Define SPEC_CTRL_BHI_DIS_S\n  x86/bhi: Add support for clearing branch history at syscall entry\n  x86/syscall: Don't force use of indirect calls for system calls\n  x86/bugs: Change commas to semicolons in 'spectre_v2' sysfs file",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Mon Apr 8 20:07:51 2024 -0700",
  "author_date_iso": "2024-04-08T20:07:51-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Mon Apr 8 20:07:51 2024 -0700",
  "committer_date_iso": "2024-04-08T20:07:51-07:00",
  "files_changed": [
    "Documentation/admin-guide/kernel-parameters.txt",
    "arch/x86/Kconfig",
    "arch/x86/kvm/reverse_cpuid.h"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "Documentation/admin-guide/hw-vuln/spectre.rst",
      "insertions": 42,
      "deletions": 6
    },
    {
      "file": "Documentation/admin-guide/kernel-parameters.txt",
      "insertions": 12,
      "deletions": 0
    },
    {
      "file": "arch/x86/Kconfig",
      "insertions": 26,
      "deletions": 0
    },
    {
      "file": "arch/x86/entry/common.c",
      "insertions": 5,
      "deletions": 5
    },
    {
      "file": "arch/x86/entry/entry_64.S",
      "insertions": 61,
      "deletions": 0
    },
    {
      "file": "arch/x86/entry/entry_64_compat.S",
      "insertions": 16,
      "deletions": 0
    },
    {
      "file": "arch/x86/entry/syscall_32.c",
      "insertions": 19,
      "deletions": 2
    },
    {
      "file": "arch/x86/entry/syscall_64.c",
      "insertions": 17,
      "deletions": 2
    },
    {
      "file": "arch/x86/entry/syscall_x32.c",
      "insertions": 7,
      "deletions": 3
    },
    {
      "file": "arch/x86/include/asm/cpufeatures.h",
      "insertions": 6,
      "deletions": 1
    },
    {
      "file": "arch/x86/include/asm/msr-index.h",
      "insertions": 8,
      "deletions": 1
    },
    {
      "file": "arch/x86/include/asm/nospec-branch.h",
      "insertions": 17,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/syscall.h",
      "insertions": 5,
      "deletions": 6
    },
    {
      "file": "arch/x86/kernel/cpu/bugs.c",
      "insertions": 108,
      "deletions": 13
    },
    {
      "file": "arch/x86/kernel/cpu/common.c",
      "insertions": 16,
      "deletions": 8
    },
    {
      "file": "arch/x86/kernel/cpu/scattered.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/kvm/reverse_cpuid.h",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "arch/x86/kvm/vmx/vmenter.S",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "arch/x86/kvm/x86.c",
      "insertions": 1,
      "deletions": 1
    }
  ],
  "total_insertions": 371,
  "total_deletions": 49,
  "total_changes": 420,
  "parents": [
    "20cb38a7af88dc40095da7c2c9094da3873fea23",
    "ed2e8d49b54d677f3123668a21a57822d679651f"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening",
      "Injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "Documentation/admin-guide/kernel-parameters.txt",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kvm/reverse_cpuid.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}