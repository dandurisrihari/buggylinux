{
  "hash": "fd1d0ddf2ae92fb3df42ed476939861806c5d785",
  "hash_short": "fd1d0ddf",
  "subject": "KVM: arm/arm64: check IRQ number on userland injection",
  "body": "When userland injects a SPI via the KVM_IRQ_LINE ioctl we currently\nonly check it against a fixed limit, which historically is set\nto 127. With the new dynamic IRQ allocation the effective limit may\nactually be smaller (64).\nSo when now a malicious or buggy userland injects a SPI in that\nrange, we spill over on our VGIC bitmaps and bytemaps memory.\nI could trigger a host kernel NULL pointer dereference with current\nmainline by injecting some bogus IRQ number from a hacked kvmtool:\n-----------------\n....\nDEBUG: kvm_vgic_inject_irq(kvm, cpu=0, irq=114, level=1)\nDEBUG: vgic_update_irq_pending(kvm, cpu=0, irq=114, level=1)\nDEBUG: IRQ #114 still in the game, writing to bytemap now...\nUnable to handle kernel NULL pointer dereference at virtual address 00000000\npgd = ffffffc07652e000\n[00000000] *pgd=00000000f658b003, *pud=00000000f658b003, *pmd=0000000000000000\nInternal error: Oops: 96000006 [#1] PREEMPT SMP\nModules linked in:\nCPU: 1 PID: 1053 Comm: lkvm-msi-irqinj Not tainted 4.0.0-rc7+ #3027\nHardware name: FVP Base (DT)\ntask: ffffffc0774e9680 ti: ffffffc0765a8000 task.ti: ffffffc0765a8000\nPC is at kvm_vgic_inject_irq+0x234/0x310\nLR is at kvm_vgic_inject_irq+0x30c/0x310\npc : [<ffffffc0000ae0a8>] lr : [<ffffffc0000ae180>] pstate: 80000145\n.....\n\nSo this patch fixes this by checking the SPI number against the\nactual limit. Also we remove the former legacy hard limit of\n127 in the ioctl code.\n\nSigned-off-by: Andre Przywara <andre.przywara@arm.com>\nReviewed-by: Christoffer Dall <christoffer.dall@linaro.org>\nCC: <stable@vger.kernel.org> # 4.0, 3.19, 3.18\n[maz: wrap KVM_ARM_IRQ_GIC_MAX with #ifndef __KERNEL__,\nas suggested by Christopher Covington]\nSigned-off-by: Marc Zyngier <marc.zyngier@arm.com>",
  "full_message": "KVM: arm/arm64: check IRQ number on userland injection\n\nWhen userland injects a SPI via the KVM_IRQ_LINE ioctl we currently\nonly check it against a fixed limit, which historically is set\nto 127. With the new dynamic IRQ allocation the effective limit may\nactually be smaller (64).\nSo when now a malicious or buggy userland injects a SPI in that\nrange, we spill over on our VGIC bitmaps and bytemaps memory.\nI could trigger a host kernel NULL pointer dereference with current\nmainline by injecting some bogus IRQ number from a hacked kvmtool:\n-----------------\n....\nDEBUG: kvm_vgic_inject_irq(kvm, cpu=0, irq=114, level=1)\nDEBUG: vgic_update_irq_pending(kvm, cpu=0, irq=114, level=1)\nDEBUG: IRQ #114 still in the game, writing to bytemap now...\nUnable to handle kernel NULL pointer dereference at virtual address 00000000\npgd = ffffffc07652e000\n[00000000] *pgd=00000000f658b003, *pud=00000000f658b003, *pmd=0000000000000000\nInternal error: Oops: 96000006 [#1] PREEMPT SMP\nModules linked in:\nCPU: 1 PID: 1053 Comm: lkvm-msi-irqinj Not tainted 4.0.0-rc7+ #3027\nHardware name: FVP Base (DT)\ntask: ffffffc0774e9680 ti: ffffffc0765a8000 task.ti: ffffffc0765a8000\nPC is at kvm_vgic_inject_irq+0x234/0x310\nLR is at kvm_vgic_inject_irq+0x30c/0x310\npc : [<ffffffc0000ae0a8>] lr : [<ffffffc0000ae180>] pstate: 80000145\n.....\n\nSo this patch fixes this by checking the SPI number against the\nactual limit. Also we remove the former legacy hard limit of\n127 in the ioctl code.\n\nSigned-off-by: Andre Przywara <andre.przywara@arm.com>\nReviewed-by: Christoffer Dall <christoffer.dall@linaro.org>\nCC: <stable@vger.kernel.org> # 4.0, 3.19, 3.18\n[maz: wrap KVM_ARM_IRQ_GIC_MAX with #ifndef __KERNEL__,\nas suggested by Christopher Covington]\nSigned-off-by: Marc Zyngier <marc.zyngier@arm.com>",
  "author_name": "Andre Przywara",
  "author_email": "andre.przywara@arm.com",
  "author_date": "Fri Apr 10 16:17:59 2015 +0100",
  "author_date_iso": "2015-04-10T16:17:59+01:00",
  "committer_name": "Marc Zyngier",
  "committer_email": "marc.zyngier@arm.com",
  "committer_date": "Wed Apr 22 15:42:24 2015 +0100",
  "committer_date_iso": "2015-04-22T15:42:24+01:00",
  "files_changed": [
    "arch/arm/include/uapi/asm/kvm.h",
    "arch/arm/kvm/arm.c",
    "arch/arm64/include/uapi/asm/kvm.h",
    "virt/kvm/arm/vgic.c"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "arch/arm/include/uapi/asm/kvm.h",
      "insertions": 7,
      "deletions": 1
    },
    {
      "file": "arch/arm/kvm/arm.c",
      "insertions": 1,
      "deletions": 2
    },
    {
      "file": "arch/arm64/include/uapi/asm/kvm.h",
      "insertions": 7,
      "deletions": 1
    },
    {
      "file": "virt/kvm/arm/vgic.c",
      "insertions": 3,
      "deletions": 0
    }
  ],
  "total_insertions": 18,
  "total_deletions": 4,
  "total_changes": 22,
  "parents": [
    "0b3289ebc2d50cf5ab778215ed0b4075bbae6629"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.1",
    "v4.1-rc1",
    "v4.1-rc2",
    "v4.1-rc3",
    "v4.1-rc4",
    "v4.1-rc5",
    "v4.1-rc6",
    "v4.1-rc7",
    "v4.1-rc8",
    "v4.10"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/arm/include/uapi/asm/kvm.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm/kvm/arm.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/uapi/asm/kvm.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "virt/kvm/arm/vgic.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}