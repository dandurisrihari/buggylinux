{
  "hash": "27871f7a8a341ef5c636a337856369acf8013e4e",
  "hash_short": "27871f7a",
  "subject": "PM: Introduce an Energy Model management framework",
  "body": "Several subsystems in the kernel (task scheduler and/or thermal at the\ntime of writing) can benefit from knowing about the energy consumed by\nCPUs. Yet, this information can come from different sources (DT or\nfirmware for example), in different formats, hence making it hard to\nexploit without a standard API.\n\nAs an attempt to address this, introduce a centralized Energy Model\n(EM) management framework which aggregates the power values provided\nby drivers into a table for each performance domain in the system. The\npower cost tables are made available to interested clients (e.g. task\nscheduler or thermal) via platform-agnostic APIs. The overall design\nis represented by the diagram below (focused on Arm-related drivers as\nan example, but applicable to any architecture):\n\n     +---------------+  +-----------------+  +-------------+\n     | Thermal (IPA) |  | Scheduler (EAS) |  |    Other    |\n     +---------------+  +-----------------+  +-------------+\n             |                   | em_pd_energy()   |\n             |                   | em_cpu_get()     |\n             +-----------+       |         +--------+\n                         |       |         |\n                         v       v         v\n                      +---------------------+\n                      |                     |\n                      |    Energy Model     |\n                      |                     |\n                      |     Framework       |\n                      |                     |\n                      +---------------------+\n                         ^       ^       ^\n                         |       |       | em_register_perf_domain()\n              +----------+       |       +---------+\n              |                  |                 |\n      +---------------+  +---------------+  +--------------+\n      |  cpufreq-dt   |  |   arm_scmi    |  |    Other     |\n      +---------------+  +---------------+  +--------------+\n              ^                  ^                 ^\n              |                  |                 |\n      +--------------+   +---------------+  +--------------+\n      | Device Tree  |   |   Firmware    |  |      ?       |\n      +--------------+   +---------------+  +--------------+\n\nDrivers (typically, but not limited to, CPUFreq drivers) can register\ndata in the EM framework using the em_register_perf_domain() API. The\ncalling driver must provide a callback function with a standardized\nsignature that will be used by the EM framework to build the power\ncost tables of the performance domain. This design should offer a lot of\nflexibility to calling drivers which are free of reading information\nfrom any location and to use any technique to compute power costs.\nMoreover, the capacity states registered by drivers in the EM framework\nare not required to match real performance states of the target. This\nis particularly important on targets where the performance states are\nnot known by the OS.\n\nThe power cost coefficients managed by the EM framework are specified in\nmilli-watts. Although the two potential users of those coefficients (IPA\nand EAS) only need relative correctness, IPA specifically needs to\ncompare the power of CPUs with the power of other components (GPUs, for\nexample), which are still expressed in absolute terms in their\nrespective subsystems. Hence, specifying the power of CPUs in\nmilli-watts should help transitioning IPA to using the EM framework\nwithout introducing new problems by keeping units comparable across\nsub-systems.\nOn the longer term, the EM of other devices than CPUs could also be\nmanaged by the EM framework, which would enable to remove the absolute\nunit. However, this is not absolutely required as a first step, so this\nextension of the EM framework is left for later.\n\nOn the client side, the EM framework offers APIs to access the power\ncost tables of a CPU (em_cpu_get()), and to estimate the energy\nconsumed by the CPUs of a performance domain (em_pd_energy()). Clients\nsuch as the task scheduler can then use these APIs to access the shared\ndata structures holding the Energy Model of CPUs.\n\nSigned-off-by: Quentin Perret <quentin.perret@arm.com>\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Mike Galbraith <efault@gmx.de>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Rafael J. Wysocki <rjw@rjwysocki.net>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: adharmap@codeaurora.org\nCc: chris.redpath@arm.com\nCc: currojerez@riseup.net\nCc: dietmar.eggemann@arm.com\nCc: edubezval@gmail.com\nCc: gregkh@linuxfoundation.org\nCc: javi.merino@kernel.org\nCc: joel@joelfernandes.org\nCc: juri.lelli@redhat.com\nCc: morten.rasmussen@arm.com\nCc: patrick.bellasi@arm.com\nCc: pkondeti@codeaurora.org\nCc: skannan@codeaurora.org\nCc: smuckle@google.com\nCc: srinivas.pandruvada@linux.intel.com\nCc: thara.gopinath@linaro.org\nCc: tkjos@google.com\nCc: valentin.schneider@arm.com\nCc: vincent.guittot@linaro.org\nCc: viresh.kumar@linaro.org\nLink: https://lkml.kernel.org/r/20181203095628.11858-4-quentin.perret@arm.com\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "full_message": "PM: Introduce an Energy Model management framework\n\nSeveral subsystems in the kernel (task scheduler and/or thermal at the\ntime of writing) can benefit from knowing about the energy consumed by\nCPUs. Yet, this information can come from different sources (DT or\nfirmware for example), in different formats, hence making it hard to\nexploit without a standard API.\n\nAs an attempt to address this, introduce a centralized Energy Model\n(EM) management framework which aggregates the power values provided\nby drivers into a table for each performance domain in the system. The\npower cost tables are made available to interested clients (e.g. task\nscheduler or thermal) via platform-agnostic APIs. The overall design\nis represented by the diagram below (focused on Arm-related drivers as\nan example, but applicable to any architecture):\n\n     +---------------+  +-----------------+  +-------------+\n     | Thermal (IPA) |  | Scheduler (EAS) |  |    Other    |\n     +---------------+  +-----------------+  +-------------+\n             |                   | em_pd_energy()   |\n             |                   | em_cpu_get()     |\n             +-----------+       |         +--------+\n                         |       |         |\n                         v       v         v\n                      +---------------------+\n                      |                     |\n                      |    Energy Model     |\n                      |                     |\n                      |     Framework       |\n                      |                     |\n                      +---------------------+\n                         ^       ^       ^\n                         |       |       | em_register_perf_domain()\n              +----------+       |       +---------+\n              |                  |                 |\n      +---------------+  +---------------+  +--------------+\n      |  cpufreq-dt   |  |   arm_scmi    |  |    Other     |\n      +---------------+  +---------------+  +--------------+\n              ^                  ^                 ^\n              |                  |                 |\n      +--------------+   +---------------+  +--------------+\n      | Device Tree  |   |   Firmware    |  |      ?       |\n      +--------------+   +---------------+  +--------------+\n\nDrivers (typically, but not limited to, CPUFreq drivers) can register\ndata in the EM framework using the em_register_perf_domain() API. The\ncalling driver must provide a callback function with a standardized\nsignature that will be used by the EM framework to build the power\ncost tables of the performance domain. This design should offer a lot of\nflexibility to calling drivers which are free of reading information\nfrom any location and to use any technique to compute power costs.\nMoreover, the capacity states registered by drivers in the EM framework\nare not required to match real performance states of the target. This\nis particularly important on targets where the performance states are\nnot known by the OS.\n\nThe power cost coefficients managed by the EM framework are specified in\nmilli-watts. Although the two potential users of those coefficients (IPA\nand EAS) only need relative correctness, IPA specifically needs to\ncompare the power of CPUs with the power of other components (GPUs, for\nexample), which are still expressed in absolute terms in their\nrespective subsystems. Hence, specifying the power of CPUs in\nmilli-watts should help transitioning IPA to using the EM framework\nwithout introducing new problems by keeping units comparable across\nsub-systems.\nOn the longer term, the EM of other devices than CPUs could also be\nmanaged by the EM framework, which would enable to remove the absolute\nunit. However, this is not absolutely required as a first step, so this\nextension of the EM framework is left for later.\n\nOn the client side, the EM framework offers APIs to access the power\ncost tables of a CPU (em_cpu_get()), and to estimate the energy\nconsumed by the CPUs of a performance domain (em_pd_energy()). Clients\nsuch as the task scheduler can then use these APIs to access the shared\ndata structures holding the Energy Model of CPUs.\n\nSigned-off-by: Quentin Perret <quentin.perret@arm.com>\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Mike Galbraith <efault@gmx.de>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Rafael J. Wysocki <rjw@rjwysocki.net>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: adharmap@codeaurora.org\nCc: chris.redpath@arm.com\nCc: currojerez@riseup.net\nCc: dietmar.eggemann@arm.com\nCc: edubezval@gmail.com\nCc: gregkh@linuxfoundation.org\nCc: javi.merino@kernel.org\nCc: joel@joelfernandes.org\nCc: juri.lelli@redhat.com\nCc: morten.rasmussen@arm.com\nCc: patrick.bellasi@arm.com\nCc: pkondeti@codeaurora.org\nCc: skannan@codeaurora.org\nCc: smuckle@google.com\nCc: srinivas.pandruvada@linux.intel.com\nCc: thara.gopinath@linaro.org\nCc: tkjos@google.com\nCc: valentin.schneider@arm.com\nCc: vincent.guittot@linaro.org\nCc: viresh.kumar@linaro.org\nLink: https://lkml.kernel.org/r/20181203095628.11858-4-quentin.perret@arm.com\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "author_name": "Quentin Perret",
  "author_email": "quentin.perret@arm.com",
  "author_date": "Mon Dec 3 09:56:16 2018 +0000",
  "author_date_iso": "2018-12-03T09:56:16+00:00",
  "committer_name": "Ingo Molnar",
  "committer_email": "mingo@kernel.org",
  "committer_date": "Tue Dec 11 15:16:58 2018 +0100",
  "committer_date_iso": "2018-12-11T15:16:58+01:00",
  "files_changed": [
    "include/linux/energy_model.h",
    "kernel/power/Kconfig",
    "kernel/power/Makefile",
    "kernel/power/energy_model.c"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "include/linux/energy_model.h",
      "insertions": 187,
      "deletions": 0
    },
    {
      "file": "kernel/power/Kconfig",
      "insertions": 15,
      "deletions": 0
    },
    {
      "file": "kernel/power/Makefile",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "kernel/power/energy_model.c",
      "insertions": 201,
      "deletions": 0
    }
  ],
  "total_insertions": 405,
  "total_deletions": 0,
  "total_changes": 405,
  "parents": [
    "938e5e4b0d1502a93e787985cb95b136b40717b7"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.0",
    "v5.0-rc1",
    "v5.0-rc2",
    "v5.0-rc3",
    "v5.0-rc4",
    "v5.0-rc5",
    "v5.0-rc6",
    "v5.0-rc7",
    "v5.0-rc8",
    "v5.1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/linux/energy_model.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/power/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/power/Makefile",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/power/energy_model.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}