{
  "hash": "6803bd7956ca8fc43069c2e42016f17f3c2fbf30",
  "hash_short": "6803bd79",
  "subject": "Merge tag 'for-linus' of git://git.kernel.org/pub/scm/virt/kvm/kvm",
  "body": "Pull kvm updates from Paolo Bonzini:\n \"ARM:\n\n   - Generalized infrastructure for 'writable' ID registers, effectively\n     allowing userspace to opt-out of certain vCPU features for its\n     guest\n\n   - Optimization for vSGI injection, opportunistically compressing\n     MPIDR to vCPU mapping into a table\n\n   - Improvements to KVM's PMU emulation, allowing userspace to select\n     the number of PMCs available to a VM\n\n   - Guest support for memory operation instructions (FEAT_MOPS)\n\n   - Cleanups to handling feature flags in KVM_ARM_VCPU_INIT, squashing\n     bugs and getting rid of useless code\n\n   - Changes to the way the SMCCC filter is constructed, avoiding wasted\n     memory allocations when not in use\n\n   - Load the stage-2 MMU context at vcpu_load() for VHE systems,\n     reducing the overhead of errata mitigations\n\n   - Miscellaneous kernel and selftest fixes\n\n  LoongArch:\n\n   - New architecture for kvm.\n\n     The hardware uses the same model as x86, s390 and RISC-V, where\n     guest/host mode is orthogonal to supervisor/user mode. The\n     virtualization extensions are very similar to MIPS, therefore the\n     code also has some similarities but it's been cleaned up to avoid\n     some of the historical bogosities that are found in arch/mips. The\n     kernel emulates MMU, timer and CSR accesses, while interrupt\n     controllers are only emulated in userspace, at least for now.\n\n  RISC-V:\n\n   - Support for the Smstateen and Zicond extensions\n\n   - Support for virtualizing senvcfg\n\n   - Support for virtualized SBI debug console (DBCN)\n\n  S390:\n\n   - Nested page table management can be monitored through tracepoints\n     and statistics\n\n  x86:\n\n   - Fix incorrect handling of VMX posted interrupt descriptor in\n     KVM_SET_LAPIC, which could result in a dropped timer IRQ\n\n   - Avoid WARN on systems with Intel IPI virtualization\n\n   - Add CONFIG_KVM_MAX_NR_VCPUS, to allow supporting up to 4096 vCPUs\n     without forcing more common use cases to eat the extra memory\n     overhead.\n\n   - Add virtualization support for AMD SRSO mitigation (IBPB_BRTYPE and\n     SBPB, aka Selective Branch Predictor Barrier).\n\n   - Fix a bug where restoring a vCPU snapshot that was taken within 1\n     second of creating the original vCPU would cause KVM to try to\n     synchronize the vCPU's TSC and thus clobber the correct TSC being\n     set by userspace.\n\n   - Compute guest wall clock using a single TSC read to avoid\n     generating an inaccurate time, e.g. if the vCPU is preempted\n     between multiple TSC reads.\n\n   - \"Virtualize\" HWCR.TscFreqSel to make Linux guests happy, which\n     complain about a \"Firmware Bug\" if the bit isn't set for select\n     F/M/S combos. Likewise \"virtualize\" (ignore) MSR_AMD64_TW_CFG to\n     appease Windows Server 2022.\n\n   - Don't apply side effects to Hyper-V's synthetic timer on writes\n     from userspace to fix an issue where the auto-enable behavior can\n     trigger spurious interrupts, i.e. do auto-enabling only for guest\n     writes.\n\n   - Remove an unnecessary kick of all vCPUs when synchronizing the\n     dirty log without PML enabled.\n\n   - Advertise \"support\" for non-serializing FS/GS base MSR writes as\n     appropriate.\n\n   - Harden the fast page fault path to guard against encountering an\n     invalid root when walking SPTEs.\n\n   - Omit \"struct kvm_vcpu_xen\" entirely when CONFIG_KVM_XEN=n.\n\n   - Use the fast path directly from the timer callback when delivering\n     Xen timer events, instead of waiting for the next iteration of the\n     run loop. This was not done so far because previously proposed code\n     had races, but now care is taken to stop the hrtimer at critical\n     points such as restarting the timer or saving the timer information\n     for userspace.\n\n   - Follow the lead of upstream Xen and ignore the VCPU_SSHOTTMR_future\n     flag.\n\n   - Optimize injection of PMU interrupts that are simultaneous with\n     NMIs.\n\n   - Usual handful of fixes for typos and other warts.\n\n  x86 - MTRR/PAT fixes and optimizations:\n\n   - Clean up code that deals with honoring guest MTRRs when the VM has\n     non-coherent DMA and host MTRRs are ignored, i.e. EPT is enabled.\n\n   - Zap EPT entries when non-coherent DMA assignment stops/start to\n     prevent using stale entries with the wrong memtype.\n\n   - Don't ignore guest PAT for CR0.CD=1 && KVM_X86_QUIRK_CD_NW_CLEARED=y\n\n     This was done as a workaround for virtual machine BIOSes that did\n     not bother to clear CR0.CD (because ancient KVM/QEMU did not bother\n     to set it, in turn), and there's zero reason to extend the quirk to\n     also ignore guest PAT.\n\n  x86 - SEV fixes:\n\n   - Report KVM_EXIT_SHUTDOWN instead of EINVAL if KVM intercepts\n     SHUTDOWN while running an SEV-ES guest.\n\n   - Clean up the recognition of emulation failures on SEV guests, when\n     KVM would like to \"skip\" the instruction but it had already been\n     partially emulated. This makes it possible to drop a hack that\n     second guessed the (insufficient) information provided by the\n     emulator, and just do the right thing.\n\n  Documentation:\n\n   - Various updates and fixes, mostly for x86\n\n   - MTRR and PAT fixes and optimizations\"\n\n* tag 'for-linus' of git://git.kernel.org/pub/scm/virt/kvm/kvm: (164 commits)\n  KVM: selftests: Avoid using forced target for generating arm64 headers\n  tools headers arm64: Fix references to top srcdir in Makefile\n  KVM: arm64: Add tracepoint for MMIO accesses where ISV==0\n  KVM: arm64: selftest: Perform ISB before reading PAR_EL1\n  KVM: arm64: selftest: Add the missing .guest_prepare()\n  KVM: arm64: Always invalidate TLB for stage-2 permission faults\n  KVM: x86: Service NMI requests after PMI requests in VM-Enter path\n  KVM: arm64: Handle AArch32 SPSR_{irq,abt,und,fiq} as RAZ/WI\n  KVM: arm64: Do not let a L1 hypervisor access the *32_EL2 sysregs\n  KVM: arm64: Refine _EL2 system register list that require trap reinjection\n  arm64: Add missing _EL2 encodings\n  arm64: Add missing _EL12 encodings\n  KVM: selftests: aarch64: vPMU test for validating user accesses\n  KVM: selftests: aarch64: vPMU register test for unimplemented counters\n  KVM: selftests: aarch64: vPMU register test for implemented counters\n  KVM: selftests: aarch64: Introduce vpmu_counter_access test\n  tools: Import arm_pmuv3.h\n  KVM: arm64: PMU: Allow userspace to limit PMCR_EL0.N for the guest\n  KVM: arm64: Sanitize PM{C,I}NTEN{SET,CLR}, PMOVS{SET,CLR} before first run\n  KVM: arm64: Add {get,set}_user for PM{C,I}NTEN{SET,CLR}, PMOVS{SET,CLR}\n  ...",
  "full_message": "Merge tag 'for-linus' of git://git.kernel.org/pub/scm/virt/kvm/kvm\n\nPull kvm updates from Paolo Bonzini:\n \"ARM:\n\n   - Generalized infrastructure for 'writable' ID registers, effectively\n     allowing userspace to opt-out of certain vCPU features for its\n     guest\n\n   - Optimization for vSGI injection, opportunistically compressing\n     MPIDR to vCPU mapping into a table\n\n   - Improvements to KVM's PMU emulation, allowing userspace to select\n     the number of PMCs available to a VM\n\n   - Guest support for memory operation instructions (FEAT_MOPS)\n\n   - Cleanups to handling feature flags in KVM_ARM_VCPU_INIT, squashing\n     bugs and getting rid of useless code\n\n   - Changes to the way the SMCCC filter is constructed, avoiding wasted\n     memory allocations when not in use\n\n   - Load the stage-2 MMU context at vcpu_load() for VHE systems,\n     reducing the overhead of errata mitigations\n\n   - Miscellaneous kernel and selftest fixes\n\n  LoongArch:\n\n   - New architecture for kvm.\n\n     The hardware uses the same model as x86, s390 and RISC-V, where\n     guest/host mode is orthogonal to supervisor/user mode. The\n     virtualization extensions are very similar to MIPS, therefore the\n     code also has some similarities but it's been cleaned up to avoid\n     some of the historical bogosities that are found in arch/mips. The\n     kernel emulates MMU, timer and CSR accesses, while interrupt\n     controllers are only emulated in userspace, at least for now.\n\n  RISC-V:\n\n   - Support for the Smstateen and Zicond extensions\n\n   - Support for virtualizing senvcfg\n\n   - Support for virtualized SBI debug console (DBCN)\n\n  S390:\n\n   - Nested page table management can be monitored through tracepoints\n     and statistics\n\n  x86:\n\n   - Fix incorrect handling of VMX posted interrupt descriptor in\n     KVM_SET_LAPIC, which could result in a dropped timer IRQ\n\n   - Avoid WARN on systems with Intel IPI virtualization\n\n   - Add CONFIG_KVM_MAX_NR_VCPUS, to allow supporting up to 4096 vCPUs\n     without forcing more common use cases to eat the extra memory\n     overhead.\n\n   - Add virtualization support for AMD SRSO mitigation (IBPB_BRTYPE and\n     SBPB, aka Selective Branch Predictor Barrier).\n\n   - Fix a bug where restoring a vCPU snapshot that was taken within 1\n     second of creating the original vCPU would cause KVM to try to\n     synchronize the vCPU's TSC and thus clobber the correct TSC being\n     set by userspace.\n\n   - Compute guest wall clock using a single TSC read to avoid\n     generating an inaccurate time, e.g. if the vCPU is preempted\n     between multiple TSC reads.\n\n   - \"Virtualize\" HWCR.TscFreqSel to make Linux guests happy, which\n     complain about a \"Firmware Bug\" if the bit isn't set for select\n     F/M/S combos. Likewise \"virtualize\" (ignore) MSR_AMD64_TW_CFG to\n     appease Windows Server 2022.\n\n   - Don't apply side effects to Hyper-V's synthetic timer on writes\n     from userspace to fix an issue where the auto-enable behavior can\n     trigger spurious interrupts, i.e. do auto-enabling only for guest\n     writes.\n\n   - Remove an unnecessary kick of all vCPUs when synchronizing the\n     dirty log without PML enabled.\n\n   - Advertise \"support\" for non-serializing FS/GS base MSR writes as\n     appropriate.\n\n   - Harden the fast page fault path to guard against encountering an\n     invalid root when walking SPTEs.\n\n   - Omit \"struct kvm_vcpu_xen\" entirely when CONFIG_KVM_XEN=n.\n\n   - Use the fast path directly from the timer callback when delivering\n     Xen timer events, instead of waiting for the next iteration of the\n     run loop. This was not done so far because previously proposed code\n     had races, but now care is taken to stop the hrtimer at critical\n     points such as restarting the timer or saving the timer information\n     for userspace.\n\n   - Follow the lead of upstream Xen and ignore the VCPU_SSHOTTMR_future\n     flag.\n\n   - Optimize injection of PMU interrupts that are simultaneous with\n     NMIs.\n\n   - Usual handful of fixes for typos and other warts.\n\n  x86 - MTRR/PAT fixes and optimizations:\n\n   - Clean up code that deals with honoring guest MTRRs when the VM has\n     non-coherent DMA and host MTRRs are ignored, i.e. EPT is enabled.\n\n   - Zap EPT entries when non-coherent DMA assignment stops/start to\n     prevent using stale entries with the wrong memtype.\n\n   - Don't ignore guest PAT for CR0.CD=1 && KVM_X86_QUIRK_CD_NW_CLEARED=y\n\n     This was done as a workaround for virtual machine BIOSes that did\n     not bother to clear CR0.CD (because ancient KVM/QEMU did not bother\n     to set it, in turn), and there's zero reason to extend the quirk to\n     also ignore guest PAT.\n\n  x86 - SEV fixes:\n\n   - Report KVM_EXIT_SHUTDOWN instead of EINVAL if KVM intercepts\n     SHUTDOWN while running an SEV-ES guest.\n\n   - Clean up the recognition of emulation failures on SEV guests, when\n     KVM would like to \"skip\" the instruction but it had already been\n     partially emulated. This makes it possible to drop a hack that\n     second guessed the (insufficient) information provided by the\n     emulator, and just do the right thing.\n\n  Documentation:\n\n   - Various updates and fixes, mostly for x86\n\n   - MTRR and PAT fixes and optimizations\"\n\n* tag 'for-linus' of git://git.kernel.org/pub/scm/virt/kvm/kvm: (164 commits)\n  KVM: selftests: Avoid using forced target for generating arm64 headers\n  tools headers arm64: Fix references to top srcdir in Makefile\n  KVM: arm64: Add tracepoint for MMIO accesses where ISV==0\n  KVM: arm64: selftest: Perform ISB before reading PAR_EL1\n  KVM: arm64: selftest: Add the missing .guest_prepare()\n  KVM: arm64: Always invalidate TLB for stage-2 permission faults\n  KVM: x86: Service NMI requests after PMI requests in VM-Enter path\n  KVM: arm64: Handle AArch32 SPSR_{irq,abt,und,fiq} as RAZ/WI\n  KVM: arm64: Do not let a L1 hypervisor access the *32_EL2 sysregs\n  KVM: arm64: Refine _EL2 system register list that require trap reinjection\n  arm64: Add missing _EL2 encodings\n  arm64: Add missing _EL12 encodings\n  KVM: selftests: aarch64: vPMU test for validating user accesses\n  KVM: selftests: aarch64: vPMU register test for unimplemented counters\n  KVM: selftests: aarch64: vPMU register test for implemented counters\n  KVM: selftests: aarch64: Introduce vpmu_counter_access test\n  tools: Import arm_pmuv3.h\n  KVM: arm64: PMU: Allow userspace to limit PMCR_EL0.N for the guest\n  KVM: arm64: Sanitize PM{C,I}NTEN{SET,CLR}, PMOVS{SET,CLR} before first run\n  KVM: arm64: Add {get,set}_user for PM{C,I}NTEN{SET,CLR}, PMOVS{SET,CLR}\n  ...",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Thu Nov 2 15:45:15 2023 -1000",
  "author_date_iso": "2023-11-02T15:45:15-10:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Thu Nov 2 15:45:15 2023 -1000",
  "committer_date_iso": "2023-11-02T15:45:15-10:00",
  "files_changed": [
    "MAINTAINERS",
    "arch/arm64/include/asm/kvm_emulate.h",
    "arch/arm64/include/asm/kvm_host.h",
    "arch/arm64/include/asm/kvm_mmu.h",
    "arch/arm64/include/asm/tlbflush.h",
    "arch/arm64/kernel/traps.c",
    "arch/arm64/kvm/arm.c",
    "arch/arm64/kvm/hyp/pgtable.c",
    "arch/arm64/kvm/mmu.c",
    "arch/arm64/kvm/sys_regs.c",
    "arch/x86/include/asm/msr-index.h",
    "arch/x86/kvm/svm/svm.c"
  ],
  "files_changed_count": 12,
  "stats": [
    {
      "file": "Documentation/devicetree/bindings/riscv/extensions.yaml",
      "insertions": 12,
      "deletions": 0
    },
    {
      "file": "Documentation/virt/kvm/api.rst",
      "insertions": 140,
      "deletions": 18
    },
    {
      "file": "Documentation/virt/kvm/arm/index.rst",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "Documentation/virt/kvm/arm/vcpu-features.rst",
      "insertions": 48,
      "deletions": 0
    },
    {
      "file": "Documentation/virt/kvm/devices/arm-vgic-v3.rst",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "Documentation/virt/kvm/x86/mmu.rst",
      "insertions": 34,
      "deletions": 9
    },
    {
      "file": "MAINTAINERS",
      "insertions": 13,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/kvm_arm.h",
      "insertions": 3,
      "deletions": 1
    },
    {
      "file": "arch/arm64/include/asm/kvm_emulate.h",
      "insertions": 7,
      "deletions": 8
    },
    {
      "file": "arch/arm64/include/asm/kvm_host.h",
      "insertions": 48,
      "deletions": 13
    },
    {
      "file": "arch/arm64/include/asm/kvm_hyp.h",
      "insertions": 2,
      "deletions": 5
    },
    {
      "file": "arch/arm64/include/asm/kvm_mmu.h",
      "insertions": 35,
      "deletions": 10
    },
    {
      "file": "arch/arm64/include/asm/kvm_nested.h",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "arch/arm64/include/asm/stage2_pgtable.h",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm64/include/asm/sysreg.h",
      "insertions": 45,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/tlbflush.h",
      "insertions": 4,
      "deletions": 4
    },
    {
      "file": "arch/arm64/include/asm/traps.h",
      "insertions": 52,
      "deletions": 2
    },
    {
      "file": "arch/arm64/include/uapi/asm/kvm.h",
      "insertions": 32,
      "deletions": 0
    },
    {
      "file": "arch/arm64/kernel/traps.c",
      "insertions": 1,
      "deletions": 47
    },
    {
      "file": "arch/arm64/kvm/arch_timer.c",
      "insertions": 2,
      "deletions": 4
    },
    {
      "file": "arch/arm64/kvm/arm.c",
      "insertions": 160,
      "deletions": 36
    },
    {
      "file": "arch/arm64/kvm/emulate-nested.c",
      "insertions": 71,
      "deletions": 6
    },
    {
      "file": "arch/arm64/kvm/hyp/include/hyp/switch.h",
      "insertions": 17,
      "deletions": 0
    },
    {
      "file": "arch/arm64/kvm/hyp/include/nvhe/fixed_config.h",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "arch/arm64/kvm/hyp/nvhe/mem_protect.c",
      "insertions": 4,
      "deletions": 4
    },
    {
      "file": "arch/arm64/kvm/hyp/nvhe/pkvm.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm64/kvm/hyp/nvhe/switch.c",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "arch/arm64/kvm/hyp/pgtable.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm64/kvm/hyp/vhe/switch.c",
      "insertions": 21,
      "deletions": 13
    },
    {
      "file": "arch/arm64/kvm/hyp/vhe/sysreg-sr.c",
      "insertions": 4,
      "deletions": 7
    },
    {
      "file": "arch/arm64/kvm/hyp/vhe/tlb.c",
      "insertions": 14,
      "deletions": 4
    },
    {
      "file": "arch/arm64/kvm/hypercalls.c",
      "insertions": 23,
      "deletions": 13
    },
    {
      "file": "arch/arm64/kvm/mmio.c",
      "insertions": 3,
      "deletions": 1
    },
    {
      "file": "arch/arm64/kvm/mmu.c",
      "insertions": 7,
      "deletions": 26
    },
    {
      "file": "arch/arm64/kvm/pkvm.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/arm64/kvm/pmu-emul.c",
      "insertions": 107,
      "deletions": 38
    },
    {
      "file": "arch/arm64/kvm/reset.c",
      "insertions": 10,
      "deletions": 46
    },
    {
      "file": "arch/arm64/kvm/sys_regs.c",
      "insertions": 287,
      "deletions": 68
    },
    {
      "file": "arch/arm64/kvm/trace_arm.h",
      "insertions": 25,
      "deletions": 0
    },
    {
      "file": "arch/arm64/kvm/vgic/vgic-debug.c",
      "insertions": 3,
      "deletions": 3
    },
    {
      "file": "arch/arm64/kvm/vgic/vgic-irqfd.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/arm64/kvm/vgic/vgic-its.c",
      "insertions": 27,
      "deletions": 22
    },
    {
      "file": "arch/arm64/kvm/vgic/vgic-kvm-device.c",
      "insertions": 4,
      "deletions": 7
    },
    {
      "file": "arch/arm64/kvm/vgic/vgic-mmio-v3.c",
      "insertions": 58,
      "deletions": 92
    },
    {
      "file": "arch/arm64/kvm/vgic/vgic.c",
      "insertions": 5,
      "deletions": 7
    },
    {
      "file": "arch/arm64/kvm/vmid.c",
      "insertions": 8,
      "deletions": 3
    },
    {
      "file": "arch/loongarch/Kbuild",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "arch/loongarch/Kconfig",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "arch/loongarch/configs/loongson3_defconfig",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "arch/loongarch/include/asm/inst.h",
      "insertions": 16,
      "deletions": 0
    },
    {
      "file": "arch/loongarch/include/asm/kvm_csr.h",
      "insertions": 211,
      "deletions": 0
    },
    {
      "file": "arch/loongarch/include/asm/kvm_host.h",
      "insertions": 237,
      "deletions": 0
    },
    {
      "file": "arch/loongarch/include/asm/kvm_mmu.h",
      "insertions": 139,
      "deletions": 0
    },
    {
      "file": "arch/loongarch/include/asm/kvm_types.h",
      "insertions": 11,
      "deletions": 0
    },
    {
      "file": "arch/loongarch/include/asm/kvm_vcpu.h",
      "insertions": 93,
      "deletions": 0
    },
    {
      "file": "arch/loongarch/include/asm/loongarch.h",
      "insertions": 14,
      "deletions": 5
    },
    {
      "file": "arch/loongarch/include/uapi/asm/kvm.h",
      "insertions": 108,
      "deletions": 0
    },
    {
      "file": "arch/loongarch/kernel/asm-offsets.c",
      "insertions": 32,
      "deletions": 0
    },
    {
      "file": "arch/loongarch/kvm/Kconfig",
      "insertions": 40,
      "deletions": 0
    },
    {
      "file": "arch/loongarch/kvm/Makefile",
      "insertions": 22,
      "deletions": 0
    },
    {
      "file": "arch/loongarch/kvm/exit.c",
      "insertions": 696,
      "deletions": 0
    },
    {
      "file": "arch/loongarch/kvm/interrupt.c",
      "insertions": 183,
      "deletions": 0
    },
    {
      "file": "arch/loongarch/kvm/main.c",
      "insertions": 420,
      "deletions": 0
    },
    {
      "file": "arch/loongarch/kvm/mmu.c",
      "insertions": 914,
      "deletions": 0
    },
    {
      "file": "arch/loongarch/kvm/switch.S",
      "insertions": 250,
      "deletions": 0
    },
    {
      "file": "arch/loongarch/kvm/timer.c",
      "insertions": 197,
      "deletions": 0
    },
    {
      "file": "arch/loongarch/kvm/tlb.c",
      "insertions": 32,
      "deletions": 0
    },
    {
      "file": "arch/loongarch/kvm/trace.h",
      "insertions": 162,
      "deletions": 0
    },
    {
      "file": "arch/loongarch/kvm/vcpu.c",
      "insertions": 939,
      "deletions": 0
    },
    {
      "file": "arch/loongarch/kvm/vm.c",
      "insertions": 94,
      "deletions": 0
    },
    {
      "file": "arch/riscv/include/asm/csr.h",
      "insertions": 18,
      "deletions": 0
    },
    {
      "file": "arch/riscv/include/asm/hwcap.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "arch/riscv/include/asm/kvm_host.h",
      "insertions": 18,
      "deletions": 0
    },
    {
      "file": "arch/riscv/include/asm/kvm_vcpu_sbi.h",
      "insertions": 6,
      "deletions": 1
    },
    {
      "file": "arch/riscv/include/asm/sbi.h",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "arch/riscv/include/uapi/asm/kvm.h",
      "insertions": 12,
      "deletions": 0
    },
    {
      "file": "arch/riscv/kernel/cpufeature.c",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "arch/riscv/kvm/vcpu.c",
      "insertions": 63,
      "deletions": 13
    },
    {
      "file": "arch/riscv/kvm/vcpu_onereg.c",
      "insertions": 69,
      "deletions": 3
    },
    {
      "file": "arch/riscv/kvm/vcpu_sbi.c",
      "insertions": 32,
      "deletions": 29
    },
    {
      "file": "arch/riscv/kvm/vcpu_sbi_replace.c",
      "insertions": 32,
      "deletions": 0
    },
    {
      "file": "arch/s390/include/asm/kvm_host.h",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "arch/s390/kvm/gaccess.c",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "arch/s390/kvm/kvm-s390.c",
      "insertions": 10,
      "deletions": 1
    },
    {
      "file": "arch/s390/kvm/trace-s390.h",
      "insertions": 23,
      "deletions": 0
    },
    {
      "file": "arch/s390/kvm/vsie.c",
      "insertions": 4,
      "deletions": 1
    },
    {
      "file": "arch/x86/include/asm/cpufeatures.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/kvm-x86-ops.h",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "arch/x86/include/asm/kvm_host.h",
      "insertions": 17,
      "deletions": 5
    },
    {
      "file": "arch/x86/include/asm/msr-index.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/kvm/Kconfig",
      "insertions": 11,
      "deletions": 0
    },
    {
      "file": "arch/x86/kvm/cpuid.c",
      "insertions": 7,
      "deletions": 3
    },
    {
      "file": "arch/x86/kvm/cpuid.h",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "arch/x86/kvm/hyperv.c",
      "insertions": 6,
      "deletions": 4
    },
    {
      "file": "arch/x86/kvm/lapic.c",
      "insertions": 17,
      "deletions": 13
    },
    {
      "file": "arch/x86/kvm/mmu.h",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "arch/x86/kvm/mmu/mmu.c",
      "insertions": 26,
      "deletions": 11
    },
    {
      "file": "arch/x86/kvm/mtrr.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/x86/kvm/smm.c",
      "insertions": 0,
      "deletions": 1
    },
    {
      "file": "arch/x86/kvm/svm/svm.c",
      "insertions": 22,
      "deletions": 30
    },
    {
      "file": "arch/x86/kvm/vmx/vmx.c",
      "insertions": 21,
      "deletions": 24
    },
    {
      "file": "arch/x86/kvm/x86.c",
      "insertions": 192,
      "deletions": 56
    },
    {
      "file": "arch/x86/kvm/x86.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/kvm/xen.c",
      "insertions": 52,
      "deletions": 7
    },
    {
      "file": "include/kvm/arm_arch_timer.h",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "include/kvm/arm_pmu.h",
      "insertions": 26,
      "deletions": 2
    },
    {
      "file": "include/kvm/arm_psci.h",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "include/kvm/arm_vgic.h",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "include/linux/perf/arm_pmuv3.h",
      "insertions": 6,
      "deletions": 3
    },
    {
      "file": "include/uapi/linux/kvm.h",
      "insertions": 11,
      "deletions": 0
    },
    {
      "file": "tools/arch/arm64/include/.gitignore",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "tools/arch/arm64/include/asm/gpr-num.h",
      "insertions": 26,
      "deletions": 0
    },
    {
      "file": "tools/arch/arm64/include/asm/sysreg.h",
      "insertions": 192,
      "deletions": 647
    },
    {
      "file": "tools/arch/arm64/tools/Makefile",
      "insertions": 38,
      "deletions": 0
    },
    {
      "file": "tools/include/perf/arm_pmuv3.h",
      "insertions": 308,
      "deletions": 0
    },
    {
      "file": "tools/perf/Makefile.perf",
      "insertions": 13,
      "deletions": 2
    },
    {
      "file": "tools/perf/util/Build",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "tools/testing/selftests/kvm/Makefile",
      "insertions": 22,
      "deletions": 3
    },
    {
      "file": "tools/testing/selftests/kvm/aarch64/aarch32_id_regs.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "tools/testing/selftests/kvm/aarch64/debug-exceptions.c",
      "insertions": 6,
      "deletions": 6
    },
    {
      "file": "tools/testing/selftests/kvm/aarch64/page_fault_test.c",
      "insertions": 7,
      "deletions": 4
    },
    {
      "file": "tools/testing/selftests/kvm/aarch64/set_id_regs.c",
      "insertions": 481,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/kvm/aarch64/vpmu_counter_access.c",
      "insertions": 670,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/kvm/include/aarch64/processor.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/kvm/lib/aarch64/processor.c",
      "insertions": 3,
      "deletions": 3
    },
    {
      "file": "tools/testing/selftests/kvm/riscv/get-reg-list.c",
      "insertions": 144,
      "deletions": 89
    },
    {
      "file": "tools/testing/selftests/kvm/x86_64/hwcr_msr_test.c",
      "insertions": 47,
      "deletions": 0
    }
  ],
  "total_insertions": 8885,
  "total_deletions": 1503,
  "total_changes": 10388,
  "parents": [
    "5be9911406ada8fe6187db7ce402f7ff4c21ebdf",
    "45b890f7689eb0aba454fc5831d2d79763781677"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "Sanitize",
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/arm64/include/asm/tlbflush.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/asm/kvm_mmu.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/asm/kvm_emulate.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/traps.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/asm/kvm_host.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kvm/hyp/pgtable.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kvm/arm.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kvm/mmu.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/msr-index.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kvm/sys_regs.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kvm/svm/svm.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "MAINTAINERS",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}