{
  "hash": "290af86629b25ffd1ed6232c4e9107da031705cb",
  "hash_short": "290af866",
  "subject": "bpf: introduce BPF_JIT_ALWAYS_ON config",
  "body": "The BPF interpreter has been used as part of the spectre 2 attack CVE-2017-5715.\n\nA quote from goolge project zero blog:\n\"At this point, it would normally be necessary to locate gadgets in\nthe host kernel code that can be used to actually leak data by reading\nfrom an attacker-controlled location, shifting and masking the result\nappropriately and then using the result of that as offset to an\nattacker-controlled address for a load. But piecing gadgets together\nand figuring out which ones work in a speculation context seems annoying.\nSo instead, we decided to use the eBPF interpreter, which is built into\nthe host kernel - while there is no legitimate way to invoke it from inside\na VM, the presence of the code in the host kernel's text section is sufficient\nto make it usable for the attack, just like with ordinary ROP gadgets.\"\n\nTo make attacker job harder introduce BPF_JIT_ALWAYS_ON config\noption that removes interpreter from the kernel in favor of JIT-only mode.\nSo far eBPF JIT is supported by:\nx64, arm64, arm32, sparc64, s390, powerpc64, mips64\n\nThe start of JITed program is randomized and code page is marked as read-only.\nIn addition \"constant blinding\" can be turned on with net.core.bpf_jit_harden\n\nv2->v3:\n- move __bpf_prog_ret0 under ifdef (Daniel)\n\nv1->v2:\n- fix init order, test_bpf and cBPF (Daniel's feedback)\n- fix offloaded bpf (Jakub's feedback)\n- add 'return 0' dummy in case something can invoke prog->bpf_func\n- retarget bpf tree. For bpf-next the patch would need one extra hunk.\n  It will be sent when the trees are merged back to net-next\n\nConsidered doing:\n  int bpf_jit_enable __read_mostly = BPF_EBPF_JIT_DEFAULT;\nbut it seems better to land the patch as-is and in bpf-next remove\nbpf_jit_enable global variable from all JITs, consolidate in one place\nand remove this jit_init() function.\n\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>",
  "full_message": "bpf: introduce BPF_JIT_ALWAYS_ON config\n\nThe BPF interpreter has been used as part of the spectre 2 attack CVE-2017-5715.\n\nA quote from goolge project zero blog:\n\"At this point, it would normally be necessary to locate gadgets in\nthe host kernel code that can be used to actually leak data by reading\nfrom an attacker-controlled location, shifting and masking the result\nappropriately and then using the result of that as offset to an\nattacker-controlled address for a load. But piecing gadgets together\nand figuring out which ones work in a speculation context seems annoying.\nSo instead, we decided to use the eBPF interpreter, which is built into\nthe host kernel - while there is no legitimate way to invoke it from inside\na VM, the presence of the code in the host kernel's text section is sufficient\nto make it usable for the attack, just like with ordinary ROP gadgets.\"\n\nTo make attacker job harder introduce BPF_JIT_ALWAYS_ON config\noption that removes interpreter from the kernel in favor of JIT-only mode.\nSo far eBPF JIT is supported by:\nx64, arm64, arm32, sparc64, s390, powerpc64, mips64\n\nThe start of JITed program is randomized and code page is marked as read-only.\nIn addition \"constant blinding\" can be turned on with net.core.bpf_jit_harden\n\nv2->v3:\n- move __bpf_prog_ret0 under ifdef (Daniel)\n\nv1->v2:\n- fix init order, test_bpf and cBPF (Daniel's feedback)\n- fix offloaded bpf (Jakub's feedback)\n- add 'return 0' dummy in case something can invoke prog->bpf_func\n- retarget bpf tree. For bpf-next the patch would need one extra hunk.\n  It will be sent when the trees are merged back to net-next\n\nConsidered doing:\n  int bpf_jit_enable __read_mostly = BPF_EBPF_JIT_DEFAULT;\nbut it seems better to land the patch as-is and in bpf-next remove\nbpf_jit_enable global variable from all JITs, consolidate in one place\nand remove this jit_init() function.\n\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>",
  "author_name": "Alexei Starovoitov",
  "author_email": "ast@kernel.org",
  "author_date": "Tue Jan 9 10:04:29 2018 -0800",
  "author_date_iso": "2018-01-09T10:04:29-08:00",
  "committer_name": "Daniel Borkmann",
  "committer_email": "daniel@iogearbox.net",
  "committer_date": "Tue Jan 9 22:25:26 2018 +0100",
  "committer_date_iso": "2018-01-09T22:25:26+01:00",
  "files_changed": [
    "init/Kconfig",
    "kernel/bpf/core.c",
    "lib/test_bpf.c",
    "net/core/filter.c",
    "net/core/sysctl_net_core.c",
    "net/socket.c"
  ],
  "files_changed_count": 6,
  "stats": [
    {
      "file": "init/Kconfig",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "kernel/bpf/core.c",
      "insertions": 19,
      "deletions": 0
    },
    {
      "file": "lib/test_bpf.c",
      "insertions": 7,
      "deletions": 4
    },
    {
      "file": "net/core/filter.c",
      "insertions": 2,
      "deletions": 4
    },
    {
      "file": "net/core/sysctl_net_core.c",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "net/socket.c",
      "insertions": 9,
      "deletions": 0
    }
  ],
  "total_insertions": 50,
  "total_deletions": 8,
  "total_changes": 58,
  "parents": [
    "be95a845cc4402272994ce290e3ad928aff06cb9"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.15",
    "v4.15-rc8",
    "v4.15-rc9",
    "v4.16",
    "v4.16-rc1",
    "v4.16-rc2",
    "v4.16-rc3",
    "v4.16-rc4",
    "v4.16-rc5",
    "v4.16-rc6"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2017-5715"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "net/core/sysctl_net_core.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/bpf/core.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/core/filter.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "init/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "lib/test_bpf.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/socket.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}