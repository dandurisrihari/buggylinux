commit d8ad515156b66e7e79a6e4c814f997ee54eb47c7
Author: Shuo Liu <shuo.a.liu@intel.com>
Date:   Sun Feb 7 11:10:37 2021 +0800

    virt: acrn: Introduce ioeventfd
    
    ioeventfd is a mechanism to register PIO/MMIO regions to trigger an
    eventfd signal when written to by a User VM. ACRN userspace can register
    any arbitrary I/O address with a corresponding eventfd and then pass the
    eventfd to a specific end-point of interest for handling.
    
    Vhost is a kernel-level virtio server which uses eventfd for signalling.
    To support vhost on ACRN, ioeventfd is introduced in HSM.
    
    A new I/O client dedicated to ioeventfd is associated with a User VM
    during VM creation. HSM provides ioctls to associate an I/O region with
    a eventfd. The I/O client signals a eventfd once its corresponding I/O
    region is matched with an I/O request.
    
    Cc: Zhi Wang <zhi.a.wang@intel.com>
    Cc: Zhenyu Wang <zhenyuw@linux.intel.com>
    Cc: Yu Wang <yu1.wang@intel.com>
    Cc: Reinette Chatre <reinette.chatre@intel.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Reviewed-by: Zhi Wang <zhi.a.wang@intel.com>
    Reviewed-by: Reinette Chatre <reinette.chatre@intel.com>
    Signed-off-by: Shuo Liu <shuo.a.liu@intel.com>
    Link: https://lore.kernel.org/r/20210207031040.49576-16-shuo.a.liu@intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/virt/acrn/vm.c b/drivers/virt/acrn/vm.c
index db597f27690a..2b322d956a8c 100644
--- a/drivers/virt/acrn/vm.c
+++ b/drivers/virt/acrn/vm.c
@@ -50,6 +50,7 @@ struct acrn_vm *acrn_vm_create(struct acrn_vm *vm,
 	list_add(&vm->list, &acrn_vm_list);
 	write_unlock_bh(&acrn_vm_list_lock);
 
+	acrn_ioeventfd_init(vm);
 	dev_dbg(acrn_dev.this_device, "VM %u created.\n", vm->vmid);
 	return vm;
 }
@@ -67,6 +68,7 @@ int acrn_vm_destroy(struct acrn_vm *vm)
 	list_del_init(&vm->list);
 	write_unlock_bh(&acrn_vm_list_lock);
 
+	acrn_ioeventfd_deinit(vm);
 	acrn_ioreq_deinit(vm);
 	if (vm->monitor_page) {
 		put_page(vm->monitor_page);