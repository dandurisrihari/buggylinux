{
  "hash": "ef43aa38063a6b2b3c6618e28ab35794f4f1fe29",
  "hash_short": "ef43aa38",
  "subject": "dm crypt: add cryptographic data integrity protection (authenticated encryption)",
  "body": "Allow the use of per-sector metadata, provided by the dm-integrity\nmodule, for integrity protection and persistently stored per-sector\nInitialization Vector (IV).  The underlying device must support the\n\"DM-DIF-EXT-TAG\" dm-integrity profile.\n\nThe per-bio integrity metadata is allocated by dm-crypt for every bio.\n\nExample of low-level mapping table for various types of use:\n DEV=/dev/sdb\n SIZE=417792\n\n # Additional HMAC with CBC-ESSIV, key is concatenated encryption key + HMAC key\n SIZE_INT=389952\n dmsetup create x --table \"0 $SIZE_INT integrity $DEV 0 32 J 0\"\n dmsetup create y --table \"0 $SIZE_INT crypt aes-cbc-essiv:sha256 \\\n 11ff33c6fb942655efb3e30cf4c0fd95f5ef483afca72166c530ae26151dd83b \\\n 00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff \\\n 0 /dev/mapper/x 0 1 integrity:32:hmac(sha256)\"\n\n # AEAD (Authenticated Encryption with Additional Data) - GCM with random IVs\n # GCM in kernel uses 96bits IV and we store 128bits auth tag (so 28 bytes metadata space)\n SIZE_INT=393024\n dmsetup create x --table \"0 $SIZE_INT integrity $DEV 0 28 J 0\"\n dmsetup create y --table \"0 $SIZE_INT crypt aes-gcm-random \\\n 11ff33c6fb942655efb3e30cf4c0fd95f5ef483afca72166c530ae26151dd83b \\\n 0 /dev/mapper/x 0 1 integrity:28:aead\"\n\n # Random IV only for XTS mode (no integrity protection but provides atomic random sector change)\n SIZE_INT=401272\n dmsetup create x --table \"0 $SIZE_INT integrity $DEV 0 16 J 0\"\n dmsetup create y --table \"0 $SIZE_INT crypt aes-xts-random \\\n 11ff33c6fb942655efb3e30cf4c0fd95f5ef483afca72166c530ae26151dd83b \\\n 0 /dev/mapper/x 0 1 integrity:16:none\"\n\n # Random IV with XTS + HMAC integrity protection\n SIZE_INT=377656\n dmsetup create x --table \"0 $SIZE_INT integrity $DEV 0 48 J 0\"\n dmsetup create y --table \"0 $SIZE_INT crypt aes-xts-random \\\n 11ff33c6fb942655efb3e30cf4c0fd95f5ef483afca72166c530ae26151dd83b \\\n 00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff \\\n 0 /dev/mapper/x 0 1 integrity:48:hmac(sha256)\"\n\nBoth AEAD and HMAC protection authenticates not only data but also\nsector metadata.\n\nHMAC protection is implemented through autenc wrapper (so it is\nprocessed the same way as an authenticated mode).\n\nIn HMAC mode there are two keys (concatenated in dm-crypt mapping\ntable).  First is the encryption key and the second is the key for\nauthentication (HMAC).  (It is userspace decision if these keys are\nindependent or somehow derived.)\n\nThe sector request for AEAD/HMAC authenticated encryption looks like this:\n |----- AAD -------|------ DATA -------|-- AUTH TAG --|\n | (authenticated) | (auth+encryption) |              |\n | sector_LE |  IV |  sector in/out    |  tag in/out  |\n\nFor writes, the integrity fields are calculated during AEAD encryption\nof every sector and stored in bio integrity fields and sent to\nunderlying dm-integrity target for storage.\n\nFor reads, the integrity metadata is verified during AEAD decryption of\nevery sector (they are filled in by dm-integrity, but the integrity\nfields are pre-allocated in dm-crypt).\n\nThere is also an experimental support in cryptsetup utility for more\nfriendly configuration (part of LUKS2 format).\n\nBecause the integrity fields are not valid on initial creation, the\ndevice must be \"formatted\".  This can be done by direct-io writes to the\ndevice (e.g. dd in direct-io mode).  For now, there is available trivial\ntool to do this, see: https://github.com/mbroz/dm_int_tools\n\nSigned-off-by: Milan Broz <gmazyland@gmail.com>\nSigned-off-by: Ondrej Mosnacek <omosnacek@gmail.com>\nSigned-off-by: Vashek Matyas <matyas@fi.muni.cz>\nSigned-off-by: Mike Snitzer <snitzer@redhat.com>",
  "full_message": "dm crypt: add cryptographic data integrity protection (authenticated encryption)\n\nAllow the use of per-sector metadata, provided by the dm-integrity\nmodule, for integrity protection and persistently stored per-sector\nInitialization Vector (IV).  The underlying device must support the\n\"DM-DIF-EXT-TAG\" dm-integrity profile.\n\nThe per-bio integrity metadata is allocated by dm-crypt for every bio.\n\nExample of low-level mapping table for various types of use:\n DEV=/dev/sdb\n SIZE=417792\n\n # Additional HMAC with CBC-ESSIV, key is concatenated encryption key + HMAC key\n SIZE_INT=389952\n dmsetup create x --table \"0 $SIZE_INT integrity $DEV 0 32 J 0\"\n dmsetup create y --table \"0 $SIZE_INT crypt aes-cbc-essiv:sha256 \\\n 11ff33c6fb942655efb3e30cf4c0fd95f5ef483afca72166c530ae26151dd83b \\\n 00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff \\\n 0 /dev/mapper/x 0 1 integrity:32:hmac(sha256)\"\n\n # AEAD (Authenticated Encryption with Additional Data) - GCM with random IVs\n # GCM in kernel uses 96bits IV and we store 128bits auth tag (so 28 bytes metadata space)\n SIZE_INT=393024\n dmsetup create x --table \"0 $SIZE_INT integrity $DEV 0 28 J 0\"\n dmsetup create y --table \"0 $SIZE_INT crypt aes-gcm-random \\\n 11ff33c6fb942655efb3e30cf4c0fd95f5ef483afca72166c530ae26151dd83b \\\n 0 /dev/mapper/x 0 1 integrity:28:aead\"\n\n # Random IV only for XTS mode (no integrity protection but provides atomic random sector change)\n SIZE_INT=401272\n dmsetup create x --table \"0 $SIZE_INT integrity $DEV 0 16 J 0\"\n dmsetup create y --table \"0 $SIZE_INT crypt aes-xts-random \\\n 11ff33c6fb942655efb3e30cf4c0fd95f5ef483afca72166c530ae26151dd83b \\\n 0 /dev/mapper/x 0 1 integrity:16:none\"\n\n # Random IV with XTS + HMAC integrity protection\n SIZE_INT=377656\n dmsetup create x --table \"0 $SIZE_INT integrity $DEV 0 48 J 0\"\n dmsetup create y --table \"0 $SIZE_INT crypt aes-xts-random \\\n 11ff33c6fb942655efb3e30cf4c0fd95f5ef483afca72166c530ae26151dd83b \\\n 00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff \\\n 0 /dev/mapper/x 0 1 integrity:48:hmac(sha256)\"\n\nBoth AEAD and HMAC protection authenticates not only data but also\nsector metadata.\n\nHMAC protection is implemented through autenc wrapper (so it is\nprocessed the same way as an authenticated mode).\n\nIn HMAC mode there are two keys (concatenated in dm-crypt mapping\ntable).  First is the encryption key and the second is the key for\nauthentication (HMAC).  (It is userspace decision if these keys are\nindependent or somehow derived.)\n\nThe sector request for AEAD/HMAC authenticated encryption looks like this:\n |----- AAD -------|------ DATA -------|-- AUTH TAG --|\n | (authenticated) | (auth+encryption) |              |\n | sector_LE |  IV |  sector in/out    |  tag in/out  |\n\nFor writes, the integrity fields are calculated during AEAD encryption\nof every sector and stored in bio integrity fields and sent to\nunderlying dm-integrity target for storage.\n\nFor reads, the integrity metadata is verified during AEAD decryption of\nevery sector (they are filled in by dm-integrity, but the integrity\nfields are pre-allocated in dm-crypt).\n\nThere is also an experimental support in cryptsetup utility for more\nfriendly configuration (part of LUKS2 format).\n\nBecause the integrity fields are not valid on initial creation, the\ndevice must be \"formatted\".  This can be done by direct-io writes to the\ndevice (e.g. dd in direct-io mode).  For now, there is available trivial\ntool to do this, see: https://github.com/mbroz/dm_int_tools\n\nSigned-off-by: Milan Broz <gmazyland@gmail.com>\nSigned-off-by: Ondrej Mosnacek <omosnacek@gmail.com>\nSigned-off-by: Vashek Matyas <matyas@fi.muni.cz>\nSigned-off-by: Mike Snitzer <snitzer@redhat.com>",
  "author_name": "Milan Broz",
  "author_email": "gmazyland@gmail.com",
  "author_date": "Wed Jan 4 20:23:54 2017 +0100",
  "author_date_iso": "2017-01-04T20:23:54+01:00",
  "committer_name": "Mike Snitzer",
  "committer_email": "snitzer@redhat.com",
  "committer_date": "Fri Mar 24 15:49:41 2017 -0400",
  "committer_date_iso": "2017-03-24T15:49:41-04:00",
  "files_changed": [
    "Documentation/device-mapper/dm-crypt.txt",
    "drivers/md/dm-crypt.c"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "Documentation/device-mapper/dm-crypt.txt",
      "insertions": 16,
      "deletions": 0
    },
    {
      "file": "drivers/md/dm-crypt.c",
      "insertions": 742,
      "deletions": 140
    }
  ],
  "total_insertions": 758,
  "total_deletions": 140,
  "total_changes": 898,
  "parents": [
    "7eada909bfd7ac90a4522e56aa3179d1fd68cd14"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.12",
    "v4.12-rc1",
    "v4.12-rc2",
    "v4.12-rc3",
    "v4.12-rc4",
    "v4.12-rc5",
    "v4.12-rc6",
    "v4.12-rc7",
    "v4.13",
    "v4.13-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "auth"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "Documentation/device-mapper/dm-crypt.txt",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/md/dm-crypt.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}