{
  "hash": "5c3b747ef54fa2a7318776777f6044540d99f721",
  "hash_short": "5c3b747e",
  "subject": "random: use first 128 bits of input as fast init",
  "body": "Before, the first 64 bytes of input, regardless of how entropic it was,\nwould be used to mutate the crng base key directly, and none of those\nbytes would be credited as having entropy. Then 256 bits of credited\ninput would be accumulated, and only then would the rng transition from\nthe earlier \"fast init\" phase into being actually initialized.\n\nThe thinking was that by mixing and matching fast init and real init, an\nattacker who compromised the fast init state, considered easy to do\ngiven how little entropy might be in those first 64 bytes, would then be\nable to bruteforce bits from the actual initialization. By keeping these\nseparate, bruteforcing became impossible.\n\nHowever, by not crediting potentially creditable bits from those first 64\nbytes of input, we delay initialization, and actually make the problem\nworse, because it means the user is drawing worse random numbers for a\nlonger period of time.\n\nInstead, we can take the first 128 bits as fast init, and allow them to\nbe credited, and then hold off on the next 128 bits until they've\naccumulated. This is still a wide enough margin to prevent bruteforcing\nthe rng state, while still initializing much faster.\n\nThen, rather than trying to piecemeal inject into the base crng key at\nvarious points, instead just extract from the pool when we need it, for\nthe crng_init==0 phase. Performance may even be better for the various\ninputs here, since there are likely more calls to mix_pool_bytes() then\nthere are to get_random_bytes() during this phase of system execution.\n\nSince the preinit injection code is gone, bootloader randomness can then\ndo something significantly more straight forward, removing the weird\nsystem_wq hack in hwgenerator randomness.\n\nCc: Theodore Ts'o <tytso@mit.edu>\nCc: Dominik Brodowski <linux@dominikbrodowski.net>\nSigned-off-by: Jason A. Donenfeld <Jason@zx2c4.com>",
  "full_message": "random: use first 128 bits of input as fast init\n\nBefore, the first 64 bytes of input, regardless of how entropic it was,\nwould be used to mutate the crng base key directly, and none of those\nbytes would be credited as having entropy. Then 256 bits of credited\ninput would be accumulated, and only then would the rng transition from\nthe earlier \"fast init\" phase into being actually initialized.\n\nThe thinking was that by mixing and matching fast init and real init, an\nattacker who compromised the fast init state, considered easy to do\ngiven how little entropy might be in those first 64 bytes, would then be\nable to bruteforce bits from the actual initialization. By keeping these\nseparate, bruteforcing became impossible.\n\nHowever, by not crediting potentially creditable bits from those first 64\nbytes of input, we delay initialization, and actually make the problem\nworse, because it means the user is drawing worse random numbers for a\nlonger period of time.\n\nInstead, we can take the first 128 bits as fast init, and allow them to\nbe credited, and then hold off on the next 128 bits until they've\naccumulated. This is still a wide enough margin to prevent bruteforcing\nthe rng state, while still initializing much faster.\n\nThen, rather than trying to piecemeal inject into the base crng key at\nvarious points, instead just extract from the pool when we need it, for\nthe crng_init==0 phase. Performance may even be better for the various\ninputs here, since there are likely more calls to mix_pool_bytes() then\nthere are to get_random_bytes() during this phase of system execution.\n\nSince the preinit injection code is gone, bootloader randomness can then\ndo something significantly more straight forward, removing the weird\nsystem_wq hack in hwgenerator randomness.\n\nCc: Theodore Ts'o <tytso@mit.edu>\nCc: Dominik Brodowski <linux@dominikbrodowski.net>\nSigned-off-by: Jason A. Donenfeld <Jason@zx2c4.com>",
  "author_name": "Jason A. Donenfeld",
  "author_email": "Jason@zx2c4.com",
  "author_date": "Sat Apr 30 15:08:20 2022 +0200",
  "author_date_iso": "2022-04-30T15:08:20+02:00",
  "committer_name": "Jason A. Donenfeld",
  "committer_email": "Jason@zx2c4.com",
  "committer_date": "Fri May 13 23:59:23 2022 +0200",
  "committer_date_iso": "2022-05-13T23:59:23+02:00",
  "files_changed": [
    "drivers/char/random.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "drivers/char/random.c",
      "insertions": 49,
      "deletions": 97
    }
  ],
  "total_insertions": 49,
  "total_deletions": 97,
  "total_changes": 146,
  "parents": [
    "cbe89e5a375a51bbb952929b93fa973416fea74e"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "inject"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/char/random.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}