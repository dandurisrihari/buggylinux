{
  "hash": "5ca5916b6bc93577c360c06cb7cdf71adb9b5faf",
  "hash_short": "5ca5916b",
  "subject": "xfs: punch out data fork delalloc blocks on COW writeback failure",
  "body": "If writeback I/O to a COW extent fails, the COW fork blocks are\npunched out and the data fork blocks left alone. It is possible for\nCOW fork blocks to overlap non-shared data fork blocks (due to\ncowextsz hint prealloc), however, and writeback unconditionally maps\nto the COW fork whenever blocks exist at the corresponding offset of\nthe page undergoing writeback. This means it's quite possible for a\nCOW fork extent to overlap delalloc data fork blocks, writeback to\nconvert and map to the COW fork blocks, writeback to fail, and\nfinally for ioend completion to cancel the COW fork blocks and leave\nstale data fork delalloc blocks around in the inode. The blocks are\neffectively stale because writeback failure also discards dirty page\nstate.\n\nIf this occurs, it is likely to trigger assert failures, free space\naccounting corruption and failures in unrelated file operations. For\nexample, a subsequent reflink attempt of the affected file to a new\ntarget file will trip over the stale delalloc in the source file and\nfail. Several of these issues are occasionally reproduced by\ngeneric/648, but are reproducible on demand with the right sequence\nof operations and timely I/O error injection.\n\nTo fix this problem, update the ioend failure path to also punch out\nunderlying data fork delalloc blocks on I/O error. This is analogous\nto the writeback submission failure path in xfs_discard_page() where\nwe might fail to map data fork delalloc blocks and consistent with\nthe successful COW writeback completion path, which is responsible\nfor unmapping from the data fork and remapping in COW fork blocks.\n\nFixes: 787eb485509f (\"xfs: fix and streamline error handling in xfs_end_io\")\nSigned-off-by: Brian Foster <bfoster@redhat.com>\nReviewed-by: Darrick J. Wong <djwong@kernel.org>\nSigned-off-by: Darrick J. Wong <djwong@kernel.org>",
  "full_message": "xfs: punch out data fork delalloc blocks on COW writeback failure\n\nIf writeback I/O to a COW extent fails, the COW fork blocks are\npunched out and the data fork blocks left alone. It is possible for\nCOW fork blocks to overlap non-shared data fork blocks (due to\ncowextsz hint prealloc), however, and writeback unconditionally maps\nto the COW fork whenever blocks exist at the corresponding offset of\nthe page undergoing writeback. This means it's quite possible for a\nCOW fork extent to overlap delalloc data fork blocks, writeback to\nconvert and map to the COW fork blocks, writeback to fail, and\nfinally for ioend completion to cancel the COW fork blocks and leave\nstale data fork delalloc blocks around in the inode. The blocks are\neffectively stale because writeback failure also discards dirty page\nstate.\n\nIf this occurs, it is likely to trigger assert failures, free space\naccounting corruption and failures in unrelated file operations. For\nexample, a subsequent reflink attempt of the affected file to a new\ntarget file will trip over the stale delalloc in the source file and\nfail. Several of these issues are occasionally reproduced by\ngeneric/648, but are reproducible on demand with the right sequence\nof operations and timely I/O error injection.\n\nTo fix this problem, update the ioend failure path to also punch out\nunderlying data fork delalloc blocks on I/O error. This is analogous\nto the writeback submission failure path in xfs_discard_page() where\nwe might fail to map data fork delalloc blocks and consistent with\nthe successful COW writeback completion path, which is responsible\nfor unmapping from the data fork and remapping in COW fork blocks.\n\nFixes: 787eb485509f (\"xfs: fix and streamline error handling in xfs_end_io\")\nSigned-off-by: Brian Foster <bfoster@redhat.com>\nReviewed-by: Darrick J. Wong <djwong@kernel.org>\nSigned-off-by: Darrick J. Wong <djwong@kernel.org>",
  "author_name": "Brian Foster",
  "author_email": "bfoster@redhat.com",
  "author_date": "Thu Oct 21 14:11:55 2021 -0700",
  "author_date_iso": "2021-10-21T14:11:55-07:00",
  "committer_name": "Darrick J. Wong",
  "committer_email": "djwong@kernel.org",
  "committer_date": "Fri Oct 22 16:04:36 2021 -0700",
  "committer_date_iso": "2021-10-22T16:04:36-07:00",
  "files_changed": [
    "fs/xfs/xfs_aops.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "fs/xfs/xfs_aops.c",
      "insertions": 12,
      "deletions": 3
    }
  ],
  "total_insertions": 12,
  "total_deletions": 3,
  "total_changes": 15,
  "parents": [
    "c04c51c524697cd68d668d595f8ebc381ffe426b"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/xfs/xfs_aops.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}