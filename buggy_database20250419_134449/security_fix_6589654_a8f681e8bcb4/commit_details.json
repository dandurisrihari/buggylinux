{
  "hash": "65896545b69ffaac947c12e11d3dcc57fd1fb772",
  "hash_short": "65896545",
  "subject": "arm64: uaccess: Fix omissions from usercopy whitelist",
  "body": "When the hardend usercopy support was added for arm64, it was\nconcluded that all cases of usercopy into and out of thread_struct\nwere statically sized and so didn't require explicit whitelisting\nof the appropriate fields in thread_struct.\n\nTesting with usercopy hardening enabled has revealed that this is\nnot the case for certain ptrace regset manipulation calls on arm64.\nThis occurs because the sizes of usercopies associated with the\nregset API are dynamic by construction, and because arm64 does not\nalways stage such copies via the stack: indeed the regset API is\ndesigned to avoid the need for that by adding some bounds checking.\n\nThis is currently believed to affect only the fpsimd and TLS\nregisters.\n\nBecause the whitelisted fields in thread_struct must be contiguous,\nthis patch groups them together in a nested struct.  It is also\nnecessary to be able to determine the location and size of that\nstruct, so rather than making the struct anonymous (which would\nsave on edits elsewhere) or adding an anonymous union containing\nnamed and unnamed instances of the same struct (gross), this patch\ngives the struct a name and makes the necessary edits to code that\nreferences it (noisy but simple).\n\nCare is needed to ensure that the new struct does not contain\npadding (which the usercopy hardening would fail to protect).\n\nFor this reason, the presence of tp2_value is made unconditional,\nsince a padding field would be needed there in any case.  This pads\nup to the 16-byte alignment required by struct user_fpsimd_state.\n\nAcked-by: Kees Cook <keescook@chromium.org>\nReported-by: Mark Rutland <mark.rutland@arm.com>\nFixes: 9e8084d3f761 (\"arm64: Implement thread_struct whitelist for hardened usercopy\")\nSigned-off-by: Dave Martin <Dave.Martin@arm.com>\nSigned-off-by: Will Deacon <will.deacon@arm.com>",
  "full_message": "arm64: uaccess: Fix omissions from usercopy whitelist\n\nWhen the hardend usercopy support was added for arm64, it was\nconcluded that all cases of usercopy into and out of thread_struct\nwere statically sized and so didn't require explicit whitelisting\nof the appropriate fields in thread_struct.\n\nTesting with usercopy hardening enabled has revealed that this is\nnot the case for certain ptrace regset manipulation calls on arm64.\nThis occurs because the sizes of usercopies associated with the\nregset API are dynamic by construction, and because arm64 does not\nalways stage such copies via the stack: indeed the regset API is\ndesigned to avoid the need for that by adding some bounds checking.\n\nThis is currently believed to affect only the fpsimd and TLS\nregisters.\n\nBecause the whitelisted fields in thread_struct must be contiguous,\nthis patch groups them together in a nested struct.  It is also\nnecessary to be able to determine the location and size of that\nstruct, so rather than making the struct anonymous (which would\nsave on edits elsewhere) or adding an anonymous union containing\nnamed and unnamed instances of the same struct (gross), this patch\ngives the struct a name and makes the necessary edits to code that\nreferences it (noisy but simple).\n\nCare is needed to ensure that the new struct does not contain\npadding (which the usercopy hardening would fail to protect).\n\nFor this reason, the presence of tp2_value is made unconditional,\nsince a padding field would be needed there in any case.  This pads\nup to the 16-byte alignment required by struct user_fpsimd_state.\n\nAcked-by: Kees Cook <keescook@chromium.org>\nReported-by: Mark Rutland <mark.rutland@arm.com>\nFixes: 9e8084d3f761 (\"arm64: Implement thread_struct whitelist for hardened usercopy\")\nSigned-off-by: Dave Martin <Dave.Martin@arm.com>\nSigned-off-by: Will Deacon <will.deacon@arm.com>",
  "author_name": "Dave Martin",
  "author_email": "Dave.Martin@arm.com",
  "author_date": "Wed Mar 28 10:50:49 2018 +0100",
  "author_date_iso": "2018-03-28T10:50:49+01:00",
  "committer_name": "Will Deacon",
  "committer_email": "will.deacon@arm.com",
  "committer_date": "Wed Mar 28 15:25:44 2018 +0100",
  "committer_date_iso": "2018-03-28T15:25:44+01:00",
  "files_changed": [
    "arch/arm64/include/asm/processor.h",
    "arch/arm64/kernel/fpsimd.c",
    "arch/arm64/kernel/process.c",
    "arch/arm64/kernel/ptrace.c",
    "arch/arm64/kernel/signal.c",
    "arch/arm64/kernel/signal32.c",
    "arch/arm64/kernel/sys_compat.c"
  ],
  "files_changed_count": 7,
  "stats": [
    {
      "file": "arch/arm64/include/asm/processor.h",
      "insertions": 25,
      "deletions": 13
    },
    {
      "file": "arch/arm64/kernel/fpsimd.c",
      "insertions": 24,
      "deletions": 23
    },
    {
      "file": "arch/arm64/kernel/process.c",
      "insertions": 3,
      "deletions": 3
    },
    {
      "file": "arch/arm64/kernel/ptrace.c",
      "insertions": 15,
      "deletions": 15
    },
    {
      "file": "arch/arm64/kernel/signal.c",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "arch/arm64/kernel/signal32.c",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "arch/arm64/kernel/sys_compat.c",
      "insertions": 1,
      "deletions": 1
    }
  ],
  "total_insertions": 72,
  "total_deletions": 57,
  "total_changes": 129,
  "parents": [
    "20b8547277a6e8ee1d928792c1b2782c9a2a6cf5"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.17",
    "v4.17-rc1",
    "v4.17-rc2",
    "v4.17-rc3",
    "v4.17-rc4",
    "v4.17-rc5",
    "v4.17-rc6",
    "v4.17-rc7",
    "v4.18",
    "v4.18-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/arm64/kernel/signal.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/fpsimd.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/asm/processor.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/sys_compat.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/process.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/ptrace.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/signal32.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}