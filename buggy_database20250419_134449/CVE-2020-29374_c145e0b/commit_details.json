{
  "hash": "c145e0b47c77ebeefdfd73dbb344577b2fc9b065",
  "hash_short": "c145e0b4",
  "subject": "mm: streamline COW logic in do_swap_page()",
  "body": "Currently we have a different COW logic when:\n* triggering a read-fault to swapin first and then trigger a write-fault\n  -> do_swap_page() + do_wp_page()\n* triggering a write-fault to swapin\n  -> do_swap_page() + do_wp_page() only if we fail reuse in do_swap_page()\n\nThe COW logic in do_swap_page() is different than our reuse logic in\ndo_wp_page().  The COW logic in do_wp_page() -- page_count() == 1 -- makes\ncurrently sure that we certainly don't have a remaining reference, e.g.,\nvia GUP, on the target page we want to reuse: if there is any unexpected\nreference, we have to copy to avoid information leaks.\n\nAs do_swap_page() behaves differently, in environments with swap enabled\nwe can currently have an unintended information leak from the parent to\nthe child, similar as known from CVE-2020-29374:\n\n\t1. Parent writes to anonymous page\n\t-> Page is mapped writable and modified\n\t2. Page is swapped out\n\t-> Page is unmapped and replaced by swap entry\n\t3. fork()\n\t-> Swap entries are copied to child\n\t4. Child pins page R/O\n\t-> Page is mapped R/O into child\n\t5. Child unmaps page\n\t-> Child still holds GUP reference\n\t6. Parent writes to page\n\t-> Page is reused in do_swap_page()\n\t-> Child can observe changes\n\nExchanging 2. and 3. should have the same effect.\n\nLet's apply the same COW logic as in do_wp_page(), conditionally trying to\nremove the page from the swapcache after freeing the swap entry, however,\nbefore actually mapping our page.  We can change the order now that we use\ntry_to_free_swap(), which doesn't care about the mapcount, instead of\nreuse_swap_page().\n\nTo handle references from the LRU pagevecs, conditionally drain the local\nLRU pagevecs when required, however, don't consider the page_count() when\ndeciding whether to drain to keep it simple for now.\n\nLink: https://lkml.kernel.org/r/20220131162940.210846-5-david@redhat.com\nSigned-off-by: David Hildenbrand <david@redhat.com>\nAcked-by: Vlastimil Babka <vbabka@suse.cz>\nCc: Andrea Arcangeli <aarcange@redhat.com>\nCc: Christoph Hellwig <hch@lst.de>\nCc: David Rientjes <rientjes@google.com>\nCc: Don Dutile <ddutile@redhat.com>\nCc: Hugh Dickins <hughd@google.com>\nCc: Jan Kara <jack@suse.cz>\nCc: Jann Horn <jannh@google.com>\nCc: Jason Gunthorpe <jgg@nvidia.com>\nCc: John Hubbard <jhubbard@nvidia.com>\nCc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>\nCc: Liang Zhang <zhangliang5@huawei.com>\nCc: Matthew Wilcox (Oracle) <willy@infradead.org>\nCc: Michal Hocko <mhocko@kernel.org>\nCc: Mike Kravetz <mike.kravetz@oracle.com>\nCc: Mike Rapoport <rppt@linux.ibm.com>\nCc: Nadav Amit <nadav.amit@gmail.com>\nCc: Oleg Nesterov <oleg@redhat.com>\nCc: Peter Xu <peterx@redhat.com>\nCc: Rik van Riel <riel@surriel.com>\nCc: Roman Gushchin <roman.gushchin@linux.dev>\nCc: Shakeel Butt <shakeelb@google.com>\nCc: Yang Shi <shy828301@gmail.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "full_message": "mm: streamline COW logic in do_swap_page()\n\nCurrently we have a different COW logic when:\n* triggering a read-fault to swapin first and then trigger a write-fault\n  -> do_swap_page() + do_wp_page()\n* triggering a write-fault to swapin\n  -> do_swap_page() + do_wp_page() only if we fail reuse in do_swap_page()\n\nThe COW logic in do_swap_page() is different than our reuse logic in\ndo_wp_page().  The COW logic in do_wp_page() -- page_count() == 1 -- makes\ncurrently sure that we certainly don't have a remaining reference, e.g.,\nvia GUP, on the target page we want to reuse: if there is any unexpected\nreference, we have to copy to avoid information leaks.\n\nAs do_swap_page() behaves differently, in environments with swap enabled\nwe can currently have an unintended information leak from the parent to\nthe child, similar as known from CVE-2020-29374:\n\n\t1. Parent writes to anonymous page\n\t-> Page is mapped writable and modified\n\t2. Page is swapped out\n\t-> Page is unmapped and replaced by swap entry\n\t3. fork()\n\t-> Swap entries are copied to child\n\t4. Child pins page R/O\n\t-> Page is mapped R/O into child\n\t5. Child unmaps page\n\t-> Child still holds GUP reference\n\t6. Parent writes to page\n\t-> Page is reused in do_swap_page()\n\t-> Child can observe changes\n\nExchanging 2. and 3. should have the same effect.\n\nLet's apply the same COW logic as in do_wp_page(), conditionally trying to\nremove the page from the swapcache after freeing the swap entry, however,\nbefore actually mapping our page.  We can change the order now that we use\ntry_to_free_swap(), which doesn't care about the mapcount, instead of\nreuse_swap_page().\n\nTo handle references from the LRU pagevecs, conditionally drain the local\nLRU pagevecs when required, however, don't consider the page_count() when\ndeciding whether to drain to keep it simple for now.\n\nLink: https://lkml.kernel.org/r/20220131162940.210846-5-david@redhat.com\nSigned-off-by: David Hildenbrand <david@redhat.com>\nAcked-by: Vlastimil Babka <vbabka@suse.cz>\nCc: Andrea Arcangeli <aarcange@redhat.com>\nCc: Christoph Hellwig <hch@lst.de>\nCc: David Rientjes <rientjes@google.com>\nCc: Don Dutile <ddutile@redhat.com>\nCc: Hugh Dickins <hughd@google.com>\nCc: Jan Kara <jack@suse.cz>\nCc: Jann Horn <jannh@google.com>\nCc: Jason Gunthorpe <jgg@nvidia.com>\nCc: John Hubbard <jhubbard@nvidia.com>\nCc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>\nCc: Liang Zhang <zhangliang5@huawei.com>\nCc: Matthew Wilcox (Oracle) <willy@infradead.org>\nCc: Michal Hocko <mhocko@kernel.org>\nCc: Mike Kravetz <mike.kravetz@oracle.com>\nCc: Mike Rapoport <rppt@linux.ibm.com>\nCc: Nadav Amit <nadav.amit@gmail.com>\nCc: Oleg Nesterov <oleg@redhat.com>\nCc: Peter Xu <peterx@redhat.com>\nCc: Rik van Riel <riel@surriel.com>\nCc: Roman Gushchin <roman.gushchin@linux.dev>\nCc: Shakeel Butt <shakeelb@google.com>\nCc: Yang Shi <shy828301@gmail.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "author_name": "David Hildenbrand",
  "author_email": "david@redhat.com",
  "author_date": "Thu Mar 24 18:13:40 2022 -0700",
  "author_date_iso": "2022-03-24T18:13:40-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Thu Mar 24 19:06:50 2022 -0700",
  "committer_date_iso": "2022-03-24T19:06:50-07:00",
  "files_changed": [
    "mm/memory.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "mm/memory.c",
      "insertions": 43,
      "deletions": 12
    }
  ],
  "total_insertions": 43,
  "total_deletions": 12,
  "total_changes": 55,
  "parents": [
    "84d60fdd3733fb86c126f2adfd0361fdc44087c3"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2020-29374"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "mm/memory.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}