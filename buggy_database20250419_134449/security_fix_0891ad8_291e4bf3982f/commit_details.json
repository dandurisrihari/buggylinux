{
  "hash": "0891ad829d2a0501053703df66029e843e3b8365",
  "hash_short": "0891ad82",
  "subject": "Merge tag 'random_for_linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tytso/random",
  "body": "Pull /dev/random changes from Ted Ts'o:\n \"The /dev/random changes for 3.13 including a number of improvements in\n  the following areas: performance, avoiding waste of entropy, better\n  tracking of entropy estimates, support for non-x86 platforms that have\n  a register which can't be used for fine-grained timekeeping, but which\n  might be good enough for the random driver.\n\n  Also add some printk's so that we can see how quickly /dev/urandom can\n  get initialized, and when programs try to use /dev/urandom before it\n  is fully initialized (since this could be a security issue).  This\n  shouldn't be an issue on x86 desktop/laptops --- a test on my Lenovo\n  T430s laptop shows that /dev/urandom is getting fully initialized\n  approximately two seconds before the root file system is mounted\n  read/write --- this may be an issue with ARM and MIPS embedded/mobile\n  systems, though.  These printk's will be a useful canary before\n  potentially adding a future change to start blocking processes which\n  try to read from /dev/urandom before it is initialized, which is\n  something FreeBSD does already for security reasons, and which\n  security folks have been agitating for Linux to also adopt\"\n\n* tag 'random_for_linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tytso/random:\n  random: add debugging code to detect early use of get_random_bytes()\n  random: initialize the last_time field in struct timer_rand_state\n  random: don't zap entropy count in rand_initialize()\n  random: printk notifications for urandom pool initialization\n  random: make add_timer_randomness() fill the nonblocking pool first\n  random: convert DEBUG_ENT to tracepoints\n  random: push extra entropy to the output pools\n  random: drop trickle mode\n  random: adjust the generator polynomials in the mixing function slightly\n  random: speed up the fast_mix function by a factor of four\n  random: cap the rate which the /dev/urandom pool gets reseeded\n  random: optimize the entropy_store structure\n  random: optimize spinlock use in add_device_randomness()\n  random: fix the tracepoint for get_random_bytes(_arch)\n  random: account for entropy loss due to overwrites\n  random: allow fractional bits to be tracked\n  random: statically compute poolbitshift, poolbytes, poolbits\n  random: mix in architectural randomness earlier in extract_buf()",
  "full_message": "Merge tag 'random_for_linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tytso/random\n\nPull /dev/random changes from Ted Ts'o:\n \"The /dev/random changes for 3.13 including a number of improvements in\n  the following areas: performance, avoiding waste of entropy, better\n  tracking of entropy estimates, support for non-x86 platforms that have\n  a register which can't be used for fine-grained timekeeping, but which\n  might be good enough for the random driver.\n\n  Also add some printk's so that we can see how quickly /dev/urandom can\n  get initialized, and when programs try to use /dev/urandom before it\n  is fully initialized (since this could be a security issue).  This\n  shouldn't be an issue on x86 desktop/laptops --- a test on my Lenovo\n  T430s laptop shows that /dev/urandom is getting fully initialized\n  approximately two seconds before the root file system is mounted\n  read/write --- this may be an issue with ARM and MIPS embedded/mobile\n  systems, though.  These printk's will be a useful canary before\n  potentially adding a future change to start blocking processes which\n  try to read from /dev/urandom before it is initialized, which is\n  something FreeBSD does already for security reasons, and which\n  security folks have been agitating for Linux to also adopt\"\n\n* tag 'random_for_linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tytso/random:\n  random: add debugging code to detect early use of get_random_bytes()\n  random: initialize the last_time field in struct timer_rand_state\n  random: don't zap entropy count in rand_initialize()\n  random: printk notifications for urandom pool initialization\n  random: make add_timer_randomness() fill the nonblocking pool first\n  random: convert DEBUG_ENT to tracepoints\n  random: push extra entropy to the output pools\n  random: drop trickle mode\n  random: adjust the generator polynomials in the mixing function slightly\n  random: speed up the fast_mix function by a factor of four\n  random: cap the rate which the /dev/urandom pool gets reseeded\n  random: optimize the entropy_store structure\n  random: optimize spinlock use in add_device_randomness()\n  random: fix the tracepoint for get_random_bytes(_arch)\n  random: account for entropy loss due to overwrites\n  random: allow fractional bits to be tracked\n  random: statically compute poolbitshift, poolbytes, poolbits\n  random: mix in architectural randomness earlier in extract_buf()",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Sat Nov 16 10:19:15 2013 -0800",
  "author_date_iso": "2013-11-16T10:19:15-08:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Sat Nov 16 10:19:15 2013 -0800",
  "committer_date_iso": "2013-11-16T10:19:15-08:00",
  "files_changed": [
    "drivers/char/random.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "drivers/char/random.c",
      "insertions": 405,
      "deletions": 242
    },
    {
      "file": "include/trace/events/random.h",
      "insertions": 182,
      "deletions": 1
    }
  ],
  "total_insertions": 587,
  "total_deletions": 243,
  "total_changes": 830,
  "parents": [
    "f63c4824aa1b745cf283453fd53385230307d8d1",
    "392a546dc8368d1745f9891ef3f8f7c380de8650"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v3.13",
    "v3.13-rc1",
    "v3.13-rc2",
    "v3.13-rc3",
    "v3.13-rc4",
    "v3.13-rc5",
    "v3.13-rc6",
    "v3.13-rc7",
    "v3.13-rc8",
    "v3.14"
  ],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "security issue"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/char/random.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}