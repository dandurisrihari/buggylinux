commit c6c3187d66bc4e87086036266def4170742d7214
Author: Robert Richter <rrichter@amd.com>
Date:   Sat Feb 17 22:39:46 2024 +0100

    lib/firmware_table: Provide buffer length argument to cdat_table_parse()
    
    There exist card implementations with a CDAT table using a fixed size
    buffer, but with entries filled in that do not fill the whole table
    length size. Then, the last entry in the CDAT table may not mark the
    end of the CDAT table buffer specified by the length field in the CDAT
    header. It can be shorter with trailing unused (zero'ed) data. The
    actual table length is determined while reading all CDAT entries of
    the table with DOE.
    
    If the table is greater than expected (containing zero'ed trailing
    data), the CDAT parser fails with:
    
     [   48.691717] Malformed DSMAS table length: (24:0)
     [   48.702084] [CDAT:0x00] Invalid zero length
     [   48.711460] cxl_port endpoint1: Failed to parse CDAT: -22
    
    In addition, a check of the table buffer length is missing to prevent
    an out-of-bound access then parsing the CDAT table.
    
    Hardening code against device returning borked table. Fix that by
    providing an optional buffer length argument to
    acpi_parse_entries_array() that can be used by cdat_table_parse() to
    propagate the buffer size down to its users to check the buffer
    length. This also prevents a possible out-of-bound access mentioned.
    
    Add a check to warn about a malformed CDAT table length.
    
    Cc: Rafael J. Wysocki <rafael@kernel.org>
    Cc: Len Brown <lenb@kernel.org>
    Reviewed-by: Dave Jiang <dave.jiang@intel.com>
    Signed-off-by: Robert Richter <rrichter@amd.com>
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Link: https://lore.kernel.org/r/ZdEnopFO0Tl3t2O1@rric.localdomain
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/include/linux/fw_table.h b/include/linux/fw_table.h
index 95421860397a..3ff4c277296f 100644
--- a/include/linux/fw_table.h
+++ b/include/linux/fw_table.h
@@ -40,12 +40,14 @@ union acpi_subtable_headers {
 
 int acpi_parse_entries_array(char *id, unsigned long table_size,
 			     union fw_table_header *table_header,
+			     unsigned long max_length,
 			     struct acpi_subtable_proc *proc,
 			     int proc_num, unsigned int max_entries);
 
 int cdat_table_parse(enum acpi_cdat_type type,
 		     acpi_tbl_entry_handler_arg handler_arg, void *arg,
-		     struct acpi_table_cdat *table_header);
+		     struct acpi_table_cdat *table_header,
+		     unsigned long length);
 
 /* CXL is the only non-ACPI consumer of the FIRMWARE_TABLE library */
 #if IS_ENABLED(CONFIG_ACPI) && !IS_ENABLED(CONFIG_CXL_BUS)