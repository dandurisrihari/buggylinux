{
  "hash": "c6c3187d66bc4e87086036266def4170742d7214",
  "hash_short": "c6c3187d",
  "subject": "lib/firmware_table: Provide buffer length argument to cdat_table_parse()",
  "body": "There exist card implementations with a CDAT table using a fixed size\nbuffer, but with entries filled in that do not fill the whole table\nlength size. Then, the last entry in the CDAT table may not mark the\nend of the CDAT table buffer specified by the length field in the CDAT\nheader. It can be shorter with trailing unused (zero'ed) data. The\nactual table length is determined while reading all CDAT entries of\nthe table with DOE.\n\nIf the table is greater than expected (containing zero'ed trailing\ndata), the CDAT parser fails with:\n\n [   48.691717] Malformed DSMAS table length: (24:0)\n [   48.702084] [CDAT:0x00] Invalid zero length\n [   48.711460] cxl_port endpoint1: Failed to parse CDAT: -22\n\nIn addition, a check of the table buffer length is missing to prevent\nan out-of-bound access then parsing the CDAT table.\n\nHardening code against device returning borked table. Fix that by\nproviding an optional buffer length argument to\nacpi_parse_entries_array() that can be used by cdat_table_parse() to\npropagate the buffer size down to its users to check the buffer\nlength. This also prevents a possible out-of-bound access mentioned.\n\nAdd a check to warn about a malformed CDAT table length.\n\nCc: Rafael J. Wysocki <rafael@kernel.org>\nCc: Len Brown <lenb@kernel.org>\nReviewed-by: Dave Jiang <dave.jiang@intel.com>\nSigned-off-by: Robert Richter <rrichter@amd.com>\nReviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>\nLink: https://lore.kernel.org/r/ZdEnopFO0Tl3t2O1@rric.localdomain\nSigned-off-by: Dan Williams <dan.j.williams@intel.com>",
  "full_message": "lib/firmware_table: Provide buffer length argument to cdat_table_parse()\n\nThere exist card implementations with a CDAT table using a fixed size\nbuffer, but with entries filled in that do not fill the whole table\nlength size. Then, the last entry in the CDAT table may not mark the\nend of the CDAT table buffer specified by the length field in the CDAT\nheader. It can be shorter with trailing unused (zero'ed) data. The\nactual table length is determined while reading all CDAT entries of\nthe table with DOE.\n\nIf the table is greater than expected (containing zero'ed trailing\ndata), the CDAT parser fails with:\n\n [   48.691717] Malformed DSMAS table length: (24:0)\n [   48.702084] [CDAT:0x00] Invalid zero length\n [   48.711460] cxl_port endpoint1: Failed to parse CDAT: -22\n\nIn addition, a check of the table buffer length is missing to prevent\nan out-of-bound access then parsing the CDAT table.\n\nHardening code against device returning borked table. Fix that by\nproviding an optional buffer length argument to\nacpi_parse_entries_array() that can be used by cdat_table_parse() to\npropagate the buffer size down to its users to check the buffer\nlength. This also prevents a possible out-of-bound access mentioned.\n\nAdd a check to warn about a malformed CDAT table length.\n\nCc: Rafael J. Wysocki <rafael@kernel.org>\nCc: Len Brown <lenb@kernel.org>\nReviewed-by: Dave Jiang <dave.jiang@intel.com>\nSigned-off-by: Robert Richter <rrichter@amd.com>\nReviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>\nLink: https://lore.kernel.org/r/ZdEnopFO0Tl3t2O1@rric.localdomain\nSigned-off-by: Dan Williams <dan.j.williams@intel.com>",
  "author_name": "Robert Richter",
  "author_email": "rrichter@amd.com",
  "author_date": "Sat Feb 17 22:39:46 2024 +0100",
  "author_date_iso": "2024-02-17T22:39:46+01:00",
  "committer_name": "Dan Williams",
  "committer_email": "dan.j.williams@intel.com",
  "committer_date": "Wed Mar 13 00:03:21 2024 -0700",
  "committer_date_iso": "2024-03-13T00:03:21-07:00",
  "files_changed": [
    "drivers/acpi/tables.c",
    "drivers/cxl/core/cdat.c",
    "drivers/cxl/core/pci.c",
    "include/linux/fw_table.h",
    "lib/fw_table.c"
  ],
  "files_changed_count": 5,
  "stats": [
    {
      "file": "drivers/acpi/tables.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "drivers/cxl/core/cdat.c",
      "insertions": 3,
      "deletions": 3
    },
    {
      "file": "drivers/cxl/core/pci.c",
      "insertions": 7,
      "deletions": 1
    },
    {
      "file": "include/linux/fw_table.h",
      "insertions": 3,
      "deletions": 1
    },
    {
      "file": "lib/fw_table.c",
      "insertions": 10,
      "deletions": 5
    }
  ],
  "total_insertions": 24,
  "total_deletions": 11,
  "total_changes": 35,
  "parents": [
    "e0c818e00443ce4a704519d85a21e3c14179e3a6"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "Hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/acpi/tables.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/cxl/core/cdat.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/cxl/core/pci.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/fw_table.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "lib/fw_table.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}