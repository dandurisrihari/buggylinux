commit c6c3187d66bc4e87086036266def4170742d7214
Author: Robert Richter <rrichter@amd.com>
Date:   Sat Feb 17 22:39:46 2024 +0100

    lib/firmware_table: Provide buffer length argument to cdat_table_parse()
    
    There exist card implementations with a CDAT table using a fixed size
    buffer, but with entries filled in that do not fill the whole table
    length size. Then, the last entry in the CDAT table may not mark the
    end of the CDAT table buffer specified by the length field in the CDAT
    header. It can be shorter with trailing unused (zero'ed) data. The
    actual table length is determined while reading all CDAT entries of
    the table with DOE.
    
    If the table is greater than expected (containing zero'ed trailing
    data), the CDAT parser fails with:
    
     [   48.691717] Malformed DSMAS table length: (24:0)
     [   48.702084] [CDAT:0x00] Invalid zero length
     [   48.711460] cxl_port endpoint1: Failed to parse CDAT: -22
    
    In addition, a check of the table buffer length is missing to prevent
    an out-of-bound access then parsing the CDAT table.
    
    Hardening code against device returning borked table. Fix that by
    providing an optional buffer length argument to
    acpi_parse_entries_array() that can be used by cdat_table_parse() to
    propagate the buffer size down to its users to check the buffer
    length. This also prevents a possible out-of-bound access mentioned.
    
    Add a check to warn about a malformed CDAT table length.
    
    Cc: Rafael J. Wysocki <rafael@kernel.org>
    Cc: Len Brown <lenb@kernel.org>
    Reviewed-by: Dave Jiang <dave.jiang@intel.com>
    Signed-off-by: Robert Richter <rrichter@amd.com>
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Link: https://lore.kernel.org/r/ZdEnopFO0Tl3t2O1@rric.localdomain
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/cxl/core/cdat.c b/drivers/cxl/core/cdat.c
index 08fd0baea7a0..c8737e480789 100644
--- a/drivers/cxl/core/cdat.c
+++ b/drivers/cxl/core/cdat.c
@@ -149,13 +149,13 @@ static int cxl_cdat_endpoint_process(struct cxl_port *port,
 	int rc;
 
 	rc = cdat_table_parse(ACPI_CDAT_TYPE_DSMAS, cdat_dsmas_handler,
-			      dsmas_xa, port->cdat.table);
+			      dsmas_xa, port->cdat.table, port->cdat.length);
 	rc = cdat_table_parse_output(rc);
 	if (rc)
 		return rc;
 
 	rc = cdat_table_parse(ACPI_CDAT_TYPE_DSLBIS, cdat_dslbis_handler,
-			      dsmas_xa, port->cdat.table);
+			      dsmas_xa, port->cdat.table, port->cdat.length);
 	return cdat_table_parse_output(rc);
 }
 
@@ -477,7 +477,7 @@ void cxl_switch_parse_cdat(struct cxl_port *port)
 		return;
 
 	rc = cdat_table_parse(ACPI_CDAT_TYPE_SSLBIS, cdat_sslbis_handler,
-			      port, port->cdat.table);
+			      port, port->cdat.table, port->cdat.length);
 	rc = cdat_table_parse_output(rc);
 	if (rc)
 		dev_dbg(&port->dev, "Failed to parse SSLBIS: %d\n", rc);