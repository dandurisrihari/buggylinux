{
  "hash": "3f6984e7301f4a37285cc5962f97c83c7c3b8239",
  "hash_short": "3f6984e7",
  "subject": "Merge tag 'vfs-6.8.super' of git://git.kernel.org/pub/scm/linux/kernel/git/vfs/vfs",
  "body": "Pull vfs super updates from Christian Brauner:\n \"This contains the super work for this cycle including the long-awaited\n  series by Jan to make it possible to prevent writing to mounted block\n  devices:\n\n   - Writing to mounted devices is dangerous and can lead to filesystem\n     corruption as well as crashes. Furthermore syzbot comes with more\n     and more involved examples how to corrupt block device under a\n     mounted filesystem leading to kernel crashes and reports we can do\n     nothing about. Add tracking of writers to each block device and a\n     kernel cmdline argument which controls whether other writeable\n     opens to block devices open with BLK_OPEN_RESTRICT_WRITES flag are\n     allowed.\n\n     Note that this effectively only prevents modification of the\n     particular block device's page cache by other writers. The actual\n     device content can still be modified by other means - e.g. by\n     issuing direct scsi commands, by doing writes through devices lower\n     in the storage stack (e.g. in case loop devices, DM, or MD are\n     involved) etc. But blocking direct modifications of the block\n     device page cache is enough to give filesystems a chance to perform\n     data validation when loading data from the underlying storage and\n     thus prevent kernel crashes.\n\n     Syzbot can use this cmdline argument option to avoid uninteresting\n     crashes. Also users whose userspace setup does not need writing to\n     mounted block devices can set this option for hardening. We expect\n     that this will be interesting to quite a few workloads.\n\n     Btrfs is currently opted out of this because they still haven't\n     merged patches we require for this to work from three kernel\n     releases ago.\n\n   - Reimplement block device freezing and thawing as holder operations\n     on the block device.\n\n     This allows us to extend block device freezing to all devices\n     associated with a superblock and not just the main device. It also\n     allows us to remove get_active_super() and thus another function\n     that scans the global list of superblocks.\n\n     Freezing via additional block devices only works if the filesystem\n     chooses to use @fs_holder_ops for these additional devices as well.\n     That currently only includes ext4 and xfs.\n\n     Earlier releases switched get_tree_bdev() and mount_bdev() to use\n     @fs_holder_ops. The remaining nilfs2 open-coded version of\n     mount_bdev() has been converted to rely on @fs_holder_ops as well.\n     So block device freezing for the main block device will continue to\n     work as before.\n\n     There should be no regressions in functionality. The only special\n     case is btrfs where block device freezing for the main block device\n     never worked because sb->s_bdev isn't set. Block device freezing\n     for btrfs can be fixed once they can switch to @fs_holder_ops but\n     that can happen whenever they're ready\"\n\n* tag 'vfs-6.8.super' of git://git.kernel.org/pub/scm/linux/kernel/git/vfs/vfs: (27 commits)\n  block: Fix a memory leak in bdev_open_by_dev()\n  super: don't bother with WARN_ON_ONCE()\n  super: massage wait event mechanism\n  ext4: Block writes to journal device\n  xfs: Block writes to log device\n  fs: Block writes to mounted block devices\n  btrfs: Do not restrict writes to btrfs devices\n  block: Add config option to not allow writing to mounted devices\n  block: Remove blkdev_get_by_*() functions\n  bcachefs: Convert to bdev_open_by_path()\n  fs: handle freezing from multiple devices\n  fs: remove dead check\n  nilfs2: simplify device handling\n  fs: streamline thaw_super_locked\n  ext4: simplify device handling\n  xfs: simplify device handling\n  fs: simplify setup_bdev_super() calls\n  blkdev: comment fs_holder_ops\n  porting: document block device freeze and thaw changes\n  fs: remove unused helper\n  ...",
  "full_message": "Merge tag 'vfs-6.8.super' of git://git.kernel.org/pub/scm/linux/kernel/git/vfs/vfs\n\nPull vfs super updates from Christian Brauner:\n \"This contains the super work for this cycle including the long-awaited\n  series by Jan to make it possible to prevent writing to mounted block\n  devices:\n\n   - Writing to mounted devices is dangerous and can lead to filesystem\n     corruption as well as crashes. Furthermore syzbot comes with more\n     and more involved examples how to corrupt block device under a\n     mounted filesystem leading to kernel crashes and reports we can do\n     nothing about. Add tracking of writers to each block device and a\n     kernel cmdline argument which controls whether other writeable\n     opens to block devices open with BLK_OPEN_RESTRICT_WRITES flag are\n     allowed.\n\n     Note that this effectively only prevents modification of the\n     particular block device's page cache by other writers. The actual\n     device content can still be modified by other means - e.g. by\n     issuing direct scsi commands, by doing writes through devices lower\n     in the storage stack (e.g. in case loop devices, DM, or MD are\n     involved) etc. But blocking direct modifications of the block\n     device page cache is enough to give filesystems a chance to perform\n     data validation when loading data from the underlying storage and\n     thus prevent kernel crashes.\n\n     Syzbot can use this cmdline argument option to avoid uninteresting\n     crashes. Also users whose userspace setup does not need writing to\n     mounted block devices can set this option for hardening. We expect\n     that this will be interesting to quite a few workloads.\n\n     Btrfs is currently opted out of this because they still haven't\n     merged patches we require for this to work from three kernel\n     releases ago.\n\n   - Reimplement block device freezing and thawing as holder operations\n     on the block device.\n\n     This allows us to extend block device freezing to all devices\n     associated with a superblock and not just the main device. It also\n     allows us to remove get_active_super() and thus another function\n     that scans the global list of superblocks.\n\n     Freezing via additional block devices only works if the filesystem\n     chooses to use @fs_holder_ops for these additional devices as well.\n     That currently only includes ext4 and xfs.\n\n     Earlier releases switched get_tree_bdev() and mount_bdev() to use\n     @fs_holder_ops. The remaining nilfs2 open-coded version of\n     mount_bdev() has been converted to rely on @fs_holder_ops as well.\n     So block device freezing for the main block device will continue to\n     work as before.\n\n     There should be no regressions in functionality. The only special\n     case is btrfs where block device freezing for the main block device\n     never worked because sb->s_bdev isn't set. Block device freezing\n     for btrfs can be fixed once they can switch to @fs_holder_ops but\n     that can happen whenever they're ready\"\n\n* tag 'vfs-6.8.super' of git://git.kernel.org/pub/scm/linux/kernel/git/vfs/vfs: (27 commits)\n  block: Fix a memory leak in bdev_open_by_dev()\n  super: don't bother with WARN_ON_ONCE()\n  super: massage wait event mechanism\n  ext4: Block writes to journal device\n  xfs: Block writes to log device\n  fs: Block writes to mounted block devices\n  btrfs: Do not restrict writes to btrfs devices\n  block: Add config option to not allow writing to mounted devices\n  block: Remove blkdev_get_by_*() functions\n  bcachefs: Convert to bdev_open_by_path()\n  fs: handle freezing from multiple devices\n  fs: remove dead check\n  nilfs2: simplify device handling\n  fs: streamline thaw_super_locked\n  ext4: simplify device handling\n  xfs: simplify device handling\n  fs: simplify setup_bdev_super() calls\n  blkdev: comment fs_holder_ops\n  porting: document block device freeze and thaw changes\n  fs: remove unused helper\n  ...",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Mon Jan 8 10:43:51 2024 -0800",
  "author_date_iso": "2024-01-08T10:43:51-08:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Mon Jan 8 10:43:51 2024 -0800",
  "committer_date_iso": "2024-01-08T10:43:51-08:00",
  "files_changed": [
    "block/bdev.c",
    "fs/bcachefs/fs-ioctl.c",
    "fs/bcachefs/super-io.c",
    "fs/bcachefs/super_types.h",
    "fs/btrfs/super.c",
    "fs/super.c",
    "include/linux/blk_types.h",
    "include/linux/blkdev.h",
    "include/linux/fs.h"
  ],
  "files_changed_count": 9,
  "stats": [
    {
      "file": "Documentation/filesystems/porting.rst",
      "insertions": 12,
      "deletions": 0
    },
    {
      "file": "block/Kconfig",
      "insertions": 20,
      "deletions": 0
    },
    {
      "file": "block/bdev.c",
      "insertions": 151,
      "deletions": 107
    },
    {
      "file": "drivers/md/dm.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "fs/bcachefs/fs-ioctl.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "fs/bcachefs/super-io.c",
      "insertions": 10,
      "deletions": 9
    },
    {
      "file": "fs/bcachefs/super_types.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "fs/btrfs/super.c",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "fs/ext4/ioctl.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "fs/ext4/super.c",
      "insertions": 3,
      "deletions": 5
    },
    {
      "file": "fs/f2fs/file.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "fs/nilfs2/super.c",
      "insertions": 0,
      "deletions": 8
    },
    {
      "file": "fs/super.c",
      "insertions": 275,
      "deletions": 223
    },
    {
      "file": "fs/xfs/xfs_fsops.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "fs/xfs/xfs_super.c",
      "insertions": 6,
      "deletions": 18
    },
    {
      "file": "include/linux/blk_types.h",
      "insertions": 3,
      "deletions": 5
    },
    {
      "file": "include/linux/blkdev.h",
      "insertions": 21,
      "deletions": 8
    },
    {
      "file": "include/linux/fs.h",
      "insertions": 17,
      "deletions": 2
    }
  ],
  "total_insertions": 531,
  "total_deletions": 395,
  "total_changes": 926,
  "parents": [
    "c604110e662a54568073a03176402b624e740310",
    "8ff363ade395e72dc639810b6f59849c743c363e"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "block/bdev.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/bcachefs/fs-ioctl.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/btrfs/super.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/bcachefs/super_types.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/bcachefs/super-io.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/super.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/blk_types.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/blkdev.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/fs.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}