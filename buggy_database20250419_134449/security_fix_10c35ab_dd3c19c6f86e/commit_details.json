{
  "hash": "10c35abd35aa62c9aac56898ae0c63b4d7d115e5",
  "hash_short": "10c35abd",
  "subject": "cachefiles: Fix incorrect length return value in cachefiles_ondemand_fd_write_iter()",
  "body": "cachefiles_ondemand_fd_write_iter() function first aligns \"pos\" and \"len\"\nto block boundaries. When calling __cachefiles_write(), the aligned \"pos\"\nis passed in, but \"len\" is the original unaligned value(iter->count).\nAdditionally, the returned length of the write operation is the modified\n\"len\" aligned by block size, which is unreasonable.\n\nThe alignment of \"pos\" and \"len\" is intended only to check whether the\ncache has enough space. But the modified len should not be used as the\nreturn value of cachefiles_ondemand_fd_write_iter() because the length we\npassed to __cachefiles_write() is the previous \"len\". Doing so would result\nin a mismatch in the data written on-demand. For example, if the length of\nthe user state passed in is not aligned to the block size (the preread\nscene/DIO writes only need 512 alignment/Fault injection), the length of\nthe write will differ from the actual length of the return.\n\nTo solve this issue, since the __cachefiles_prepare_write() modifies the\nsize of \"len\", we pass \"aligned_len\" to __cachefiles_prepare_write() to\ncalculate the free blocks and use the original \"len\" as the return value of\ncachefiles_ondemand_fd_write_iter().\n\nFixes: c8383054506c (\"cachefiles: notify the user daemon when looking up cookie\")\nSigned-off-by: Zizhi Wo <wozizhi@huawei.com>\nLink: https://lore.kernel.org/r/20241107110649.3980193-2-wozizhi@huawei.com\nReviewed-by: David Howells <dhowells@redhat.com>\nSigned-off-by: Christian Brauner <brauner@kernel.org>",
  "full_message": "cachefiles: Fix incorrect length return value in cachefiles_ondemand_fd_write_iter()\n\ncachefiles_ondemand_fd_write_iter() function first aligns \"pos\" and \"len\"\nto block boundaries. When calling __cachefiles_write(), the aligned \"pos\"\nis passed in, but \"len\" is the original unaligned value(iter->count).\nAdditionally, the returned length of the write operation is the modified\n\"len\" aligned by block size, which is unreasonable.\n\nThe alignment of \"pos\" and \"len\" is intended only to check whether the\ncache has enough space. But the modified len should not be used as the\nreturn value of cachefiles_ondemand_fd_write_iter() because the length we\npassed to __cachefiles_write() is the previous \"len\". Doing so would result\nin a mismatch in the data written on-demand. For example, if the length of\nthe user state passed in is not aligned to the block size (the preread\nscene/DIO writes only need 512 alignment/Fault injection), the length of\nthe write will differ from the actual length of the return.\n\nTo solve this issue, since the __cachefiles_prepare_write() modifies the\nsize of \"len\", we pass \"aligned_len\" to __cachefiles_prepare_write() to\ncalculate the free blocks and use the original \"len\" as the return value of\ncachefiles_ondemand_fd_write_iter().\n\nFixes: c8383054506c (\"cachefiles: notify the user daemon when looking up cookie\")\nSigned-off-by: Zizhi Wo <wozizhi@huawei.com>\nLink: https://lore.kernel.org/r/20241107110649.3980193-2-wozizhi@huawei.com\nReviewed-by: David Howells <dhowells@redhat.com>\nSigned-off-by: Christian Brauner <brauner@kernel.org>",
  "author_name": "Zizhi Wo",
  "author_email": "wozizhi@huawei.com",
  "author_date": "Thu Nov 7 19:06:45 2024 +0800",
  "author_date_iso": "2024-11-07T19:06:45+08:00",
  "committer_name": "Christian Brauner",
  "committer_email": "brauner@kernel.org",
  "committer_date": "Mon Nov 11 14:39:37 2024 +0100",
  "committer_date_iso": "2024-11-11T14:39:37+01:00",
  "files_changed": [
    "fs/cachefiles/ondemand.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "fs/cachefiles/ondemand.c",
      "insertions": 2,
      "deletions": 2
    }
  ],
  "total_insertions": 2,
  "total_deletions": 2,
  "total_changes": 4,
  "parents": [
    "9b8e8091c86391333d217e837883a729b9cebac7"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/cachefiles/ondemand.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}