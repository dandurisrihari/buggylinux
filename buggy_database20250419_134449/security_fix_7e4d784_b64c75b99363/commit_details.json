{
  "hash": "7e4d784f5810bba76c4593791028e13cce4af547",
  "hash_short": "7e4d784f",
  "subject": "net: hold netdev instance lock during rtnetlink operations",
  "body": "To preserve the atomicity, hold the lock while applying multiple\nattributes. The major issue with a full conversion to the instance\nlock are software nesting devices (bonding/team/vrf/etc). Those\ndevices call into the core stack for their lower (potentially\nreal hw) devices. To avoid explicitly wrapping all those places\ninto instance lock/unlock, introduce new API boundaries:\n\n- (some) existing dev_xxx calls are now considered \"external\"\n  (to drivers) APIs and they transparently grab the instance\n  lock if needed (dev_api.c)\n- new netif_xxx calls are internal core stack API (naming is\n  sketchy, I've tried netdev_xxx_locked per Jakub's suggestion,\n  but it feels a bit verbose; but happy to get back to this\n  naming scheme if this is the preference)\n\nThis avoids touching most of the existing ioctl/sysfs/drivers paths.\n\nNote the special handling of ndo_xxx_slave operations: I exploit\nthe fact that none of the drivers that call these functions\nneed/use instance lock. At the same time, they use dev_xxx\nAPIs, so the lower device has to be unlocked.\n\nChanges in unregister_netdevice_many_notify (to protect dev->state\nwith instance lock) trigger lockdep - the loop over close_list\n(mostly from cleanup_net) introduces spurious ordering issues.\nnetdev_lock_cmp_fn has a justification on why it's ok to suppress\nfor now.\n\nCc: Saeed Mahameed <saeed@kernel.org>\nSigned-off-by: Stanislav Fomichev <sdf@fomichev.me>\nLink: https://patch.msgid.link/20250305163732.2766420-7-sdf@fomichev.me\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
  "full_message": "net: hold netdev instance lock during rtnetlink operations\n\nTo preserve the atomicity, hold the lock while applying multiple\nattributes. The major issue with a full conversion to the instance\nlock are software nesting devices (bonding/team/vrf/etc). Those\ndevices call into the core stack for their lower (potentially\nreal hw) devices. To avoid explicitly wrapping all those places\ninto instance lock/unlock, introduce new API boundaries:\n\n- (some) existing dev_xxx calls are now considered \"external\"\n  (to drivers) APIs and they transparently grab the instance\n  lock if needed (dev_api.c)\n- new netif_xxx calls are internal core stack API (naming is\n  sketchy, I've tried netdev_xxx_locked per Jakub's suggestion,\n  but it feels a bit verbose; but happy to get back to this\n  naming scheme if this is the preference)\n\nThis avoids touching most of the existing ioctl/sysfs/drivers paths.\n\nNote the special handling of ndo_xxx_slave operations: I exploit\nthe fact that none of the drivers that call these functions\nneed/use instance lock. At the same time, they use dev_xxx\nAPIs, so the lower device has to be unlocked.\n\nChanges in unregister_netdevice_many_notify (to protect dev->state\nwith instance lock) trigger lockdep - the loop over close_list\n(mostly from cleanup_net) introduces spurious ordering issues.\nnetdev_lock_cmp_fn has a justification on why it's ok to suppress\nfor now.\n\nCc: Saeed Mahameed <saeed@kernel.org>\nSigned-off-by: Stanislav Fomichev <sdf@fomichev.me>\nLink: https://patch.msgid.link/20250305163732.2766420-7-sdf@fomichev.me\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
  "author_name": "Stanislav Fomichev",
  "author_email": "sdf@fomichev.me",
  "author_date": "Wed Mar 5 08:37:24 2025 -0800",
  "author_date_iso": "2025-03-05T08:37:24-08:00",
  "committer_name": "Jakub Kicinski",
  "committer_email": "kuba@kernel.org",
  "committer_date": "Thu Mar 6 12:59:44 2025 -0800",
  "committer_date_iso": "2025-03-06T12:59:44-08:00",
  "files_changed": [
    "include/linux/netdevice.h",
    "net/core/Makefile",
    "net/core/dev.c",
    "net/core/dev.h",
    "net/core/dev_api.c",
    "net/core/rtnetlink.c"
  ],
  "files_changed_count": 6,
  "stats": [
    {
      "file": "include/linux/netdevice.h",
      "insertions": 34,
      "deletions": 6
    },
    {
      "file": "net/core/Makefile",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "net/core/dev.c",
      "insertions": 29,
      "deletions": 125
    },
    {
      "file": "net/core/dev.h",
      "insertions": 9,
      "deletions": 4
    },
    {
      "file": "net/core/dev_api.c",
      "insertions": 224,
      "deletions": 0
    },
    {
      "file": "net/core/rtnetlink.c",
      "insertions": 32,
      "deletions": 14
    }
  ],
  "total_insertions": 329,
  "total_deletions": 150,
  "total_changes": 479,
  "parents": [
    "cae03e5bdd9e0c8570506c50f1f234da40201732"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "net/core/dev_api.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/core/Makefile",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/core/rtnetlink.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/core/dev.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/core/dev.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/netdevice.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}