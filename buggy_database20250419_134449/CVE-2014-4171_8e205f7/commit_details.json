{
  "hash": "8e205f779d1443a94b5ae81aa359cb535dd3021e",
  "hash_short": "8e205f77",
  "subject": "shmem: fix faulting into a hole, not taking i_mutex",
  "body": "Commit f00cdc6df7d7 (\"shmem: fix faulting into a hole while it's\npunched\") was buggy: Sasha sent a lockdep report to remind us that\ngrabbing i_mutex in the fault path is a no-no (write syscall may already\nhold i_mutex while faulting user buffer).\n\nWe tried a completely different approach (see following patch) but that\nproved inadequate: good enough for a rational workload, but not good\nenough against trinity - which forks off so many mappings of the object\nthat contention on i_mmap_mutex while hole-puncher holds i_mutex builds\ninto serious starvation when concurrent faults force the puncher to fall\nback to single-page unmap_mapping_range() searches of the i_mmap tree.\n\nSo return to the original umbrella approach, but keep away from i_mutex\nthis time.  We really don't want to bloat every shmem inode with a new\nmutex or completion, just to protect this unlikely case from trinity.\nSo extend the original with wait_queue_head on stack at the hole-punch\nend, and wait_queue item on the stack at the fault end.\n\nThis involves further use of i_lock to guard against the races: lockdep\nhas been happy so far, and I see fs/inode.c:unlock_new_inode() holds\ni_lock around wake_up_bit(), which is comparable to what we do here.\ni_lock is more convenient, but we could switch to shmem's info->lock.\n\nThis issue has been tagged with CVE-2014-4171, which will require commit\nf00cdc6df7d7 and this and the following patch to be backported: we\nsuggest to 3.1+, though in fact the trinity forkbomb effect might go\nback as far as 2.6.16, when madvise(,,MADV_REMOVE) came in - or might\nnot, since much has changed, with i_mmap_mutex a spinlock before 3.0.\nAnyone running trinity on 3.0 and earlier? I don't think we need care.\n\nSigned-off-by: Hugh Dickins <hughd@google.com>\nReported-by: Sasha Levin <sasha.levin@oracle.com>\nTested-by: Sasha Levin <sasha.levin@oracle.com>\nCc: Vlastimil Babka <vbabka@suse.cz>\nCc: Konstantin Khlebnikov <koct9i@gmail.com>\nCc: Johannes Weiner <hannes@cmpxchg.org>\nCc: Lukas Czerner <lczerner@redhat.com>\nCc: Dave Jones <davej@redhat.com>\nCc: <stable@vger.kernel.org>\t[3.1+]\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "full_message": "shmem: fix faulting into a hole, not taking i_mutex\n\nCommit f00cdc6df7d7 (\"shmem: fix faulting into a hole while it's\npunched\") was buggy: Sasha sent a lockdep report to remind us that\ngrabbing i_mutex in the fault path is a no-no (write syscall may already\nhold i_mutex while faulting user buffer).\n\nWe tried a completely different approach (see following patch) but that\nproved inadequate: good enough for a rational workload, but not good\nenough against trinity - which forks off so many mappings of the object\nthat contention on i_mmap_mutex while hole-puncher holds i_mutex builds\ninto serious starvation when concurrent faults force the puncher to fall\nback to single-page unmap_mapping_range() searches of the i_mmap tree.\n\nSo return to the original umbrella approach, but keep away from i_mutex\nthis time.  We really don't want to bloat every shmem inode with a new\nmutex or completion, just to protect this unlikely case from trinity.\nSo extend the original with wait_queue_head on stack at the hole-punch\nend, and wait_queue item on the stack at the fault end.\n\nThis involves further use of i_lock to guard against the races: lockdep\nhas been happy so far, and I see fs/inode.c:unlock_new_inode() holds\ni_lock around wake_up_bit(), which is comparable to what we do here.\ni_lock is more convenient, but we could switch to shmem's info->lock.\n\nThis issue has been tagged with CVE-2014-4171, which will require commit\nf00cdc6df7d7 and this and the following patch to be backported: we\nsuggest to 3.1+, though in fact the trinity forkbomb effect might go\nback as far as 2.6.16, when madvise(,,MADV_REMOVE) came in - or might\nnot, since much has changed, with i_mmap_mutex a spinlock before 3.0.\nAnyone running trinity on 3.0 and earlier? I don't think we need care.\n\nSigned-off-by: Hugh Dickins <hughd@google.com>\nReported-by: Sasha Levin <sasha.levin@oracle.com>\nTested-by: Sasha Levin <sasha.levin@oracle.com>\nCc: Vlastimil Babka <vbabka@suse.cz>\nCc: Konstantin Khlebnikov <koct9i@gmail.com>\nCc: Johannes Weiner <hannes@cmpxchg.org>\nCc: Lukas Czerner <lczerner@redhat.com>\nCc: Dave Jones <davej@redhat.com>\nCc: <stable@vger.kernel.org>\t[3.1+]\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "author_name": "Hugh Dickins",
  "author_email": "hughd@google.com",
  "author_date": "Wed Jul 23 14:00:10 2014 -0700",
  "author_date_iso": "2014-07-23T14:00:10-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Wed Jul 23 15:10:54 2014 -0700",
  "committer_date_iso": "2014-07-23T15:10:54-07:00",
  "files_changed": [
    "mm/shmem.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "mm/shmem.c",
      "insertions": 52,
      "deletions": 26
    }
  ],
  "total_insertions": 52,
  "total_deletions": 26,
  "total_changes": 78,
  "parents": [
    "c118678bc79e8241f9d3434d9324c6400d72f48a"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v3.16",
    "v3.16-rc7",
    "v3.17",
    "v3.17-rc1",
    "v3.17-rc2",
    "v3.17-rc3",
    "v3.17-rc4",
    "v3.17-rc5",
    "v3.17-rc6",
    "v3.17-rc7"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2014-4171"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "mm/shmem.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}