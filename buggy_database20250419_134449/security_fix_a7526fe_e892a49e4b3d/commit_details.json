{
  "hash": "a7526fe8b94eced7d82aa00b2bcca44e39ae0769",
  "hash_short": "a7526fe8",
  "subject": "mm, slab: put should_failslab() back behind CONFIG_SHOULD_FAILSLAB",
  "body": "Patch series \"revert unconditional slab and page allocator fault injection\ncalls\".\n\nThese two patches largely revert commits that added function call overhead\ninto slab and page allocation hotpaths and that cannot be currently\ndisabled even though related CONFIG_ options do exist.\n\nA much more involved solution that can keep the callsites always existing\nbut hidden behind a static key if unused, is possible [1] and can be\npursued by anyone who believes it's necessary.  Meanwhile the fact the\nshould_failslab() error injection is already not functional on kernels\nbuilt with current gcc without anyone noticing [2], and lukewarm response\nto [1] suggests the need is not there.  I believe it will be more fair to\nhave the state after this series as a baseline for possible further\noptimisation, instead of the unconditional overhead.\n\nFor example a possible compromise for anyone who's fine with an empty\nfunction call overhead but not the full CONFIG_FAILSLAB /\nCONFIG_FAIL_PAGE_ALLOC overhead is to reuse patch 1 from [1] but insert a\nstatic key check only inside should_failslab() and\nshould_fail_alloc_page() before performing the more expensive checks.\n\n[1] https://lore.kernel.org/all/20240620-fault-injection-statickeys-v2-0-e23947d3d84b@suse.cz/#t\n[2] https://github.com/bpftrace/bpftrace/issues/3258\n\n\nThis patch (of 2):\n\nThis mostly reverts commit 4f6923fbb352 (\"mm: make should_failslab always\navailable for fault injection\").  The commit made should_failslab() a\nnoinline function that's always called from the slab allocation hotpath,\neven if it's empty because CONFIG_SHOULD_FAILSLAB is not enabled, and\nthere is no option to disable that call.  This is visible in profiles and\nthe function call overhead can be noticeable especially with cpu\nmitigations.\n\nMeanwhile the bpftrace program example in the commit silently does not\nwork without CONFIG_SHOULD_FAILSLAB anyway with a recent gcc, because the\nempty function gets a .constprop clone that is actually being called\n(uselessly) from the slab hotpath, while the error injection is hooked to\nthe original function that's not being called at all [1].\n\nThus put the whole should_failslab() function back behind\nCONFIG_SHOULD_FAILSLAB.  It's not a complete revert of 4f6923fbb352 - the\nint return type that returns -ENOMEM on failure is preserved, as well\nALLOW_ERROR_INJECTION annotation.  The BTF_ID() record that was meanwhile\nadded is also guarded by CONFIG_SHOULD_FAILSLAB.\n\n[1] https://github.com/bpftrace/bpftrace/issues/3258\n\nLink: https://lkml.kernel.org/r/20240711-b4-fault-injection-reverts-v1-0-9e2651945d68@suse.cz\nLink: https://lkml.kernel.org/r/20240711-b4-fault-injection-reverts-v1-1-9e2651945d68@suse.cz\nSigned-off-by: Vlastimil Babka <vbabka@suse.cz>\nCc: Akinobu Mita <akinobu.mita@gmail.com>\nCc: Alexei Starovoitov <ast@kernel.org>\nCc: Andrii Nakryiko <andrii@kernel.org>\nCc: Christoph Lameter <cl@linux.com>\nCc: Daniel Borkmann <daniel@iogearbox.net>\nCc: David Rientjes <rientjes@google.com>\nCc: Eduard Zingerman <eddyz87@gmail.com>\nCc: Hao Luo <haoluo@google.com>\nCc: Hyeonggon Yoo <42.hyeyoo@gmail.com>\nCc: Jiri Olsa <jolsa@kernel.org>\nCc: John Fastabend <john.fastabend@gmail.com>\nCc: KP Singh <kpsingh@kernel.org>\nCc: Martin KaFai Lau <martin.lau@linux.dev>\nCc: Mateusz Guzik <mjguzik@gmail.com>\nCc: Roman Gushchin <roman.gushchin@linux.dev>\nCc: Song Liu <song@kernel.org>\nCc: Stanislav Fomichev <sdf@fomichev.me>\nCc: Yonghong Song <yonghong.song@linux.dev>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>",
  "full_message": "mm, slab: put should_failslab() back behind CONFIG_SHOULD_FAILSLAB\n\nPatch series \"revert unconditional slab and page allocator fault injection\ncalls\".\n\nThese two patches largely revert commits that added function call overhead\ninto slab and page allocation hotpaths and that cannot be currently\ndisabled even though related CONFIG_ options do exist.\n\nA much more involved solution that can keep the callsites always existing\nbut hidden behind a static key if unused, is possible [1] and can be\npursued by anyone who believes it's necessary.  Meanwhile the fact the\nshould_failslab() error injection is already not functional on kernels\nbuilt with current gcc without anyone noticing [2], and lukewarm response\nto [1] suggests the need is not there.  I believe it will be more fair to\nhave the state after this series as a baseline for possible further\noptimisation, instead of the unconditional overhead.\n\nFor example a possible compromise for anyone who's fine with an empty\nfunction call overhead but not the full CONFIG_FAILSLAB /\nCONFIG_FAIL_PAGE_ALLOC overhead is to reuse patch 1 from [1] but insert a\nstatic key check only inside should_failslab() and\nshould_fail_alloc_page() before performing the more expensive checks.\n\n[1] https://lore.kernel.org/all/20240620-fault-injection-statickeys-v2-0-e23947d3d84b@suse.cz/#t\n[2] https://github.com/bpftrace/bpftrace/issues/3258\n\n\nThis patch (of 2):\n\nThis mostly reverts commit 4f6923fbb352 (\"mm: make should_failslab always\navailable for fault injection\").  The commit made should_failslab() a\nnoinline function that's always called from the slab allocation hotpath,\neven if it's empty because CONFIG_SHOULD_FAILSLAB is not enabled, and\nthere is no option to disable that call.  This is visible in profiles and\nthe function call overhead can be noticeable especially with cpu\nmitigations.\n\nMeanwhile the bpftrace program example in the commit silently does not\nwork without CONFIG_SHOULD_FAILSLAB anyway with a recent gcc, because the\nempty function gets a .constprop clone that is actually being called\n(uselessly) from the slab hotpath, while the error injection is hooked to\nthe original function that's not being called at all [1].\n\nThus put the whole should_failslab() function back behind\nCONFIG_SHOULD_FAILSLAB.  It's not a complete revert of 4f6923fbb352 - the\nint return type that returns -ENOMEM on failure is preserved, as well\nALLOW_ERROR_INJECTION annotation.  The BTF_ID() record that was meanwhile\nadded is also guarded by CONFIG_SHOULD_FAILSLAB.\n\n[1] https://github.com/bpftrace/bpftrace/issues/3258\n\nLink: https://lkml.kernel.org/r/20240711-b4-fault-injection-reverts-v1-0-9e2651945d68@suse.cz\nLink: https://lkml.kernel.org/r/20240711-b4-fault-injection-reverts-v1-1-9e2651945d68@suse.cz\nSigned-off-by: Vlastimil Babka <vbabka@suse.cz>\nCc: Akinobu Mita <akinobu.mita@gmail.com>\nCc: Alexei Starovoitov <ast@kernel.org>\nCc: Andrii Nakryiko <andrii@kernel.org>\nCc: Christoph Lameter <cl@linux.com>\nCc: Daniel Borkmann <daniel@iogearbox.net>\nCc: David Rientjes <rientjes@google.com>\nCc: Eduard Zingerman <eddyz87@gmail.com>\nCc: Hao Luo <haoluo@google.com>\nCc: Hyeonggon Yoo <42.hyeyoo@gmail.com>\nCc: Jiri Olsa <jolsa@kernel.org>\nCc: John Fastabend <john.fastabend@gmail.com>\nCc: KP Singh <kpsingh@kernel.org>\nCc: Martin KaFai Lau <martin.lau@linux.dev>\nCc: Mateusz Guzik <mjguzik@gmail.com>\nCc: Roman Gushchin <roman.gushchin@linux.dev>\nCc: Song Liu <song@kernel.org>\nCc: Stanislav Fomichev <sdf@fomichev.me>\nCc: Yonghong Song <yonghong.song@linux.dev>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>",
  "author_name": "Vlastimil Babka",
  "author_email": "vbabka@suse.cz",
  "author_date": "Thu Jul 11 18:35:30 2024 +0200",
  "author_date_iso": "2024-07-11T18:35:30+02:00",
  "committer_name": "Andrew Morton",
  "committer_email": "akpm@linux-foundation.org",
  "committer_date": "Wed Jul 17 21:05:18 2024 -0700",
  "committer_date_iso": "2024-07-17T21:05:18-07:00",
  "files_changed": [
    "include/linux/fault-inject.h",
    "kernel/bpf/verifier.c",
    "mm/failslab.c",
    "mm/slub.c"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "include/linux/fault-inject.h",
      "insertions": 2,
      "deletions": 3
    },
    {
      "file": "kernel/bpf/verifier.c",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "mm/failslab.c",
      "insertions": 8,
      "deletions": 6
    },
    {
      "file": "mm/slub.c",
      "insertions": 0,
      "deletions": 8
    }
  ],
  "total_insertions": 12,
  "total_deletions": 17,
  "total_changes": 29,
  "parents": [
    "7b7aca6d7c0f9b2d9400bfc57cb2b23cfbd5134d"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/linux/fault-inject.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/bpf/verifier.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/failslab.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/slub.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}