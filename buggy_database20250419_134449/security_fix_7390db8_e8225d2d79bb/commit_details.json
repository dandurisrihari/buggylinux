{
  "hash": "7390db8aea0d64e9deb28b8e1ce716f5020c7ee5",
  "hash_short": "7390db8a",
  "subject": "x86/bhi: Add support for clearing branch history at syscall entry",
  "body": "Branch History Injection (BHI) attacks may allow a malicious application to\ninfluence indirect branch prediction in kernel by poisoning the branch\nhistory. eIBRS isolates indirect branch targets in ring0.  The BHB can\nstill influence the choice of indirect branch predictor entry, and although\nbranch predictor entries are isolated between modes when eIBRS is enabled,\nthe BHB itself is not isolated between modes.\n\nAlder Lake and new processors supports a hardware control BHI_DIS_S to\nmitigate BHI.  For older processors Intel has released a software sequence\nto clear the branch history on parts that don't support BHI_DIS_S. Add\nsupport to execute the software sequence at syscall entry and VMexit to\noverwrite the branch history.\n\nFor now, branch history is not cleared at interrupt entry, as malicious\napplications are not believed to have sufficient control over the\nregisters, since previous register state is cleared at interrupt\nentry. Researchers continue to poke at this area and it may become\nnecessary to clear at interrupt entry as well in the future.\n\nThis mitigation is only defined here. It is enabled later.\n\nSigned-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>\nCo-developed-by: Daniel Sneddon <daniel.sneddon@linux.intel.com>\nSigned-off-by: Daniel Sneddon <daniel.sneddon@linux.intel.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nReviewed-by: Alexandre Chartre <alexandre.chartre@oracle.com>\nReviewed-by: Josh Poimboeuf <jpoimboe@kernel.org>",
  "full_message": "x86/bhi: Add support for clearing branch history at syscall entry\n\nBranch History Injection (BHI) attacks may allow a malicious application to\ninfluence indirect branch prediction in kernel by poisoning the branch\nhistory. eIBRS isolates indirect branch targets in ring0.  The BHB can\nstill influence the choice of indirect branch predictor entry, and although\nbranch predictor entries are isolated between modes when eIBRS is enabled,\nthe BHB itself is not isolated between modes.\n\nAlder Lake and new processors supports a hardware control BHI_DIS_S to\nmitigate BHI.  For older processors Intel has released a software sequence\nto clear the branch history on parts that don't support BHI_DIS_S. Add\nsupport to execute the software sequence at syscall entry and VMexit to\noverwrite the branch history.\n\nFor now, branch history is not cleared at interrupt entry, as malicious\napplications are not believed to have sufficient control over the\nregisters, since previous register state is cleared at interrupt\nentry. Researchers continue to poke at this area and it may become\nnecessary to clear at interrupt entry as well in the future.\n\nThis mitigation is only defined here. It is enabled later.\n\nSigned-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>\nCo-developed-by: Daniel Sneddon <daniel.sneddon@linux.intel.com>\nSigned-off-by: Daniel Sneddon <daniel.sneddon@linux.intel.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nReviewed-by: Alexandre Chartre <alexandre.chartre@oracle.com>\nReviewed-by: Josh Poimboeuf <jpoimboe@kernel.org>",
  "author_name": "Pawan Gupta",
  "author_email": "pawan.kumar.gupta@linux.intel.com",
  "author_date": "Mon Mar 11 08:56:58 2024 -0700",
  "author_date_iso": "2024-03-11T08:56:58-07:00",
  "committer_name": "Thomas Gleixner",
  "committer_email": "tglx@linutronix.de",
  "committer_date": "Mon Apr 8 19:27:05 2024 +0200",
  "committer_date_iso": "2024-04-08T19:27:05+02:00",
  "files_changed": [
    "arch/x86/entry/common.c",
    "arch/x86/entry/entry_64.S",
    "arch/x86/entry/entry_64_compat.S",
    "arch/x86/include/asm/cpufeatures.h",
    "arch/x86/include/asm/nospec-branch.h",
    "arch/x86/include/asm/syscall.h",
    "arch/x86/kvm/vmx/vmenter.S"
  ],
  "files_changed_count": 7,
  "stats": [
    {
      "file": "arch/x86/entry/common.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/x86/entry/entry_64.S",
      "insertions": 61,
      "deletions": 0
    },
    {
      "file": "arch/x86/entry/entry_64_compat.S",
      "insertions": 16,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/cpufeatures.h",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "arch/x86/include/asm/nospec-branch.h",
      "insertions": 12,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/syscall.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/kvm/vmx/vmenter.S",
      "insertions": 2,
      "deletions": 0
    }
  ],
  "total_insertions": 96,
  "total_deletions": 3,
  "total_changes": 99,
  "parents": [
    "1e3ad78334a69b36e107232e337f9d693dcc9df2"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "Injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/entry/common.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kvm/vmx/vmenter.S",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/nospec-branch.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/cpufeatures.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/entry/entry_64.S",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/entry/entry_64_compat.S",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/syscall.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}