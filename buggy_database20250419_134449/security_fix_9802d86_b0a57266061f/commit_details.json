{
  "hash": "9802d86585db91655c7d1929a4f6bbe0952ea88e",
  "hash_short": "9802d865",
  "subject": "bpf: add a bpf_override_function helper",
  "body": "Error injection is sloppy and very ad-hoc.  BPF could fill this niche\nperfectly with it's kprobe functionality.  We could make sure errors are\nonly triggered in specific call chains that we care about with very\nspecific situations.  Accomplish this with the bpf_override_funciton\nhelper.  This will modify the probe'd callers return value to the\nspecified value and set the PC to an override function that simply\nreturns, bypassing the originally probed function.  This gives us a nice\nclean way to implement systematic error injection for all of our code\npaths.\n\nAcked-by: Alexei Starovoitov <ast@kernel.org>\nAcked-by: Ingo Molnar <mingo@kernel.org>\nSigned-off-by: Josef Bacik <jbacik@fb.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>",
  "full_message": "bpf: add a bpf_override_function helper\n\nError injection is sloppy and very ad-hoc.  BPF could fill this niche\nperfectly with it's kprobe functionality.  We could make sure errors are\nonly triggered in specific call chains that we care about with very\nspecific situations.  Accomplish this with the bpf_override_funciton\nhelper.  This will modify the probe'd callers return value to the\nspecified value and set the PC to an override function that simply\nreturns, bypassing the originally probed function.  This gives us a nice\nclean way to implement systematic error injection for all of our code\npaths.\n\nAcked-by: Alexei Starovoitov <ast@kernel.org>\nAcked-by: Ingo Molnar <mingo@kernel.org>\nSigned-off-by: Josef Bacik <jbacik@fb.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>",
  "author_name": "Josef Bacik",
  "author_email": "jbacik@fb.com",
  "author_date": "Mon Dec 11 11:36:48 2017 -0500",
  "author_date_iso": "2017-12-11T11:36:48-05:00",
  "committer_name": "Alexei Starovoitov",
  "committer_email": "ast@kernel.org",
  "committer_date": "Tue Dec 12 09:02:34 2017 -0800",
  "committer_date_iso": "2017-12-12T09:02:34-08:00",
  "files_changed": [
    "arch/Kconfig",
    "arch/x86/Kconfig",
    "arch/x86/include/asm/kprobes.h",
    "arch/x86/include/asm/ptrace.h",
    "arch/x86/kernel/kprobes/ftrace.c",
    "include/linux/filter.h",
    "include/linux/trace_events.h",
    "include/uapi/linux/bpf.h",
    "kernel/bpf/core.c",
    "kernel/bpf/verifier.c",
    "kernel/events/core.c",
    "kernel/trace/Kconfig",
    "kernel/trace/bpf_trace.c",
    "kernel/trace/trace_kprobe.c",
    "kernel/trace/trace_probe.h"
  ],
  "files_changed_count": 15,
  "stats": [
    {
      "file": "arch/Kconfig",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "arch/x86/Kconfig",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/kprobes.h",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/ptrace.h",
      "insertions": 5,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/kprobes/ftrace.c",
      "insertions": 14,
      "deletions": 0
    },
    {
      "file": "include/linux/filter.h",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "include/linux/trace_events.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "include/uapi/linux/bpf.h",
      "insertions": 6,
      "deletions": 1
    },
    {
      "file": "kernel/bpf/core.c",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "kernel/bpf/verifier.c",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "kernel/events/core.c",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "kernel/trace/Kconfig",
      "insertions": 11,
      "deletions": 0
    },
    {
      "file": "kernel/trace/bpf_trace.c",
      "insertions": 35,
      "deletions": 0
    },
    {
      "file": "kernel/trace/trace_kprobe.c",
      "insertions": 48,
      "deletions": 7
    },
    {
      "file": "kernel/trace/trace_probe.h",
      "insertions": 12,
      "deletions": 0
    }
  ],
  "total_insertions": 154,
  "total_deletions": 9,
  "total_changes": 163,
  "parents": [
    "8556e50994c8a8f5282fea008ae084d6d080648a"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.16",
    "v4.16-rc1",
    "v4.16-rc2",
    "v4.16-rc3",
    "v4.16-rc4",
    "v4.16-rc5",
    "v4.16-rc6",
    "v4.16-rc7",
    "v4.17",
    "v4.17-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/kprobes.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/ptrace.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/kprobes/ftrace.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/filter.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/uapi/linux/bpf.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/trace_events.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/trace/trace_probe.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/bpf/verifier.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/bpf/core.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/trace/bpf_trace.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/trace/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/trace/trace_kprobe.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/events/core.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}