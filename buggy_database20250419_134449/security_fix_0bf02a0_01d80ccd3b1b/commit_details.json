{
  "hash": "0bf02a0d80427f263195c1e5a4c8ada14bd5d261",
  "hash_short": "0bf02a0d",
  "subject": "perf bench: Add build-id injection benchmark",
  "body": "Sometimes I can see that 'perf record' piped with 'perf inject' take a\nlong time processing build-ids.\n\nSo introduce a inject-build-id benchmark to the internals benchmark\nsuite to measure its overhead regularly.\n\nIt runs the 'perf inject' command internally and feeds the given number\nof synthesized events (MMAP2 + SAMPLE basically).\n\n  Usage: perf bench internals inject-build-id <options>\n\n    -i, --iterations <n>  Number of iterations used to compute average (default: 100)\n    -m, --nr-mmaps <n>    Number of mmap events for each iteration (default: 100)\n    -n, --nr-samples <n>  Number of sample events per mmap event (default: 100)\n    -v, --verbose         be more verbose (show iteration count, DSO name, etc)\n\nBy default, it measures average processing time of 100 MMAP2 events\nand 10000 SAMPLE events.  Below is a result on my laptop.\n\n  $ perf bench internals inject-build-id\n  # Running 'internals/inject-build-id' benchmark:\n    Average build-id injection took: 25.789 msec (+- 0.202 msec)\n    Average time per event: 2.528 usec (+- 0.020 usec)\n    Average memory usage: 8411 KB (+- 7 KB)\n\nCommitter testing:\n\n  $ perf bench\n  Usage:\n  \tperf bench [<common options>] <collection> <benchmark> [<options>]\n\n          # List of all available benchmark collections:\n\n           sched: Scheduler and IPC benchmarks\n         syscall: System call benchmarks\n             mem: Memory access benchmarks\n            numa: NUMA scheduling and MM benchmarks\n           futex: Futex stressing benchmarks\n           epoll: Epoll stressing benchmarks\n       internals: Perf-internals benchmarks\n             all: All benchmarks\n\n  $ perf bench internals\n\n          # List of available benchmarks for collection 'internals':\n\n      synthesize: Benchmark perf event synthesis\n  kallsyms-parse: Benchmark kallsyms parsing\n  inject-build-id: Benchmark build-id injection\n\n  $ perf bench internals inject-build-id\n  # Running 'internals/inject-build-id' benchmark:\n    Average build-id injection took: 14.202 msec (+- 0.059 msec)\n    Average time per event: 1.392 usec (+- 0.006 usec)\n    Average memory usage: 12650 KB (+- 10 KB)\n    Average build-id-all injection took: 12.831 msec (+- 0.071 msec)\n    Average time per event: 1.258 usec (+- 0.007 usec)\n    Average memory usage: 11895 KB (+- 10 KB)\n  $\n\n  $ perf stat -r5 perf bench internals inject-build-id\n  # Running 'internals/inject-build-id' benchmark:\n    Average build-id injection took: 14.380 msec (+- 0.056 msec)\n    Average time per event: 1.410 usec (+- 0.006 usec)\n    Average memory usage: 12608 KB (+- 11 KB)\n    Average build-id-all injection took: 11.889 msec (+- 0.064 msec)\n    Average time per event: 1.166 usec (+- 0.006 usec)\n    Average memory usage: 11838 KB (+- 10 KB)\n  # Running 'internals/inject-build-id' benchmark:\n    Average build-id injection took: 14.246 msec (+- 0.065 msec)\n    Average time per event: 1.397 usec (+- 0.006 usec)\n    Average memory usage: 12744 KB (+- 10 KB)\n    Average build-id-all injection took: 12.019 msec (+- 0.066 msec)\n    Average time per event: 1.178 usec (+- 0.006 usec)\n    Average memory usage: 11963 KB (+- 10 KB)\n  # Running 'internals/inject-build-id' benchmark:\n    Average build-id injection took: 14.321 msec (+- 0.067 msec)\n    Average time per event: 1.404 usec (+- 0.007 usec)\n    Average memory usage: 12690 KB (+- 10 KB)\n    Average build-id-all injection took: 11.909 msec (+- 0.041 msec)\n    Average time per event: 1.168 usec (+- 0.004 usec)\n    Average memory usage: 11938 KB (+- 10 KB)\n  # Running 'internals/inject-build-id' benchmark:\n    Average build-id injection took: 14.287 msec (+- 0.059 msec)\n    Average time per event: 1.401 usec (+- 0.006 usec)\n    Average memory usage: 12864 KB (+- 10 KB)\n    Average build-id-all injection took: 11.862 msec (+- 0.058 msec)\n    Average time per event: 1.163 usec (+- 0.006 usec)\n    Average memory usage: 12103 KB (+- 10 KB)\n  # Running 'internals/inject-build-id' benchmark:\n    Average build-id injection took: 14.402 msec (+- 0.053 msec)\n    Average time per event: 1.412 usec (+- 0.005 usec)\n    Average memory usage: 12876 KB (+- 10 KB)\n    Average build-id-all injection took: 11.826 msec (+- 0.061 msec)\n    Average time per event: 1.159 usec (+- 0.006 usec)\n    Average memory usage: 12111 KB (+- 10 KB)\n\n   Performance counter stats for 'perf bench internals inject-build-id' (5 runs):\n\n            4,267.48 msec task-clock:u              #    1.502 CPUs utilized            ( +-  0.14% )\n                   0      context-switches:u        #    0.000 K/sec\n                   0      cpu-migrations:u          #    0.000 K/sec\n             102,092      page-faults:u             #    0.024 M/sec                    ( +-  0.08% )\n       3,894,589,578      cycles:u                  #    0.913 GHz                      ( +-  0.19% )  (83.49%)\n         140,078,421      stalled-cycles-frontend:u #    3.60% frontend cycles idle     ( +-  0.77% )  (83.34%)\n         948,581,189      stalled-cycles-backend:u  #   24.36% backend cycles idle      ( +-  0.46% )  (83.25%)\n       5,835,587,719      instructions:u            #    1.50  insn per cycle\n                                                    #    0.16  stalled cycles per insn  ( +-  0.21% )  (83.24%)\n       1,267,423,636      branches:u                #  296.996 M/sec                    ( +-  0.22% )  (83.12%)\n          17,484,290      branch-misses:u           #    1.38% of all branches          ( +-  0.12% )  (83.55%)\n\n             2.84176 +- 0.00222 seconds time elapsed  ( +-  0.08% )\n\n  $\n\nAcked-by: Jiri Olsa <jolsa@redhat.com>\nTested-by: Arnaldo Carvalho de Melo <acme@redhat.com>\nSigned-off-by: Namhyung Kim <namhyung@kernel.org>\nLink: https://lore.kernel.org/r/20201012070214.2074921-2-namhyung@kernel.org\nSigned-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>",
  "full_message": "perf bench: Add build-id injection benchmark\n\nSometimes I can see that 'perf record' piped with 'perf inject' take a\nlong time processing build-ids.\n\nSo introduce a inject-build-id benchmark to the internals benchmark\nsuite to measure its overhead regularly.\n\nIt runs the 'perf inject' command internally and feeds the given number\nof synthesized events (MMAP2 + SAMPLE basically).\n\n  Usage: perf bench internals inject-build-id <options>\n\n    -i, --iterations <n>  Number of iterations used to compute average (default: 100)\n    -m, --nr-mmaps <n>    Number of mmap events for each iteration (default: 100)\n    -n, --nr-samples <n>  Number of sample events per mmap event (default: 100)\n    -v, --verbose         be more verbose (show iteration count, DSO name, etc)\n\nBy default, it measures average processing time of 100 MMAP2 events\nand 10000 SAMPLE events.  Below is a result on my laptop.\n\n  $ perf bench internals inject-build-id\n  # Running 'internals/inject-build-id' benchmark:\n    Average build-id injection took: 25.789 msec (+- 0.202 msec)\n    Average time per event: 2.528 usec (+- 0.020 usec)\n    Average memory usage: 8411 KB (+- 7 KB)\n\nCommitter testing:\n\n  $ perf bench\n  Usage:\n  \tperf bench [<common options>] <collection> <benchmark> [<options>]\n\n          # List of all available benchmark collections:\n\n           sched: Scheduler and IPC benchmarks\n         syscall: System call benchmarks\n             mem: Memory access benchmarks\n            numa: NUMA scheduling and MM benchmarks\n           futex: Futex stressing benchmarks\n           epoll: Epoll stressing benchmarks\n       internals: Perf-internals benchmarks\n             all: All benchmarks\n\n  $ perf bench internals\n\n          # List of available benchmarks for collection 'internals':\n\n      synthesize: Benchmark perf event synthesis\n  kallsyms-parse: Benchmark kallsyms parsing\n  inject-build-id: Benchmark build-id injection\n\n  $ perf bench internals inject-build-id\n  # Running 'internals/inject-build-id' benchmark:\n    Average build-id injection took: 14.202 msec (+- 0.059 msec)\n    Average time per event: 1.392 usec (+- 0.006 usec)\n    Average memory usage: 12650 KB (+- 10 KB)\n    Average build-id-all injection took: 12.831 msec (+- 0.071 msec)\n    Average time per event: 1.258 usec (+- 0.007 usec)\n    Average memory usage: 11895 KB (+- 10 KB)\n  $\n\n  $ perf stat -r5 perf bench internals inject-build-id\n  # Running 'internals/inject-build-id' benchmark:\n    Average build-id injection took: 14.380 msec (+- 0.056 msec)\n    Average time per event: 1.410 usec (+- 0.006 usec)\n    Average memory usage: 12608 KB (+- 11 KB)\n    Average build-id-all injection took: 11.889 msec (+- 0.064 msec)\n    Average time per event: 1.166 usec (+- 0.006 usec)\n    Average memory usage: 11838 KB (+- 10 KB)\n  # Running 'internals/inject-build-id' benchmark:\n    Average build-id injection took: 14.246 msec (+- 0.065 msec)\n    Average time per event: 1.397 usec (+- 0.006 usec)\n    Average memory usage: 12744 KB (+- 10 KB)\n    Average build-id-all injection took: 12.019 msec (+- 0.066 msec)\n    Average time per event: 1.178 usec (+- 0.006 usec)\n    Average memory usage: 11963 KB (+- 10 KB)\n  # Running 'internals/inject-build-id' benchmark:\n    Average build-id injection took: 14.321 msec (+- 0.067 msec)\n    Average time per event: 1.404 usec (+- 0.007 usec)\n    Average memory usage: 12690 KB (+- 10 KB)\n    Average build-id-all injection took: 11.909 msec (+- 0.041 msec)\n    Average time per event: 1.168 usec (+- 0.004 usec)\n    Average memory usage: 11938 KB (+- 10 KB)\n  # Running 'internals/inject-build-id' benchmark:\n    Average build-id injection took: 14.287 msec (+- 0.059 msec)\n    Average time per event: 1.401 usec (+- 0.006 usec)\n    Average memory usage: 12864 KB (+- 10 KB)\n    Average build-id-all injection took: 11.862 msec (+- 0.058 msec)\n    Average time per event: 1.163 usec (+- 0.006 usec)\n    Average memory usage: 12103 KB (+- 10 KB)\n  # Running 'internals/inject-build-id' benchmark:\n    Average build-id injection took: 14.402 msec (+- 0.053 msec)\n    Average time per event: 1.412 usec (+- 0.005 usec)\n    Average memory usage: 12876 KB (+- 10 KB)\n    Average build-id-all injection took: 11.826 msec (+- 0.061 msec)\n    Average time per event: 1.159 usec (+- 0.006 usec)\n    Average memory usage: 12111 KB (+- 10 KB)\n\n   Performance counter stats for 'perf bench internals inject-build-id' (5 runs):\n\n            4,267.48 msec task-clock:u              #    1.502 CPUs utilized            ( +-  0.14% )\n                   0      context-switches:u        #    0.000 K/sec\n                   0      cpu-migrations:u          #    0.000 K/sec\n             102,092      page-faults:u             #    0.024 M/sec                    ( +-  0.08% )\n       3,894,589,578      cycles:u                  #    0.913 GHz                      ( +-  0.19% )  (83.49%)\n         140,078,421      stalled-cycles-frontend:u #    3.60% frontend cycles idle     ( +-  0.77% )  (83.34%)\n         948,581,189      stalled-cycles-backend:u  #   24.36% backend cycles idle      ( +-  0.46% )  (83.25%)\n       5,835,587,719      instructions:u            #    1.50  insn per cycle\n                                                    #    0.16  stalled cycles per insn  ( +-  0.21% )  (83.24%)\n       1,267,423,636      branches:u                #  296.996 M/sec                    ( +-  0.22% )  (83.12%)\n          17,484,290      branch-misses:u           #    1.38% of all branches          ( +-  0.12% )  (83.55%)\n\n             2.84176 +- 0.00222 seconds time elapsed  ( +-  0.08% )\n\n  $\n\nAcked-by: Jiri Olsa <jolsa@redhat.com>\nTested-by: Arnaldo Carvalho de Melo <acme@redhat.com>\nSigned-off-by: Namhyung Kim <namhyung@kernel.org>\nLink: https://lore.kernel.org/r/20201012070214.2074921-2-namhyung@kernel.org\nSigned-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>",
  "author_name": "Namhyung Kim",
  "author_email": "namhyung@kernel.org",
  "author_date": "Mon Oct 12 16:02:09 2020 +0900",
  "author_date_iso": "2020-10-12T16:02:09+09:00",
  "committer_name": "Arnaldo Carvalho de Melo",
  "committer_email": "acme@redhat.com",
  "committer_date": "Tue Oct 13 10:59:42 2020 -0300",
  "committer_date_iso": "2020-10-13T10:59:42-03:00",
  "files_changed": [
    "tools/perf/bench/Build",
    "tools/perf/bench/bench.h",
    "tools/perf/bench/inject-buildid.c",
    "tools/perf/builtin-bench.c",
    "tools/perf/builtin-inject.c",
    "tools/perf/util/build-id.h"
  ],
  "files_changed_count": 6,
  "stats": [
    {
      "file": "tools/perf/bench/Build",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "tools/perf/bench/bench.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "tools/perf/bench/inject-buildid.c",
      "insertions": 460,
      "deletions": 0
    },
    {
      "file": "tools/perf/builtin-bench.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "tools/perf/builtin-inject.c",
      "insertions": 4,
      "deletions": 5
    },
    {
      "file": "tools/perf/util/build-id.h",
      "insertions": 4,
      "deletions": 0
    }
  ],
  "total_insertions": 471,
  "total_deletions": 5,
  "total_changes": 476,
  "parents": [
    "388968d864bbe25098211bf846037547f2a82ca6"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "tools/perf/bench/Build",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "tools/perf/builtin-bench.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "tools/perf/bench/inject-buildid.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "tools/perf/builtin-inject.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "tools/perf/bench/bench.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "tools/perf/util/build-id.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}