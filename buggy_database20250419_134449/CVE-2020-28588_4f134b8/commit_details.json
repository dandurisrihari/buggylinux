{
  "hash": "4f134b89a24b965991e7c345b9a4591821f7c2a6",
  "hash_short": "4f134b89",
  "subject": "lib/syscall: fix syscall registers retrieval on 32-bit platforms",
  "body": "Lilith >_> and Claudio Bozzato of Cisco Talos security team reported\nthat collect_syscall() improperly casts the syscall registers to 64-bit\nvalues leaking the uninitialized last 24 bytes on 32-bit platforms, that\nare visible in /proc/self/syscall.\n\nThe cause is that info->data.args are u64 while syscall_get_arguments()\nuses longs, as hinted by the bogus pointer cast in the function.\n\nLet's just proceed like the other call places, by retrieving the\nregisters into an array of longs before assigning them to the caller's\narray.  This was successfully tested on x86_64, i386 and ppc32.\n\nReference: CVE-2020-28588, TALOS-2020-1211\nFixes: 631b7abacd02 (\"ptrace: Remove maxargs from task_current_syscall()\")\nCc: Greg KH <greg@kroah.com>\nReviewed-by: Kees Cook <keescook@chromium.org>\nTested-by: Michael Ellerman <mpe@ellerman.id.au> (ppc32)\nSigned-off-by: Willy Tarreau <w@1wt.eu>\nReviewed-by: Thomas Gleixner <tglx@linutronix.de>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "full_message": "lib/syscall: fix syscall registers retrieval on 32-bit platforms\n\nLilith >_> and Claudio Bozzato of Cisco Talos security team reported\nthat collect_syscall() improperly casts the syscall registers to 64-bit\nvalues leaking the uninitialized last 24 bytes on 32-bit platforms, that\nare visible in /proc/self/syscall.\n\nThe cause is that info->data.args are u64 while syscall_get_arguments()\nuses longs, as hinted by the bogus pointer cast in the function.\n\nLet's just proceed like the other call places, by retrieving the\nregisters into an array of longs before assigning them to the caller's\narray.  This was successfully tested on x86_64, i386 and ppc32.\n\nReference: CVE-2020-28588, TALOS-2020-1211\nFixes: 631b7abacd02 (\"ptrace: Remove maxargs from task_current_syscall()\")\nCc: Greg KH <greg@kroah.com>\nReviewed-by: Kees Cook <keescook@chromium.org>\nTested-by: Michael Ellerman <mpe@ellerman.id.au> (ppc32)\nSigned-off-by: Willy Tarreau <w@1wt.eu>\nReviewed-by: Thomas Gleixner <tglx@linutronix.de>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "author_name": "Willy Tarreau",
  "author_email": "w@1wt.eu",
  "author_date": "Mon Nov 30 08:36:48 2020 +0100",
  "author_date_iso": "2020-11-30T08:36:48+01:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Thu Dec 3 09:52:44 2020 -0800",
  "committer_date_iso": "2020-12-03T09:52:44-08:00",
  "files_changed": [
    "lib/syscall.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "lib/syscall.c",
      "insertions": 9,
      "deletions": 2
    }
  ],
  "total_insertions": 9,
  "total_deletions": 2,
  "total_changes": 11,
  "parents": [
    "34816d20f173a90389c8a7e641166d8ea9dce70a"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2020-28588"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "lib/syscall.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}