{
  "hash": "27c4f6738bdc535e42dfc1295dadc78ab7582939",
  "hash_short": "27c4f673",
  "subject": "s390/zcrypt: Introduce Failure Injection feature",
  "body": "Introduce a way to specify additional debug flags with an crpyto\nrequest to be able to trigger certain failures within the zcrypt\ndevice drivers and/or ap core code.\n\nThis failure injection possibility is only enabled with a kernel debug\nbuild CONFIG_ZCRYPT_DEBUG) and should never be available on a regular\nkernel running in production environment.\n\nDetails:\n\n* The ioctl(ICARSAMODEXPO) get's a struct ica_rsa_modexpo. If the\n  leftmost bit of the 32 bit unsigned int inputdatalength field is\n  set, the uppermost 16 bits are separated and used as debug flag\n  value. The process is checked to have the CAP_SYS_ADMIN capability\n  enabled or EPERM is returned.\n\n* The ioctl(ICARSACRT) get's a struct ica_rsa_modexpo_crt. If the\n  leftmost bit of the 32 bit unsigned int inputdatalength field is set,\n  the uppermost 16 bits are separated and used als debug flag\n  value. The process is checked to have the CAP_SYS_ADMIN capability\n  enabled or EPERM is returned.\n\n* The ioctl(ZSECSENDCPRB) used to send CCA CPRBs get's a struct\n  ica_xcRB. If the leftmost bit of the 32 bit unsigned int status\n  field is set, the uppermost 16 bits of this field are used as debug\n  flag value. The process is checked to have the CAP_SYS_ADMIN\n  capability enabled or EPERM is returned.\n\n* The ioctl(ZSENDEP11CPRB) used to send EP11 CPRBs get's a struct\n  ep11_urb. If the leftmost bit of the 64 bit unsigned int req_len\n  field is set, the uppermost 16 bits of this field are used as debug\n  flag value. The process is checked to have the CAP_SYS_ADMIN\n  capability enabled or EPERM is returned.\n\nSo it is possible to send an additional 16 bit value to the zcrypt API\nto be used to carry a failure injection command which may trigger\nspecial behavior within the zcrypt API and layers below. This 16 bit\nvalue is for the rest of the test referred as 'fi command' for Failure\nInjection.\n\nThe lower 8 bits of the fi command construct a numerical argument in\nthe range of 1-255 and is the 'fi action' to be performed with the\nrequest or the resulting reply:\n\n* 0x00 (all requests): No failure injection action but flags may be\n  provided which may affect the processing of the request or reply.\n* 0x01 (only CCA CPRBs): The CPRB's agent_ID field is set to\n  'FF'. This results in an reply code 0x90 (Transport-Protocol\n  Failure).\n* 0x02 (only CCA CPRBs): After the APQN to send to has been chosen,\n  the domain field within the CPRB is overwritten with value 99 to\n  enforce an reply with RY 0x8A.\n* 0x03 (all requests): At NQAP invocation the invalid qid value 0xFF00\n  is used causing an response code of 0x01 (AP queue not valid).\n\nThe upper 8 bits of the fi command may carry bit flags which may\ninfluence the processing of an request or response:\n\n* 0x01: No retry. If this bit is set, the usual loop in the zcrypt API\n  which retries an CPRB up to 10 times when the lower layers return\n  with EAGAIN is abandoned after the first attempt to send the CPRB.\n* 0x02: Toggle special. Toggles the special bit on this request. This\n  should result in an reply code RY~0x41 and result in an ioctl\n  failure with errno EINVAL.\n\nThis failure injection possibilities may get some further extensions\nin the future. As of now this is a starting point for Continuous Test\nand Integration to trigger some failures and watch for the reaction of\nthe ap bus and zcrypt device driver code.\n\nSigned-off-by: Harald Freudenberger <freude@linux.ibm.com>\nSigned-off-by: Vasily Gorbik <gor@linux.ibm.com>",
  "full_message": "s390/zcrypt: Introduce Failure Injection feature\n\nIntroduce a way to specify additional debug flags with an crpyto\nrequest to be able to trigger certain failures within the zcrypt\ndevice drivers and/or ap core code.\n\nThis failure injection possibility is only enabled with a kernel debug\nbuild CONFIG_ZCRYPT_DEBUG) and should never be available on a regular\nkernel running in production environment.\n\nDetails:\n\n* The ioctl(ICARSAMODEXPO) get's a struct ica_rsa_modexpo. If the\n  leftmost bit of the 32 bit unsigned int inputdatalength field is\n  set, the uppermost 16 bits are separated and used as debug flag\n  value. The process is checked to have the CAP_SYS_ADMIN capability\n  enabled or EPERM is returned.\n\n* The ioctl(ICARSACRT) get's a struct ica_rsa_modexpo_crt. If the\n  leftmost bit of the 32 bit unsigned int inputdatalength field is set,\n  the uppermost 16 bits are separated and used als debug flag\n  value. The process is checked to have the CAP_SYS_ADMIN capability\n  enabled or EPERM is returned.\n\n* The ioctl(ZSECSENDCPRB) used to send CCA CPRBs get's a struct\n  ica_xcRB. If the leftmost bit of the 32 bit unsigned int status\n  field is set, the uppermost 16 bits of this field are used as debug\n  flag value. The process is checked to have the CAP_SYS_ADMIN\n  capability enabled or EPERM is returned.\n\n* The ioctl(ZSENDEP11CPRB) used to send EP11 CPRBs get's a struct\n  ep11_urb. If the leftmost bit of the 64 bit unsigned int req_len\n  field is set, the uppermost 16 bits of this field are used as debug\n  flag value. The process is checked to have the CAP_SYS_ADMIN\n  capability enabled or EPERM is returned.\n\nSo it is possible to send an additional 16 bit value to the zcrypt API\nto be used to carry a failure injection command which may trigger\nspecial behavior within the zcrypt API and layers below. This 16 bit\nvalue is for the rest of the test referred as 'fi command' for Failure\nInjection.\n\nThe lower 8 bits of the fi command construct a numerical argument in\nthe range of 1-255 and is the 'fi action' to be performed with the\nrequest or the resulting reply:\n\n* 0x00 (all requests): No failure injection action but flags may be\n  provided which may affect the processing of the request or reply.\n* 0x01 (only CCA CPRBs): The CPRB's agent_ID field is set to\n  'FF'. This results in an reply code 0x90 (Transport-Protocol\n  Failure).\n* 0x02 (only CCA CPRBs): After the APQN to send to has been chosen,\n  the domain field within the CPRB is overwritten with value 99 to\n  enforce an reply with RY 0x8A.\n* 0x03 (all requests): At NQAP invocation the invalid qid value 0xFF00\n  is used causing an response code of 0x01 (AP queue not valid).\n\nThe upper 8 bits of the fi command may carry bit flags which may\ninfluence the processing of an request or response:\n\n* 0x01: No retry. If this bit is set, the usual loop in the zcrypt API\n  which retries an CPRB up to 10 times when the lower layers return\n  with EAGAIN is abandoned after the first attempt to send the CPRB.\n* 0x02: Toggle special. Toggles the special bit on this request. This\n  should result in an reply code RY~0x41 and result in an ioctl\n  failure with errno EINVAL.\n\nThis failure injection possibilities may get some further extensions\nin the future. As of now this is a starting point for Continuous Test\nand Integration to trigger some failures and watch for the reaction of\nthe ap bus and zcrypt device driver code.\n\nSigned-off-by: Harald Freudenberger <freude@linux.ibm.com>\nSigned-off-by: Vasily Gorbik <gor@linux.ibm.com>",
  "author_name": "Harald Freudenberger",
  "author_email": "freude@linux.ibm.com",
  "author_date": "Tue Sep 29 16:07:22 2020 +0200",
  "author_date_iso": "2020-09-29T16:07:22+02:00",
  "committer_name": "Vasily Gorbik",
  "committer_email": "gor@linux.ibm.com",
  "committer_date": "Wed Oct 7 21:50:01 2020 +0200",
  "committer_date_iso": "2020-10-07T21:50:01+02:00",
  "files_changed": [
    "drivers/s390/crypto/ap_bus.h",
    "drivers/s390/crypto/ap_queue.c",
    "drivers/s390/crypto/zcrypt_api.c",
    "drivers/s390/crypto/zcrypt_api.h",
    "drivers/s390/crypto/zcrypt_msgtype50.c",
    "drivers/s390/crypto/zcrypt_msgtype6.c"
  ],
  "files_changed_count": 6,
  "stats": [
    {
      "file": "drivers/s390/crypto/ap_bus.h",
      "insertions": 27,
      "deletions": 2
    },
    {
      "file": "drivers/s390/crypto/ap_queue.c",
      "insertions": 9,
      "deletions": 1
    },
    {
      "file": "drivers/s390/crypto/zcrypt_api.c",
      "insertions": 91,
      "deletions": 0
    },
    {
      "file": "drivers/s390/crypto/zcrypt_api.h",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "drivers/s390/crypto/zcrypt_msgtype50.c",
      "insertions": 11,
      "deletions": 0
    },
    {
      "file": "drivers/s390/crypto/zcrypt_msgtype6.c",
      "insertions": 10,
      "deletions": 0
    }
  ],
  "total_insertions": 151,
  "total_deletions": 3,
  "total_changes": 154,
  "parents": [
    "3730f5300b450bc89306c3ab79c254e6039d9197"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "Injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/s390/crypto/ap_bus.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/s390/crypto/zcrypt_api.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/s390/crypto/ap_queue.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/s390/crypto/zcrypt_msgtype50.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/s390/crypto/zcrypt_api.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/s390/crypto/zcrypt_msgtype6.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}