commit 27c4f6738bdc535e42dfc1295dadc78ab7582939
Author: Harald Freudenberger <freude@linux.ibm.com>
Date:   Tue Sep 29 16:07:22 2020 +0200

    s390/zcrypt: Introduce Failure Injection feature
    
    Introduce a way to specify additional debug flags with an crpyto
    request to be able to trigger certain failures within the zcrypt
    device drivers and/or ap core code.
    
    This failure injection possibility is only enabled with a kernel debug
    build CONFIG_ZCRYPT_DEBUG) and should never be available on a regular
    kernel running in production environment.
    
    Details:
    
    * The ioctl(ICARSAMODEXPO) get's a struct ica_rsa_modexpo. If the
      leftmost bit of the 32 bit unsigned int inputdatalength field is
      set, the uppermost 16 bits are separated and used as debug flag
      value. The process is checked to have the CAP_SYS_ADMIN capability
      enabled or EPERM is returned.
    
    * The ioctl(ICARSACRT) get's a struct ica_rsa_modexpo_crt. If the
      leftmost bit of the 32 bit unsigned int inputdatalength field is set,
      the uppermost 16 bits are separated and used als debug flag
      value. The process is checked to have the CAP_SYS_ADMIN capability
      enabled or EPERM is returned.
    
    * The ioctl(ZSECSENDCPRB) used to send CCA CPRBs get's a struct
      ica_xcRB. If the leftmost bit of the 32 bit unsigned int status
      field is set, the uppermost 16 bits of this field are used as debug
      flag value. The process is checked to have the CAP_SYS_ADMIN
      capability enabled or EPERM is returned.
    
    * The ioctl(ZSENDEP11CPRB) used to send EP11 CPRBs get's a struct
      ep11_urb. If the leftmost bit of the 64 bit unsigned int req_len
      field is set, the uppermost 16 bits of this field are used as debug
      flag value. The process is checked to have the CAP_SYS_ADMIN
      capability enabled or EPERM is returned.
    
    So it is possible to send an additional 16 bit value to the zcrypt API
    to be used to carry a failure injection command which may trigger
    special behavior within the zcrypt API and layers below. This 16 bit
    value is for the rest of the test referred as 'fi command' for Failure
    Injection.
    
    The lower 8 bits of the fi command construct a numerical argument in
    the range of 1-255 and is the 'fi action' to be performed with the
    request or the resulting reply:
    
    * 0x00 (all requests): No failure injection action but flags may be
      provided which may affect the processing of the request or reply.
    * 0x01 (only CCA CPRBs): The CPRB's agent_ID field is set to
      'FF'. This results in an reply code 0x90 (Transport-Protocol
      Failure).
    * 0x02 (only CCA CPRBs): After the APQN to send to has been chosen,
      the domain field within the CPRB is overwritten with value 99 to
      enforce an reply with RY 0x8A.
    * 0x03 (all requests): At NQAP invocation the invalid qid value 0xFF00
      is used causing an response code of 0x01 (AP queue not valid).
    
    The upper 8 bits of the fi command may carry bit flags which may
    influence the processing of an request or response:
    
    * 0x01: No retry. If this bit is set, the usual loop in the zcrypt API
      which retries an CPRB up to 10 times when the lower layers return
      with EAGAIN is abandoned after the first attempt to send the CPRB.
    * 0x02: Toggle special. Toggles the special bit on this request. This
      should result in an reply code RY~0x41 and result in an ioctl
      failure with errno EINVAL.
    
    This failure injection possibilities may get some further extensions
    in the future. As of now this is a starting point for Continuous Test
    and Integration to trigger some failures and watch for the reaction of
    the ap bus and zcrypt device driver code.
    
    Signed-off-by: Harald Freudenberger <freude@linux.ibm.com>
    Signed-off-by: Vasily Gorbik <gor@linux.ibm.com>

diff --git a/drivers/s390/crypto/ap_queue.c b/drivers/s390/crypto/ap_queue.c
index ada37f1c7ac7..13d4fe2c6127 100644
--- a/drivers/s390/crypto/ap_queue.c
+++ b/drivers/s390/crypto/ap_queue.c
@@ -214,12 +214,20 @@ static enum ap_sm_wait ap_sm_write(struct ap_queue *aq)
 {
 	struct ap_queue_status status;
 	struct ap_message *ap_msg;
+	ap_qid_t qid = aq->qid;
 
 	if (aq->requestq_count <= 0)
 		return AP_SM_WAIT_NONE;
 	/* Start the next request on the queue. */
 	ap_msg = list_entry(aq->requestq.next, struct ap_message, list);
-	status = __ap_send(aq->qid, ap_msg->psmid,
+#ifdef CONFIG_ZCRYPT_DEBUG
+	if (ap_msg->fi.action == AP_FI_ACTION_NQAP_QID_INVAL) {
+		AP_DBF_WARN("%s fi cmd 0x%04x: forcing invalid qid 0xFF00\n",
+			    __func__, ap_msg->fi.cmd);
+		qid = 0xFF00;
+	}
+#endif
+	status = __ap_send(qid, ap_msg->psmid,
 			   ap_msg->msg, ap_msg->len,
 			   ap_msg->flags & AP_MSG_FLAG_SPECIAL);
 	switch (status.response_code) {