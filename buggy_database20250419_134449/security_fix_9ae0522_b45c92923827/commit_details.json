{
  "hash": "9ae0522537852408f0f48af888e44d6876777463",
  "hash_short": "9ae05225",
  "subject": "PCI/AER: Fix the broken interrupt injection",
  "body": "The AER error injection mechanism just blindly abuses generic_handle_irq()\nwhich is really not meant for consumption by random drivers. The include of\nlinux/irq.h should have been a red flag in the first place. Driver code,\nunless implementing interrupt chips or low level hypervisor functionality\nhas absolutely no business with that.\n\nInvoking generic_handle_irq() from non interrupt handling context can have\nnasty side effects at least on x86 due to the hardware trainwreck which\nmakes interrupt affinity changes a fragile beast. Sathyanarayanan triggered\na NULL pointer dereference in the low level APIC code that way. While the\nparticular pointer could be checked this would only paper over the issue\nbecause there are other ways to trigger warnings or silently corrupt state.\n\nInvoke the new irq_inject_interrupt() mechanism, which has the necessary\nsanity checks in place and injects the interrupt via the irq_retrigger()\nmechanism, which is at least halfways safe vs. the fragile x86 affinity\nchange mechanics.\n\nIt's safe on x86 as it does not corrupt state, but it still can cause a\npremature completion of an interrupt affinity change causing the interrupt\nline to become stale. Very unlikely, but possible.\n\nFor regular operations this is a non issue as AER error injection is meant\nfor debugging and testing and not for usage on production systems. People\nusing this should better know what they are doing.\n\nFixes: 390e2db82480 (\"PCI/AER: Abstract AER interrupt handling\")\nReported-by: sathyanarayanan.kuppuswamy@linux.intel.com\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nTested-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>\nReviewed-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>\nCc: Bjorn Helgaas <bhelgaas@google.com>\nLink: https://lkml.kernel.org/r/20200306130624.098374457@linutronix.de",
  "full_message": "PCI/AER: Fix the broken interrupt injection\n\nThe AER error injection mechanism just blindly abuses generic_handle_irq()\nwhich is really not meant for consumption by random drivers. The include of\nlinux/irq.h should have been a red flag in the first place. Driver code,\nunless implementing interrupt chips or low level hypervisor functionality\nhas absolutely no business with that.\n\nInvoking generic_handle_irq() from non interrupt handling context can have\nnasty side effects at least on x86 due to the hardware trainwreck which\nmakes interrupt affinity changes a fragile beast. Sathyanarayanan triggered\na NULL pointer dereference in the low level APIC code that way. While the\nparticular pointer could be checked this would only paper over the issue\nbecause there are other ways to trigger warnings or silently corrupt state.\n\nInvoke the new irq_inject_interrupt() mechanism, which has the necessary\nsanity checks in place and injects the interrupt via the irq_retrigger()\nmechanism, which is at least halfways safe vs. the fragile x86 affinity\nchange mechanics.\n\nIt's safe on x86 as it does not corrupt state, but it still can cause a\npremature completion of an interrupt affinity change causing the interrupt\nline to become stale. Very unlikely, but possible.\n\nFor regular operations this is a non issue as AER error injection is meant\nfor debugging and testing and not for usage on production systems. People\nusing this should better know what they are doing.\n\nFixes: 390e2db82480 (\"PCI/AER: Abstract AER interrupt handling\")\nReported-by: sathyanarayanan.kuppuswamy@linux.intel.com\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nTested-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>\nReviewed-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>\nCc: Bjorn Helgaas <bhelgaas@google.com>\nLink: https://lkml.kernel.org/r/20200306130624.098374457@linutronix.de",
  "author_name": "Thomas Gleixner",
  "author_email": "tglx@linutronix.de",
  "author_date": "Fri Mar 6 14:03:48 2020 +0100",
  "author_date_iso": "2020-03-06T14:03:48+01:00",
  "committer_name": "Thomas Gleixner",
  "committer_email": "tglx@linutronix.de",
  "committer_date": "Sun Mar 8 11:07:12 2020 +0100",
  "committer_date_iso": "2020-03-08T11:07:12+01:00",
  "files_changed": [
    "drivers/pci/pcie/Kconfig",
    "drivers/pci/pcie/aer_inject.c"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "drivers/pci/pcie/Kconfig",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "drivers/pci/pcie/aer_inject.c",
      "insertions": 2,
      "deletions": 4
    }
  ],
  "total_insertions": 3,
  "total_deletions": 4,
  "total_changes": 7,
  "parents": [
    "acd26bcf362708594ea081ef55140e37d0854ed2"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.7-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/pci/pcie/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/pci/pcie/aer_inject.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}