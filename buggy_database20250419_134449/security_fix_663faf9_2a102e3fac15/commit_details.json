{
  "hash": "663faf9f7beeaca4ad0176bb96c776eed9dad0c5",
  "hash_short": "663faf9f",
  "subject": "error-injection: Add injectable error types",
  "body": "Add injectable error types for each error-injectable function.\n\nOne motivation of error injection test is to find software flaws,\nmistakes or mis-handlings of expectable errors. If we find such\nflaws by the test, that is a program bug, so we need to fix it.\n\nBut if the tester miss input the error (e.g. just return success\ncode without processing anything), it causes unexpected behavior\neven if the caller is correctly programmed to handle any errors.\nThat is not what we want to test by error injection.\n\nTo clarify what type of errors the caller must expect for each\ninjectable function, this introduces injectable error types:\n\n - EI_ETYPE_NULL : means the function will return NULL if it\n\t\t    fails. No ERR_PTR, just a NULL.\n - EI_ETYPE_ERRNO : means the function will return -ERRNO\n\t\t    if it fails.\n - EI_ETYPE_ERRNO_NULL : means the function will return -ERRNO\n\t\t       (ERR_PTR) or NULL.\n\nALLOW_ERROR_INJECTION() macro is expanded to get one of\nNULL, ERRNO, ERRNO_NULL to record the error type for\neach function. e.g.\n\n ALLOW_ERROR_INJECTION(open_ctree, ERRNO)\n\nThis error types are shown in debugfs as below.\n\n  ====\n  / # cat /sys/kernel/debug/error_injection/list\n  open_ctree [btrfs]\tERRNO\n  io_ctl_init [btrfs]\tERRNO\n  ====\n\nSigned-off-by: Masami Hiramatsu <mhiramat@kernel.org>\nReviewed-by: Josef Bacik <jbacik@fb.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>",
  "full_message": "error-injection: Add injectable error types\n\nAdd injectable error types for each error-injectable function.\n\nOne motivation of error injection test is to find software flaws,\nmistakes or mis-handlings of expectable errors. If we find such\nflaws by the test, that is a program bug, so we need to fix it.\n\nBut if the tester miss input the error (e.g. just return success\ncode without processing anything), it causes unexpected behavior\neven if the caller is correctly programmed to handle any errors.\nThat is not what we want to test by error injection.\n\nTo clarify what type of errors the caller must expect for each\ninjectable function, this introduces injectable error types:\n\n - EI_ETYPE_NULL : means the function will return NULL if it\n\t\t    fails. No ERR_PTR, just a NULL.\n - EI_ETYPE_ERRNO : means the function will return -ERRNO\n\t\t    if it fails.\n - EI_ETYPE_ERRNO_NULL : means the function will return -ERRNO\n\t\t       (ERR_PTR) or NULL.\n\nALLOW_ERROR_INJECTION() macro is expanded to get one of\nNULL, ERRNO, ERRNO_NULL to record the error type for\neach function. e.g.\n\n ALLOW_ERROR_INJECTION(open_ctree, ERRNO)\n\nThis error types are shown in debugfs as below.\n\n  ====\n  / # cat /sys/kernel/debug/error_injection/list\n  open_ctree [btrfs]\tERRNO\n  io_ctl_init [btrfs]\tERRNO\n  ====\n\nSigned-off-by: Masami Hiramatsu <mhiramat@kernel.org>\nReviewed-by: Josef Bacik <jbacik@fb.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>",
  "author_name": "Masami Hiramatsu",
  "author_email": "mhiramat@kernel.org",
  "author_date": "Sat Jan 13 02:55:33 2018 +0900",
  "author_date_iso": "2018-01-13T02:55:33+09:00",
  "committer_name": "Alexei Starovoitov",
  "committer_email": "ast@kernel.org",
  "committer_date": "Fri Jan 12 17:33:38 2018 -0800",
  "committer_date_iso": "2018-01-12T17:33:38-08:00",
  "files_changed": [
    "fs/btrfs/disk-io.c",
    "fs/btrfs/free-space-cache.c",
    "include/asm-generic/error-injection.h",
    "include/asm-generic/vmlinux.lds.h",
    "include/linux/error-injection.h",
    "include/linux/module.h",
    "lib/error-inject.c"
  ],
  "files_changed_count": 7,
  "stats": [
    {
      "file": "fs/btrfs/disk-io.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "fs/btrfs/free-space-cache.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "include/asm-generic/error-injection.h",
      "insertions": 19,
      "deletions": 4
    },
    {
      "file": "include/asm-generic/vmlinux.lds.h",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "include/linux/error-injection.h",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "include/linux/module.h",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "lib/error-inject.c",
      "insertions": 36,
      "deletions": 7
    }
  ],
  "total_insertions": 66,
  "total_deletions": 15,
  "total_changes": 81,
  "parents": [
    "540adea3809f61115d2a1ea4ed6e627613452ba1"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.16",
    "v4.16-rc1",
    "v4.16-rc2",
    "v4.16-rc3",
    "v4.16-rc4",
    "v4.16-rc5",
    "v4.16-rc6",
    "v4.16-rc7",
    "v4.17",
    "v4.17-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/asm-generic/error-injection.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/module.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/error-injection.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "lib/error-inject.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/btrfs/free-space-cache.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/asm-generic/vmlinux.lds.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/btrfs/disk-io.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}