{
  "hash": "3d5689e01a424673d302e9295a1307d22494c6b1",
  "hash_short": "3d5689e0",
  "subject": "Merge branch kvm-arm64/lpi-xa-cache into kvmarm-master/next",
  "body": "* kvm-arm64/lpi-xa-cache:\n  : .\n  : New and improved LPI translation cache from Oliver Upton.\n  :\n  : From the cover letter:\n  :\n  : \"As discussed [*], here is the new take on the LPI translation cache,\n  : migrating to an xarray indexed by (devid, eventid) per ITS.\n  :\n  : The end result is quite satisfying, as it becomes possible to rip out\n  : other nasties such as the lpi_list_lock. To that end, patches 2-6 aren't\n  : _directly_ related to the translation cache cleanup, but instead are\n  : done to enable the cleanups at the end of the series.\n  :\n  : I changed out my test machine from the last time so the baseline has\n  : moved a bit, but here are the results from the vgic_lpi_stress test:\n  :\n  : +----------------------------+------------+-------------------+\n  : |       Configuration        |  v6.8-rc1  | v6.8-rc1 + series |\n  : +----------------------------+------------+-------------------+\n  : | -v 1 -d 1 -e 1 -i 1000000  | 2063296.81 |        1362602.35 |\n  : | -v 16 -d 16 -e 16 -i 10000 |  610678.33 |        5200910.01 |\n  : | -v 16 -d 16 -e 17 -i 10000 |  678361.53 |        5890675.51 |\n  : | -v 32 -d 32 -e 1 -i 100000 |  580918.96 |        8304552.67 |\n  : | -v 1 -d 1 -e 17 -i 1000    | 1512443.94 |         1425953.8 |\n  : +----------------------------+------------+-------------------+\n  :\n  : Unlike last time, no dramatic regressions at any performance point. The\n  : regression on a single interrupt stream is to be expected, as the\n  : overheads of SRCU and two tree traversals (kvm_io_bus_get_dev(),\n  : translation cache xarray) are likely greater than that of a linked-list\n  : with a single node.\"\n  : .\n  KVM: selftests: Add stress test for LPI injection\n  KVM: selftests: Use MPIDR_HWID_BITMASK from cputype.h\n  KVM: selftests: Add helper for enabling LPIs on a redistributor\n  KVM: selftests: Add a minimal library for interacting with an ITS\n  KVM: selftests: Add quadword MMIO accessors\n  KVM: selftests: Standardise layout of GIC frames\n  KVM: selftests: Align with kernel's GIC definitions\n  KVM: arm64: vgic-its: Get rid of the lpi_list_lock\n  KVM: arm64: vgic-its: Rip out the global translation cache\n  KVM: arm64: vgic-its: Use the per-ITS translation cache for injection\n  KVM: arm64: vgic-its: Spin off helper for finding ITS by doorbell addr\n  KVM: arm64: vgic-its: Maintain a translation cache per ITS\n  KVM: arm64: vgic-its: Scope translation cache invalidations to an ITS\n  KVM: arm64: vgic-its: Get rid of vgic_copy_lpi_list()\n  KVM: arm64: vgic-debug: Use an xarray mark for debug iterator\n  KVM: arm64: vgic-its: Walk LPI xarray in vgic_its_cmd_handle_movall()\n  KVM: arm64: vgic-its: Walk LPI xarray in vgic_its_invall()\n  KVM: arm64: vgic-its: Walk LPI xarray in its_sync_lpi_pending_table()\n  KVM: Treat the device list as an rculist\n\nSigned-off-by: Marc Zyngier <maz@kernel.org>",
  "full_message": "Merge branch kvm-arm64/lpi-xa-cache into kvmarm-master/next\n\n* kvm-arm64/lpi-xa-cache:\n  : .\n  : New and improved LPI translation cache from Oliver Upton.\n  :\n  : From the cover letter:\n  :\n  : \"As discussed [*], here is the new take on the LPI translation cache,\n  : migrating to an xarray indexed by (devid, eventid) per ITS.\n  :\n  : The end result is quite satisfying, as it becomes possible to rip out\n  : other nasties such as the lpi_list_lock. To that end, patches 2-6 aren't\n  : _directly_ related to the translation cache cleanup, but instead are\n  : done to enable the cleanups at the end of the series.\n  :\n  : I changed out my test machine from the last time so the baseline has\n  : moved a bit, but here are the results from the vgic_lpi_stress test:\n  :\n  : +----------------------------+------------+-------------------+\n  : |       Configuration        |  v6.8-rc1  | v6.8-rc1 + series |\n  : +----------------------------+------------+-------------------+\n  : | -v 1 -d 1 -e 1 -i 1000000  | 2063296.81 |        1362602.35 |\n  : | -v 16 -d 16 -e 16 -i 10000 |  610678.33 |        5200910.01 |\n  : | -v 16 -d 16 -e 17 -i 10000 |  678361.53 |        5890675.51 |\n  : | -v 32 -d 32 -e 1 -i 100000 |  580918.96 |        8304552.67 |\n  : | -v 1 -d 1 -e 17 -i 1000    | 1512443.94 |         1425953.8 |\n  : +----------------------------+------------+-------------------+\n  :\n  : Unlike last time, no dramatic regressions at any performance point. The\n  : regression on a single interrupt stream is to be expected, as the\n  : overheads of SRCU and two tree traversals (kvm_io_bus_get_dev(),\n  : translation cache xarray) are likely greater than that of a linked-list\n  : with a single node.\"\n  : .\n  KVM: selftests: Add stress test for LPI injection\n  KVM: selftests: Use MPIDR_HWID_BITMASK from cputype.h\n  KVM: selftests: Add helper for enabling LPIs on a redistributor\n  KVM: selftests: Add a minimal library for interacting with an ITS\n  KVM: selftests: Add quadword MMIO accessors\n  KVM: selftests: Standardise layout of GIC frames\n  KVM: selftests: Align with kernel's GIC definitions\n  KVM: arm64: vgic-its: Get rid of the lpi_list_lock\n  KVM: arm64: vgic-its: Rip out the global translation cache\n  KVM: arm64: vgic-its: Use the per-ITS translation cache for injection\n  KVM: arm64: vgic-its: Spin off helper for finding ITS by doorbell addr\n  KVM: arm64: vgic-its: Maintain a translation cache per ITS\n  KVM: arm64: vgic-its: Scope translation cache invalidations to an ITS\n  KVM: arm64: vgic-its: Get rid of vgic_copy_lpi_list()\n  KVM: arm64: vgic-debug: Use an xarray mark for debug iterator\n  KVM: arm64: vgic-its: Walk LPI xarray in vgic_its_cmd_handle_movall()\n  KVM: arm64: vgic-its: Walk LPI xarray in vgic_its_invall()\n  KVM: arm64: vgic-its: Walk LPI xarray in its_sync_lpi_pending_table()\n  KVM: Treat the device list as an rculist\n\nSigned-off-by: Marc Zyngier <maz@kernel.org>",
  "author_name": "Marc Zyngier",
  "author_email": "maz@kernel.org",
  "author_date": "Fri May 3 11:39:31 2024 +0100",
  "author_date_iso": "2024-05-03T11:39:31+01:00",
  "committer_name": "Marc Zyngier",
  "committer_email": "maz@kernel.org",
  "committer_date": "Fri May 3 11:39:31 2024 +0100",
  "committer_date_iso": "2024-05-03T11:39:31+01:00",
  "files_changed": [],
  "files_changed_count": 0,
  "stats": [
    {
      "file": "arch/arm64/kvm/vgic/vgic-debug.c",
      "insertions": 60,
      "deletions": 22
    },
    {
      "file": "arch/arm64/kvm/vgic/vgic-init.c",
      "insertions": 0,
      "deletions": 8
    },
    {
      "file": "arch/arm64/kvm/vgic/vgic-its.c",
      "insertions": 104,
      "deletions": 248
    },
    {
      "file": "arch/arm64/kvm/vgic/vgic-mmio-v3.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/arm64/kvm/vgic/vgic.c",
      "insertions": 2,
      "deletions": 4
    },
    {
      "file": "arch/arm64/kvm/vgic/vgic.h",
      "insertions": 2,
      "deletions": 4
    },
    {
      "file": "include/kvm/arm_vgic.h",
      "insertions": 7,
      "deletions": 6
    },
    {
      "file": "tools/testing/selftests/kvm/Makefile",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/kvm/aarch64/arch_timer.c",
      "insertions": 2,
      "deletions": 6
    },
    {
      "file": "tools/testing/selftests/kvm/aarch64/psci_test.c",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/kvm/aarch64/vgic_irq.c",
      "insertions": 4,
      "deletions": 11
    },
    {
      "file": "tools/testing/selftests/kvm/aarch64/vgic_lpi_stress.c",
      "insertions": 410,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/kvm/aarch64/vpmu_counter_access.c",
      "insertions": 1,
      "deletions": 5
    },
    {
      "file": "tools/testing/selftests/kvm/dirty_log_perf_test.c",
      "insertions": 1,
      "deletions": 4
    },
    {
      "file": "tools/testing/selftests/kvm/include/aarch64/gic.h",
      "insertions": 19,
      "deletions": 2
    },
    {
      "file": "tools/testing/selftests/kvm/include/aarch64/gic_v3.h",
      "insertions": 554,
      "deletions": 32
    },
    {
      "file": "tools/testing/selftests/kvm/include/aarch64/gic_v3_its.h",
      "insertions": 19,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/kvm/include/aarch64/processor.h",
      "insertions": 17,
      "deletions": 2
    },
    {
      "file": "tools/testing/selftests/kvm/include/aarch64/vgic.h",
      "insertions": 3,
      "deletions": 2
    },
    {
      "file": "tools/testing/selftests/kvm/lib/aarch64/gic.c",
      "insertions": 7,
      "deletions": 11
    },
    {
      "file": "tools/testing/selftests/kvm/lib/aarch64/gic_private.h",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "tools/testing/selftests/kvm/lib/aarch64/gic_v3.c",
      "insertions": 64,
      "deletions": 35
    },
    {
      "file": "tools/testing/selftests/kvm/lib/aarch64/gic_v3_its.c",
      "insertions": 248,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/kvm/lib/aarch64/vgic.c",
      "insertions": 28,
      "deletions": 10
    },
    {
      "file": "virt/kvm/kvm_main.c",
      "insertions": 11,
      "deletions": 3
    },
    {
      "file": "virt/kvm/vfio.c",
      "insertions": 2,
      "deletions": 0
    }
  ],
  "total_insertions": 1572,
  "total_deletions": 418,
  "total_changes": 1990,
  "parents": [
    "2d38f43930266b9a3835f8bceb5a32b7fba4a52a",
    "96d36ad95b03c89857d405b3317efb0188ac59cb"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": []
}