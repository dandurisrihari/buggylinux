{
  "hash": "d8ab9f7b644a2c9b64de405c1953c905ff219dc9",
  "hash_short": "d8ab9f7b",
  "subject": "mm: lock VMA in dup_anon_vma() before setting ->anon_vma",
  "body": "When VMAs are merged, dup_anon_vma() is called with `dst` pointing to the\nVMA that is being expanded to cover the area previously occupied by\nanother VMA.  This currently happens while `dst` is not write-locked.\n\nThis means that, in the `src->anon_vma && !dst->anon_vma` case, as soon as\nthe assignment `dst->anon_vma = src->anon_vma` has happened, concurrent\npage faults can happen on `dst` under the per-VMA lock.  This is already\nicky in itself, since such page faults can now install pages into `dst`\nthat are attached to an `anon_vma` that is not yet tied back to the\n`anon_vma` with an `anon_vma_chain`.  But if `anon_vma_clone()` fails due\nto an out-of-memory error, things get much worse: `anon_vma_clone()` then\nreverts `dst->anon_vma` back to NULL, and `dst` remains completely\nunconnected to the `anon_vma`, even though we can have pages in the area\ncovered by `dst` that point to the `anon_vma`.\n\nThis means the `anon_vma` of such pages can be freed while the pages are\nstill mapped into userspace, which leads to UAF when a helper like\nfolio_lock_anon_vma_read() tries to look up the anon_vma of such a page.\n\nThis theoretically is a security bug, but I believe it is really hard to\nactually trigger as an unprivileged user because it requires that you can\nmake an order-0 GFP_KERNEL allocation fail, and the page allocator tries\npretty hard to prevent that.\n\nI think doing the vma_start_write() call inside dup_anon_vma() is the most\nstraightforward fix for now.\n\nFor a kernel-assisted reproducer, see the notes section of the patch mail.\n\nLink: https://lkml.kernel.org/r/20230721034643.616851-1-jannh@google.com\nFixes: 5e31275cc997 (\"mm: add per-VMA lock and helper functions to control it\")\nSigned-off-by: Jann Horn <jannh@google.com>\nReviewed-by: Suren Baghdasaryan <surenb@google.com>\nCc: <stable@vger.kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>",
  "full_message": "mm: lock VMA in dup_anon_vma() before setting ->anon_vma\n\nWhen VMAs are merged, dup_anon_vma() is called with `dst` pointing to the\nVMA that is being expanded to cover the area previously occupied by\nanother VMA.  This currently happens while `dst` is not write-locked.\n\nThis means that, in the `src->anon_vma && !dst->anon_vma` case, as soon as\nthe assignment `dst->anon_vma = src->anon_vma` has happened, concurrent\npage faults can happen on `dst` under the per-VMA lock.  This is already\nicky in itself, since such page faults can now install pages into `dst`\nthat are attached to an `anon_vma` that is not yet tied back to the\n`anon_vma` with an `anon_vma_chain`.  But if `anon_vma_clone()` fails due\nto an out-of-memory error, things get much worse: `anon_vma_clone()` then\nreverts `dst->anon_vma` back to NULL, and `dst` remains completely\nunconnected to the `anon_vma`, even though we can have pages in the area\ncovered by `dst` that point to the `anon_vma`.\n\nThis means the `anon_vma` of such pages can be freed while the pages are\nstill mapped into userspace, which leads to UAF when a helper like\nfolio_lock_anon_vma_read() tries to look up the anon_vma of such a page.\n\nThis theoretically is a security bug, but I believe it is really hard to\nactually trigger as an unprivileged user because it requires that you can\nmake an order-0 GFP_KERNEL allocation fail, and the page allocator tries\npretty hard to prevent that.\n\nI think doing the vma_start_write() call inside dup_anon_vma() is the most\nstraightforward fix for now.\n\nFor a kernel-assisted reproducer, see the notes section of the patch mail.\n\nLink: https://lkml.kernel.org/r/20230721034643.616851-1-jannh@google.com\nFixes: 5e31275cc997 (\"mm: add per-VMA lock and helper functions to control it\")\nSigned-off-by: Jann Horn <jannh@google.com>\nReviewed-by: Suren Baghdasaryan <surenb@google.com>\nCc: <stable@vger.kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>",
  "author_name": "Jann Horn",
  "author_email": "jannh@google.com",
  "author_date": "Fri Jul 21 05:46:43 2023 +0200",
  "author_date_iso": "2023-07-21T05:46:43+02:00",
  "committer_name": "Andrew Morton",
  "committer_email": "akpm@linux-foundation.org",
  "committer_date": "Thu Jul 27 13:07:04 2023 -0700",
  "committer_date_iso": "2023-07-27T13:07:04-07:00",
  "files_changed": [
    "mm/mmap.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "mm/mmap.c",
      "insertions": 1,
      "deletions": 0
    }
  ],
  "total_insertions": 1,
  "total_deletions": 0,
  "total_changes": 1,
  "parents": [
    "b1f02b95758d05b799731d939e76a0bd6da312db"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "security bug"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "mm/mmap.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}