{
  "hash": "67e7fdfcc6824a4f768d76d89377b33baad58fad",
  "hash_short": "67e7fdfc",
  "subject": "arm64: mm: introduce 52-bit userspace support",
  "body": "On arm64 there is optional support for a 52-bit virtual address space.\nTo exploit this one has to be running with a 64KB page size and be\nrunning on hardware that supports this.\n\nFor an arm64 kernel supporting a 48 bit VA with a 64KB page size,\nsome changes are needed to support a 52-bit userspace:\n * TCR_EL1.T0SZ needs to be 12 instead of 16,\n * TASK_SIZE needs to reflect the new size.\n\nThis patch implements the above when the support for 52-bit VAs is\ndetected at early boot time.\n\nOn arm64 userspace addresses translation is controlled by TTBR0_EL1. As\nwell as userspace, TTBR0_EL1 controls:\n * The identity mapping,\n * EFI runtime code.\n\nIt is possible to run a kernel with an identity mapping that has a\nlarger VA size than userspace (and for this case __cpu_set_tcr_t0sz()\nwould set TCR_EL1.T0SZ as appropriate). However, when the conditions for\n52-bit userspace are met; it is possible to keep TCR_EL1.T0SZ fixed at\n12. Thus in this patch, the TCR_EL1.T0SZ size changing logic is\ndisabled.\n\nReviewed-by: Catalin Marinas <catalin.marinas@arm.com>\nSigned-off-by: Steve Capper <steve.capper@arm.com>\nSigned-off-by: Will Deacon <will.deacon@arm.com>",
  "full_message": "arm64: mm: introduce 52-bit userspace support\n\nOn arm64 there is optional support for a 52-bit virtual address space.\nTo exploit this one has to be running with a 64KB page size and be\nrunning on hardware that supports this.\n\nFor an arm64 kernel supporting a 48 bit VA with a 64KB page size,\nsome changes are needed to support a 52-bit userspace:\n * TCR_EL1.T0SZ needs to be 12 instead of 16,\n * TASK_SIZE needs to reflect the new size.\n\nThis patch implements the above when the support for 52-bit VAs is\ndetected at early boot time.\n\nOn arm64 userspace addresses translation is controlled by TTBR0_EL1. As\nwell as userspace, TTBR0_EL1 controls:\n * The identity mapping,\n * EFI runtime code.\n\nIt is possible to run a kernel with an identity mapping that has a\nlarger VA size than userspace (and for this case __cpu_set_tcr_t0sz()\nwould set TCR_EL1.T0SZ as appropriate). However, when the conditions for\n52-bit userspace are met; it is possible to keep TCR_EL1.T0SZ fixed at\n12. Thus in this patch, the TCR_EL1.T0SZ size changing logic is\ndisabled.\n\nReviewed-by: Catalin Marinas <catalin.marinas@arm.com>\nSigned-off-by: Steve Capper <steve.capper@arm.com>\nSigned-off-by: Will Deacon <will.deacon@arm.com>",
  "author_name": "Steve Capper",
  "author_email": "steve.capper@arm.com",
  "author_date": "Thu Dec 6 22:50:41 2018 +0000",
  "author_date_iso": "2018-12-06T22:50:41+00:00",
  "committer_name": "Will Deacon",
  "committer_email": "will.deacon@arm.com",
  "committer_date": "Mon Dec 10 18:42:17 2018 +0000",
  "committer_date_iso": "2018-12-10T18:42:17+00:00",
  "files_changed": [
    "arch/arm64/Kconfig",
    "arch/arm64/include/asm/assembler.h",
    "arch/arm64/include/asm/mmu_context.h",
    "arch/arm64/include/asm/processor.h",
    "arch/arm64/kernel/head.S",
    "arch/arm64/mm/fault.c",
    "arch/arm64/mm/mmu.c",
    "arch/arm64/mm/proc.S"
  ],
  "files_changed_count": 8,
  "stats": [
    {
      "file": "arch/arm64/Kconfig",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/assembler.h",
      "insertions": 3,
      "deletions": 4
    },
    {
      "file": "arch/arm64/include/asm/mmu_context.h",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/processor.h",
      "insertions": 9,
      "deletions": 4
    },
    {
      "file": "arch/arm64/kernel/head.S",
      "insertions": 13,
      "deletions": 0
    },
    {
      "file": "arch/arm64/mm/fault.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/arm64/mm/mmu.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/arm64/mm/proc.S",
      "insertions": 9,
      "deletions": 1
    }
  ],
  "total_insertions": 43,
  "total_deletions": 10,
  "total_changes": 53,
  "parents": [
    "a96a33b1ca57dbea4285893dedf290aeb8eb090b"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.0",
    "v5.0-rc1",
    "v5.0-rc2",
    "v5.0-rc3",
    "v5.0-rc4",
    "v5.0-rc5",
    "v5.0-rc6",
    "v5.0-rc7",
    "v5.0-rc8",
    "v5.1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/arm64/kernel/head.S",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/asm/mmu_context.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/mm/mmu.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/mm/fault.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/mm/proc.S",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/asm/processor.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/asm/assembler.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}