commit a96a33b1ca57dbea4285893dedf290aeb8eb090b
Author: Steve Capper <steve.capper@arm.com>
Date:   Thu Dec 6 22:50:40 2018 +0000

    arm64: mm: Prevent mismatched 52-bit VA support
    
    For cases where there is a mismatch in ARMv8.2-LVA support between CPUs
    we have to be careful in allowing secondary CPUs to boot if 52-bit
    virtual addresses have already been enabled on the boot CPU.
    
    This patch adds code to the secondary startup path. If the boot CPU has
    enabled 52-bit VAs then ID_AA64MMFR2_EL1 is checked to see if the
    secondary can also enable 52-bit support. If not, the secondary is
    prevented from booting and an error message is displayed indicating why.
    
    Technically this patch could be implemented using the cpufeature code
    when considering 52-bit userspace support. However, we employ low level
    checks here as the cpufeature code won't be able to run if we have
    mismatched 52-bit kernel va support.
    
    Signed-off-by: Steve Capper <steve.capper@arm.com>
    Signed-off-by: Will Deacon <will.deacon@arm.com>

diff --git a/arch/arm64/kernel/head.S b/arch/arm64/kernel/head.S
index f60081be9a1b..58fcc1edd852 100644
--- a/arch/arm64/kernel/head.S
+++ b/arch/arm64/kernel/head.S
@@ -707,6 +707,7 @@ secondary_startup:
 	/*
 	 * Common entry point for secondary CPUs.
 	 */
+	bl	__cpu_secondary_check52bitva
 	bl	__cpu_setup			// initialise processor
 	adrp	x1, swapper_pg_dir
 	bl	__enable_mmu
@@ -785,6 +786,31 @@ ENTRY(__enable_mmu)
 	ret
 ENDPROC(__enable_mmu)
 
+ENTRY(__cpu_secondary_check52bitva)
+#ifdef CONFIG_ARM64_52BIT_VA
+	ldr_l	x0, vabits_user
+	cmp	x0, #52
+	b.ne	2f
+
+	mrs_s	x0, SYS_ID_AA64MMFR2_EL1
+	and	x0, x0, #(0xf << ID_AA64MMFR2_LVA_SHIFT)
+	cbnz	x0, 2f
+
+	adr_l	x0, va52mismatch
+	mov	w1, #1
+	strb	w1, [x0]
+	dmb	sy
+	dc	ivac, x0	// Invalidate potentially stale cache line
+
+	update_early_cpu_boot_status CPU_STUCK_IN_KERNEL, x0, x1
+1:	wfe
+	wfi
+	b	1b
+
+#endif
+2:	ret
+ENDPROC(__cpu_secondary_check52bitva)
+
 __no_granule_support:
 	/* Indicate that this CPU can't boot and is stuck in the kernel */
 	update_early_cpu_boot_status CPU_STUCK_IN_KERNEL, x1, x2