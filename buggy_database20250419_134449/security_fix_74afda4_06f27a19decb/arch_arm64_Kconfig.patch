commit 74afda4016a7437e6e425c3370e4b93b47be8ddf
Author: Kristina Martsenko <kristina.martsenko@arm.com>
Date:   Fri Mar 13 14:35:03 2020 +0530

    arm64: compile the kernel with ptrauth return address signing
    
    Compile all functions with two ptrauth instructions: PACIASP in the
    prologue to sign the return address, and AUTIASP in the epilogue to
    authenticate the return address (from the stack). If authentication
    fails, the return will cause an instruction abort to be taken, followed
    by an oops and killing the task.
    
    This should help protect the kernel against attacks using
    return-oriented programming. As ptrauth protects the return address, it
    can also serve as a replacement for CONFIG_STACKPROTECTOR, although note
    that it does not protect other parts of the stack.
    
    The new instructions are in the HINT encoding space, so on a system
    without ptrauth they execute as NOPs.
    
    CONFIG_ARM64_PTR_AUTH now not only enables ptrauth for userspace and KVM
    guests, but also automatically builds the kernel with ptrauth
    instructions if the compiler supports it. If there is no compiler
    support, we do not warn that the kernel was built without ptrauth
    instructions.
    
    GCC 7 and 8 support the -msign-return-address option, while GCC 9
    deprecates that option and replaces it with -mbranch-protection. Support
    both options.
    
    Clang uses an external assembler hence this patch makes sure that the
    correct parameters (-march=armv8.3-a) are passed down to help it recognize
    the ptrauth instructions.
    
    Ftrace function tracer works properly with Ptrauth only when
    patchable-function-entry feature is present and is ensured by the
    Kconfig dependency.
    
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Cc: Masahiro Yamada <yamada.masahiro@socionext.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Vincenzo Frascino <Vincenzo.Frascino@arm.com> # not co-dev parts
    Co-developed-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Signed-off-by: Vincenzo Frascino <vincenzo.frascino@arm.com>
    Signed-off-by: Kristina Martsenko <kristina.martsenko@arm.com>
    [Amit: Cover leaf function, comments, Ftrace Kconfig]
    Signed-off-by: Amit Daniel Kachhap <amit.kachhap@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>

diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig
index 115ceea0293e..155041a5f0e4 100644
--- a/arch/arm64/Kconfig
+++ b/arch/arm64/Kconfig
@@ -1499,6 +1499,8 @@ config ARM64_PTR_AUTH
 	bool "Enable support for pointer authentication"
 	default y
 	depends on !KVM || ARM64_VHE
+	depends on (CC_HAS_SIGN_RETURN_ADDRESS || CC_HAS_BRANCH_PROT_PAC_RET) && AS_HAS_PAC
+	depends on (!FUNCTION_GRAPH_TRACER || DYNAMIC_FTRACE_WITH_REGS)
 	help
 	  Pointer authentication (part of the ARMv8.3 Extensions) provides
 	  instructions for signing and authenticating pointers against secret
@@ -1506,11 +1508,17 @@ config ARM64_PTR_AUTH
 	  and other attacks.
 
 	  This option enables these instructions at EL0 (i.e. for userspace).
-
 	  Choosing this option will cause the kernel to initialise secret keys
 	  for each process at exec() time, with these keys being
 	  context-switched along with the process.
 
+	  If the compiler supports the -mbranch-protection or
+	  -msign-return-address flag (e.g. GCC 7 or later), then this option
+	  will also cause the kernel itself to be compiled with return address
+	  protection. In this case, and if the target hardware is known to
+	  support pointer authentication, then CONFIG_STACKPROTECTOR can be
+	  disabled with minimal loss of protection.
+
 	  The feature is detected at runtime. If the feature is not present in
 	  hardware it will not be advertised to userspace/KVM guest nor will it
 	  be enabled. However, KVM guest also require VHE mode and hence
@@ -1522,6 +1530,20 @@ config ARM64_PTR_AUTH
 	  but with the feature disabled. On such a system, this option should
 	  not be selected.
 
+	  This feature works with FUNCTION_GRAPH_TRACER option only if
+	  DYNAMIC_FTRACE_WITH_REGS is enabled.
+
+config CC_HAS_BRANCH_PROT_PAC_RET
+	# GCC 9 or later, clang 8 or later
+	def_bool $(cc-option,-mbranch-protection=pac-ret+leaf)
+
+config CC_HAS_SIGN_RETURN_ADDRESS
+	# GCC 7, 8
+	def_bool $(cc-option,-msign-return-address=all)
+
+config AS_HAS_PAC
+	def_bool $(as-option,-Wa$(comma)-march=armv8.3-a)
+
 endmenu
 
 menu "ARMv8.5 architectural features"