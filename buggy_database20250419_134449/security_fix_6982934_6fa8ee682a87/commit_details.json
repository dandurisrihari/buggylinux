{
  "hash": "6982934e19f8ebb4152ba77308facdb1a38533f9",
  "hash_short": "6982934e",
  "subject": "arm64: enable ptrauth earlier",
  "body": "When the kernel is compiled with pointer auth instructions, the boot CPU\nneeds to start using address auth very early, so change the cpucap to\naccount for this.\n\nPointer auth must be enabled before we call C functions, because it is\nnot possible to enter a function with pointer auth disabled and exit it\nwith pointer auth enabled. Note, mismatches between architected and\nIMPDEF algorithms will still be caught by the cpufeature framework (the\nseparate *_ARCH and *_IMP_DEF cpucaps).\n\nNote the change in behavior: if the boot CPU has address auth and a\nlate CPU does not, then the late CPU is parked by the cpufeature\nframework. This is possible as kernel will only have NOP space intructions\nfor PAC so such mismatched late cpu will silently ignore those\ninstructions in C functions. Also, if the boot CPU does not have address\nauth and the late CPU has then the late cpu will still boot but with\nptrauth feature disabled.\n\nLeave generic authentication as a \"system scope\" cpucap for now, since\ninitially the kernel will only use address authentication.\n\nReviewed-by: Kees Cook <keescook@chromium.org>\nReviewed-by: Suzuki K Poulose <suzuki.poulose@arm.com>\nReviewed-by: Vincenzo Frascino <Vincenzo.Frascino@arm.com>\nSigned-off-by: Kristina Martsenko <kristina.martsenko@arm.com>\n[Amit: Re-worked ptrauth setup logic, comments]\nSigned-off-by: Amit Daniel Kachhap <amit.kachhap@arm.com>\nSigned-off-by: Catalin Marinas <catalin.marinas@arm.com>",
  "full_message": "arm64: enable ptrauth earlier\n\nWhen the kernel is compiled with pointer auth instructions, the boot CPU\nneeds to start using address auth very early, so change the cpucap to\naccount for this.\n\nPointer auth must be enabled before we call C functions, because it is\nnot possible to enter a function with pointer auth disabled and exit it\nwith pointer auth enabled. Note, mismatches between architected and\nIMPDEF algorithms will still be caught by the cpufeature framework (the\nseparate *_ARCH and *_IMP_DEF cpucaps).\n\nNote the change in behavior: if the boot CPU has address auth and a\nlate CPU does not, then the late CPU is parked by the cpufeature\nframework. This is possible as kernel will only have NOP space intructions\nfor PAC so such mismatched late cpu will silently ignore those\ninstructions in C functions. Also, if the boot CPU does not have address\nauth and the late CPU has then the late cpu will still boot but with\nptrauth feature disabled.\n\nLeave generic authentication as a \"system scope\" cpucap for now, since\ninitially the kernel will only use address authentication.\n\nReviewed-by: Kees Cook <keescook@chromium.org>\nReviewed-by: Suzuki K Poulose <suzuki.poulose@arm.com>\nReviewed-by: Vincenzo Frascino <Vincenzo.Frascino@arm.com>\nSigned-off-by: Kristina Martsenko <kristina.martsenko@arm.com>\n[Amit: Re-worked ptrauth setup logic, comments]\nSigned-off-by: Amit Daniel Kachhap <amit.kachhap@arm.com>\nSigned-off-by: Catalin Marinas <catalin.marinas@arm.com>",
  "author_name": "Kristina Martsenko",
  "author_email": "kristina.martsenko@arm.com",
  "author_date": "Fri Mar 13 14:34:55 2020 +0530",
  "author_date_iso": "2020-03-13T14:34:55+05:30",
  "committer_name": "Catalin Marinas",
  "committer_email": "catalin.marinas@arm.com",
  "committer_date": "Wed Mar 18 09:50:19 2020 +0000",
  "committer_date_iso": "2020-03-18T09:50:19+00:00",
  "files_changed": [
    "arch/arm64/Kconfig",
    "arch/arm64/include/asm/cpufeature.h",
    "arch/arm64/kernel/cpufeature.c",
    "arch/arm64/mm/proc.S"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "arch/arm64/Kconfig",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/cpufeature.h",
      "insertions": 9,
      "deletions": 0
    },
    {
      "file": "arch/arm64/kernel/cpufeature.c",
      "insertions": 3,
      "deletions": 10
    },
    {
      "file": "arch/arm64/mm/proc.S",
      "insertions": 31,
      "deletions": 0
    }
  ],
  "total_insertions": 49,
  "total_deletions": 10,
  "total_changes": 59,
  "parents": [
    "deeaac5175a577cbbe1a2319903781d0a7ef7720"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.7-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "auth"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/arm64/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/asm/cpufeature.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/cpufeature.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/mm/proc.S",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}