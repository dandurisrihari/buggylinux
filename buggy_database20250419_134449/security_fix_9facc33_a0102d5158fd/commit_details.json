{
  "hash": "9facc336876f7ecf9edba4c67b90426fde4ec898",
  "hash_short": "9facc336",
  "subject": "bpf: reject any prog that failed read-only lock",
  "body": "We currently lock any JITed image as read-only via bpf_jit_binary_lock_ro()\nas well as the BPF image as read-only through bpf_prog_lock_ro(). In\nthe case any of these would fail we throw a WARN_ON_ONCE() in order to\nyell loudly to the log. Perhaps, to some extend, this may be comparable\nto an allocation where __GFP_NOWARN is explicitly not set.\n\nAdded via 65869a47f348 (\"bpf: improve read-only handling\"), this behavior\nis slightly different compared to any of the other in-kernel set_memory_ro()\nusers who do not check the return code of set_memory_ro() and friends /at\nall/ (e.g. in the case of module_enable_ro() / module_disable_ro()). Given\nin BPF this is mandatory hardening step, we want to know whether there\nare any issues that would leave both BPF data writable. So it happens\nthat syzkaller enabled fault injection and it triggered memory allocation\nfailure deep inside x86's change_page_attr_set_clr() which was triggered\nfrom set_memory_ro().\n\nNow, there are two options: i) leaving everything as is, and ii) reworking\nthe image locking code in order to have a final checkpoint out of the\ncentral bpf_prog_select_runtime() which probes whether any of the calls\nduring prog setup weren't successful, and then bailing out with an error.\nOption ii) is a better approach since this additional paranoia avoids\naltogether leaving any potential W+X pages from BPF side in the system.\nTherefore, lets be strict about it, and reject programs in such unlikely\noccasion. While testing I noticed also that one bpf_prog_lock_ro()\ncall was missing on the outer dummy prog in case of calls, e.g. in the\ndestructor we call bpf_prog_free_deferred() on the main prog where we\ntry to bpf_prog_unlock_free() the program, and since we go via\nbpf_prog_select_runtime() do that as well.\n\nReported-by: syzbot+3b889862e65a98317058@syzkaller.appspotmail.com\nReported-by: syzbot+9e762b52dd17e616a7a5@syzkaller.appspotmail.com\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Martin KaFai Lau <kafai@fb.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>",
  "full_message": "bpf: reject any prog that failed read-only lock\n\nWe currently lock any JITed image as read-only via bpf_jit_binary_lock_ro()\nas well as the BPF image as read-only through bpf_prog_lock_ro(). In\nthe case any of these would fail we throw a WARN_ON_ONCE() in order to\nyell loudly to the log. Perhaps, to some extend, this may be comparable\nto an allocation where __GFP_NOWARN is explicitly not set.\n\nAdded via 65869a47f348 (\"bpf: improve read-only handling\"), this behavior\nis slightly different compared to any of the other in-kernel set_memory_ro()\nusers who do not check the return code of set_memory_ro() and friends /at\nall/ (e.g. in the case of module_enable_ro() / module_disable_ro()). Given\nin BPF this is mandatory hardening step, we want to know whether there\nare any issues that would leave both BPF data writable. So it happens\nthat syzkaller enabled fault injection and it triggered memory allocation\nfailure deep inside x86's change_page_attr_set_clr() which was triggered\nfrom set_memory_ro().\n\nNow, there are two options: i) leaving everything as is, and ii) reworking\nthe image locking code in order to have a final checkpoint out of the\ncentral bpf_prog_select_runtime() which probes whether any of the calls\nduring prog setup weren't successful, and then bailing out with an error.\nOption ii) is a better approach since this additional paranoia avoids\naltogether leaving any potential W+X pages from BPF side in the system.\nTherefore, lets be strict about it, and reject programs in such unlikely\noccasion. While testing I noticed also that one bpf_prog_lock_ro()\ncall was missing on the outer dummy prog in case of calls, e.g. in the\ndestructor we call bpf_prog_free_deferred() on the main prog where we\ntry to bpf_prog_unlock_free() the program, and since we go via\nbpf_prog_select_runtime() do that as well.\n\nReported-by: syzbot+3b889862e65a98317058@syzkaller.appspotmail.com\nReported-by: syzbot+9e762b52dd17e616a7a5@syzkaller.appspotmail.com\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Martin KaFai Lau <kafai@fb.com>\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>",
  "author_name": "Daniel Borkmann",
  "author_email": "daniel@iogearbox.net",
  "author_date": "Fri Jun 15 02:30:48 2018 +0200",
  "author_date_iso": "2018-06-15T02:30:48+02:00",
  "committer_name": "Alexei Starovoitov",
  "committer_email": "ast@kernel.org",
  "committer_date": "Fri Jun 15 11:14:25 2018 -0700",
  "committer_date_iso": "2018-06-15T11:14:25-07:00",
  "files_changed": [
    "include/linux/filter.h",
    "kernel/bpf/core.c",
    "kernel/bpf/syscall.c"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "include/linux/filter.h",
      "insertions": 38,
      "deletions": 22
    },
    {
      "file": "kernel/bpf/core.c",
      "insertions": 48,
      "deletions": 7
    },
    {
      "file": "kernel/bpf/syscall.c",
      "insertions": 1,
      "deletions": 3
    }
  ],
  "total_insertions": 87,
  "total_deletions": 32,
  "total_changes": 119,
  "parents": [
    "7d1982b4e335c1b184406b7566f6041bfe313c35"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.18",
    "v4.18-rc2",
    "v4.18-rc3",
    "v4.18-rc4",
    "v4.18-rc5",
    "v4.18-rc6",
    "v4.18-rc7",
    "v4.18-rc8",
    "v4.19",
    "v4.19-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening",
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/linux/filter.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/bpf/core.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/bpf/syscall.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}