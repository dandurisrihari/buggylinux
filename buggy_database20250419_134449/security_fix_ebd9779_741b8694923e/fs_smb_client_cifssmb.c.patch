commit ebd9779683aaf089ad0173862553cdd3288ad9b4
Author: Justin Stitt <justinstitt@google.com>
Date:   Thu Mar 28 21:44:48 2024 +0000

    smb: client: replace deprecated strncpy with strscpy
    
    strncpy() is deprecated for use on NUL-terminated destination strings
    [1] and as such we should prefer more robust and less ambiguous string
    interfaces.
    
    In cifssmb.c:
    Using strncpy with a length argument equal to strlen(src) is generally
    dangerous because it can cause string buffers to not be NUL-terminated.
    In this case, however, there was extra effort made to ensure the buffer
    was NUL-terminated via a manual NUL-byte assignment. In an effort to rid
    the kernel of strncpy() use, let's swap over to using strscpy() which
    guarantees NUL-termination on the destination buffer.
    
    To handle the case where ea_name is NULL, let's use the ?: operator to
    substitute in an empty string, thereby allowing strscpy to still
    NUL-terminate the destintation string.
    
    Interesting note: this flex array buffer may go on to also have some
    value encoded after the NUL-termination:
    |       if (ea_value_len)
    |               memcpy(parm_data->list.name + name_len + 1,
    |                       ea_value, ea_value_len);
    
    Now for smb2ops.c and smb2transport.c:
    Both of these cases are simple, strncpy() is used to copy string
    literals which have a length less than the destination buffer's size. We
    can simply swap in the new 2-argument version of strscpy() introduced in
    Commit e6584c3964f2f ("string: Allow 2-argument strscpy()").
    
    Link: https://www.kernel.org/doc/html/latest/process/deprecated.html#strncpy-on-nul-terminated-strings [1]
    Link: https://manpages.debian.org/testing/linux-manual-4.8/strscpy.9.en.html [2]
    Link: https://github.com/KSPP/linux/issues/90
    Cc: linux-hardening@vger.kernel.org
    Signed-off-by: Justin Stitt <justinstitt@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Steve French <stfrench@microsoft.com>

diff --git a/fs/smb/client/cifssmb.c b/fs/smb/client/cifssmb.c
index 5aee55551573..23b5709ddc31 100644
--- a/fs/smb/client/cifssmb.c
+++ b/fs/smb/client/cifssmb.c
@@ -5854,10 +5854,8 @@ CIFSSMBSetEA(const unsigned int xid, struct cifs_tcon *tcon,
 	parm_data->list.EA_flags = 0;
 	/* we checked above that name len is less than 255 */
 	parm_data->list.name_len = (__u8)name_len;
-	/* EA names are always ASCII */
-	if (ea_name)
-		strncpy(parm_data->list.name, ea_name, name_len);
-	parm_data->list.name[name_len] = '\0';
+	/* EA names are always ASCII and NUL-terminated */
+	strscpy(parm_data->list.name, ea_name ?: "", name_len + 1);
 	parm_data->list.value_len = cpu_to_le16(ea_value_len);
 	/* caller ensures that ea_value_len is less than 64K but
 	we need to ensure that it fits within the smb */