{
  "hash": "ebd9779683aaf089ad0173862553cdd3288ad9b4",
  "hash_short": "ebd97796",
  "subject": "smb: client: replace deprecated strncpy with strscpy",
  "body": "strncpy() is deprecated for use on NUL-terminated destination strings\n[1] and as such we should prefer more robust and less ambiguous string\ninterfaces.\n\nIn cifssmb.c:\nUsing strncpy with a length argument equal to strlen(src) is generally\ndangerous because it can cause string buffers to not be NUL-terminated.\nIn this case, however, there was extra effort made to ensure the buffer\nwas NUL-terminated via a manual NUL-byte assignment. In an effort to rid\nthe kernel of strncpy() use, let's swap over to using strscpy() which\nguarantees NUL-termination on the destination buffer.\n\nTo handle the case where ea_name is NULL, let's use the ?: operator to\nsubstitute in an empty string, thereby allowing strscpy to still\nNUL-terminate the destintation string.\n\nInteresting note: this flex array buffer may go on to also have some\nvalue encoded after the NUL-termination:\n|\tif (ea_value_len)\n|\t\tmemcpy(parm_data->list.name + name_len + 1,\n|\t\t\tea_value, ea_value_len);\n\nNow for smb2ops.c and smb2transport.c:\nBoth of these cases are simple, strncpy() is used to copy string\nliterals which have a length less than the destination buffer's size. We\ncan simply swap in the new 2-argument version of strscpy() introduced in\nCommit e6584c3964f2f (\"string: Allow 2-argument strscpy()\").\n\nLink: https://www.kernel.org/doc/html/latest/process/deprecated.html#strncpy-on-nul-terminated-strings [1]\nLink: https://manpages.debian.org/testing/linux-manual-4.8/strscpy.9.en.html [2]\nLink: https://github.com/KSPP/linux/issues/90\nCc: linux-hardening@vger.kernel.org\nSigned-off-by: Justin Stitt <justinstitt@google.com>\nReviewed-by: Kees Cook <keescook@chromium.org>\nSigned-off-by: Steve French <stfrench@microsoft.com>",
  "full_message": "smb: client: replace deprecated strncpy with strscpy\n\nstrncpy() is deprecated for use on NUL-terminated destination strings\n[1] and as such we should prefer more robust and less ambiguous string\ninterfaces.\n\nIn cifssmb.c:\nUsing strncpy with a length argument equal to strlen(src) is generally\ndangerous because it can cause string buffers to not be NUL-terminated.\nIn this case, however, there was extra effort made to ensure the buffer\nwas NUL-terminated via a manual NUL-byte assignment. In an effort to rid\nthe kernel of strncpy() use, let's swap over to using strscpy() which\nguarantees NUL-termination on the destination buffer.\n\nTo handle the case where ea_name is NULL, let's use the ?: operator to\nsubstitute in an empty string, thereby allowing strscpy to still\nNUL-terminate the destintation string.\n\nInteresting note: this flex array buffer may go on to also have some\nvalue encoded after the NUL-termination:\n|\tif (ea_value_len)\n|\t\tmemcpy(parm_data->list.name + name_len + 1,\n|\t\t\tea_value, ea_value_len);\n\nNow for smb2ops.c and smb2transport.c:\nBoth of these cases are simple, strncpy() is used to copy string\nliterals which have a length less than the destination buffer's size. We\ncan simply swap in the new 2-argument version of strscpy() introduced in\nCommit e6584c3964f2f (\"string: Allow 2-argument strscpy()\").\n\nLink: https://www.kernel.org/doc/html/latest/process/deprecated.html#strncpy-on-nul-terminated-strings [1]\nLink: https://manpages.debian.org/testing/linux-manual-4.8/strscpy.9.en.html [2]\nLink: https://github.com/KSPP/linux/issues/90\nCc: linux-hardening@vger.kernel.org\nSigned-off-by: Justin Stitt <justinstitt@google.com>\nReviewed-by: Kees Cook <keescook@chromium.org>\nSigned-off-by: Steve French <stfrench@microsoft.com>",
  "author_name": "Justin Stitt",
  "author_email": "justinstitt@google.com",
  "author_date": "Thu Mar 28 21:44:48 2024 +0000",
  "author_date_iso": "2024-03-28T21:44:48+00:00",
  "committer_name": "Steve French",
  "committer_email": "stfrench@microsoft.com",
  "committer_date": "Sun Mar 31 17:35:14 2024 -0500",
  "committer_date_iso": "2024-03-31T17:35:14-05:00",
  "files_changed": [
    "fs/smb/client/cifssmb.c",
    "fs/smb/client/smb2ops.c",
    "fs/smb/client/smb2transport.c"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "fs/smb/client/cifssmb.c",
      "insertions": 2,
      "deletions": 4
    },
    {
      "file": "fs/smb/client/smb2ops.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "fs/smb/client/smb2transport.c",
      "insertions": 1,
      "deletions": 1
    }
  ],
  "total_insertions": 4,
  "total_deletions": 6,
  "total_changes": 10,
  "parents": [
    "39cd87c4eb2b893354f3b850f916353f2658ae6f"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/smb/client/cifssmb.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/smb/client/smb2ops.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/smb/client/smb2transport.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}