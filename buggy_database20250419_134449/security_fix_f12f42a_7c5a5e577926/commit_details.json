{
  "hash": "f12f42acdbb577a12eecfcebbbec41c81505c4dc",
  "hash_short": "f12f42ac",
  "subject": "perf/core: Fix potential double-fetch bug",
  "body": "While examining the kernel source code, I found a dangerous operation that\ncould turn into a double-fetch situation (a race condition bug) where the same\nuserspace memory region are fetched twice into kernel with sanity checks after\nthe first fetch while missing checks after the second fetch.\n\n  1. The first fetch happens in line 9573 get_user(size, &uattr->size).\n\n  2. Subsequently the 'size' variable undergoes a few sanity checks and\n     transformations (line 9577 to 9584).\n\n  3. The second fetch happens in line 9610 copy_from_user(attr, uattr, size)\n\n  4. Given that 'uattr' can be fully controlled in userspace, an attacker can\n     race condition to override 'uattr->size' to arbitrary value (say, 0xFFFFFFFF)\n     after the first fetch but before the second fetch. The changed value will be\n     copied to 'attr->size'.\n\n  5. There is no further checks on 'attr->size' until the end of this function,\n     and once the function returns, we lose the context to verify that 'attr->size'\n     conforms to the sanity checks performed in step 2 (line 9577 to 9584).\n\n  6. My manual analysis shows that 'attr->size' is not used elsewhere later,\n     so, there is no working exploit against it right now. However, this could\n     easily turns to an exploitable one if careless developers start to use\n     'attr->size' later.\n\nTo fix this, override 'attr->size' from the second fetch to the one from the\nfirst fetch, regardless of what is actually copied in.\n\nIn this way, it is assured that 'attr->size' is consistent with the checks\nperformed after the first fetch.\n\nSigned-off-by: Meng Xu <mengxu.gatech@gmail.com>\nAcked-by: Peter Zijlstra <peterz@infradead.org>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: acme@kernel.org\nCc: alexander.shishkin@linux.intel.com\nCc: meng.xu@gatech.edu\nCc: sanidhya@gatech.edu\nCc: taesoo@gatech.edu\nLink: http://lkml.kernel.org/r/1503522470-35531-1-git-send-email-meng.xu@gatech.edu\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "full_message": "perf/core: Fix potential double-fetch bug\n\nWhile examining the kernel source code, I found a dangerous operation that\ncould turn into a double-fetch situation (a race condition bug) where the same\nuserspace memory region are fetched twice into kernel with sanity checks after\nthe first fetch while missing checks after the second fetch.\n\n  1. The first fetch happens in line 9573 get_user(size, &uattr->size).\n\n  2. Subsequently the 'size' variable undergoes a few sanity checks and\n     transformations (line 9577 to 9584).\n\n  3. The second fetch happens in line 9610 copy_from_user(attr, uattr, size)\n\n  4. Given that 'uattr' can be fully controlled in userspace, an attacker can\n     race condition to override 'uattr->size' to arbitrary value (say, 0xFFFFFFFF)\n     after the first fetch but before the second fetch. The changed value will be\n     copied to 'attr->size'.\n\n  5. There is no further checks on 'attr->size' until the end of this function,\n     and once the function returns, we lose the context to verify that 'attr->size'\n     conforms to the sanity checks performed in step 2 (line 9577 to 9584).\n\n  6. My manual analysis shows that 'attr->size' is not used elsewhere later,\n     so, there is no working exploit against it right now. However, this could\n     easily turns to an exploitable one if careless developers start to use\n     'attr->size' later.\n\nTo fix this, override 'attr->size' from the second fetch to the one from the\nfirst fetch, regardless of what is actually copied in.\n\nIn this way, it is assured that 'attr->size' is consistent with the checks\nperformed after the first fetch.\n\nSigned-off-by: Meng Xu <mengxu.gatech@gmail.com>\nAcked-by: Peter Zijlstra <peterz@infradead.org>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: acme@kernel.org\nCc: alexander.shishkin@linux.intel.com\nCc: meng.xu@gatech.edu\nCc: sanidhya@gatech.edu\nCc: taesoo@gatech.edu\nLink: http://lkml.kernel.org/r/1503522470-35531-1-git-send-email-meng.xu@gatech.edu\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "author_name": "Meng Xu",
  "author_email": "mengxu.gatech@gmail.com",
  "author_date": "Wed Aug 23 17:07:50 2017 -0400",
  "author_date_iso": "2017-08-23T17:07:50-04:00",
  "committer_name": "Ingo Molnar",
  "committer_email": "mingo@kernel.org",
  "committer_date": "Tue Aug 29 13:26:22 2017 +0200",
  "committer_date_iso": "2017-08-29T13:26:22+02:00",
  "files_changed": [
    "kernel/events/core.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "kernel/events/core.c",
      "insertions": 2,
      "deletions": 0
    }
  ],
  "total_insertions": 2,
  "total_deletions": 0,
  "total_changes": 2,
  "parents": [
    "9c3a815f471a84811cf8021cf64aae3b8081dfde"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.13",
    "v4.14",
    "v4.14-rc1",
    "v4.14-rc2",
    "v4.14-rc3",
    "v4.14-rc4",
    "v4.14-rc5",
    "v4.14-rc6",
    "v4.14-rc7",
    "v4.14-rc8"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "kernel/events/core.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}