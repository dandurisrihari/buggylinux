{
  "hash": "8e96a87c5431c256feb65bcfc5aec92d9f7839b6",
  "hash_short": "8e96a87c",
  "subject": "powerpc/tm: Always reclaim in start_thread() for exec() class syscalls",
  "body": "Userspace can quite legitimately perform an exec() syscall with a\nsuspended transaction. exec() does not return to the old process, rather\nit load a new one and starts that, the expectation therefore is that the\nnew process starts not in a transaction. Currently exec() is not treated\nany differently to any other syscall which creates problems.\n\nFirstly it could allow a new process to start with a suspended\ntransaction for a binary that no longer exists. This means that the\ncheckpointed state won't be valid and if the suspended transaction were\never to be resumed and subsequently aborted (a possibility which is\nexceedingly likely as exec()ing will likely doom the transaction) the\nnew process will jump to invalid state.\n\nSecondly the incorrect attempt to keep the transactional state while\nstill zeroing state for the new process creates at least two TM Bad\nThings. The first triggers on the rfid to return to userspace as\nstart_thread() has given the new process a 'clean' MSR but the suspend\nwill still be set in the hardware MSR. The second TM Bad Thing triggers\nin __switch_to() as the processor is still transactionally suspended but\n__switch_to() wants to zero the TM sprs for the new process.\n\nThis is an example of the outcome of calling exec() with a suspended\ntransaction. Note the first 700 is likely the first TM bad thing\ndecsribed earlier only the kernel can't report it as we've loaded\nuserspace registers. c000000000009980 is the rfid in\nfast_exception_return()\n\n  Bad kernel stack pointer 3fffcfa1a370 at c000000000009980\n  Oops: Bad kernel stack pointer, sig: 6 [#1]\n  CPU: 0 PID: 2006 Comm: tm-execed Not tainted\n  NIP: c000000000009980 LR: 0000000000000000 CTR: 0000000000000000\n  REGS: c00000003ffefd40 TRAP: 0700   Not tainted\n  MSR: 8000000300201031 <SF,ME,IR,DR,LE,TM[SE]>  CR: 00000000  XER: 00000000\n  CFAR: c0000000000098b4 SOFTE: 0\n  PACATMSCRATCH: b00000010000d033\n  GPR00: 0000000000000000 00003fffcfa1a370 0000000000000000 0000000000000000\n  GPR04: 0000000000000000 0000000000000000 0000000000000000 0000000000000000\n  GPR08: 0000000000000000 0000000000000000 0000000000000000 0000000000000000\n  GPR12: 00003fff966611c0 0000000000000000 0000000000000000 0000000000000000\n  NIP [c000000000009980] fast_exception_return+0xb0/0xb8\n  LR [0000000000000000]           (null)\n  Call Trace:\n  Instruction dump:\n  f84d0278 e9a100d8 7c7b03a6 e84101a0 7c4ff120 e8410170 7c5a03a6 e8010070\n  e8410080 e8610088 e8810090 e8210078 <4c000024> 48000000 e8610178 88ed023b\n\n  Kernel BUG at c000000000043e80 [verbose debug info unavailable]\n  Unexpected TM Bad Thing exception at c000000000043e80 (msr 0x201033)\n  Oops: Unrecoverable exception, sig: 6 [#2]\n  CPU: 0 PID: 2006 Comm: tm-execed Tainted: G      D\n  task: c0000000fbea6d80 ti: c00000003ffec000 task.ti: c0000000fb7ec000\n  NIP: c000000000043e80 LR: c000000000015a24 CTR: 0000000000000000\n  REGS: c00000003ffef7e0 TRAP: 0700   Tainted: G      D\n  MSR: 8000000300201033 <SF,ME,IR,DR,RI,LE,TM[SE]>  CR: 28002828  XER: 00000000\n  CFAR: c000000000015a20 SOFTE: 0\n  PACATMSCRATCH: b00000010000d033\n  GPR00: 0000000000000000 c00000003ffefa60 c000000000db5500 c0000000fbead000\n  GPR04: 8000000300001033 2222222222222222 2222222222222222 00000000ff160000\n  GPR08: 0000000000000000 800000010000d033 c0000000fb7e3ea0 c00000000fe00004\n  GPR12: 0000000000002200 c00000000fe00000 0000000000000000 0000000000000000\n  GPR16: 0000000000000000 0000000000000000 0000000000000000 0000000000000000\n  GPR20: 0000000000000000 0000000000000000 c0000000fbea7410 00000000ff160000\n  GPR24: c0000000ffe1f600 c0000000fbea8700 c0000000fbea8700 c0000000fbead000\n  GPR28: c000000000e20198 c0000000fbea6d80 c0000000fbeab680 c0000000fbea6d80\n  NIP [c000000000043e80] tm_restore_sprs+0xc/0x1c\n  LR [c000000000015a24] __switch_to+0x1f4/0x420\n  Call Trace:\n  Instruction dump:\n  7c800164 4e800020 7c0022a6 f80304a8 7c0222a6 f80304b0 7c0122a6 f80304b8\n  4e800020 e80304a8 7c0023a6 e80304b0 <7c0223a6> e80304b8 7c0123a6 4e800020\n\nThis fixes CVE-2016-5828.\n\nFixes: bc2a9408fa65 (\"powerpc: Hook in new transactional memory code\")\nCc: stable@vger.kernel.org # v3.9+\nSigned-off-by: Cyril Bur <cyrilbur@gmail.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>",
  "full_message": "powerpc/tm: Always reclaim in start_thread() for exec() class syscalls\n\nUserspace can quite legitimately perform an exec() syscall with a\nsuspended transaction. exec() does not return to the old process, rather\nit load a new one and starts that, the expectation therefore is that the\nnew process starts not in a transaction. Currently exec() is not treated\nany differently to any other syscall which creates problems.\n\nFirstly it could allow a new process to start with a suspended\ntransaction for a binary that no longer exists. This means that the\ncheckpointed state won't be valid and if the suspended transaction were\never to be resumed and subsequently aborted (a possibility which is\nexceedingly likely as exec()ing will likely doom the transaction) the\nnew process will jump to invalid state.\n\nSecondly the incorrect attempt to keep the transactional state while\nstill zeroing state for the new process creates at least two TM Bad\nThings. The first triggers on the rfid to return to userspace as\nstart_thread() has given the new process a 'clean' MSR but the suspend\nwill still be set in the hardware MSR. The second TM Bad Thing triggers\nin __switch_to() as the processor is still transactionally suspended but\n__switch_to() wants to zero the TM sprs for the new process.\n\nThis is an example of the outcome of calling exec() with a suspended\ntransaction. Note the first 700 is likely the first TM bad thing\ndecsribed earlier only the kernel can't report it as we've loaded\nuserspace registers. c000000000009980 is the rfid in\nfast_exception_return()\n\n  Bad kernel stack pointer 3fffcfa1a370 at c000000000009980\n  Oops: Bad kernel stack pointer, sig: 6 [#1]\n  CPU: 0 PID: 2006 Comm: tm-execed Not tainted\n  NIP: c000000000009980 LR: 0000000000000000 CTR: 0000000000000000\n  REGS: c00000003ffefd40 TRAP: 0700   Not tainted\n  MSR: 8000000300201031 <SF,ME,IR,DR,LE,TM[SE]>  CR: 00000000  XER: 00000000\n  CFAR: c0000000000098b4 SOFTE: 0\n  PACATMSCRATCH: b00000010000d033\n  GPR00: 0000000000000000 00003fffcfa1a370 0000000000000000 0000000000000000\n  GPR04: 0000000000000000 0000000000000000 0000000000000000 0000000000000000\n  GPR08: 0000000000000000 0000000000000000 0000000000000000 0000000000000000\n  GPR12: 00003fff966611c0 0000000000000000 0000000000000000 0000000000000000\n  NIP [c000000000009980] fast_exception_return+0xb0/0xb8\n  LR [0000000000000000]           (null)\n  Call Trace:\n  Instruction dump:\n  f84d0278 e9a100d8 7c7b03a6 e84101a0 7c4ff120 e8410170 7c5a03a6 e8010070\n  e8410080 e8610088 e8810090 e8210078 <4c000024> 48000000 e8610178 88ed023b\n\n  Kernel BUG at c000000000043e80 [verbose debug info unavailable]\n  Unexpected TM Bad Thing exception at c000000000043e80 (msr 0x201033)\n  Oops: Unrecoverable exception, sig: 6 [#2]\n  CPU: 0 PID: 2006 Comm: tm-execed Tainted: G      D\n  task: c0000000fbea6d80 ti: c00000003ffec000 task.ti: c0000000fb7ec000\n  NIP: c000000000043e80 LR: c000000000015a24 CTR: 0000000000000000\n  REGS: c00000003ffef7e0 TRAP: 0700   Tainted: G      D\n  MSR: 8000000300201033 <SF,ME,IR,DR,RI,LE,TM[SE]>  CR: 28002828  XER: 00000000\n  CFAR: c000000000015a20 SOFTE: 0\n  PACATMSCRATCH: b00000010000d033\n  GPR00: 0000000000000000 c00000003ffefa60 c000000000db5500 c0000000fbead000\n  GPR04: 8000000300001033 2222222222222222 2222222222222222 00000000ff160000\n  GPR08: 0000000000000000 800000010000d033 c0000000fb7e3ea0 c00000000fe00004\n  GPR12: 0000000000002200 c00000000fe00000 0000000000000000 0000000000000000\n  GPR16: 0000000000000000 0000000000000000 0000000000000000 0000000000000000\n  GPR20: 0000000000000000 0000000000000000 c0000000fbea7410 00000000ff160000\n  GPR24: c0000000ffe1f600 c0000000fbea8700 c0000000fbea8700 c0000000fbead000\n  GPR28: c000000000e20198 c0000000fbea6d80 c0000000fbeab680 c0000000fbea6d80\n  NIP [c000000000043e80] tm_restore_sprs+0xc/0x1c\n  LR [c000000000015a24] __switch_to+0x1f4/0x420\n  Call Trace:\n  Instruction dump:\n  7c800164 4e800020 7c0022a6 f80304a8 7c0222a6 f80304b0 7c0122a6 f80304b8\n  4e800020 e80304a8 7c0023a6 e80304b0 <7c0223a6> e80304b8 7c0123a6 4e800020\n\nThis fixes CVE-2016-5828.\n\nFixes: bc2a9408fa65 (\"powerpc: Hook in new transactional memory code\")\nCc: stable@vger.kernel.org # v3.9+\nSigned-off-by: Cyril Bur <cyrilbur@gmail.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>",
  "author_name": "Cyril Bur",
  "author_email": "cyrilbur@gmail.com",
  "author_date": "Fri Jun 17 14:58:34 2016 +1000",
  "author_date_iso": "2016-06-17T14:58:34+10:00",
  "committer_name": "Michael Ellerman",
  "committer_email": "mpe@ellerman.id.au",
  "committer_date": "Mon Jun 27 20:35:17 2016 +1000",
  "committer_date_iso": "2016-06-27T20:35:17+10:00",
  "files_changed": [
    "arch/powerpc/kernel/process.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/powerpc/kernel/process.c",
      "insertions": 10,
      "deletions": 0
    }
  ],
  "total_insertions": 10,
  "total_deletions": 0,
  "total_changes": 10,
  "parents": [
    "844e3be47693f92a108cb1fb3b0606bf25e9c7a6"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.10",
    "v4.10-rc1",
    "v4.10-rc2",
    "v4.10-rc3",
    "v4.10-rc4",
    "v4.10-rc5",
    "v4.10-rc6",
    "v4.10-rc7",
    "v4.10-rc8",
    "v4.11"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2016-5828"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "arch/powerpc/kernel/process.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}