{
  "hash": "2d61391270a3ceb95b3dd536ea13002e653323b6",
  "hash_short": "2d613912",
  "subject": "KVM: x86: Differentiate Soft vs. Hard IRQs vs. reinjected in tracepoint",
  "body": "In the IRQ injection tracepoint, differentiate between Hard IRQs and Soft\n\"IRQs\", i.e. interrupts that are reinjected after incomplete delivery of\na software interrupt from an INTn instruction.  Tag reinjected interrupts\nas such, even though the information is usually redundant since soft\ninterrupts are only ever reinjected by KVM.  Though rare in practice, a\nhard IRQ can be reinjected.\n\nSigned-off-by: Sean Christopherson <seanjc@google.com>\n[MSS: change \"kvm_inj_virq\" event \"reinjected\" field type to bool]\nSigned-off-by: Maciej S. Szmigiero <maciej.szmigiero@oracle.com>\nMessage-Id: <9664d49b3bd21e227caa501cff77b0569bebffe2.1651440202.git.maciej.szmigiero@oracle.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
  "full_message": "KVM: x86: Differentiate Soft vs. Hard IRQs vs. reinjected in tracepoint\n\nIn the IRQ injection tracepoint, differentiate between Hard IRQs and Soft\n\"IRQs\", i.e. interrupts that are reinjected after incomplete delivery of\na software interrupt from an INTn instruction.  Tag reinjected interrupts\nas such, even though the information is usually redundant since soft\ninterrupts are only ever reinjected by KVM.  Though rare in practice, a\nhard IRQ can be reinjected.\n\nSigned-off-by: Sean Christopherson <seanjc@google.com>\n[MSS: change \"kvm_inj_virq\" event \"reinjected\" field type to bool]\nSigned-off-by: Maciej S. Szmigiero <maciej.szmigiero@oracle.com>\nMessage-Id: <9664d49b3bd21e227caa501cff77b0569bebffe2.1651440202.git.maciej.szmigiero@oracle.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
  "author_name": "Sean Christopherson",
  "author_email": "seanjc@google.com",
  "author_date": "Mon May 2 00:07:33 2022 +0200",
  "author_date_iso": "2022-05-02T00:07:33+02:00",
  "committer_name": "Paolo Bonzini",
  "committer_email": "pbonzini@redhat.com",
  "committer_date": "Wed Jun 8 04:47:01 2022 -0400",
  "committer_date_iso": "2022-06-08T04:47:01-04:00",
  "files_changed": [
    "arch/x86/include/asm/kvm_host.h",
    "arch/x86/kvm/svm/svm.c",
    "arch/x86/kvm/trace.h",
    "arch/x86/kvm/vmx/vmx.c",
    "arch/x86/kvm/x86.c"
  ],
  "files_changed_count": 5,
  "stats": [
    {
      "file": "arch/x86/include/asm/kvm_host.h",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/x86/kvm/svm/svm.c",
      "insertions": 3,
      "deletions": 2
    },
    {
      "file": "arch/x86/kvm/trace.h",
      "insertions": 11,
      "deletions": 5
    },
    {
      "file": "arch/x86/kvm/vmx/vmx.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/x86/kvm/x86.c",
      "insertions": 2,
      "deletions": 2
    }
  ],
  "total_insertions": 19,
  "total_deletions": 12,
  "total_changes": 31,
  "parents": [
    "21d4c575eb4a1e6d956b61b5e9c162895fa7d4ba"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/include/asm/kvm_host.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kvm/svm/svm.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kvm/trace.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kvm/vmx/vmx.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kvm/x86.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}