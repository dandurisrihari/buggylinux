{
  "hash": "4368c4bc9d36821690d6bb2e743d5a075b6ddb55",
  "hash_short": "4368c4bc",
  "subject": "Merge branch 'x86/grand-schemozzle' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip",
  "body": "Pull pti updates from Thomas Gleixner:\n \"The performance deterioration departement is not proud at all to\n  present yet another set of speculation fences to mitigate the next\n  chapter in the 'what could possibly go wrong' story.\n\n  The new vulnerability belongs to the Spectre class and affects GS\n  based data accesses and has therefore been dubbed 'Grand Schemozzle'\n  for secret communication purposes. It's officially listed as\n  CVE-2019-1125.\n\n  Conditional branches in the entry paths which contain a SWAPGS\n  instruction (interrupts and exceptions) can be mis-speculated which\n  results in speculative accesses with a wrong GS base.\n\n  This can happen on entry from user mode through a mis-speculated\n  branch which takes the entry from kernel mode path and therefore does\n  not execute the SWAPGS instruction. The following speculative accesses\n  are done with user GS base.\n\n  On entry from kernel mode the mis-speculated branch executes the\n  SWAPGS instruction in the entry from user mode path which has the same\n  effect that the following GS based accesses are done with user GS\n  base.\n\n  If there is a disclosure gadget available in these code paths the\n  mis-speculated data access can be leaked through the usual side\n  channels.\n\n  The entry from user mode issue affects all CPUs which have speculative\n  execution. The entry from kernel mode issue affects only Intel CPUs\n  which can speculate through SWAPGS. On CPUs from other vendors SWAPGS\n  has semantics which prevent that.\n\n  SMAP migitates both problems but only when the CPU is not affected by\n  the Meltdown vulnerability.\n\n  The mitigation is to issue LFENCE instructions in the entry from\n  kernel mode path for all affected CPUs and on the affected Intel CPUs\n  also in the entry from user mode path unless PTI is enabled because\n  the CR3 write is serializing.\n\n  The fences are as usual enabled conditionally and can be completely\n  disabled on the kernel command line. The Spectre V1 documentation is\n  updated accordingly.\n\n  A big \"Thank You!\" goes to Josh for doing the heavy lifting for this\n  round of hardware misfeature 'repair'. Of course also \"Thank You!\" to\n  everybody else who contributed in one way or the other\"\n\n* 'x86/grand-schemozzle' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:\n  Documentation: Add swapgs description to the Spectre v1 documentation\n  x86/speculation/swapgs: Exclude ATOMs from speculation through SWAPGS\n  x86/entry/64: Use JMP instead of JMPQ\n  x86/speculation: Enable Spectre v1 swapgs mitigations\n  x86/speculation: Prepare entry code for Spectre v1 swapgs mitigations",
  "full_message": "Merge branch 'x86/grand-schemozzle' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip\n\nPull pti updates from Thomas Gleixner:\n \"The performance deterioration departement is not proud at all to\n  present yet another set of speculation fences to mitigate the next\n  chapter in the 'what could possibly go wrong' story.\n\n  The new vulnerability belongs to the Spectre class and affects GS\n  based data accesses and has therefore been dubbed 'Grand Schemozzle'\n  for secret communication purposes. It's officially listed as\n  CVE-2019-1125.\n\n  Conditional branches in the entry paths which contain a SWAPGS\n  instruction (interrupts and exceptions) can be mis-speculated which\n  results in speculative accesses with a wrong GS base.\n\n  This can happen on entry from user mode through a mis-speculated\n  branch which takes the entry from kernel mode path and therefore does\n  not execute the SWAPGS instruction. The following speculative accesses\n  are done with user GS base.\n\n  On entry from kernel mode the mis-speculated branch executes the\n  SWAPGS instruction in the entry from user mode path which has the same\n  effect that the following GS based accesses are done with user GS\n  base.\n\n  If there is a disclosure gadget available in these code paths the\n  mis-speculated data access can be leaked through the usual side\n  channels.\n\n  The entry from user mode issue affects all CPUs which have speculative\n  execution. The entry from kernel mode issue affects only Intel CPUs\n  which can speculate through SWAPGS. On CPUs from other vendors SWAPGS\n  has semantics which prevent that.\n\n  SMAP migitates both problems but only when the CPU is not affected by\n  the Meltdown vulnerability.\n\n  The mitigation is to issue LFENCE instructions in the entry from\n  kernel mode path for all affected CPUs and on the affected Intel CPUs\n  also in the entry from user mode path unless PTI is enabled because\n  the CR3 write is serializing.\n\n  The fences are as usual enabled conditionally and can be completely\n  disabled on the kernel command line. The Spectre V1 documentation is\n  updated accordingly.\n\n  A big \"Thank You!\" goes to Josh for doing the heavy lifting for this\n  round of hardware misfeature 'repair'. Of course also \"Thank You!\" to\n  everybody else who contributed in one way or the other\"\n\n* 'x86/grand-schemozzle' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:\n  Documentation: Add swapgs description to the Spectre v1 documentation\n  x86/speculation/swapgs: Exclude ATOMs from speculation through SWAPGS\n  x86/entry/64: Use JMP instead of JMPQ\n  x86/speculation: Enable Spectre v1 swapgs mitigations\n  x86/speculation: Prepare entry code for Spectre v1 swapgs mitigations",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Tue Aug 6 11:22:22 2019 -0700",
  "author_date_iso": "2019-08-06T11:22:22-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Tue Aug 6 11:22:22 2019 -0700",
  "committer_date_iso": "2019-08-06T11:22:22-07:00",
  "files_changed": [],
  "files_changed_count": 0,
  "stats": [
    {
      "file": "Documentation/admin-guide/hw-vuln/spectre.rst",
      "insertions": 80,
      "deletions": 8
    },
    {
      "file": "Documentation/admin-guide/kernel-parameters.txt",
      "insertions": 4,
      "deletions": 4
    },
    {
      "file": "arch/x86/entry/calling.h",
      "insertions": 17,
      "deletions": 0
    },
    {
      "file": "arch/x86/entry/entry_64.S",
      "insertions": 18,
      "deletions": 3
    },
    {
      "file": "arch/x86/include/asm/cpufeatures.h",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/cpu/bugs.c",
      "insertions": 96,
      "deletions": 9
    },
    {
      "file": "arch/x86/kernel/cpu/common.c",
      "insertions": 28,
      "deletions": 16
    }
  ],
  "total_insertions": 246,
  "total_deletions": 40,
  "total_changes": 286,
  "parents": [
    "0eb0ce0a78e1f57082bca6cbdea6fd04feedb876",
    "4c92057661a3412f547ede95715641d7ee16ddac"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.3",
    "v5.3-rc4",
    "v5.3-rc5",
    "v5.3-rc6",
    "v5.3-rc7",
    "v5.3-rc8",
    "v5.4",
    "v5.4-rc1",
    "v5.4-rc2",
    "v5.4-rc3"
  ],
  "is_merge": true,
  "security_info": {
    "cve_ids": [
      "CVE-2019-1125"
    ],
    "security_keywords": [
      "vulnerability"
    ]
  },
  "fix_type": "cve",
  "file_results": []
}