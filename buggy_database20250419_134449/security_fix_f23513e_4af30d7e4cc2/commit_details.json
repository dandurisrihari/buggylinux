{
  "hash": "f23513e8d96cf5e6cf8d2ff0cb5dd6bbc33995e4",
  "hash_short": "f23513e8",
  "subject": "Introduce O_CLOEXEC",
  "body": "The problem is as follows: in multi-threaded code (or more correctly: all\ncode using clone() with CLONE_FILES) we have a race when exec'ing.\n\n   thread #1                       thread #2\n\n   fd=open()\n\n                                   fork + exec\n\n  fcntl(fd,F_SETFD,FD_CLOEXEC)\n\nIn some applications this can happen frequently.  Take a web browser.  One\nthread opens a file and another thread starts, say, an external PDF viewer.\n The result can even be a security issue if that open file descriptor\nrefers to a sensitive file and the external program can somehow be tricked\ninto using that descriptor.\n\nJust adding O_CLOEXEC support to open() doesn't solve the whole set of\nproblems.  There are other ways to create file descriptors (socket,\nepoll_create, Unix domain socket transfer, etc).  These can and should be\naddressed separately though.  open() is such an easy case that it makes not\nmuch sense putting the fix off.\n\nThe test program:\n\n#include <errno.h>\n#include <fcntl.h>\n#include <stdio.h>\n#include <unistd.h>\n\n#ifndef O_CLOEXEC\n# define O_CLOEXEC 02000000\n#endif\n\nint\nmain (int argc, char *argv[])\n{\n  int fd;\n  if (argc > 1)\n    {\n      fd = atol (argv[1]);\n      printf (\"child: fd = %d\\n\", fd);\n      if (fcntl (fd, F_GETFD) == 0 || errno != EBADF)\n        {\n          puts (\"file descriptor valid in child\");\n          return 1;\n        }\n      return 0;\n    }\n\n  fd = open (\"/proc/self/exe\", O_RDONLY | O_CLOEXEC);\n  printf (\"in parent: new fd = %d\\n\", fd);\n  char buf[20];\n  snprintf (buf, sizeof (buf), \"%d\", fd);\n  execl (\"/proc/self/exe\", argv[0], buf, NULL);\n  puts (\"execl failed\");\n  return 1;\n}\n\n[kyle@parisc-linux.org: parisc fix]\nSigned-off-by: Ulrich Drepper <drepper@redhat.com>\nAcked-by: Ingo Molnar <mingo@elte.hu>\nCc: Davide Libenzi <davidel@xmailserver.org>\nCc: Michael Kerrisk <mtk-manpages@gmx.net>\nCc: Chris Zankel <chris@zankel.net>\nSigned-off-by: Kyle McMartin <kyle@parisc-linux.org>\nAcked-by: David S. Miller <davem@davemloft.net>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "full_message": "Introduce O_CLOEXEC\n\nThe problem is as follows: in multi-threaded code (or more correctly: all\ncode using clone() with CLONE_FILES) we have a race when exec'ing.\n\n   thread #1                       thread #2\n\n   fd=open()\n\n                                   fork + exec\n\n  fcntl(fd,F_SETFD,FD_CLOEXEC)\n\nIn some applications this can happen frequently.  Take a web browser.  One\nthread opens a file and another thread starts, say, an external PDF viewer.\n The result can even be a security issue if that open file descriptor\nrefers to a sensitive file and the external program can somehow be tricked\ninto using that descriptor.\n\nJust adding O_CLOEXEC support to open() doesn't solve the whole set of\nproblems.  There are other ways to create file descriptors (socket,\nepoll_create, Unix domain socket transfer, etc).  These can and should be\naddressed separately though.  open() is such an easy case that it makes not\nmuch sense putting the fix off.\n\nThe test program:\n\n#include <errno.h>\n#include <fcntl.h>\n#include <stdio.h>\n#include <unistd.h>\n\n#ifndef O_CLOEXEC\n# define O_CLOEXEC 02000000\n#endif\n\nint\nmain (int argc, char *argv[])\n{\n  int fd;\n  if (argc > 1)\n    {\n      fd = atol (argv[1]);\n      printf (\"child: fd = %d\\n\", fd);\n      if (fcntl (fd, F_GETFD) == 0 || errno != EBADF)\n        {\n          puts (\"file descriptor valid in child\");\n          return 1;\n        }\n      return 0;\n    }\n\n  fd = open (\"/proc/self/exe\", O_RDONLY | O_CLOEXEC);\n  printf (\"in parent: new fd = %d\\n\", fd);\n  char buf[20];\n  snprintf (buf, sizeof (buf), \"%d\", fd);\n  execl (\"/proc/self/exe\", argv[0], buf, NULL);\n  puts (\"execl failed\");\n  return 1;\n}\n\n[kyle@parisc-linux.org: parisc fix]\nSigned-off-by: Ulrich Drepper <drepper@redhat.com>\nAcked-by: Ingo Molnar <mingo@elte.hu>\nCc: Davide Libenzi <davidel@xmailserver.org>\nCc: Michael Kerrisk <mtk-manpages@gmx.net>\nCc: Chris Zankel <chris@zankel.net>\nSigned-off-by: Kyle McMartin <kyle@parisc-linux.org>\nAcked-by: David S. Miller <davem@davemloft.net>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "author_name": "Ulrich Drepper",
  "author_email": "drepper@redhat.com",
  "author_date": "Sun Jul 15 23:40:32 2007 -0700",
  "author_date_iso": "2007-07-15T23:40:32-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@woody.linux-foundation.org",
  "committer_date": "Mon Jul 16 09:05:45 2007 -0700",
  "committer_date_iso": "2007-07-16T09:05:45-07:00",
  "files_changed": [
    "fs/open.c",
    "include/asm-generic/fcntl.h",
    "include/asm-parisc/fcntl.h"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "fs/open.c",
      "insertions": 11,
      "deletions": 3
    },
    {
      "file": "include/asm-generic/fcntl.h",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "include/asm-parisc/fcntl.h",
      "insertions": 15,
      "deletions": 14
    }
  ],
  "total_insertions": 29,
  "total_deletions": 17,
  "total_changes": 46,
  "parents": [
    "4a2d44590a603be292addce9c263982043416666"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v2.6.23",
    "v2.6.23-rc1",
    "v2.6.23-rc2",
    "v2.6.23-rc3",
    "v2.6.23-rc4",
    "v2.6.23-rc5",
    "v2.6.23-rc6",
    "v2.6.23-rc7",
    "v2.6.23-rc8",
    "v2.6.23-rc9"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "security issue"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/open.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/asm-generic/fcntl.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/asm-parisc/fcntl.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}