{
  "hash": "74451e66d516c55e309e8d89a4a1e7596e46aacd",
  "hash_short": "74451e66",
  "subject": "bpf: make jited programs visible in traces",
  "body": "Long standing issue with JITed programs is that stack traces from\nfunction tracing check whether a given address is kernel code\nthrough {__,}kernel_text_address(), which checks for code in core\nkernel, modules and dynamically allocated ftrace trampolines. But\nwhat is still missing is BPF JITed programs (interpreted programs\nare not an issue as __bpf_prog_run() will be attributed to them),\nthus when a stack trace is triggered, the code walking the stack\nwon't see any of the JITed ones. The same for address correlation\ndone from user space via reading /proc/kallsyms. This is read by\ntools like perf, but the latter is also useful for permanent live\ntracing with eBPF itself in combination with stack maps when other\neBPF types are part of the callchain. See offwaketime example on\ndumping stack from a map.\n\nThis work tries to tackle that issue by making the addresses and\nsymbols known to the kernel. The lookup from *kernel_text_address()\nis implemented through a latched RB tree that can be read under\nRCU in fast-path that is also shared for symbol/size/offset lookup\nfor a specific given address in kallsyms. The slow-path iteration\nthrough all symbols in the seq file done via RCU list, which holds\na tiny fraction of all exported ksyms, usually below 0.1 percent.\nFunction symbols are exported as bpf_prog_<tag>, in order to aide\ndebugging and attribution. This facility is currently enabled for\nroot-only when bpf_jit_kallsyms is set to 1, and disabled if hardening\nis active in any mode. The rationale behind this is that still a lot\nof systems ship with world read permissions on kallsyms thus addresses\nshould not get suddenly exposed for them. If that situation gets\nmuch better in future, we always have the option to change the\ndefault on this. Likewise, unprivileged programs are not allowed\nto add entries there either, but that is less of a concern as most\nsuch programs types relevant in this context are for root-only anyway.\nIf enabled, call graphs and stack traces will then show a correct\nattribution; one example is illustrated below, where the trace is\nnow visible in tooling such as perf script --kallsyms=/proc/kallsyms\nand friends.\n\nBefore:\n\n  7fff8166889d bpf_clone_redirect+0x80007f0020ed (/lib/modules/4.9.0-rc8+/build/vmlinux)\n         f5d80 __sendmsg_nocancel+0xffff006451f1a007 (/usr/lib64/libc-2.18.so)\n\nAfter:\n\n  7fff816688b7 bpf_clone_redirect+0x80007f002107 (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fffa0575728 bpf_prog_33c45a467c9e061a+0x8000600020fb (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fffa07ef1fc cls_bpf_classify+0x8000600020dc (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fff81678b68 tc_classify+0x80007f002078 (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fff8164d40b __netif_receive_skb_core+0x80007f0025fb (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fff8164d718 __netif_receive_skb+0x80007f002018 (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fff8164e565 process_backlog+0x80007f002095 (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fff8164dc71 net_rx_action+0x80007f002231 (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fff81767461 __softirqentry_text_start+0x80007f0020d1 (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fff817658ac do_softirq_own_stack+0x80007f00201c (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fff810a2c20 do_softirq+0x80007f002050 (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fff810a2cb5 __local_bh_enable_ip+0x80007f002085 (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fff8168d452 ip_finish_output2+0x80007f002152 (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fff8168ea3d ip_finish_output+0x80007f00217d (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fff8168f2af ip_output+0x80007f00203f (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  [...]\n  7fff81005854 do_syscall_64+0x80007f002054 (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fff817649eb return_from_SYSCALL_64+0x80007f002000 (/lib/modules/4.9.0-rc8+/build/vmlinux)\n         f5d80 __sendmsg_nocancel+0xffff01c484812007 (/usr/lib64/libc-2.18.so)\n\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Alexei Starovoitov <ast@kernel.org>\nCc: linux-kernel@vger.kernel.org\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "full_message": "bpf: make jited programs visible in traces\n\nLong standing issue with JITed programs is that stack traces from\nfunction tracing check whether a given address is kernel code\nthrough {__,}kernel_text_address(), which checks for code in core\nkernel, modules and dynamically allocated ftrace trampolines. But\nwhat is still missing is BPF JITed programs (interpreted programs\nare not an issue as __bpf_prog_run() will be attributed to them),\nthus when a stack trace is triggered, the code walking the stack\nwon't see any of the JITed ones. The same for address correlation\ndone from user space via reading /proc/kallsyms. This is read by\ntools like perf, but the latter is also useful for permanent live\ntracing with eBPF itself in combination with stack maps when other\neBPF types are part of the callchain. See offwaketime example on\ndumping stack from a map.\n\nThis work tries to tackle that issue by making the addresses and\nsymbols known to the kernel. The lookup from *kernel_text_address()\nis implemented through a latched RB tree that can be read under\nRCU in fast-path that is also shared for symbol/size/offset lookup\nfor a specific given address in kallsyms. The slow-path iteration\nthrough all symbols in the seq file done via RCU list, which holds\na tiny fraction of all exported ksyms, usually below 0.1 percent.\nFunction symbols are exported as bpf_prog_<tag>, in order to aide\ndebugging and attribution. This facility is currently enabled for\nroot-only when bpf_jit_kallsyms is set to 1, and disabled if hardening\nis active in any mode. The rationale behind this is that still a lot\nof systems ship with world read permissions on kallsyms thus addresses\nshould not get suddenly exposed for them. If that situation gets\nmuch better in future, we always have the option to change the\ndefault on this. Likewise, unprivileged programs are not allowed\nto add entries there either, but that is less of a concern as most\nsuch programs types relevant in this context are for root-only anyway.\nIf enabled, call graphs and stack traces will then show a correct\nattribution; one example is illustrated below, where the trace is\nnow visible in tooling such as perf script --kallsyms=/proc/kallsyms\nand friends.\n\nBefore:\n\n  7fff8166889d bpf_clone_redirect+0x80007f0020ed (/lib/modules/4.9.0-rc8+/build/vmlinux)\n         f5d80 __sendmsg_nocancel+0xffff006451f1a007 (/usr/lib64/libc-2.18.so)\n\nAfter:\n\n  7fff816688b7 bpf_clone_redirect+0x80007f002107 (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fffa0575728 bpf_prog_33c45a467c9e061a+0x8000600020fb (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fffa07ef1fc cls_bpf_classify+0x8000600020dc (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fff81678b68 tc_classify+0x80007f002078 (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fff8164d40b __netif_receive_skb_core+0x80007f0025fb (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fff8164d718 __netif_receive_skb+0x80007f002018 (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fff8164e565 process_backlog+0x80007f002095 (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fff8164dc71 net_rx_action+0x80007f002231 (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fff81767461 __softirqentry_text_start+0x80007f0020d1 (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fff817658ac do_softirq_own_stack+0x80007f00201c (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fff810a2c20 do_softirq+0x80007f002050 (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fff810a2cb5 __local_bh_enable_ip+0x80007f002085 (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fff8168d452 ip_finish_output2+0x80007f002152 (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fff8168ea3d ip_finish_output+0x80007f00217d (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fff8168f2af ip_output+0x80007f00203f (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  [...]\n  7fff81005854 do_syscall_64+0x80007f002054 (/lib/modules/4.9.0-rc8+/build/vmlinux)\n  7fff817649eb return_from_SYSCALL_64+0x80007f002000 (/lib/modules/4.9.0-rc8+/build/vmlinux)\n         f5d80 __sendmsg_nocancel+0xffff01c484812007 (/usr/lib64/libc-2.18.so)\n\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nAcked-by: Alexei Starovoitov <ast@kernel.org>\nCc: linux-kernel@vger.kernel.org\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "author_name": "Daniel Borkmann",
  "author_email": "daniel@iogearbox.net",
  "author_date": "Thu Feb 16 22:24:50 2017 +0100",
  "author_date_iso": "2017-02-16T22:24:50+01:00",
  "committer_name": "David S. Miller",
  "committer_email": "davem@davemloft.net",
  "committer_date": "Fri Feb 17 13:40:05 2017 -0500",
  "committer_date_iso": "2017-02-17T13:40:05-05:00",
  "files_changed": [
    "Documentation/sysctl/net.txt",
    "arch/arm64/net/bpf_jit_comp.c",
    "arch/powerpc/net/bpf_jit_comp64.c",
    "arch/s390/net/bpf_jit_comp.c",
    "arch/x86/net/bpf_jit_comp.c",
    "include/linux/bpf.h",
    "include/linux/filter.h",
    "kernel/bpf/core.c",
    "kernel/bpf/syscall.c",
    "kernel/extable.c",
    "kernel/kallsyms.c",
    "net/Kconfig",
    "net/core/sysctl_net_core.c"
  ],
  "files_changed_count": 13,
  "stats": [
    {
      "file": "Documentation/sysctl/net.txt",
      "insertions": 12,
      "deletions": 0
    },
    {
      "file": "arch/arm64/net/bpf_jit_comp.c",
      "insertions": 0,
      "deletions": 15
    },
    {
      "file": "arch/powerpc/net/bpf_jit_comp64.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/s390/net/bpf_jit_comp.c",
      "insertions": 0,
      "deletions": 18
    },
    {
      "file": "arch/x86/net/bpf_jit_comp.c",
      "insertions": 0,
      "deletions": 15
    },
    {
      "file": "include/linux/bpf.h",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "include/linux/filter.h",
      "insertions": 111,
      "deletions": 1
    },
    {
      "file": "kernel/bpf/core.c",
      "insertions": 223,
      "deletions": 0
    },
    {
      "file": "kernel/bpf/syscall.c",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "kernel/extable.c",
      "insertions": 8,
      "deletions": 1
    },
    {
      "file": "kernel/kallsyms.c",
      "insertions": 49,
      "deletions": 12
    },
    {
      "file": "net/Kconfig",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "net/core/sysctl_net_core.c",
      "insertions": 7,
      "deletions": 0
    }
  ],
  "total_insertions": 419,
  "total_deletions": 63,
  "total_changes": 482,
  "parents": [
    "9383191da4e40360a5d880fbe6bb03911c61621b"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.11",
    "v4.11-rc1",
    "v4.11-rc2",
    "v4.11-rc3",
    "v4.11-rc4",
    "v4.11-rc5",
    "v4.11-rc6",
    "v4.11-rc7",
    "v4.11-rc8",
    "v4.12"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/net/bpf_jit_comp.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/s390/net/bpf_jit_comp.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/powerpc/net/bpf_jit_comp64.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/net/bpf_jit_comp.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "Documentation/sysctl/net.txt",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/bpf.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/filter.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/bpf/syscall.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/kallsyms.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/bpf/core.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/core/sysctl_net_core.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/extable.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}