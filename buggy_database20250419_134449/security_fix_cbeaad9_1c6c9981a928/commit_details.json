{
  "hash": "cbeaad90286f312b682f62a7ef118249ec94aa81",
  "hash_short": "cbeaad90",
  "subject": "Merge branch 'bpftool-probes'",
  "body": "Quentin Monnet says:\n\n====================\nHi,\nThis set adds a new command to bpftool in order to dump a list of\neBPF-related parameters for the system (or for a specific network\ndevice) to the console. Once again, this is based on a suggestion from\nDaniel.\n\nAt this time, output includes:\n\n    - Availability of bpf() system call\n    - Availability of bpf() system call for unprivileged users\n    - JIT status (enabled or not, with or without debugging traces)\n    - JIT hardening status\n    - JIT kallsyms exports status\n    - Global memory limit for JIT compiler for unprivileged users\n    - Status of kernel compilation options related to BPF features\n    - Availability of known eBPF program types\n    - Availability of known eBPF map types\n    - Availability of known eBPF helper functions\n\nThere are three different ways to dump this information at this time:\n\n    - Plain output dumps probe results in plain text. It is the most\n      flexible options for providing descriptive output to the user, but\n      should not be relied upon for parsing the output.\n    - JSON output is supported.\n    - A third mode, available through the \"macros\" keyword appended to the\n      command line, dumps some of those parameters (not all) as a series of\n      \"#define\" directives, that can be included into a C header file for\n      example.\n\nProbes for supported program and map types, and supported helpers, are\ndirectly added to libbpf, so that other applications (or selftests) can\nreuse them as necessary.\n\nIf the user does not have root privileges (or more precisely, the\nCAP_SYS_ADMIN capability) detection will be erroneous for most\nparameters. Therefore, forbid non-root users to run the command.\n\nv5:\n- Move exported symbols to a new LIBBPF_0.0.2 section in libbpf.map\n  (patches 4 to 6).\n- Minor fixes on patches 3 and 4.\n\nv4:\n- Probe bpf_jit_limit parameter (patch 2).\n- Probe some additional kernel config options (patch 3).\n- Minor fixes on patch 6.\n\nv3:\n- Do not probe kernel version in bpftool (just retrieve it to probe support\n  for kprobes in libbpf).\n- Change the way results for helper support is displayed: now one list of\n  compatible helpers for each program type (and C-style output gets a\n  HAVE_PROG_TYPE_HELPER(prog_type, helper) macro to help with tests. See\n  patches 6, 7.\n- Address other comments from feedback from v2 (please refer to individual\n  patches' history).\n\nv2 (please also refer to individual patches' history):\n- Move probes for prog/map types, helpers, from bpftool to libbpf.\n- Move C-style output as a separate patch, and restrict it to a subset of\n  collected information (bpf() availability, prog/map types, helpers).\n- Now probe helpers with all supported program types, and display a list of\n  compatible program types (as supported on the system) for each helper.\n- NOT addressed: grouping compilation options for kernel into subsections\n  (patch 3) (I don't see an easy way of grouping them at the moment, please\n  see also the discussion on v1 thread).\n====================\n\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>",
  "full_message": "Merge branch 'bpftool-probes'\n\nQuentin Monnet says:\n\n====================\nHi,\nThis set adds a new command to bpftool in order to dump a list of\neBPF-related parameters for the system (or for a specific network\ndevice) to the console. Once again, this is based on a suggestion from\nDaniel.\n\nAt this time, output includes:\n\n    - Availability of bpf() system call\n    - Availability of bpf() system call for unprivileged users\n    - JIT status (enabled or not, with or without debugging traces)\n    - JIT hardening status\n    - JIT kallsyms exports status\n    - Global memory limit for JIT compiler for unprivileged users\n    - Status of kernel compilation options related to BPF features\n    - Availability of known eBPF program types\n    - Availability of known eBPF map types\n    - Availability of known eBPF helper functions\n\nThere are three different ways to dump this information at this time:\n\n    - Plain output dumps probe results in plain text. It is the most\n      flexible options for providing descriptive output to the user, but\n      should not be relied upon for parsing the output.\n    - JSON output is supported.\n    - A third mode, available through the \"macros\" keyword appended to the\n      command line, dumps some of those parameters (not all) as a series of\n      \"#define\" directives, that can be included into a C header file for\n      example.\n\nProbes for supported program and map types, and supported helpers, are\ndirectly added to libbpf, so that other applications (or selftests) can\nreuse them as necessary.\n\nIf the user does not have root privileges (or more precisely, the\nCAP_SYS_ADMIN capability) detection will be erroneous for most\nparameters. Therefore, forbid non-root users to run the command.\n\nv5:\n- Move exported symbols to a new LIBBPF_0.0.2 section in libbpf.map\n  (patches 4 to 6).\n- Minor fixes on patches 3 and 4.\n\nv4:\n- Probe bpf_jit_limit parameter (patch 2).\n- Probe some additional kernel config options (patch 3).\n- Minor fixes on patch 6.\n\nv3:\n- Do not probe kernel version in bpftool (just retrieve it to probe support\n  for kprobes in libbpf).\n- Change the way results for helper support is displayed: now one list of\n  compatible helpers for each program type (and C-style output gets a\n  HAVE_PROG_TYPE_HELPER(prog_type, helper) macro to help with tests. See\n  patches 6, 7.\n- Address other comments from feedback from v2 (please refer to individual\n  patches' history).\n\nv2 (please also refer to individual patches' history):\n- Move probes for prog/map types, helpers, from bpftool to libbpf.\n- Move C-style output as a separate patch, and restrict it to a subset of\n  collected information (bpf() availability, prog/map types, helpers).\n- Now probe helpers with all supported program types, and display a list of\n  compatible program types (as supported on the system) for each helper.\n- NOT addressed: grouping compilation options for kernel into subsections\n  (patch 3) (I don't see an easy way of grouping them at the moment, please\n  see also the discussion on v1 thread).\n====================\n\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>",
  "author_name": "Alexei Starovoitov",
  "author_email": "ast@kernel.org",
  "author_date": "Tue Jan 22 22:15:41 2019 -0800",
  "author_date_iso": "2019-01-22T22:15:41-08:00",
  "committer_name": "Alexei Starovoitov",
  "committer_email": "ast@kernel.org",
  "committer_date": "Tue Jan 22 22:15:41 2019 -0800",
  "committer_date_iso": "2019-01-22T22:15:41-08:00",
  "files_changed": [],
  "files_changed_count": 0,
  "stats": [
    {
      "file": "tools/bpf/bpftool/Documentation/bpftool-cgroup.rst",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "tools/bpf/bpftool/Documentation/bpftool-feature.rst",
      "insertions": 85,
      "deletions": 0
    },
    {
      "file": "tools/bpf/bpftool/Documentation/bpftool-map.rst",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "tools/bpf/bpftool/Documentation/bpftool-net.rst",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "tools/bpf/bpftool/Documentation/bpftool-perf.rst",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "tools/bpf/bpftool/Documentation/bpftool-prog.rst",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "tools/bpf/bpftool/Documentation/bpftool.rst",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "tools/bpf/bpftool/bash-completion/bpftool",
      "insertions": 19,
      "deletions": 0
    },
    {
      "file": "tools/bpf/bpftool/feature.c",
      "insertions": 764,
      "deletions": 0
    },
    {
      "file": "tools/bpf/bpftool/main.c",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "tools/bpf/bpftool/main.h",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "tools/bpf/bpftool/map.c",
      "insertions": 3,
      "deletions": 1
    },
    {
      "file": "tools/lib/bpf/Build",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "tools/lib/bpf/libbpf.h",
      "insertions": 14,
      "deletions": 0
    },
    {
      "file": "tools/lib/bpf/libbpf.map",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "tools/lib/bpf/libbpf_probes.c",
      "insertions": 242,
      "deletions": 0
    }
  ],
  "total_insertions": 1147,
  "total_deletions": 3,
  "total_changes": 1150,
  "parents": [
    "d0b2818efbe27e6c2e0c52621c8db18eb5abb5e1",
    "948703e80868a7ee00a9ca16c0e37ffe6933f9bb"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.1",
    "v5.1-rc1",
    "v5.1-rc2",
    "v5.1-rc3",
    "v5.1-rc4",
    "v5.1-rc5",
    "v5.1-rc6",
    "v5.1-rc7",
    "v5.2",
    "v5.2-rc1"
  ],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": []
}