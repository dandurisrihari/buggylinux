commit e4e5a865e9a9e8e47ac1959b629e9f3ae3b062f2
Author: Andrew Jones <drjones@redhat.com>
Date:   Mon May 27 13:46:19 2019 +0200

    KVM: arm/arm64: Fix emulated ptimer irq injection
    
    The emulated ptimer needs to track the level changes, otherwise the
    the interrupt will never get deasserted, resulting in the guest getting
    stuck in an interrupt storm if it enables ptimer interrupts. This was
    found with kvm-unit-tests; the ptimer tests hung as soon as interrupts
    were enabled. Typical Linux guests don't have a problem as they prefer
    using the virtual timer.
    
    Fixes: bee038a674875 ("KVM: arm/arm64: Rework the timer code to use a timer_map")
    Signed-off-by: Andrew Jones <drjones@redhat.com>
    [Simplified the patch to res we only care about emulated timers here]
    Signed-off-by: Marc Zyngier <marc.zyngier@arm.com>

diff --git a/virt/kvm/arm/arch_timer.c b/virt/kvm/arm/arch_timer.c
index 7fc272ecae16..1b1c449ceaf4 100644
--- a/virt/kvm/arm/arch_timer.c
+++ b/virt/kvm/arm/arch_timer.c
@@ -321,14 +321,15 @@ static void kvm_timer_update_irq(struct kvm_vcpu *vcpu, bool new_level,
 	}
 }
 
+/* Only called for a fully emulated timer */
 static void timer_emulate(struct arch_timer_context *ctx)
 {
 	bool should_fire = kvm_timer_should_fire(ctx);
 
 	trace_kvm_timer_emulate(ctx, should_fire);
 
-	if (should_fire) {
-		kvm_timer_update_irq(ctx->vcpu, true, ctx);
+	if (should_fire != ctx->irq.level) {
+		kvm_timer_update_irq(ctx->vcpu, should_fire, ctx);
 		return;
 	}