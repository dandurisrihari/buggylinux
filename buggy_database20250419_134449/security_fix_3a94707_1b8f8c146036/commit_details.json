{
  "hash": "3a94707d7a7bb1eb82acae5fbc035247dd1ba8a5",
  "hash_short": "3a94707d",
  "subject": "x86/KASLR: Build identity mappings on demand",
  "body": "Currently KASLR only supports relocation in a small physical range (from\n16M to 1G), due to using the initial kernel page table identity mapping.\nTo support ranges above this, we need to have an identity mapping for the\ndesired memory range before we can decompress (and later run) the kernel.\n\n32-bit kernels already have the needed identity mapping. This patch adds\nidentity mappings for the needed memory ranges on 64-bit kernels. This\nhappens in two possible boot paths:\n\nIf loaded via startup_32(), we need to set up the needed identity map.\n\nIf loaded from a 64-bit bootloader, the bootloader will have already\nset up an identity mapping, and we'll start via the compressed kernel's\nstartup_64(). In this case, the bootloader's page tables need to be\navoided while selecting the new uncompressed kernel location. If not,\nthe decompressor could overwrite them during decompression.\n\nTo accomplish this, we could walk the pagetable and find every page\nthat is used, and add them to mem_avoid, but this needs extra code and\nwill require increasing the size of the mem_avoid array.\n\nInstead, we can create a new set of page tables for our own identity\nmapping instead. The pages for the new page table will come from the\n_pagetable section of the compressed kernel, which means they are\nalready contained by in mem_avoid array. To do this, we reuse the code\nfrom the uncompressed kernel's identity mapping routines.\n\nThe _pgtable will be shared by both the 32-bit and 64-bit paths to reduce\ninit_size, as now the compressed kernel's _rodata to _end will contribute\nto init_size.\n\nTo handle the possible mappings, we need to increase the existing page\ntable buffer size:\n\nWhen booting via startup_64(), we need to cover the old VO, params,\ncmdline and uncompressed kernel. In an extreme case we could have them\nall beyond the 512G boundary, which needs (2+2)*4 pages with 2M mappings.\nAnd we'll need 2 for first 2M for VGA RAM. One more is needed for level4.\nThis gets us to 19 pages total.\n\nWhen booting via startup_32(), KASLR could move the uncompressed kernel\nabove 4G, so we need to create extra identity mappings, which should only\nneed (2+2) pages at most when it is beyond the 512G boundary. So 19\npages is sufficient for this case as well.\n\nThe resulting BOOT_*PGT_SIZE defines use the \"_SIZE\" suffix on their\nnames to maintain logical consistency with the existing BOOT_HEAP_SIZE\nand BOOT_STACK_SIZE defines.\n\nThis patch is based on earlier patches from Yinghai Lu and Baoquan He.\n\nSigned-off-by: Kees Cook <keescook@chromium.org>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Andy Lutomirski <luto@amacapital.net>\nCc: Andy Lutomirski <luto@kernel.org>\nCc: Baoquan He <bhe@redhat.com>\nCc: Borislav Petkov <bp@alien8.de>\nCc: Borislav Petkov <bp@suse.de>\nCc: Brian Gerst <brgerst@gmail.com>\nCc: Dave Young <dyoung@redhat.com>\nCc: Denys Vlasenko <dvlasenk@redhat.com>\nCc: H. Peter Anvin <hpa@zytor.com>\nCc: Jiri Kosina <jkosina@suse.cz>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Vivek Goyal <vgoyal@redhat.com>\nCc: Yinghai Lu <yinghai@kernel.org>\nCc: kernel-hardening@lists.openwall.com\nCc: lasse.collin@tukaani.org\nLink: http://lkml.kernel.org/r/1462572095-11754-4-git-send-email-keescook@chromium.org\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "full_message": "x86/KASLR: Build identity mappings on demand\n\nCurrently KASLR only supports relocation in a small physical range (from\n16M to 1G), due to using the initial kernel page table identity mapping.\nTo support ranges above this, we need to have an identity mapping for the\ndesired memory range before we can decompress (and later run) the kernel.\n\n32-bit kernels already have the needed identity mapping. This patch adds\nidentity mappings for the needed memory ranges on 64-bit kernels. This\nhappens in two possible boot paths:\n\nIf loaded via startup_32(), we need to set up the needed identity map.\n\nIf loaded from a 64-bit bootloader, the bootloader will have already\nset up an identity mapping, and we'll start via the compressed kernel's\nstartup_64(). In this case, the bootloader's page tables need to be\navoided while selecting the new uncompressed kernel location. If not,\nthe decompressor could overwrite them during decompression.\n\nTo accomplish this, we could walk the pagetable and find every page\nthat is used, and add them to mem_avoid, but this needs extra code and\nwill require increasing the size of the mem_avoid array.\n\nInstead, we can create a new set of page tables for our own identity\nmapping instead. The pages for the new page table will come from the\n_pagetable section of the compressed kernel, which means they are\nalready contained by in mem_avoid array. To do this, we reuse the code\nfrom the uncompressed kernel's identity mapping routines.\n\nThe _pgtable will be shared by both the 32-bit and 64-bit paths to reduce\ninit_size, as now the compressed kernel's _rodata to _end will contribute\nto init_size.\n\nTo handle the possible mappings, we need to increase the existing page\ntable buffer size:\n\nWhen booting via startup_64(), we need to cover the old VO, params,\ncmdline and uncompressed kernel. In an extreme case we could have them\nall beyond the 512G boundary, which needs (2+2)*4 pages with 2M mappings.\nAnd we'll need 2 for first 2M for VGA RAM. One more is needed for level4.\nThis gets us to 19 pages total.\n\nWhen booting via startup_32(), KASLR could move the uncompressed kernel\nabove 4G, so we need to create extra identity mappings, which should only\nneed (2+2) pages at most when it is beyond the 512G boundary. So 19\npages is sufficient for this case as well.\n\nThe resulting BOOT_*PGT_SIZE defines use the \"_SIZE\" suffix on their\nnames to maintain logical consistency with the existing BOOT_HEAP_SIZE\nand BOOT_STACK_SIZE defines.\n\nThis patch is based on earlier patches from Yinghai Lu and Baoquan He.\n\nSigned-off-by: Kees Cook <keescook@chromium.org>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Andy Lutomirski <luto@amacapital.net>\nCc: Andy Lutomirski <luto@kernel.org>\nCc: Baoquan He <bhe@redhat.com>\nCc: Borislav Petkov <bp@alien8.de>\nCc: Borislav Petkov <bp@suse.de>\nCc: Brian Gerst <brgerst@gmail.com>\nCc: Dave Young <dyoung@redhat.com>\nCc: Denys Vlasenko <dvlasenk@redhat.com>\nCc: H. Peter Anvin <hpa@zytor.com>\nCc: Jiri Kosina <jkosina@suse.cz>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Vivek Goyal <vgoyal@redhat.com>\nCc: Yinghai Lu <yinghai@kernel.org>\nCc: kernel-hardening@lists.openwall.com\nCc: lasse.collin@tukaani.org\nLink: http://lkml.kernel.org/r/1462572095-11754-4-git-send-email-keescook@chromium.org\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "author_name": "Kees Cook",
  "author_email": "keescook@chromium.org",
  "author_date": "Fri May 6 15:01:35 2016 -0700",
  "author_date_iso": "2016-05-06T15:01:35-07:00",
  "committer_name": "Ingo Molnar",
  "committer_email": "mingo@kernel.org",
  "committer_date": "Sat May 7 07:38:39 2016 +0200",
  "committer_date_iso": "2016-05-07T07:38:39+02:00",
  "files_changed": [
    "arch/x86/boot/compressed/Makefile",
    "arch/x86/boot/compressed/head_64.S",
    "arch/x86/boot/compressed/kaslr.c",
    "arch/x86/boot/compressed/misc.h",
    "arch/x86/boot/compressed/pagetable.c",
    "arch/x86/include/asm/boot.h"
  ],
  "files_changed_count": 6,
  "stats": [
    {
      "file": "arch/x86/boot/compressed/Makefile",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "arch/x86/boot/compressed/head_64.S",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/x86/boot/compressed/kaslr.c",
      "insertions": 17,
      "deletions": 0
    },
    {
      "file": "arch/x86/boot/compressed/misc.h",
      "insertions": 11,
      "deletions": 0
    },
    {
      "file": "arch/x86/boot/compressed/pagetable.c",
      "insertions": 135,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/boot.h",
      "insertions": 19,
      "deletions": 0
    }
  ],
  "total_insertions": 187,
  "total_deletions": 2,
  "total_changes": 189,
  "parents": [
    "cf4fb15b3110df070fe9829a1ef38fef8316fb90"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.10",
    "v4.10-rc1",
    "v4.10-rc2",
    "v4.10-rc3",
    "v4.10-rc4",
    "v4.10-rc5",
    "v4.10-rc6",
    "v4.10-rc7",
    "v4.10-rc8",
    "v4.11"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/boot/compressed/Makefile",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/boot/compressed/head_64.S",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/boot/compressed/misc.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/boot/compressed/kaslr.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/boot.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/boot/compressed/pagetable.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}