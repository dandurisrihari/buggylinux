{
  "hash": "1362fa078dae16776cd439791c6605b224ea6171",
  "hash_short": "1362fa07",
  "subject": "DNS: Fix a NULL pointer deref when trying to read an error key [CVE-2011-1076]",
  "body": "When a DNS resolver key is instantiated with an error indication, attempts to\nread that key will result in an oops because user_read() is expecting there to\nbe a payload - and there isn't one [CVE-2011-1076].\n\nGive the DNS resolver key its own read handler that returns the error cached in\nkey->type_data.x[0] as an error rather than crashing.\n\nAlso make the kenter() at the beginning of dns_resolver_instantiate() limit the\namount of data it prints, since the data is not necessarily NUL-terminated.\n\nThe buggy code was added in:\n\n\tcommit 4a2d789267e00b5a1175ecd2ddefcc78b83fbf09\n\tAuthor: Wang Lei <wang840925@gmail.com>\n\tDate:   Wed Aug 11 09:37:58 2010 +0100\n\tSubject: DNS: If the DNS server returns an error, allow that to be cached [ver #2]\n\nThis can trivially be reproduced by any user with the following program\ncompiled with -lkeyutils:\n\n\t#include <stdlib.h>\n\t#include <keyutils.h>\n\t#include <err.h>\n\tstatic char payload[] = \"#dnserror=6\";\n\tint main()\n\t{\n\t\tkey_serial_t key;\n\t\tkey = add_key(\"dns_resolver\", \"a\", payload, sizeof(payload),\n\t\t\t      KEY_SPEC_SESSION_KEYRING);\n\t\tif (key == -1)\n\t\t\terr(1, \"add_key\");\n\t\tif (keyctl_read(key, NULL, 0) == -1)\n\t\t\terr(1, \"read_key\");\n\t\treturn 0;\n\t}\n\nWhat should happen is that keyctl_read() reports error 6 (ENXIO) to the user:\n\n\tdns-break: read_key: No such device or address\n\nbut instead the kernel oopses.\n\nThis cannot be reproduced with the 'keyutils add' or 'keyutils padd' commands\nas both of those cut the data down below the NUL termination that must be\nincluded in the data.  Without this dns_resolver_instantiate() will return\n-EINVAL and the key will not be instantiated such that it can be read.\n\nThe oops looks like:\n\nBUG: unable to handle kernel NULL pointer dereference at 0000000000000010\nIP: [<ffffffff811b99f7>] user_read+0x4f/0x8f\nPGD 3bdf8067 PUD 385b9067 PMD 0\nOops: 0000 [#1] SMP\nlast sysfs file: /sys/devices/pci0000:00/0000:00:19.0/irq\nCPU 0\nModules linked in:\n\nPid: 2150, comm: dns-break Not tainted 2.6.38-rc7-cachefs+ #468                  /DG965RY\nRIP: 0010:[<ffffffff811b99f7>]  [<ffffffff811b99f7>] user_read+0x4f/0x8f\nRSP: 0018:ffff88003bf47f08  EFLAGS: 00010246\nRAX: 0000000000000001 RBX: ffff88003b5ea378 RCX: ffffffff81972368\nRDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff88003b5ea378\nRBP: ffff88003bf47f28 R08: ffff88003be56620 R09: 0000000000000000\nR10: 0000000000000395 R11: 0000000000000002 R12: 0000000000000000\nR13: 0000000000000000 R14: 0000000000000000 R15: ffffffffffffffa1\nFS:  00007feab5751700(0000) GS:ffff88003e000000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 0000000000000010 CR3: 000000003de40000 CR4: 00000000000006f0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400\nProcess dns-break (pid: 2150, threadinfo ffff88003bf46000, task ffff88003be56090)\nStack:\n ffff88003b5ea378 ffff88003b5ea3a0 0000000000000000 0000000000000000\n ffff88003bf47f68 ffffffff811b708e ffff88003c442bc8 0000000000000000\n 00000000004005a0 00007fffba368060 0000000000000000 0000000000000000\nCall Trace:\n [<ffffffff811b708e>] keyctl_read_key+0xac/0xcf\n [<ffffffff811b7c07>] sys_keyctl+0x75/0xb6\n [<ffffffff81001f7b>] system_call_fastpath+0x16/0x1b\nCode: 75 1f 48 83 7b 28 00 75 18 c6 05 58 2b fb 00 01 be bb 00 00 00 48 c7 c7 76 1c 75 81 e8 13 c2 e9 ff 4c 8b b3 e0 00 00 00 4d 85 ed <41> 0f b7 5e 10 74 2d 4d 85 e4 74 28 e8 98 79 ee ff 49 39 dd 48\nRIP  [<ffffffff811b99f7>] user_read+0x4f/0x8f\n RSP <ffff88003bf47f08>\nCR2: 0000000000000010\n\nSigned-off-by: David Howells <dhowells@redhat.com>\nAcked-by: Jeff Layton <jlayton@redhat.com>\ncc: Wang Lei <wang840925@gmail.com>\nSigned-off-by: James Morris <jmorris@namei.org>",
  "full_message": "DNS: Fix a NULL pointer deref when trying to read an error key [CVE-2011-1076]\n\nWhen a DNS resolver key is instantiated with an error indication, attempts to\nread that key will result in an oops because user_read() is expecting there to\nbe a payload - and there isn't one [CVE-2011-1076].\n\nGive the DNS resolver key its own read handler that returns the error cached in\nkey->type_data.x[0] as an error rather than crashing.\n\nAlso make the kenter() at the beginning of dns_resolver_instantiate() limit the\namount of data it prints, since the data is not necessarily NUL-terminated.\n\nThe buggy code was added in:\n\n\tcommit 4a2d789267e00b5a1175ecd2ddefcc78b83fbf09\n\tAuthor: Wang Lei <wang840925@gmail.com>\n\tDate:   Wed Aug 11 09:37:58 2010 +0100\n\tSubject: DNS: If the DNS server returns an error, allow that to be cached [ver #2]\n\nThis can trivially be reproduced by any user with the following program\ncompiled with -lkeyutils:\n\n\t#include <stdlib.h>\n\t#include <keyutils.h>\n\t#include <err.h>\n\tstatic char payload[] = \"#dnserror=6\";\n\tint main()\n\t{\n\t\tkey_serial_t key;\n\t\tkey = add_key(\"dns_resolver\", \"a\", payload, sizeof(payload),\n\t\t\t      KEY_SPEC_SESSION_KEYRING);\n\t\tif (key == -1)\n\t\t\terr(1, \"add_key\");\n\t\tif (keyctl_read(key, NULL, 0) == -1)\n\t\t\terr(1, \"read_key\");\n\t\treturn 0;\n\t}\n\nWhat should happen is that keyctl_read() reports error 6 (ENXIO) to the user:\n\n\tdns-break: read_key: No such device or address\n\nbut instead the kernel oopses.\n\nThis cannot be reproduced with the 'keyutils add' or 'keyutils padd' commands\nas both of those cut the data down below the NUL termination that must be\nincluded in the data.  Without this dns_resolver_instantiate() will return\n-EINVAL and the key will not be instantiated such that it can be read.\n\nThe oops looks like:\n\nBUG: unable to handle kernel NULL pointer dereference at 0000000000000010\nIP: [<ffffffff811b99f7>] user_read+0x4f/0x8f\nPGD 3bdf8067 PUD 385b9067 PMD 0\nOops: 0000 [#1] SMP\nlast sysfs file: /sys/devices/pci0000:00/0000:00:19.0/irq\nCPU 0\nModules linked in:\n\nPid: 2150, comm: dns-break Not tainted 2.6.38-rc7-cachefs+ #468                  /DG965RY\nRIP: 0010:[<ffffffff811b99f7>]  [<ffffffff811b99f7>] user_read+0x4f/0x8f\nRSP: 0018:ffff88003bf47f08  EFLAGS: 00010246\nRAX: 0000000000000001 RBX: ffff88003b5ea378 RCX: ffffffff81972368\nRDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff88003b5ea378\nRBP: ffff88003bf47f28 R08: ffff88003be56620 R09: 0000000000000000\nR10: 0000000000000395 R11: 0000000000000002 R12: 0000000000000000\nR13: 0000000000000000 R14: 0000000000000000 R15: ffffffffffffffa1\nFS:  00007feab5751700(0000) GS:ffff88003e000000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 0000000000000010 CR3: 000000003de40000 CR4: 00000000000006f0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400\nProcess dns-break (pid: 2150, threadinfo ffff88003bf46000, task ffff88003be56090)\nStack:\n ffff88003b5ea378 ffff88003b5ea3a0 0000000000000000 0000000000000000\n ffff88003bf47f68 ffffffff811b708e ffff88003c442bc8 0000000000000000\n 00000000004005a0 00007fffba368060 0000000000000000 0000000000000000\nCall Trace:\n [<ffffffff811b708e>] keyctl_read_key+0xac/0xcf\n [<ffffffff811b7c07>] sys_keyctl+0x75/0xb6\n [<ffffffff81001f7b>] system_call_fastpath+0x16/0x1b\nCode: 75 1f 48 83 7b 28 00 75 18 c6 05 58 2b fb 00 01 be bb 00 00 00 48 c7 c7 76 1c 75 81 e8 13 c2 e9 ff 4c 8b b3 e0 00 00 00 4d 85 ed <41> 0f b7 5e 10 74 2d 4d 85 e4 74 28 e8 98 79 ee ff 49 39 dd 48\nRIP  [<ffffffff811b99f7>] user_read+0x4f/0x8f\n RSP <ffff88003bf47f08>\nCR2: 0000000000000010\n\nSigned-off-by: David Howells <dhowells@redhat.com>\nAcked-by: Jeff Layton <jlayton@redhat.com>\ncc: Wang Lei <wang840925@gmail.com>\nSigned-off-by: James Morris <jmorris@namei.org>",
  "author_name": "David Howells",
  "author_email": "dhowells@redhat.com",
  "author_date": "Thu Mar 3 11:28:58 2011 +0000",
  "author_date_iso": "2011-03-03T11:28:58+00:00",
  "committer_name": "James Morris",
  "committer_email": "jmorris@namei.org",
  "committer_date": "Fri Mar 4 09:56:19 2011 +1100",
  "committer_date_iso": "2011-03-04T09:56:19+11:00",
  "files_changed": [
    "Documentation/networking/dns_resolver.txt",
    "net/dns_resolver/dns_key.c"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "Documentation/networking/dns_resolver.txt",
      "insertions": 8,
      "deletions": 1
    },
    {
      "file": "net/dns_resolver/dns_key.c",
      "insertions": 17,
      "deletions": 3
    }
  ],
  "total_insertions": 25,
  "total_deletions": 4,
  "total_changes": 29,
  "parents": [
    "dd9c1549edef02290edced639f67b54a25abbe0e"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v2.6.38",
    "v2.6.38-rc8",
    "v2.6.39",
    "v2.6.39-rc1",
    "v2.6.39-rc2",
    "v2.6.39-rc3",
    "v2.6.39-rc4",
    "v2.6.39-rc5",
    "v2.6.39-rc6",
    "v2.6.39-rc7"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2011-1076",
      "CVE-2011-1076",
      "CVE-2011-1076"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "Documentation/networking/dns_resolver.txt",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/dns_resolver/dns_key.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}