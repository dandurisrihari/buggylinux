{
  "hash": "1b42f017415b46c317e71d41c34ec088417a1883",
  "hash_short": "1b42f017",
  "subject": "x86/speculation/taa: Add mitigation for TSX Async Abort",
  "body": "TSX Async Abort (TAA) is a side channel vulnerability to the internal\nbuffers in some Intel processors similar to Microachitectural Data\nSampling (MDS). In this case, certain loads may speculatively pass\ninvalid data to dependent operations when an asynchronous abort\ncondition is pending in a TSX transaction.\n\nThis includes loads with no fault or assist condition. Such loads may\nspeculatively expose stale data from the uarch data structures as in\nMDS. Scope of exposure is within the same-thread and cross-thread. This\nissue affects all current processors that support TSX, but do not have\nARCH_CAP_TAA_NO (bit 8) set in MSR_IA32_ARCH_CAPABILITIES.\n\nOn CPUs which have their IA32_ARCH_CAPABILITIES MSR bit MDS_NO=0,\nCPUID.MD_CLEAR=1 and the MDS mitigation is clearing the CPU buffers\nusing VERW or L1D_FLUSH, there is no additional mitigation needed for\nTAA. On affected CPUs with MDS_NO=1 this issue can be mitigated by\ndisabling the Transactional Synchronization Extensions (TSX) feature.\n\nA new MSR IA32_TSX_CTRL in future and current processors after a\nmicrocode update can be used to control the TSX feature. There are two\nbits in that MSR:\n\n* TSX_CTRL_RTM_DISABLE disables the TSX sub-feature Restricted\nTransactional Memory (RTM).\n\n* TSX_CTRL_CPUID_CLEAR clears the RTM enumeration in CPUID. The other\nTSX sub-feature, Hardware Lock Elision (HLE), is unconditionally\ndisabled with updated microcode but still enumerated as present by\nCPUID(EAX=7).EBX{bit4}.\n\nThe second mitigation approach is similar to MDS which is clearing the\naffected CPU buffers on return to user space and when entering a guest.\nRelevant microcode update is required for the mitigation to work.  More\ndetails on this approach can be found here:\n\n  https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/mds.html\n\nThe TSX feature can be controlled by the \"tsx\" command line parameter.\nIf it is force-enabled then \"Clear CPU buffers\" (MDS mitigation) is\ndeployed. The effective mitigation state can be read from sysfs.\n\n [ bp:\n   - massage + comments cleanup\n   - s/TAA_MITIGATION_TSX_DISABLE/TAA_MITIGATION_TSX_DISABLED/g - Josh.\n   - remove partial TAA mitigation in update_mds_branch_idle() - Josh.\n   - s/tsx_async_abort_cmdline/tsx_async_abort_parse_cmdline/g\n ]\n\nSigned-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>\nSigned-off-by: Borislav Petkov <bp@suse.de>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nReviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>",
  "full_message": "x86/speculation/taa: Add mitigation for TSX Async Abort\n\nTSX Async Abort (TAA) is a side channel vulnerability to the internal\nbuffers in some Intel processors similar to Microachitectural Data\nSampling (MDS). In this case, certain loads may speculatively pass\ninvalid data to dependent operations when an asynchronous abort\ncondition is pending in a TSX transaction.\n\nThis includes loads with no fault or assist condition. Such loads may\nspeculatively expose stale data from the uarch data structures as in\nMDS. Scope of exposure is within the same-thread and cross-thread. This\nissue affects all current processors that support TSX, but do not have\nARCH_CAP_TAA_NO (bit 8) set in MSR_IA32_ARCH_CAPABILITIES.\n\nOn CPUs which have their IA32_ARCH_CAPABILITIES MSR bit MDS_NO=0,\nCPUID.MD_CLEAR=1 and the MDS mitigation is clearing the CPU buffers\nusing VERW or L1D_FLUSH, there is no additional mitigation needed for\nTAA. On affected CPUs with MDS_NO=1 this issue can be mitigated by\ndisabling the Transactional Synchronization Extensions (TSX) feature.\n\nA new MSR IA32_TSX_CTRL in future and current processors after a\nmicrocode update can be used to control the TSX feature. There are two\nbits in that MSR:\n\n* TSX_CTRL_RTM_DISABLE disables the TSX sub-feature Restricted\nTransactional Memory (RTM).\n\n* TSX_CTRL_CPUID_CLEAR clears the RTM enumeration in CPUID. The other\nTSX sub-feature, Hardware Lock Elision (HLE), is unconditionally\ndisabled with updated microcode but still enumerated as present by\nCPUID(EAX=7).EBX{bit4}.\n\nThe second mitigation approach is similar to MDS which is clearing the\naffected CPU buffers on return to user space and when entering a guest.\nRelevant microcode update is required for the mitigation to work.  More\ndetails on this approach can be found here:\n\n  https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/mds.html\n\nThe TSX feature can be controlled by the \"tsx\" command line parameter.\nIf it is force-enabled then \"Clear CPU buffers\" (MDS mitigation) is\ndeployed. The effective mitigation state can be read from sysfs.\n\n [ bp:\n   - massage + comments cleanup\n   - s/TAA_MITIGATION_TSX_DISABLE/TAA_MITIGATION_TSX_DISABLED/g - Josh.\n   - remove partial TAA mitigation in update_mds_branch_idle() - Josh.\n   - s/tsx_async_abort_cmdline/tsx_async_abort_parse_cmdline/g\n ]\n\nSigned-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>\nSigned-off-by: Borislav Petkov <bp@suse.de>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nReviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>",
  "author_name": "Pawan Gupta",
  "author_email": "pawan.kumar.gupta@linux.intel.com",
  "author_date": "Wed Oct 23 11:30:45 2019 +0200",
  "author_date_iso": "2019-10-23T11:30:45+02:00",
  "committer_name": "Thomas Gleixner",
  "committer_email": "tglx@linutronix.de",
  "committer_date": "Mon Oct 28 08:36:58 2019 +0100",
  "committer_date_iso": "2019-10-28T08:36:58+01:00",
  "files_changed": [
    "arch/x86/include/asm/cpufeatures.h",
    "arch/x86/include/asm/msr-index.h",
    "arch/x86/include/asm/nospec-branch.h",
    "arch/x86/include/asm/processor.h",
    "arch/x86/kernel/cpu/bugs.c",
    "arch/x86/kernel/cpu/common.c"
  ],
  "files_changed_count": 6,
  "stats": [
    {
      "file": "arch/x86/include/asm/cpufeatures.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/msr-index.h",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/nospec-branch.h",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/x86/include/asm/processor.h",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/cpu/bugs.c",
      "insertions": 108,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/cpu/common.c",
      "insertions": 15,
      "deletions": 0
    }
  ],
  "total_insertions": 137,
  "total_deletions": 2,
  "total_changes": 139,
  "parents": [
    "95c5824f75f3ba4c9e8e5a4b1a623c95390ac266"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.4",
    "v5.4-rc8",
    "v5.5",
    "v5.5-rc1",
    "v5.5-rc2",
    "v5.5-rc3",
    "v5.5-rc4",
    "v5.5-rc5",
    "v5.5-rc6",
    "v5.5-rc7"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "vulnerability"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/include/asm/processor.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/msr-index.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/cpufeatures.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/nospec-branch.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/cpu/bugs.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/cpu/common.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}