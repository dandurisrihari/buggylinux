{
  "hash": "e2412c07f8f3040593dfb88207865a3cd58680c0",
  "hash_short": "e2412c07",
  "subject": "vhost_net: fix possible infinite loop",
  "body": "When the rx buffer is too small for a packet, we will discard the vq\ndescriptor and retry it for the next packet:\n\nwhile ((sock_len = vhost_net_rx_peek_head_len(net, sock->sk,\n\t\t\t\t\t      &busyloop_intr))) {\n...\n\t/* On overrun, truncate and discard */\n\tif (unlikely(headcount > UIO_MAXIOV)) {\n\t\tiov_iter_init(&msg.msg_iter, READ, vq->iov, 1, 1);\n\t\terr = sock->ops->recvmsg(sock, &msg,\n\t\t\t\t\t 1, MSG_DONTWAIT | MSG_TRUNC);\n\t\tpr_debug(\"Discarded rx packet: len %zd\\n\", sock_len);\n\t\tcontinue;\n\t}\n...\n}\n\nThis makes it possible to trigger a infinite while..continue loop\nthrough the co-opreation of two VMs like:\n\n1) Malicious VM1 allocate 1 byte rx buffer and try to slow down the\n   vhost process as much as possible e.g using indirect descriptors or\n   other.\n2) Malicious VM2 generate packets to VM1 as fast as possible\n\nFixing this by checking against weight at the end of RX and TX\nloop. This also eliminate other similar cases when:\n\n- userspace is consuming the packets in the meanwhile\n- theoretical TOCTOU attack if guest moving avail index back and forth\n  to hit the continue after vhost find guest just add new buffers\n\nThis addresses CVE-2019-3900.\n\nFixes: d8316f3991d20 (\"vhost: fix total length when packets are too short\")\nFixes: 3a4d5c94e9593 (\"vhost_net: a kernel-level virtio server\")\nSigned-off-by: Jason Wang <jasowang@redhat.com>\nReviewed-by: Stefan Hajnoczi <stefanha@redhat.com>\nSigned-off-by: Michael S. Tsirkin <mst@redhat.com>",
  "full_message": "vhost_net: fix possible infinite loop\n\nWhen the rx buffer is too small for a packet, we will discard the vq\ndescriptor and retry it for the next packet:\n\nwhile ((sock_len = vhost_net_rx_peek_head_len(net, sock->sk,\n\t\t\t\t\t      &busyloop_intr))) {\n...\n\t/* On overrun, truncate and discard */\n\tif (unlikely(headcount > UIO_MAXIOV)) {\n\t\tiov_iter_init(&msg.msg_iter, READ, vq->iov, 1, 1);\n\t\terr = sock->ops->recvmsg(sock, &msg,\n\t\t\t\t\t 1, MSG_DONTWAIT | MSG_TRUNC);\n\t\tpr_debug(\"Discarded rx packet: len %zd\\n\", sock_len);\n\t\tcontinue;\n\t}\n...\n}\n\nThis makes it possible to trigger a infinite while..continue loop\nthrough the co-opreation of two VMs like:\n\n1) Malicious VM1 allocate 1 byte rx buffer and try to slow down the\n   vhost process as much as possible e.g using indirect descriptors or\n   other.\n2) Malicious VM2 generate packets to VM1 as fast as possible\n\nFixing this by checking against weight at the end of RX and TX\nloop. This also eliminate other similar cases when:\n\n- userspace is consuming the packets in the meanwhile\n- theoretical TOCTOU attack if guest moving avail index back and forth\n  to hit the continue after vhost find guest just add new buffers\n\nThis addresses CVE-2019-3900.\n\nFixes: d8316f3991d20 (\"vhost: fix total length when packets are too short\")\nFixes: 3a4d5c94e9593 (\"vhost_net: a kernel-level virtio server\")\nSigned-off-by: Jason Wang <jasowang@redhat.com>\nReviewed-by: Stefan Hajnoczi <stefanha@redhat.com>\nSigned-off-by: Michael S. Tsirkin <mst@redhat.com>",
  "author_name": "Jason Wang",
  "author_email": "jasowang@redhat.com",
  "author_date": "Fri May 17 00:29:50 2019 -0400",
  "author_date_iso": "2019-05-17T00:29:50-04:00",
  "committer_name": "Michael S. Tsirkin",
  "committer_email": "mst@redhat.com",
  "committer_date": "Mon May 27 11:08:22 2019 -0400",
  "committer_date_iso": "2019-05-27T11:08:22-04:00",
  "files_changed": [
    "drivers/vhost/net.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "drivers/vhost/net.c",
      "insertions": 13,
      "deletions": 16
    }
  ],
  "total_insertions": 13,
  "total_deletions": 16,
  "total_changes": 29,
  "parents": [
    "e82b9b0727ff6d665fff2d326162b460dded554d"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.2",
    "v5.2-rc4",
    "v5.2-rc5",
    "v5.2-rc6",
    "v5.2-rc7",
    "v5.3",
    "v5.3-rc1",
    "v5.3-rc2",
    "v5.3-rc3",
    "v5.3-rc4"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2019-3900"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "drivers/vhost/net.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}