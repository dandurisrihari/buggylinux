{
  "hash": "0c228e833c88e3aa029250f5db77d5968c5ce5b5",
  "hash_short": "0c228e83",
  "subject": "tcp: Restore RFC5961-compliant behavior for SYN packets",
  "body": "Commit c3ae62af8e755 (\"tcp: should drop incoming frames without ACK\nflag set\") was created to mitigate a security vulnerability in which a\nlocal attacker is able to inject data into locally-opened sockets by\nusing TCP protocol statistics in procfs to quickly find the correct\nsequence number.\n\nThis broke the RFC5961 requirement to send a challenge ACK in response\nto spurious RST packets, which was subsequently fixed by commit\n7b514a886ba50 (\"tcp: accept RST without ACK flag\").\n\nUnfortunately, the RFC5961 requirement that spurious SYN packets be\nhandled in a similar manner remains broken.\n\nRFC5961 section 4 states that:\n\n   ... the handling of the SYN in the synchronized state SHOULD be\n   performed as follows:\n\n   1) If the SYN bit is set, irrespective of the sequence number, TCP\n      MUST send an ACK (also referred to as challenge ACK) to the remote\n      peer:\n\n      <SEQ=SND.NXT><ACK=RCV.NXT><CTL=ACK>\n\n      After sending the acknowledgment, TCP MUST drop the unacceptable\n      segment and stop processing further.\n\n   By sending an ACK, the remote peer is challenged to confirm the loss\n   of the previous connection and the request to start a new connection.\n   A legitimate peer, after restart, would not have a TCB in the\n   synchronized state.  Thus, when the ACK arrives, the peer should send\n   a RST segment back with the sequence number derived from the ACK\n   field that caused the RST.\n\n   This RST will confirm that the remote peer has indeed closed the\n   previous connection.  Upon receipt of a valid RST, the local TCP\n   endpoint MUST terminate its connection.  The local TCP endpoint\n   should then rely on SYN retransmission from the remote end to\n   re-establish the connection.\n\nThis patch lets SYN packets through the discard added in c3ae62af8e755,\nso that spurious SYN packets are properly dealt with as per the RFC.\n\nThe challenge ACK is sent unconditionally and is rate-limited, so the\noriginal vulnerability is not reintroduced by this patch.\n\nSigned-off-by: Calvin Owens <calvinowens@fb.com>\nAcked-by: Eric Dumazet <edumazet@google.com>\nAcked-by: Neal Cardwell <ncardwell@google.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "full_message": "tcp: Restore RFC5961-compliant behavior for SYN packets\n\nCommit c3ae62af8e755 (\"tcp: should drop incoming frames without ACK\nflag set\") was created to mitigate a security vulnerability in which a\nlocal attacker is able to inject data into locally-opened sockets by\nusing TCP protocol statistics in procfs to quickly find the correct\nsequence number.\n\nThis broke the RFC5961 requirement to send a challenge ACK in response\nto spurious RST packets, which was subsequently fixed by commit\n7b514a886ba50 (\"tcp: accept RST without ACK flag\").\n\nUnfortunately, the RFC5961 requirement that spurious SYN packets be\nhandled in a similar manner remains broken.\n\nRFC5961 section 4 states that:\n\n   ... the handling of the SYN in the synchronized state SHOULD be\n   performed as follows:\n\n   1) If the SYN bit is set, irrespective of the sequence number, TCP\n      MUST send an ACK (also referred to as challenge ACK) to the remote\n      peer:\n\n      <SEQ=SND.NXT><ACK=RCV.NXT><CTL=ACK>\n\n      After sending the acknowledgment, TCP MUST drop the unacceptable\n      segment and stop processing further.\n\n   By sending an ACK, the remote peer is challenged to confirm the loss\n   of the previous connection and the request to start a new connection.\n   A legitimate peer, after restart, would not have a TCB in the\n   synchronized state.  Thus, when the ACK arrives, the peer should send\n   a RST segment back with the sequence number derived from the ACK\n   field that caused the RST.\n\n   This RST will confirm that the remote peer has indeed closed the\n   previous connection.  Upon receipt of a valid RST, the local TCP\n   endpoint MUST terminate its connection.  The local TCP endpoint\n   should then rely on SYN retransmission from the remote end to\n   re-establish the connection.\n\nThis patch lets SYN packets through the discard added in c3ae62af8e755,\nso that spurious SYN packets are properly dealt with as per the RFC.\n\nThe challenge ACK is sent unconditionally and is rate-limited, so the\noriginal vulnerability is not reintroduced by this patch.\n\nSigned-off-by: Calvin Owens <calvinowens@fb.com>\nAcked-by: Eric Dumazet <edumazet@google.com>\nAcked-by: Neal Cardwell <ncardwell@google.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "author_name": "Calvin Owens",
  "author_email": "calvinowens@fb.com",
  "author_date": "Thu Nov 20 15:09:53 2014 -0800",
  "author_date_iso": "2014-11-20T15:09:53-08:00",
  "committer_name": "David S. Miller",
  "committer_email": "davem@davemloft.net",
  "committer_date": "Fri Nov 21 15:33:50 2014 -0500",
  "committer_date_iso": "2014-11-21T15:33:50-05:00",
  "files_changed": [
    "net/ipv4/tcp_input.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "net/ipv4/tcp_input.c",
      "insertions": 2,
      "deletions": 2
    }
  ],
  "total_insertions": 2,
  "total_deletions": 2,
  "total_changes": 4,
  "parents": [
    "e7820e39b7d19b9fe1928fc19de9361b44150ca6"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v3.18",
    "v3.18-rc6",
    "v3.18-rc7",
    "v3.19",
    "v3.19-rc1",
    "v3.19-rc2",
    "v3.19-rc3",
    "v3.19-rc4",
    "v3.19-rc5",
    "v3.19-rc6"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "security vulnerability",
      "vulnerability",
      "inject"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "net/ipv4/tcp_input.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}