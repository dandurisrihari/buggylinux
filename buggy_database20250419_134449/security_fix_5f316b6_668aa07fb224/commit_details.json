{
  "hash": "5f316b65e99f109942c556dc8790abd4c75bcb34",
  "hash_short": "5f316b65",
  "subject": "riscv, bpf: Add RV32G eBPF JIT",
  "body": "This is an eBPF JIT for RV32G, adapted from the JIT for RV64G and\nthe 32-bit ARM JIT.\n\nThere are two main changes required for this to work compared to\nthe RV64 JIT.\n\nFirst, eBPF registers are 64-bit, while RV32G registers are 32-bit.\nBPF registers either map directly to 2 RISC-V registers, or reside\nin stack scratch space and are saved and restored when used.\n\nSecond, many 64-bit ALU operations do not trivially map to 32-bit\noperations. Operations that move bits between high and low words,\nsuch as ADD, LSH, MUL, and others must emulate the 64-bit behavior\nin terms of 32-bit instructions.\n\nThis patch also makes related changes to bpf_jit.h, such\nas adding RISC-V instructions required by the RV32 JIT.\n\nSupported features:\n\nThe RV32 JIT supports the same features and instructions as the\nRV64 JIT, with the following exceptions:\n\n- ALU64 DIV/MOD: Requires loops to implement on 32-bit hardware.\n\n- BPF_XADD | BPF_DW: There's no 8-byte atomic instruction in RV32.\n\nThese features are also unsupported on other BPF JITs for 32-bit\narchitectures.\n\nTesting:\n\n- lib/test_bpf.c\ntest_bpf: Summary: 378 PASSED, 0 FAILED, [349/366 JIT'ed]\ntest_bpf: test_skb_segment: Summary: 2 PASSED, 0 FAILED\n\nThe tests that are not JITed are all due to use of 64-bit div/mod\nor 64-bit xadd.\n\n- tools/testing/selftests/bpf/test_verifier.c\nSummary: 1415 PASSED, 122 SKIPPED, 43 FAILED\n\nTested both with and without BPF JIT hardening.\n\nThis is the same set of tests that pass using the BPF interpreter\nwith the JIT disabled.\n\nVerification and synthesis:\n\nWe developed the RV32 JIT using our automated verification tool,\nServal. We have used Serval in the past to verify patches to the\nRV64 JIT. We also used Serval to superoptimize the resulting code\nthrough program synthesis.\n\nYou can find the tool and a guide to the approach and results here:\nhttps://github.com/uw-unsat/serval-bpf/tree/rv32-jit-v5\n\nCo-developed-by: Xi Wang <xi.wang@gmail.com>\nSigned-off-by: Xi Wang <xi.wang@gmail.com>\nSigned-off-by: Luke Nelson <luke.r.nels@gmail.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nReviewed-by: Bj\u00f6rn T\u00f6pel <bjorn.topel@gmail.com>\nAcked-by: Bj\u00f6rn T\u00f6pel <bjorn.topel@gmail.com>\nLink: https://lore.kernel.org/bpf/20200305050207.4159-3-luke.r.nels@gmail.com",
  "full_message": "riscv, bpf: Add RV32G eBPF JIT\n\nThis is an eBPF JIT for RV32G, adapted from the JIT for RV64G and\nthe 32-bit ARM JIT.\n\nThere are two main changes required for this to work compared to\nthe RV64 JIT.\n\nFirst, eBPF registers are 64-bit, while RV32G registers are 32-bit.\nBPF registers either map directly to 2 RISC-V registers, or reside\nin stack scratch space and are saved and restored when used.\n\nSecond, many 64-bit ALU operations do not trivially map to 32-bit\noperations. Operations that move bits between high and low words,\nsuch as ADD, LSH, MUL, and others must emulate the 64-bit behavior\nin terms of 32-bit instructions.\n\nThis patch also makes related changes to bpf_jit.h, such\nas adding RISC-V instructions required by the RV32 JIT.\n\nSupported features:\n\nThe RV32 JIT supports the same features and instructions as the\nRV64 JIT, with the following exceptions:\n\n- ALU64 DIV/MOD: Requires loops to implement on 32-bit hardware.\n\n- BPF_XADD | BPF_DW: There's no 8-byte atomic instruction in RV32.\n\nThese features are also unsupported on other BPF JITs for 32-bit\narchitectures.\n\nTesting:\n\n- lib/test_bpf.c\ntest_bpf: Summary: 378 PASSED, 0 FAILED, [349/366 JIT'ed]\ntest_bpf: test_skb_segment: Summary: 2 PASSED, 0 FAILED\n\nThe tests that are not JITed are all due to use of 64-bit div/mod\nor 64-bit xadd.\n\n- tools/testing/selftests/bpf/test_verifier.c\nSummary: 1415 PASSED, 122 SKIPPED, 43 FAILED\n\nTested both with and without BPF JIT hardening.\n\nThis is the same set of tests that pass using the BPF interpreter\nwith the JIT disabled.\n\nVerification and synthesis:\n\nWe developed the RV32 JIT using our automated verification tool,\nServal. We have used Serval in the past to verify patches to the\nRV64 JIT. We also used Serval to superoptimize the resulting code\nthrough program synthesis.\n\nYou can find the tool and a guide to the approach and results here:\nhttps://github.com/uw-unsat/serval-bpf/tree/rv32-jit-v5\n\nCo-developed-by: Xi Wang <xi.wang@gmail.com>\nSigned-off-by: Xi Wang <xi.wang@gmail.com>\nSigned-off-by: Luke Nelson <luke.r.nels@gmail.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>\nReviewed-by: Bj\u00f6rn T\u00f6pel <bjorn.topel@gmail.com>\nAcked-by: Bj\u00f6rn T\u00f6pel <bjorn.topel@gmail.com>\nLink: https://lore.kernel.org/bpf/20200305050207.4159-3-luke.r.nels@gmail.com",
  "author_name": "Luke Nelson",
  "author_email": "lukenels@cs.washington.edu",
  "author_date": "Wed Mar 4 21:02:05 2020 -0800",
  "author_date_iso": "2020-03-04T21:02:05-08:00",
  "committer_name": "Daniel Borkmann",
  "committer_email": "daniel@iogearbox.net",
  "committer_date": "Thu Mar 5 16:13:47 2020 +0100",
  "committer_date_iso": "2020-03-05T16:13:47+01:00",
  "files_changed": [
    "arch/riscv/Kconfig",
    "arch/riscv/net/Makefile",
    "arch/riscv/net/bpf_jit.h",
    "arch/riscv/net/bpf_jit_comp32.c"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "arch/riscv/Kconfig",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/riscv/net/Makefile",
      "insertions": 7,
      "deletions": 1
    },
    {
      "file": "arch/riscv/net/bpf_jit.h",
      "insertions": 48,
      "deletions": 0
    },
    {
      "file": "arch/riscv/net/bpf_jit_comp32.c",
      "insertions": 1310,
      "deletions": 0
    }
  ],
  "total_insertions": 1366,
  "total_deletions": 2,
  "total_changes": 1368,
  "parents": [
    "ca6cb5447ceca6a87d6b62c9e5d41042c34f7ffa"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.7-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/riscv/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/riscv/net/Makefile",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/riscv/net/bpf_jit.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/riscv/net/bpf_jit_comp32.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}