{
  "hash": "c9584234709aff90fbf38f71904a068ee9e8bce3",
  "hash_short": "c9584234",
  "subject": "Merge tag 'trace-v5.12' of git://git.kernel.org/pub/scm/linux/kernel/git/rostedt/linux-trace",
  "body": "Pull tracing updates from Steven Rostedt:\n\n - Update to the way irqs and preemption is tracked via the trace event\n   PC field\n\n - Fix handling of unregistering event failing due to allocate memory.\n   This is only triggered by failure injection, as it is pretty much\n   guaranteed to have less than a page allocation succeed.\n\n - Do not show the useless \"filter\" or \"enable\" files for the \"ftrace\"\n   trace system, as they have no effect on doing anything.\n\n - Add a warning if kprobes are registered more than once.\n\n - Synthetic events now have their fields parsed by semicolons. Old\n   formats without semicolons will still work, but new features will\n   require them.\n\n - New option to allow trace events to show %p without hashing in trace\n   file. The trace file can only be read by root, and reading the raw\n   event buffer did not have any pointers hashed, so this does not\n   expose anything new.\n\n - New directory in tools called tools/tracing, where a new tool that\n   reads sequential latency reports from the ftrace latency tracers.\n\n - Other minor fixes and cleanups.\n\n* tag 'trace-v5.12' of git://git.kernel.org/pub/scm/linux/kernel/git/rostedt/linux-trace: (33 commits)\n  kprobes: Fix to delay the kprobes jump optimization\n  tracing/tools: Add the latency-collector to tools directory\n  tracing: Make hash-ptr option default\n  tracing: Add ptr-hash option to show the hashed pointer value\n  tracing: Update the stage 3 of trace event macro comment\n  tracing: Show real address for trace event arguments\n  selftests/ftrace: Add '!event' synthetic event syntax check\n  selftests/ftrace: Update synthetic event syntax errors\n  tracing: Add a backward-compatibility check for synthetic event creation\n  tracing: Update synth command errors\n  tracing: Rework synthetic event command parsing\n  tracing/dynevent: Delegate parsing to create function\n  kprobes: Warn if the kprobe is reregistered\n  ftrace: Remove unused ftrace_force_update()\n  tracepoints: Code clean up\n  tracepoints: Do not punish non static call users\n  tracepoints: Remove unnecessary \"data_args\" macro parameter\n  tracing: Do not create \"enable\" or \"filter\" files for ftrace event subsystem\n  kernel: trace: preemptirq_delay_test: add cpu affinity\n  tracepoint: Do not fail unregistering a probe due to memory failure\n  ...",
  "full_message": "Merge tag 'trace-v5.12' of git://git.kernel.org/pub/scm/linux/kernel/git/rostedt/linux-trace\n\nPull tracing updates from Steven Rostedt:\n\n - Update to the way irqs and preemption is tracked via the trace event\n   PC field\n\n - Fix handling of unregistering event failing due to allocate memory.\n   This is only triggered by failure injection, as it is pretty much\n   guaranteed to have less than a page allocation succeed.\n\n - Do not show the useless \"filter\" or \"enable\" files for the \"ftrace\"\n   trace system, as they have no effect on doing anything.\n\n - Add a warning if kprobes are registered more than once.\n\n - Synthetic events now have their fields parsed by semicolons. Old\n   formats without semicolons will still work, but new features will\n   require them.\n\n - New option to allow trace events to show %p without hashing in trace\n   file. The trace file can only be read by root, and reading the raw\n   event buffer did not have any pointers hashed, so this does not\n   expose anything new.\n\n - New directory in tools called tools/tracing, where a new tool that\n   reads sequential latency reports from the ftrace latency tracers.\n\n - Other minor fixes and cleanups.\n\n* tag 'trace-v5.12' of git://git.kernel.org/pub/scm/linux/kernel/git/rostedt/linux-trace: (33 commits)\n  kprobes: Fix to delay the kprobes jump optimization\n  tracing/tools: Add the latency-collector to tools directory\n  tracing: Make hash-ptr option default\n  tracing: Add ptr-hash option to show the hashed pointer value\n  tracing: Update the stage 3 of trace event macro comment\n  tracing: Show real address for trace event arguments\n  selftests/ftrace: Add '!event' synthetic event syntax check\n  selftests/ftrace: Update synthetic event syntax errors\n  tracing: Add a backward-compatibility check for synthetic event creation\n  tracing: Update synth command errors\n  tracing: Rework synthetic event command parsing\n  tracing/dynevent: Delegate parsing to create function\n  kprobes: Warn if the kprobe is reregistered\n  ftrace: Remove unused ftrace_force_update()\n  tracepoints: Code clean up\n  tracepoints: Do not punish non static call users\n  tracepoints: Remove unnecessary \"data_args\" macro parameter\n  tracing: Do not create \"enable\" or \"filter\" files for ftrace event subsystem\n  kernel: trace: preemptirq_delay_test: add cpu affinity\n  tracepoint: Do not fail unregistering a probe due to memory failure\n  ...",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Mon Feb 22 14:07:15 2021 -0800",
  "author_date_iso": "2021-02-22T14:07:15-08:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Mon Feb 22 14:07:15 2021 -0800",
  "committer_date_iso": "2021-02-22T14:07:15-08:00",
  "files_changed": [
    "kernel/trace/blktrace.c",
    "kernel/trace/trace.c",
    "kernel/trace/trace_events.c"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "Documentation/trace/ftrace.rst",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "include/linux/ftrace.h",
      "insertions": 0,
      "deletions": 2
    },
    {
      "file": "include/linux/trace.h",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "include/linux/trace_events.h",
      "insertions": 68,
      "deletions": 7
    },
    {
      "file": "include/linux/tracepoint.h",
      "insertions": 24,
      "deletions": 30
    },
    {
      "file": "include/trace/trace_events.h",
      "insertions": 21,
      "deletions": 10
    },
    {
      "file": "kernel/kprobes.c",
      "insertions": 29,
      "deletions": 15
    },
    {
      "file": "kernel/trace/Kconfig",
      "insertions": 5,
      "deletions": 1
    },
    {
      "file": "kernel/trace/blktrace.c",
      "insertions": 9,
      "deletions": 8
    },
    {
      "file": "kernel/trace/preemptirq_delay_test.c",
      "insertions": 14,
      "deletions": 0
    },
    {
      "file": "kernel/trace/ring_buffer.c",
      "insertions": 17,
      "deletions": 24
    },
    {
      "file": "kernel/trace/trace.c",
      "insertions": 160,
      "deletions": 123
    },
    {
      "file": "kernel/trace/trace.h",
      "insertions": 21,
      "deletions": 42
    },
    {
      "file": "kernel/trace/trace_branch.c",
      "insertions": 3,
      "deletions": 3
    },
    {
      "file": "kernel/trace/trace_dynevent.c",
      "insertions": 22,
      "deletions": 13
    },
    {
      "file": "kernel/trace/trace_dynevent.h",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "kernel/trace/trace_event_perf.c",
      "insertions": 1,
      "deletions": 4
    },
    {
      "file": "kernel/trace/trace_events.c",
      "insertions": 19,
      "deletions": 21
    },
    {
      "file": "kernel/trace/trace_events_inject.c",
      "insertions": 2,
      "deletions": 4
    },
    {
      "file": "kernel/trace/trace_events_synth.c",
      "insertions": 228,
      "deletions": 92
    },
    {
      "file": "kernel/trace/trace_functions.c",
      "insertions": 13,
      "deletions": 18
    },
    {
      "file": "kernel/trace/trace_functions_graph.c",
      "insertions": 15,
      "deletions": 17
    },
    {
      "file": "kernel/trace/trace_hwlat.c",
      "insertions": 1,
      "deletions": 6
    },
    {
      "file": "kernel/trace/trace_irqsoff.c",
      "insertions": 36,
      "deletions": 50
    },
    {
      "file": "kernel/trace/trace_kprobe.c",
      "insertions": 22,
      "deletions": 21
    },
    {
      "file": "kernel/trace/trace_mmiotrace.c",
      "insertions": 8,
      "deletions": 8
    },
    {
      "file": "kernel/trace/trace_output.c",
      "insertions": 11,
      "deletions": 1
    },
    {
      "file": "kernel/trace/trace_probe.c",
      "insertions": 17,
      "deletions": 0
    },
    {
      "file": "kernel/trace/trace_probe.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "kernel/trace/trace_sched_wakeup.c",
      "insertions": 33,
      "deletions": 38
    },
    {
      "file": "kernel/trace/trace_syscalls.c",
      "insertions": 8,
      "deletions": 12
    },
    {
      "file": "kernel/trace/trace_uprobe.c",
      "insertions": 14,
      "deletions": 9
    },
    {
      "file": "kernel/tracepoint.c",
      "insertions": 59,
      "deletions": 32
    },
    {
      "file": "tools/Makefile",
      "insertions": 8,
      "deletions": 6
    },
    {
      "file": "tools/testing/selftests/ftrace/test.d/trigger/inter-event/trigger-synthetic-event-syntax.tc",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/ftrace/test.d/trigger/inter-event/trigger-synthetic_event_syntax_errors.tc",
      "insertions": 27,
      "deletions": 8
    },
    {
      "file": "tools/tracing/Makefile",
      "insertions": 19,
      "deletions": 0
    },
    {
      "file": "tools/tracing/latency/.gitignore",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "tools/tracing/latency/Makefile",
      "insertions": 24,
      "deletions": 0
    },
    {
      "file": "tools/tracing/latency/latency-collector.c",
      "insertions": 2108,
      "deletions": 0
    }
  ],
  "total_insertions": 3083,
  "total_deletions": 628,
  "total_changes": 3711,
  "parents": [
    "3a36281a17199737b468befb826d4a23eb774445",
    "c85c9a2c6e368dc94907e63babb18a9788e5c9b6"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "kernel/trace/blktrace.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/trace/trace.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/trace/trace_events.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}