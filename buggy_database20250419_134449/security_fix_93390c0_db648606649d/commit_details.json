{
  "hash": "93390c0a1b20b98a59ee0ef1a850687b3fbc304e",
  "hash_short": "93390c0a",
  "subject": "arm64: KVM: Hide unsupported AArch64 CPU features from guests",
  "body": "Currently, a guest kernel sees the true CPU feature registers\n(ID_*_EL1) when it reads them using MRS instructions.  This means\nthat the guest may observe features that are present in the\nhardware but the host doesn't understand or doesn't provide support\nfor.  A guest may legimitately try to use such a feature as per the\narchitecture, but use of the feature may trap instead of working\nnormally, triggering undef injection into the guest.\n\nThis is not a problem for the host, but the guest may go wrong when\nrunning on newer hardware than the host knows about.\n\nThis patch hides from guest VMs any AArch64-specific CPU features\nthat the host doesn't support, by exposing to the guest the\nsanitised versions of the registers computed by the cpufeatures\nframework, instead of the true hardware registers.  To achieve\nthis, HCR_EL2.TID3 is now set for AArch64 guests, and emulation\ncode is added to KVM to report the sanitised versions of the\naffected registers in response to MRS and register reads from\nuserspace.\n\nThe affected registers are removed from invariant_sys_regs[] (since\nthe invariant_sys_regs handling is no longer quite correct for\nthem) and added to sys_reg_desgs[], with appropriate access(),\nget_user() and set_user() methods.  No runtime vcpu storage is\nallocated for the registers: instead, they are read on demand from\nthe cpufeatures framework.  This may need modification in the\nfuture if there is a need for userspace to customise the features\nvisible to the guest.\n\nAttempts by userspace to write the registers are handled similarly\nto the current invariant_sys_regs handling: writes are permitted,\nbut only if they don't attempt to change the value.  This is\nsufficient to support VM snapshot/restore from userspace.\n\nBecause of the additional registers, restoring a VM on an older\nkernel may not work unless userspace knows how to handle the extra\nVM registers exposed to the KVM user ABI by this patch.\n\nUnder the principle of least damage, this patch makes no attempt to\nhandle any of the other registers currently in\ninvariant_sys_regs[], or to emulate registers for AArch32: however,\nthese could be handled in a similar way in future, as necessary.\n\nSigned-off-by: Dave Martin <Dave.Martin@arm.com>\nReviewed-by: Marc Zyngier <marc.zyngier@arm.com>\nAcked-by: Catalin Marinas <catalin.marinas@arm.com>\nAcked-by: Christoffer Dall <christoffer.dall@linaro.org>\nSigned-off-by: Will Deacon <will.deacon@arm.com>",
  "full_message": "arm64: KVM: Hide unsupported AArch64 CPU features from guests\n\nCurrently, a guest kernel sees the true CPU feature registers\n(ID_*_EL1) when it reads them using MRS instructions.  This means\nthat the guest may observe features that are present in the\nhardware but the host doesn't understand or doesn't provide support\nfor.  A guest may legimitately try to use such a feature as per the\narchitecture, but use of the feature may trap instead of working\nnormally, triggering undef injection into the guest.\n\nThis is not a problem for the host, but the guest may go wrong when\nrunning on newer hardware than the host knows about.\n\nThis patch hides from guest VMs any AArch64-specific CPU features\nthat the host doesn't support, by exposing to the guest the\nsanitised versions of the registers computed by the cpufeatures\nframework, instead of the true hardware registers.  To achieve\nthis, HCR_EL2.TID3 is now set for AArch64 guests, and emulation\ncode is added to KVM to report the sanitised versions of the\naffected registers in response to MRS and register reads from\nuserspace.\n\nThe affected registers are removed from invariant_sys_regs[] (since\nthe invariant_sys_regs handling is no longer quite correct for\nthem) and added to sys_reg_desgs[], with appropriate access(),\nget_user() and set_user() methods.  No runtime vcpu storage is\nallocated for the registers: instead, they are read on demand from\nthe cpufeatures framework.  This may need modification in the\nfuture if there is a need for userspace to customise the features\nvisible to the guest.\n\nAttempts by userspace to write the registers are handled similarly\nto the current invariant_sys_regs handling: writes are permitted,\nbut only if they don't attempt to change the value.  This is\nsufficient to support VM snapshot/restore from userspace.\n\nBecause of the additional registers, restoring a VM on an older\nkernel may not work unless userspace knows how to handle the extra\nVM registers exposed to the KVM user ABI by this patch.\n\nUnder the principle of least damage, this patch makes no attempt to\nhandle any of the other registers currently in\ninvariant_sys_regs[], or to emulate registers for AArch32: however,\nthese could be handled in a similar way in future, as necessary.\n\nSigned-off-by: Dave Martin <Dave.Martin@arm.com>\nReviewed-by: Marc Zyngier <marc.zyngier@arm.com>\nAcked-by: Catalin Marinas <catalin.marinas@arm.com>\nAcked-by: Christoffer Dall <christoffer.dall@linaro.org>\nSigned-off-by: Will Deacon <will.deacon@arm.com>",
  "author_name": "Dave Martin",
  "author_email": "Dave.Martin@arm.com",
  "author_date": "Tue Oct 31 15:50:56 2017 +0000",
  "author_date_iso": "2017-10-31T15:50:56+00:00",
  "committer_name": "Will Deacon",
  "committer_email": "will.deacon@arm.com",
  "committer_date": "Fri Nov 3 15:24:12 2017 +0000",
  "committer_date_iso": "2017-11-03T15:24:12+00:00",
  "files_changed": [
    "arch/arm64/include/asm/sysreg.h",
    "arch/arm64/kvm/hyp/switch.c",
    "arch/arm64/kvm/sys_regs.c"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "arch/arm64/include/asm/sysreg.h",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "arch/arm64/kvm/hyp/switch.c",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "arch/arm64/kvm/sys_regs.c",
      "insertions": 237,
      "deletions": 45
    }
  ],
  "total_insertions": 246,
  "total_deletions": 45,
  "total_changes": 291,
  "parents": [
    "abf73988a7c2b2130fbee7cd19d2f57695566050"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.15",
    "v4.15-rc1",
    "v4.15-rc2",
    "v4.15-rc3",
    "v4.15-rc4",
    "v4.15-rc5",
    "v4.15-rc6",
    "v4.15-rc7",
    "v4.15-rc8",
    "v4.15-rc9"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/arm64/include/asm/sysreg.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kvm/hyp/switch.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kvm/sys_regs.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}