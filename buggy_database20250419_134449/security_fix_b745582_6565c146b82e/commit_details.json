{
  "hash": "b74558259c5149e5edd79348b70eb34177cbeea0",
  "hash_short": "b7455825",
  "subject": "KVM: VMX: Fix vmx->nested freeing when no SMI handler",
  "body": "Reported by syzkaller:\n\n   ------------[ cut here ]------------\n   WARNING: CPU: 5 PID: 2939 at arch/x86/kvm/vmx.c:3844 free_loaded_vmcs+0x77/0x80 [kvm_intel]\n   CPU: 5 PID: 2939 Comm: repro Not tainted 4.14.0+ #26\n   RIP: 0010:free_loaded_vmcs+0x77/0x80 [kvm_intel]\n   Call Trace:\n    vmx_free_vcpu+0xda/0x130 [kvm_intel]\n    kvm_arch_destroy_vm+0x192/0x290 [kvm]\n    kvm_put_kvm+0x262/0x560 [kvm]\n    kvm_vm_release+0x2c/0x30 [kvm]\n    __fput+0x190/0x370\n    task_work_run+0xa1/0xd0\n    do_exit+0x4d2/0x13e0\n    do_group_exit+0x89/0x140\n    get_signal+0x318/0xb80\n    do_signal+0x8c/0xb40\n    exit_to_usermode_loop+0xe4/0x140\n    syscall_return_slowpath+0x206/0x230\n    entry_SYSCALL_64_fastpath+0x98/0x9a\n\nThe syzkaller testcase will execute VMXON/VMLAUCH instructions, so the\nvmx->nested stuff is populated, it will also issue KVM_SMI ioctl. However,\nthe testcase is just a simple c program and not be lauched by something\nlike seabios which implements smi_handler. Commit 05cade71cf (KVM: nSVM:\nfix SMI injection in guest mode) gets out of guest mode and set nested.vmxon\nto false for the duration of SMM according to SDM 34.14.1 \"leave VMX\noperation\" upon entering SMM. We can't alloc/free the vmx->nested stuff\neach time when entering/exiting SMM since it will induce more overhead. So\nthe function vmx_pre_enter_smm() marks nested.vmxon false even if vmx->nested\nstuff is still populated. What it expected is em_rsm() can mark nested.vmxon\nto be true again. However, the smi_handler/rsm will not execute since there\nis no something like seabios in this scenario. The function free_nested()\nfails to free the vmx->nested stuff since the vmx->nested.vmxon is false\nwhich results in the above warning.\n\nThis patch fixes it by also considering the no SMI handler case, luckily\nvmx->nested.smm.vmxon is marked according to the value of vmx->nested.vmxon\nin vmx_pre_enter_smm(), we can take advantage of it and free vmx->nested\nstuff when L1 goes down.\n\nReported-by: Dmitry Vyukov <dvyukov@google.com>\nCc: Paolo Bonzini <pbonzini@redhat.com>\nCc: Radim Kr\u010dm\u00e1\u0159 <rkrcmar@redhat.com>\nCc: Dmitry Vyukov <dvyukov@google.com>\nReviewed-by: Liran Alon <liran.alon@oracle.com>\nFixes: 05cade71cf (KVM: nSVM: fix SMI injection in guest mode)\nSigned-off-by: Wanpeng Li <wanpeng.li@hotmail.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
  "full_message": "KVM: VMX: Fix vmx->nested freeing when no SMI handler\n\nReported by syzkaller:\n\n   ------------[ cut here ]------------\n   WARNING: CPU: 5 PID: 2939 at arch/x86/kvm/vmx.c:3844 free_loaded_vmcs+0x77/0x80 [kvm_intel]\n   CPU: 5 PID: 2939 Comm: repro Not tainted 4.14.0+ #26\n   RIP: 0010:free_loaded_vmcs+0x77/0x80 [kvm_intel]\n   Call Trace:\n    vmx_free_vcpu+0xda/0x130 [kvm_intel]\n    kvm_arch_destroy_vm+0x192/0x290 [kvm]\n    kvm_put_kvm+0x262/0x560 [kvm]\n    kvm_vm_release+0x2c/0x30 [kvm]\n    __fput+0x190/0x370\n    task_work_run+0xa1/0xd0\n    do_exit+0x4d2/0x13e0\n    do_group_exit+0x89/0x140\n    get_signal+0x318/0xb80\n    do_signal+0x8c/0xb40\n    exit_to_usermode_loop+0xe4/0x140\n    syscall_return_slowpath+0x206/0x230\n    entry_SYSCALL_64_fastpath+0x98/0x9a\n\nThe syzkaller testcase will execute VMXON/VMLAUCH instructions, so the\nvmx->nested stuff is populated, it will also issue KVM_SMI ioctl. However,\nthe testcase is just a simple c program and not be lauched by something\nlike seabios which implements smi_handler. Commit 05cade71cf (KVM: nSVM:\nfix SMI injection in guest mode) gets out of guest mode and set nested.vmxon\nto false for the duration of SMM according to SDM 34.14.1 \"leave VMX\noperation\" upon entering SMM. We can't alloc/free the vmx->nested stuff\neach time when entering/exiting SMM since it will induce more overhead. So\nthe function vmx_pre_enter_smm() marks nested.vmxon false even if vmx->nested\nstuff is still populated. What it expected is em_rsm() can mark nested.vmxon\nto be true again. However, the smi_handler/rsm will not execute since there\nis no something like seabios in this scenario. The function free_nested()\nfails to free the vmx->nested stuff since the vmx->nested.vmxon is false\nwhich results in the above warning.\n\nThis patch fixes it by also considering the no SMI handler case, luckily\nvmx->nested.smm.vmxon is marked according to the value of vmx->nested.vmxon\nin vmx_pre_enter_smm(), we can take advantage of it and free vmx->nested\nstuff when L1 goes down.\n\nReported-by: Dmitry Vyukov <dvyukov@google.com>\nCc: Paolo Bonzini <pbonzini@redhat.com>\nCc: Radim Kr\u010dm\u00e1\u0159 <rkrcmar@redhat.com>\nCc: Dmitry Vyukov <dvyukov@google.com>\nReviewed-by: Liran Alon <liran.alon@oracle.com>\nFixes: 05cade71cf (KVM: nSVM: fix SMI injection in guest mode)\nSigned-off-by: Wanpeng Li <wanpeng.li@hotmail.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
  "author_name": "Wanpeng Li",
  "author_email": "wanpeng.li@hotmail.com",
  "author_date": "Wed Nov 22 14:04:00 2017 -0800",
  "author_date_iso": "2017-11-22T14:04:00-08:00",
  "committer_name": "Paolo Bonzini",
  "committer_email": "pbonzini@redhat.com",
  "committer_date": "Mon Nov 27 17:37:55 2017 +0100",
  "committer_date_iso": "2017-11-27T17:37:55+01:00",
  "files_changed": [
    "arch/x86/kvm/vmx.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/x86/kvm/vmx.c",
      "insertions": 2,
      "deletions": 1
    }
  ],
  "total_insertions": 2,
  "total_deletions": 1,
  "total_changes": 3,
  "parents": [
    "c37c28730bb031cc8a44a130c2555c0f3efbe2d0"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.15",
    "v4.15-rc2",
    "v4.15-rc3",
    "v4.15-rc4",
    "v4.15-rc5",
    "v4.15-rc6",
    "v4.15-rc7",
    "v4.15-rc8",
    "v4.15-rc9",
    "v4.16"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/kvm/vmx.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}