{
  "hash": "417c5643cd67a55f424b203b492082035d0236c3",
  "hash_short": "417c5643",
  "subject": "lsm: replace indirect LSM hook calls with static calls",
  "body": "LSM hooks are currently invoked from a linked list as indirect calls\nwhich are invoked using retpolines as a mitigation for speculative\nattacks (Branch History / Target injection) and add extra overhead which\nis especially bad in kernel hot paths:\n\nsecurity_file_ioctl:\n   0xff...0320 <+0>:\tendbr64\n   0xff...0324 <+4>:\tpush   %rbp\n   0xff...0325 <+5>:\tpush   %r15\n   0xff...0327 <+7>:\tpush   %r14\n   0xff...0329 <+9>:\tpush   %rbx\n   0xff...032a <+10>:\tmov    %rdx,%rbx\n   0xff...032d <+13>:\tmov    %esi,%ebp\n   0xff...032f <+15>:\tmov    %rdi,%r14\n   0xff...0332 <+18>:\tmov    $0xff...7030,%r15\n   0xff...0339 <+25>:\tmov    (%r15),%r15\n   0xff...033c <+28>:\ttest   %r15,%r15\n   0xff...033f <+31>:\tje     0xff...0358 <security_file_ioctl+56>\n   0xff...0341 <+33>:\tmov    0x18(%r15),%r11\n   0xff...0345 <+37>:\tmov    %r14,%rdi\n   0xff...0348 <+40>:\tmov    %ebp,%esi\n   0xff...034a <+42>:\tmov    %rbx,%rdx\n\n   0xff...034d <+45>:\tcall   0xff...2e0 <__x86_indirect_thunk_array+352>\n   \t\t\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n    Indirect calls that use retpolines leading to overhead, not just due\n    to extra instruction but also branch misses.\n\n   0xff...0352 <+50>:\ttest   %eax,%eax\n   0xff...0354 <+52>:\tje     0xff...0339 <security_file_ioctl+25>\n   0xff...0356 <+54>:\tjmp    0xff...035a <security_file_ioctl+58>\n   0xff...0358 <+56>:\txor    %eax,%eax\n   0xff...035a <+58>:\tpop    %rbx\n   0xff...035b <+59>:\tpop    %r14\n   0xff...035d <+61>:\tpop    %r15\n   0xff...035f <+63>:\tpop    %rbp\n   0xff...0360 <+64>:\tjmp    0xff...47c4 <__x86_return_thunk>\n\nThe indirect calls are not really needed as one knows the addresses of\nenabled LSM callbacks at boot time and only the order can possibly\nchange at boot time with the lsm= kernel command line parameter.\n\nAn array of static calls is defined per LSM hook and the static calls\nare updated at boot time once the order has been determined.\n\nWith the hook now exposed as a static call, one can see that the\nretpolines are no longer there and the LSM callbacks are invoked\ndirectly:\n\nsecurity_file_ioctl:\n   0xff...0ca0 <+0>:\tendbr64\n   0xff...0ca4 <+4>:\tnopl   0x0(%rax,%rax,1)\n   0xff...0ca9 <+9>:\tpush   %rbp\n   0xff...0caa <+10>:\tpush   %r14\n   0xff...0cac <+12>:\tpush   %rbx\n   0xff...0cad <+13>:\tmov    %rdx,%rbx\n   0xff...0cb0 <+16>:\tmov    %esi,%ebp\n   0xff...0cb2 <+18>:\tmov    %rdi,%r14\n   0xff...0cb5 <+21>:\tjmp    0xff...0cc7 <security_file_ioctl+39>\n  \t\t\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   Static key enabled for SELinux\n\n   0xffffffff818f0cb7 <+23>:\tjmp    0xff...0cde <security_file_ioctl+62>\n   \t\t\t\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n   Static key enabled for BPF LSM. This is something that is changed to\n   default to false to avoid the existing side effect issues of BPF LSM\n   [1] in a subsequent patch.\n\n   0xff...0cb9 <+25>:\txor    %eax,%eax\n   0xff...0cbb <+27>:\txchg   %ax,%ax\n   0xff...0cbd <+29>:\tpop    %rbx\n   0xff...0cbe <+30>:\tpop    %r14\n   0xff...0cc0 <+32>:\tpop    %rbp\n   0xff...0cc1 <+33>:\tcs jmp 0xff...0000 <__x86_return_thunk>\n   0xff...0cc7 <+39>:\tendbr64\n   0xff...0ccb <+43>:\tmov    %r14,%rdi\n   0xff...0cce <+46>:\tmov    %ebp,%esi\n   0xff...0cd0 <+48>:\tmov    %rbx,%rdx\n   0xff...0cd3 <+51>:\tcall   0xff...3230 <selinux_file_ioctl>\n   \t\t\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   Direct call to SELinux.\n\n   0xff...0cd8 <+56>:\ttest   %eax,%eax\n   0xff...0cda <+58>:\tjne    0xff...0cbd <security_file_ioctl+29>\n   0xff...0cdc <+60>:\tjmp    0xff...0cb7 <security_file_ioctl+23>\n   0xff...0cde <+62>:\tendbr64\n   0xff...0ce2 <+66>:\tmov    %r14,%rdi\n   0xff...0ce5 <+69>:\tmov    %ebp,%esi\n   0xff...0ce7 <+71>:\tmov    %rbx,%rdx\n   0xff...0cea <+74>:\tcall   0xff...e220 <bpf_lsm_file_ioctl>\n   \t\t\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   Direct call to BPF LSM.\n\n   0xff...0cef <+79>:\ttest   %eax,%eax\n   0xff...0cf1 <+81>:\tjne    0xff...0cbd <security_file_ioctl+29>\n   0xff...0cf3 <+83>:\tjmp    0xff...0cb9 <security_file_ioctl+25>\n   0xff...0cf5 <+85>:\tendbr64\n   0xff...0cf9 <+89>:\tmov    %r14,%rdi\n   0xff...0cfc <+92>:\tmov    %ebp,%esi\n   0xff...0cfe <+94>:\tmov    %rbx,%rdx\n   0xff...0d01 <+97>:\tpop    %rbx\n   0xff...0d02 <+98>:\tpop    %r14\n   0xff...0d04 <+100>:\tpop    %rbp\n   0xff...0d05 <+101>:\tret\n   0xff...0d06 <+102>:\tint3\n   0xff...0d07 <+103>:\tint3\n   0xff...0d08 <+104>:\tint3\n   0xff...0d09 <+105>:\tint3\n\nWhile this patch uses static_branch_unlikely indicating that an LSM hook\nis likely to be not present. In most cases this is still a better choice\nas even when an LSM with one hook is added, empty slots are created for\nall LSM hooks (especially when many LSMs that do not initialize most\nhooks are present on the system).\n\nThere are some hooks that don't use the call_int_hook or\ncall_void_hook. These hooks are updated to use a new macro called\nlsm_for_each_hook where the lsm_callback is directly invoked as an\nindirect call.\n\nBelow are results of the relevant Unixbench system benchmarks with BPF LSM\nand SELinux enabled with default policies enabled with and without these\npatches.\n\nBenchmark                                          Delta(%): (+ is better)\n==========================================================================\nExecl Throughput                                             +1.9356\nFile Write 1024 bufsize 2000 maxblocks                       +6.5953\nPipe Throughput                                              +9.5499\nPipe-based Context Switching                                 +3.0209\nProcess Creation                                             +2.3246\nShell Scripts (1 concurrent)                                 +1.4975\nSystem Call Overhead                                         +2.7815\nSystem Benchmarks Index Score (Partial Only):                +3.4859\n\nIn the best case, some syscalls like eventfd_create benefitted to about\n~10%.\n\nTested-by: Guenter Roeck <linux@roeck-us.net>\nReviewed-by: Casey Schaufler <casey@schaufler-ca.com>\nReviewed-by: Kees Cook <keescook@chromium.org>\nAcked-by: Song Liu <song@kernel.org>\nAcked-by: Andrii Nakryiko <andrii@kernel.org>\nSigned-off-by: KP Singh <kpsingh@kernel.org>\nSigned-off-by: Paul Moore <paul@paul-moore.com>",
  "full_message": "lsm: replace indirect LSM hook calls with static calls\n\nLSM hooks are currently invoked from a linked list as indirect calls\nwhich are invoked using retpolines as a mitigation for speculative\nattacks (Branch History / Target injection) and add extra overhead which\nis especially bad in kernel hot paths:\n\nsecurity_file_ioctl:\n   0xff...0320 <+0>:\tendbr64\n   0xff...0324 <+4>:\tpush   %rbp\n   0xff...0325 <+5>:\tpush   %r15\n   0xff...0327 <+7>:\tpush   %r14\n   0xff...0329 <+9>:\tpush   %rbx\n   0xff...032a <+10>:\tmov    %rdx,%rbx\n   0xff...032d <+13>:\tmov    %esi,%ebp\n   0xff...032f <+15>:\tmov    %rdi,%r14\n   0xff...0332 <+18>:\tmov    $0xff...7030,%r15\n   0xff...0339 <+25>:\tmov    (%r15),%r15\n   0xff...033c <+28>:\ttest   %r15,%r15\n   0xff...033f <+31>:\tje     0xff...0358 <security_file_ioctl+56>\n   0xff...0341 <+33>:\tmov    0x18(%r15),%r11\n   0xff...0345 <+37>:\tmov    %r14,%rdi\n   0xff...0348 <+40>:\tmov    %ebp,%esi\n   0xff...034a <+42>:\tmov    %rbx,%rdx\n\n   0xff...034d <+45>:\tcall   0xff...2e0 <__x86_indirect_thunk_array+352>\n   \t\t\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n    Indirect calls that use retpolines leading to overhead, not just due\n    to extra instruction but also branch misses.\n\n   0xff...0352 <+50>:\ttest   %eax,%eax\n   0xff...0354 <+52>:\tje     0xff...0339 <security_file_ioctl+25>\n   0xff...0356 <+54>:\tjmp    0xff...035a <security_file_ioctl+58>\n   0xff...0358 <+56>:\txor    %eax,%eax\n   0xff...035a <+58>:\tpop    %rbx\n   0xff...035b <+59>:\tpop    %r14\n   0xff...035d <+61>:\tpop    %r15\n   0xff...035f <+63>:\tpop    %rbp\n   0xff...0360 <+64>:\tjmp    0xff...47c4 <__x86_return_thunk>\n\nThe indirect calls are not really needed as one knows the addresses of\nenabled LSM callbacks at boot time and only the order can possibly\nchange at boot time with the lsm= kernel command line parameter.\n\nAn array of static calls is defined per LSM hook and the static calls\nare updated at boot time once the order has been determined.\n\nWith the hook now exposed as a static call, one can see that the\nretpolines are no longer there and the LSM callbacks are invoked\ndirectly:\n\nsecurity_file_ioctl:\n   0xff...0ca0 <+0>:\tendbr64\n   0xff...0ca4 <+4>:\tnopl   0x0(%rax,%rax,1)\n   0xff...0ca9 <+9>:\tpush   %rbp\n   0xff...0caa <+10>:\tpush   %r14\n   0xff...0cac <+12>:\tpush   %rbx\n   0xff...0cad <+13>:\tmov    %rdx,%rbx\n   0xff...0cb0 <+16>:\tmov    %esi,%ebp\n   0xff...0cb2 <+18>:\tmov    %rdi,%r14\n   0xff...0cb5 <+21>:\tjmp    0xff...0cc7 <security_file_ioctl+39>\n  \t\t\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   Static key enabled for SELinux\n\n   0xffffffff818f0cb7 <+23>:\tjmp    0xff...0cde <security_file_ioctl+62>\n   \t\t\t\t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n   Static key enabled for BPF LSM. This is something that is changed to\n   default to false to avoid the existing side effect issues of BPF LSM\n   [1] in a subsequent patch.\n\n   0xff...0cb9 <+25>:\txor    %eax,%eax\n   0xff...0cbb <+27>:\txchg   %ax,%ax\n   0xff...0cbd <+29>:\tpop    %rbx\n   0xff...0cbe <+30>:\tpop    %r14\n   0xff...0cc0 <+32>:\tpop    %rbp\n   0xff...0cc1 <+33>:\tcs jmp 0xff...0000 <__x86_return_thunk>\n   0xff...0cc7 <+39>:\tendbr64\n   0xff...0ccb <+43>:\tmov    %r14,%rdi\n   0xff...0cce <+46>:\tmov    %ebp,%esi\n   0xff...0cd0 <+48>:\tmov    %rbx,%rdx\n   0xff...0cd3 <+51>:\tcall   0xff...3230 <selinux_file_ioctl>\n   \t\t\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   Direct call to SELinux.\n\n   0xff...0cd8 <+56>:\ttest   %eax,%eax\n   0xff...0cda <+58>:\tjne    0xff...0cbd <security_file_ioctl+29>\n   0xff...0cdc <+60>:\tjmp    0xff...0cb7 <security_file_ioctl+23>\n   0xff...0cde <+62>:\tendbr64\n   0xff...0ce2 <+66>:\tmov    %r14,%rdi\n   0xff...0ce5 <+69>:\tmov    %ebp,%esi\n   0xff...0ce7 <+71>:\tmov    %rbx,%rdx\n   0xff...0cea <+74>:\tcall   0xff...e220 <bpf_lsm_file_ioctl>\n   \t\t\t       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   Direct call to BPF LSM.\n\n   0xff...0cef <+79>:\ttest   %eax,%eax\n   0xff...0cf1 <+81>:\tjne    0xff...0cbd <security_file_ioctl+29>\n   0xff...0cf3 <+83>:\tjmp    0xff...0cb9 <security_file_ioctl+25>\n   0xff...0cf5 <+85>:\tendbr64\n   0xff...0cf9 <+89>:\tmov    %r14,%rdi\n   0xff...0cfc <+92>:\tmov    %ebp,%esi\n   0xff...0cfe <+94>:\tmov    %rbx,%rdx\n   0xff...0d01 <+97>:\tpop    %rbx\n   0xff...0d02 <+98>:\tpop    %r14\n   0xff...0d04 <+100>:\tpop    %rbp\n   0xff...0d05 <+101>:\tret\n   0xff...0d06 <+102>:\tint3\n   0xff...0d07 <+103>:\tint3\n   0xff...0d08 <+104>:\tint3\n   0xff...0d09 <+105>:\tint3\n\nWhile this patch uses static_branch_unlikely indicating that an LSM hook\nis likely to be not present. In most cases this is still a better choice\nas even when an LSM with one hook is added, empty slots are created for\nall LSM hooks (especially when many LSMs that do not initialize most\nhooks are present on the system).\n\nThere are some hooks that don't use the call_int_hook or\ncall_void_hook. These hooks are updated to use a new macro called\nlsm_for_each_hook where the lsm_callback is directly invoked as an\nindirect call.\n\nBelow are results of the relevant Unixbench system benchmarks with BPF LSM\nand SELinux enabled with default policies enabled with and without these\npatches.\n\nBenchmark                                          Delta(%): (+ is better)\n==========================================================================\nExecl Throughput                                             +1.9356\nFile Write 1024 bufsize 2000 maxblocks                       +6.5953\nPipe Throughput                                              +9.5499\nPipe-based Context Switching                                 +3.0209\nProcess Creation                                             +2.3246\nShell Scripts (1 concurrent)                                 +1.4975\nSystem Call Overhead                                         +2.7815\nSystem Benchmarks Index Score (Partial Only):                +3.4859\n\nIn the best case, some syscalls like eventfd_create benefitted to about\n~10%.\n\nTested-by: Guenter Roeck <linux@roeck-us.net>\nReviewed-by: Casey Schaufler <casey@schaufler-ca.com>\nReviewed-by: Kees Cook <keescook@chromium.org>\nAcked-by: Song Liu <song@kernel.org>\nAcked-by: Andrii Nakryiko <andrii@kernel.org>\nSigned-off-by: KP Singh <kpsingh@kernel.org>\nSigned-off-by: Paul Moore <paul@paul-moore.com>",
  "author_name": "KP Singh",
  "author_email": "kpsingh@kernel.org",
  "author_date": "Fri Aug 16 17:43:07 2024 +0200",
  "author_date_iso": "2024-08-16T17:43:07+02:00",
  "committer_name": "Paul Moore",
  "committer_email": "paul@paul-moore.com",
  "committer_date": "Thu Aug 22 12:24:10 2024 -0400",
  "committer_date_iso": "2024-08-22T12:24:10-04:00",
  "files_changed": [
    "include/linux/lsm_hooks.h",
    "security/security.c"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "include/linux/lsm_hooks.h",
      "insertions": 43,
      "deletions": 9
    },
    {
      "file": "security/security.c",
      "insertions": 155,
      "deletions": 64
    }
  ],
  "total_insertions": 198,
  "total_deletions": 73,
  "total_changes": 271,
  "parents": [
    "d51e783c17bab0c139bf78d6bd9d1f66673f7903"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/linux/lsm_hooks.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "security/security.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}