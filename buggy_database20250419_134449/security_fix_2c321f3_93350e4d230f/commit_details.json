{
  "hash": "2c321f3f70bc284510598f712b702ce8d60c4d14",
  "hash_short": "2c321f3f",
  "subject": "mm: change inlined allocation helpers to account at the call site",
  "body": "Main goal of memory allocation profiling patchset is to provide accounting\nthat is cheap enough to run in production.  To achieve that we inject\ncounters using codetags at the allocation call sites to account every time\nallocation is made.  This injection allows us to perform accounting\nefficiently because injected counters are immediately available as opposed\nto the alternative methods, such as using _RET_IP_, which would require\ncounter lookup and appropriate locking that makes accounting much more\nexpensive.  This method requires all allocation functions to inject\nseparate counters at their call sites so that their callers can be\nindividually accounted.  Counter injection is implemented by allocation\nhooks which should wrap all allocation functions.\n\nInlined functions which perform allocations but do not use allocation\nhooks are directly charged for the allocations they perform.  In most\ncases these functions are just specialized allocation wrappers used from\nmultiple places to allocate objects of a specific type.  It would be more\nuseful to do the accounting at their call sites instead.  Instrument these\nhelpers to do accounting at the call site.  Simple inlined allocation\nwrappers are converted directly into macros.  More complex allocators or\nallocators with documentation are converted into _noprof versions and\nallocation hooks are added.  This allows memory allocation profiling\nmechanism to charge allocations to the callers of these functions.\n\nLink: https://lkml.kernel.org/r/20240415020731.1152108-1-surenb@google.com\nSigned-off-by: Suren Baghdasaryan <surenb@google.com>\nAcked-by: Jan Kara <jack@suse.cz>\t\t[jbd2]\nCc: Anna Schumaker <anna@kernel.org>\nCc: Arnd Bergmann <arnd@arndb.de>\nCc: Benjamin Tissoires <benjamin.tissoires@redhat.com>\nCc: Christoph Lameter <cl@linux.com>\nCc: David Rientjes <rientjes@google.com>\nCc: David S. Miller <davem@davemloft.net>\nCc: Dennis Zhou <dennis@kernel.org>\nCc: Eric Dumazet <edumazet@google.com>\nCc: Herbert Xu <herbert@gondor.apana.org.au>\nCc: Jakub Kicinski <kuba@kernel.org>\nCc: Jakub Sitnicki <jakub@cloudflare.com>\nCc: Jiri Kosina <jikos@kernel.org>\nCc: Joerg Roedel <joro@8bytes.org>\nCc: Joonsoo Kim <iamjoonsoo.kim@lge.com>\nCc: Kent Overstreet <kent.overstreet@linux.dev>\nCc: Matthew Wilcox (Oracle) <willy@infradead.org>\nCc: Paolo Abeni <pabeni@redhat.com>\nCc: Pekka Enberg <penberg@kernel.org>\nCc: Tejun Heo <tj@kernel.org>\nCc: Theodore Ts'o <tytso@mit.edu>\nCc: Trond Myklebust <trond.myklebust@hammerspace.com>\nCc: Vlastimil Babka <vbabka@suse.cz>\nCc: Will Deacon <will@kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>",
  "full_message": "mm: change inlined allocation helpers to account at the call site\n\nMain goal of memory allocation profiling patchset is to provide accounting\nthat is cheap enough to run in production.  To achieve that we inject\ncounters using codetags at the allocation call sites to account every time\nallocation is made.  This injection allows us to perform accounting\nefficiently because injected counters are immediately available as opposed\nto the alternative methods, such as using _RET_IP_, which would require\ncounter lookup and appropriate locking that makes accounting much more\nexpensive.  This method requires all allocation functions to inject\nseparate counters at their call sites so that their callers can be\nindividually accounted.  Counter injection is implemented by allocation\nhooks which should wrap all allocation functions.\n\nInlined functions which perform allocations but do not use allocation\nhooks are directly charged for the allocations they perform.  In most\ncases these functions are just specialized allocation wrappers used from\nmultiple places to allocate objects of a specific type.  It would be more\nuseful to do the accounting at their call sites instead.  Instrument these\nhelpers to do accounting at the call site.  Simple inlined allocation\nwrappers are converted directly into macros.  More complex allocators or\nallocators with documentation are converted into _noprof versions and\nallocation hooks are added.  This allows memory allocation profiling\nmechanism to charge allocations to the callers of these functions.\n\nLink: https://lkml.kernel.org/r/20240415020731.1152108-1-surenb@google.com\nSigned-off-by: Suren Baghdasaryan <surenb@google.com>\nAcked-by: Jan Kara <jack@suse.cz>\t\t[jbd2]\nCc: Anna Schumaker <anna@kernel.org>\nCc: Arnd Bergmann <arnd@arndb.de>\nCc: Benjamin Tissoires <benjamin.tissoires@redhat.com>\nCc: Christoph Lameter <cl@linux.com>\nCc: David Rientjes <rientjes@google.com>\nCc: David S. Miller <davem@davemloft.net>\nCc: Dennis Zhou <dennis@kernel.org>\nCc: Eric Dumazet <edumazet@google.com>\nCc: Herbert Xu <herbert@gondor.apana.org.au>\nCc: Jakub Kicinski <kuba@kernel.org>\nCc: Jakub Sitnicki <jakub@cloudflare.com>\nCc: Jiri Kosina <jikos@kernel.org>\nCc: Joerg Roedel <joro@8bytes.org>\nCc: Joonsoo Kim <iamjoonsoo.kim@lge.com>\nCc: Kent Overstreet <kent.overstreet@linux.dev>\nCc: Matthew Wilcox (Oracle) <willy@infradead.org>\nCc: Paolo Abeni <pabeni@redhat.com>\nCc: Pekka Enberg <penberg@kernel.org>\nCc: Tejun Heo <tj@kernel.org>\nCc: Theodore Ts'o <tytso@mit.edu>\nCc: Trond Myklebust <trond.myklebust@hammerspace.com>\nCc: Vlastimil Babka <vbabka@suse.cz>\nCc: Will Deacon <will@kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>",
  "author_name": "Suren Baghdasaryan",
  "author_email": "surenb@google.com",
  "author_date": "Sun Apr 14 19:07:31 2024 -0700",
  "author_date_iso": "2024-04-14T19:07:31-07:00",
  "committer_name": "Andrew Morton",
  "committer_email": "akpm@linux-foundation.org",
  "committer_date": "Thu Apr 25 20:55:59 2024 -0700",
  "committer_date_iso": "2024-04-25T20:55:59-07:00",
  "files_changed": [
    "drivers/iommu/amd/amd_iommu.h",
    "fs/nfs/iostat.h",
    "include/acpi/platform/aclinuxex.h",
    "include/asm-generic/pgalloc.h",
    "include/crypto/hash.h",
    "include/crypto/internal/acompress.h",
    "include/crypto/skcipher.h",
    "include/linux/bpf.h",
    "include/linux/bpfptr.h",
    "include/linux/dma-fence-chain.h",
    "include/linux/hid_bpf.h",
    "include/linux/jbd2.h",
    "include/linux/mm.h",
    "include/linux/mm_types.h",
    "include/linux/percpu.h",
    "include/linux/ptr_ring.h",
    "include/linux/skb_array.h",
    "include/linux/skbuff.h",
    "include/linux/skmsg.h",
    "include/linux/slab.h",
    "include/linux/sockptr.h",
    "include/net/netlabel.h",
    "include/net/netlink.h",
    "include/net/request_sock.h",
    "include/net/tcx.h",
    "net/sunrpc/auth_gss/auth_gss_internal.h"
  ],
  "files_changed_count": 26,
  "stats": [
    {
      "file": "drivers/iommu/amd/amd_iommu.h",
      "insertions": 3,
      "deletions": 2
    },
    {
      "file": "fs/nfs/iostat.h",
      "insertions": 1,
      "deletions": 4
    },
    {
      "file": "include/acpi/platform/aclinuxex.h",
      "insertions": 6,
      "deletions": 13
    },
    {
      "file": "include/asm-generic/pgalloc.h",
      "insertions": 21,
      "deletions": 14
    },
    {
      "file": "include/crypto/hash.h",
      "insertions": 4,
      "deletions": 3
    },
    {
      "file": "include/crypto/internal/acompress.h",
      "insertions": 3,
      "deletions": 2
    },
    {
      "file": "include/crypto/skcipher.h",
      "insertions": 4,
      "deletions": 3
    },
    {
      "file": "include/linux/bpf.h",
      "insertions": 8,
      "deletions": 25
    },
    {
      "file": "include/linux/bpfptr.h",
      "insertions": 3,
      "deletions": 2
    },
    {
      "file": "include/linux/dma-fence-chain.h",
      "insertions": 2,
      "deletions": 4
    },
    {
      "file": "include/linux/hid_bpf.h",
      "insertions": 2,
      "deletions": 4
    },
    {
      "file": "include/linux/jbd2.h",
      "insertions": 4,
      "deletions": 8
    },
    {
      "file": "include/linux/mm.h",
      "insertions": 3,
      "deletions": 2
    },
    {
      "file": "include/linux/mm_types.h",
      "insertions": 3,
      "deletions": 2
    },
    {
      "file": "include/linux/percpu.h",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "include/linux/ptr_ring.h",
      "insertions": 16,
      "deletions": 12
    },
    {
      "file": "include/linux/skb_array.h",
      "insertions": 11,
      "deletions": 8
    },
    {
      "file": "include/linux/skbuff.h",
      "insertions": 8,
      "deletions": 12
    },
    {
      "file": "include/linux/skmsg.h",
      "insertions": 3,
      "deletions": 5
    },
    {
      "file": "include/linux/slab.h",
      "insertions": 5,
      "deletions": 0
    },
    {
      "file": "include/linux/sockptr.h",
      "insertions": 6,
      "deletions": 4
    },
    {
      "file": "include/net/netlabel.h",
      "insertions": 10,
      "deletions": 6
    },
    {
      "file": "include/net/netlink.h",
      "insertions": 3,
      "deletions": 2
    },
    {
      "file": "include/net/request_sock.h",
      "insertions": 3,
      "deletions": 2
    },
    {
      "file": "include/net/tcx.h",
      "insertions": 3,
      "deletions": 2
    },
    {
      "file": "net/sunrpc/auth_gss/auth_gss_internal.h",
      "insertions": 4,
      "deletions": 2
    }
  ],
  "total_insertions": 142,
  "total_deletions": 143,
  "total_changes": 285,
  "parents": [
    "ebdf9ad4ca9897768bcb7dad6581369693c81fe0"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "inject"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/acpi/platform/aclinuxex.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/nfs/iostat.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/asm-generic/pgalloc.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/iommu/amd/amd_iommu.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/crypto/hash.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/crypto/internal/acompress.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/bpfptr.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/bpf.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/dma-fence-chain.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/crypto/skcipher.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/percpu.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/hid_bpf.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/jbd2.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/skb_array.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/mm_types.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/mm.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/ptr_ring.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/slab.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/skmsg.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/net/netlink.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/sockptr.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/net/netlabel.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/net/request_sock.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/skbuff.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/net/tcx.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/sunrpc/auth_gss/auth_gss_internal.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}