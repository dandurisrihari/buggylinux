{
  "hash": "9d0cce2bc3874dd03f7471ec00ae4acb5a77e43c",
  "hash_short": "9d0cce2b",
  "subject": "rcu-tasks: Fix boot-time RCU tasks debug-only deadlock",
  "body": "In kernels built with CONFIG_PROVE_RCU=y (for example, lockdep kernels),\nthe following sequence of events can occur:\n\no\trcu_init_tasks_generic() is invoked just before init is spawned.\n\tIt invokes rcu_spawn_tasks_kthread() and friends.\n\no\trcu_spawn_tasks_kthread() invokes rcu_spawn_tasks_kthread_generic(),\n\twhich uses kthread_run() to create the needed kthread.\n\no\tControl returns to rcu_init_tasks_generic(), which, because this\n\tis a CONFIG_PROVE_RCU=y kernel, invokes the version of the\n\trcu_tasks_initiate_self_tests() function that actually does\n\tsomething, including invoking synchronize_rcu_tasks(), which\n\tin turn invokes synchronize_rcu_tasks_generic().\n\no\tsynchronize_rcu_tasks_generic() sees that the ->kthread_ptr is\n\tstill NULL, because the newly spawned kthread has not yet\n\tstarted.\n\no\tThe new kthread starts, preempting synchronize_rcu_tasks_generic()\n\tjust after its check.  This kthread invokes rcu_tasks_one_gp(),\n\twhich acquires ->tasks_gp_mutex, and, seeing no work, blocks\n\tin rcuwait_wait_event().  Note that this step requires either\n\ta preemptible kernel or a fault-injection-style sleep at the\n\tbeginning of mutex_lock().\n\no\tsynchronize_rcu_tasks_generic() resumes and invokes rcu_tasks_one_gp().\n\no\trcu_tasks_one_gp() attempts to acquire ->tasks_gp_mutex, which\n\tis still held by the newly spawned kthread's rcu_tasks_one_gp()\n\tfunction.  Deadlock.\n\nBecause the only reason for ->tasks_gp_mutex is to handle pre-kthread\nsynchronous grace periods, this commit avoids this deadlock by having\nrcu_tasks_one_gp() momentarily release ->tasks_gp_mutex while invoking\nrcuwait_wait_event().  This allows the call to rcu_tasks_one_gp() from\nsynchronize_rcu_tasks_generic() proceed.\n\nNote that it is not necessary to release the mutex anywhere else in\nrcu_tasks_one_gp() because rcuwait_wait_event() is the only function\nthat can block indefinitely.\n\nReported-by: Guenter Roeck <linux@roeck-us.net>\nReported-by: Roy Hopkins <rhopkins@suse.de>\nReported-by: Peter Zijlstra <peterz@infradead.org>\nSigned-off-by: Paul E. McKenney <paulmck@kernel.org>\nTested-by: Roy Hopkins <rhopkins@suse.de>",
  "full_message": "rcu-tasks: Fix boot-time RCU tasks debug-only deadlock\n\nIn kernels built with CONFIG_PROVE_RCU=y (for example, lockdep kernels),\nthe following sequence of events can occur:\n\no\trcu_init_tasks_generic() is invoked just before init is spawned.\n\tIt invokes rcu_spawn_tasks_kthread() and friends.\n\no\trcu_spawn_tasks_kthread() invokes rcu_spawn_tasks_kthread_generic(),\n\twhich uses kthread_run() to create the needed kthread.\n\no\tControl returns to rcu_init_tasks_generic(), which, because this\n\tis a CONFIG_PROVE_RCU=y kernel, invokes the version of the\n\trcu_tasks_initiate_self_tests() function that actually does\n\tsomething, including invoking synchronize_rcu_tasks(), which\n\tin turn invokes synchronize_rcu_tasks_generic().\n\no\tsynchronize_rcu_tasks_generic() sees that the ->kthread_ptr is\n\tstill NULL, because the newly spawned kthread has not yet\n\tstarted.\n\no\tThe new kthread starts, preempting synchronize_rcu_tasks_generic()\n\tjust after its check.  This kthread invokes rcu_tasks_one_gp(),\n\twhich acquires ->tasks_gp_mutex, and, seeing no work, blocks\n\tin rcuwait_wait_event().  Note that this step requires either\n\ta preemptible kernel or a fault-injection-style sleep at the\n\tbeginning of mutex_lock().\n\no\tsynchronize_rcu_tasks_generic() resumes and invokes rcu_tasks_one_gp().\n\no\trcu_tasks_one_gp() attempts to acquire ->tasks_gp_mutex, which\n\tis still held by the newly spawned kthread's rcu_tasks_one_gp()\n\tfunction.  Deadlock.\n\nBecause the only reason for ->tasks_gp_mutex is to handle pre-kthread\nsynchronous grace periods, this commit avoids this deadlock by having\nrcu_tasks_one_gp() momentarily release ->tasks_gp_mutex while invoking\nrcuwait_wait_event().  This allows the call to rcu_tasks_one_gp() from\nsynchronize_rcu_tasks_generic() proceed.\n\nNote that it is not necessary to release the mutex anywhere else in\nrcu_tasks_one_gp() because rcuwait_wait_event() is the only function\nthat can block indefinitely.\n\nReported-by: Guenter Roeck <linux@roeck-us.net>\nReported-by: Roy Hopkins <rhopkins@suse.de>\nReported-by: Peter Zijlstra <peterz@infradead.org>\nSigned-off-by: Paul E. McKenney <paulmck@kernel.org>\nTested-by: Roy Hopkins <rhopkins@suse.de>",
  "author_name": "Paul E. McKenney",
  "author_email": "paulmck@kernel.org",
  "author_date": "Tue Aug 1 12:11:18 2023 -0700",
  "author_date_iso": "2023-08-01T12:11:18-07:00",
  "committer_name": "Paul E. McKenney",
  "committer_email": "paulmck@kernel.org",
  "committer_date": "Mon Aug 14 14:58:25 2023 -0700",
  "committer_date_iso": "2023-08-14T14:58:25-07:00",
  "files_changed": [
    "kernel/rcu/tasks.h"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "kernel/rcu/tasks.h",
      "insertions": 2,
      "deletions": 0
    }
  ],
  "total_insertions": 2,
  "total_deletions": 0,
  "total_changes": 2,
  "parents": [
    "cb88f7f51bc6f351a529ff61d0a706c6eae1417a"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "kernel/rcu/tasks.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}