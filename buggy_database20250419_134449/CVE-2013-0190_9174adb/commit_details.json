{
  "hash": "9174adbee4a9a49d0139f5d71969852b36720809",
  "hash_short": "9174adbe",
  "subject": "xen: Fix stack corruption in xen_failsafe_callback for 32bit PVOPS guests.",
  "body": "This fixes CVE-2013-0190 / XSA-40\n\nThere has been an error on the xen_failsafe_callback path for failed\niret, which causes the stack pointer to be wrong when entering the\niret_exc error path.  This can result in the kernel crashing.\n\nIn the classic kernel case, the relevant code looked a little like:\n\n        popl %eax      # Error code from hypervisor\n        jz 5f\n        addl $16,%esp\n        jmp iret_exc   # Hypervisor said iret fault\n5:      addl $16,%esp\n                       # Hypervisor said segment selector fault\n\nHere, there are two identical addls on either option of a branch which\nappears to have been optimised by hoisting it above the jz, and\nconverting it to an lea, which leaves the flags register unaffected.\n\nIn the PVOPS case, the code looks like:\n\n        popl_cfi %eax         # Error from the hypervisor\n        lea 16(%esp),%esp     # Add $16 before choosing fault path\n        CFI_ADJUST_CFA_OFFSET -16\n        jz 5f\n        addl $16,%esp         # Incorrectly adjust %esp again\n        jmp iret_exc\n\nIt is possible unprivileged userspace applications to cause this\nbehaviour, for example by loading an LDT code selector, then changing\nthe code selector to be not-present.  At this point, there is a race\ncondition where it is possible for the hypervisor to return back to\nuserspace from an interrupt, fault on its own iret, and inject a\nfailsafe_callback into the kernel.\n\nThis bug has been present since the introduction of Xen PVOPS support\nin commit 5ead97c84 (xen: Core Xen implementation), in 2.6.23.\n\nSigned-off-by: Frediano Ziglio <frediano.ziglio@citrix.com>\nSigned-off-by: Andrew Cooper <andrew.cooper3@citrix.com>\nCc: stable@vger.kernel.org\nSigned-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>",
  "full_message": "xen: Fix stack corruption in xen_failsafe_callback for 32bit PVOPS guests.\n\nThis fixes CVE-2013-0190 / XSA-40\n\nThere has been an error on the xen_failsafe_callback path for failed\niret, which causes the stack pointer to be wrong when entering the\niret_exc error path.  This can result in the kernel crashing.\n\nIn the classic kernel case, the relevant code looked a little like:\n\n        popl %eax      # Error code from hypervisor\n        jz 5f\n        addl $16,%esp\n        jmp iret_exc   # Hypervisor said iret fault\n5:      addl $16,%esp\n                       # Hypervisor said segment selector fault\n\nHere, there are two identical addls on either option of a branch which\nappears to have been optimised by hoisting it above the jz, and\nconverting it to an lea, which leaves the flags register unaffected.\n\nIn the PVOPS case, the code looks like:\n\n        popl_cfi %eax         # Error from the hypervisor\n        lea 16(%esp),%esp     # Add $16 before choosing fault path\n        CFI_ADJUST_CFA_OFFSET -16\n        jz 5f\n        addl $16,%esp         # Incorrectly adjust %esp again\n        jmp iret_exc\n\nIt is possible unprivileged userspace applications to cause this\nbehaviour, for example by loading an LDT code selector, then changing\nthe code selector to be not-present.  At this point, there is a race\ncondition where it is possible for the hypervisor to return back to\nuserspace from an interrupt, fault on its own iret, and inject a\nfailsafe_callback into the kernel.\n\nThis bug has been present since the introduction of Xen PVOPS support\nin commit 5ead97c84 (xen: Core Xen implementation), in 2.6.23.\n\nSigned-off-by: Frediano Ziglio <frediano.ziglio@citrix.com>\nSigned-off-by: Andrew Cooper <andrew.cooper3@citrix.com>\nCc: stable@vger.kernel.org\nSigned-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>",
  "author_name": "Andrew Cooper",
  "author_email": "andrew.cooper3@citrix.com",
  "author_date": "Wed Jan 16 12:00:55 2013 +0000",
  "author_date_iso": "2013-01-16T12:00:55+00:00",
  "committer_name": "Konrad Rzeszutek Wilk",
  "committer_email": "konrad.wilk@oracle.com",
  "committer_date": "Wed Jan 16 16:17:42 2013 -0500",
  "committer_date_iso": "2013-01-16T16:17:42-05:00",
  "files_changed": [
    "arch/x86/kernel/entry_32.S"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/x86/kernel/entry_32.S",
      "insertions": 0,
      "deletions": 1
    }
  ],
  "total_insertions": 0,
  "total_deletions": 1,
  "total_changes": 1,
  "parents": [
    "d55bf532d72b3cfdfe84e696ace995067324c96c"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v3.10",
    "v3.10-rc1",
    "v3.10-rc2",
    "v3.10-rc3",
    "v3.10-rc4",
    "v3.10-rc5",
    "v3.10-rc6",
    "v3.10-rc7",
    "v3.11",
    "v3.11-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2013-0190"
    ],
    "security_keywords": [
      "inject"
    ]
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "arch/x86/kernel/entry_32.S",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}