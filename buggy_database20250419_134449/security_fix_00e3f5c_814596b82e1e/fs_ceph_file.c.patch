commit 00e3f5cc305c8a056a22cecedab3a71d59dae1fc
Merge: 772950ed21c3 7e01726a6853
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Jan 24 12:34:13 2016 -0800

    Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/sage/ceph-client
    
    Pull Ceph updates from Sage Weil:
     "The two main changes are aio support in CephFS, and a series that
      fixes several issues in the authentication key timeout/renewal code.
    
      On top of that are a variety of cleanups and minor bug fixes"
    
    * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/sage/ceph-client:
      libceph: remove outdated comment
      libceph: kill off ceph_x_ticket_handler::validity
      libceph: invalidate AUTH in addition to a service ticket
      libceph: fix authorizer invalidation, take 2
      libceph: clear messenger auth_retry flag if we fault
      libceph: fix ceph_msg_revoke()
      libceph: use list_for_each_entry_safe
      ceph: use i_size_{read,write} to get/set i_size
      ceph: re-send AIO write request when getting -EOLDSNAP error
      ceph: Asynchronous IO support
      ceph: Avoid to propagate the invalid page point
      ceph: fix double page_unlock() in page_mkwrite()
      rbd: delete an unnecessary check before rbd_dev_destroy()
      libceph: use list_next_entry instead of list_entry_next
      ceph: ceph_frag_contains_value can be boolean
      ceph: remove unused functions in ceph_frag.h

diff --cc fs/ceph/file.c
index 10c5ae79696e,d37efdd8533d..86a9c383955e
--- a/fs/ceph/file.c
+++ b/fs/ceph/file.c
@@@ -1115,9 -1356,9 +1356,9 @@@ retry_snap
  		written = generic_perform_write(file, from, pos);
  		if (likely(written >= 0))
  			iocb->ki_pos = pos + written;
- 		if (inode->i_size > old_size)
+ 		if (i_size_read(inode) > old_size)
  			ceph_fscache_update_objectsize(inode);
 -		mutex_unlock(&inode->i_mutex);
 +		inode_unlock(inode);
  	}
  
  	if (written >= 0) {
@@@ -1160,9 -1401,10 +1401,10 @@@ out_unlocked
  static loff_t ceph_llseek(struct file *file, loff_t offset, int whence)
  {
  	struct inode *inode = file->f_mapping->host;
+ 	loff_t i_size;
  	int ret;
  
 -	mutex_lock(&inode->i_mutex);
 +	inode_lock(inode);
  
  	if (whence == SEEK_END || whence == SEEK_DATA || whence == SEEK_HOLE) {
  		ret = ceph_do_getattr(inode, CEPH_STAT_CAP_SIZE, false);