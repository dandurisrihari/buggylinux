commit 12fb28ea6b1cf24bde27c406eb38ee3c108d73f9
Author: Ben Cheatham <Benjamin.Cheatham@amd.com>
Date:   Mon Mar 11 09:25:06 2024 -0500

    EINJ: Add CXL error type support
    
    Move CXL protocol error types from einj.c (now einj-core.c) to einj-cxl.c.
    einj-cxl.c implements the necessary handling for CXL protocol error
    injection and exposes an API for the CXL core to use said functionality,
    while also allowing the EINJ module to be built without CXL support.
    Because CXL error types targeting CXL 1.0/1.1 ports require special
    handling, only allow them to be injected through the new cxl debugfs
    interface (next commit) and return an error when attempting to inject
    through the legacy interface.
    
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Ben Cheatham <Benjamin.Cheatham@amd.com>
    Link: https://lore.kernel.org/r/20240311142508.31717-3-Benjamin.Cheatham@amd.com
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/acpi/apei/apei-internal.h b/drivers/acpi/apei/apei-internal.h
index 67c2c3b959e1..cd2766c69d78 100644
--- a/drivers/acpi/apei/apei-internal.h
+++ b/drivers/acpi/apei/apei-internal.h
@@ -130,4 +130,22 @@ static inline u32 cper_estatus_len(struct acpi_hest_generic_status *estatus)
 }
 
 int apei_osc_setup(void);
+
+int einj_get_available_error_type(u32 *type);
+int einj_error_inject(u32 type, u32 flags, u64 param1, u64 param2, u64 param3,
+		      u64 param4);
+int einj_cxl_rch_error_inject(u32 type, u32 flags, u64 param1, u64 param2,
+			      u64 param3, u64 param4);
+bool einj_is_cxl_error_type(u64 type);
+int einj_validate_error_type(u64 type);
+
+#ifndef ACPI_EINJ_CXL_CACHE_CORRECTABLE
+#define ACPI_EINJ_CXL_CACHE_CORRECTABLE     BIT(12)
+#define ACPI_EINJ_CXL_CACHE_UNCORRECTABLE   BIT(13)
+#define ACPI_EINJ_CXL_CACHE_FATAL           BIT(14)
+#define ACPI_EINJ_CXL_MEM_CORRECTABLE       BIT(15)
+#define ACPI_EINJ_CXL_MEM_UNCORRECTABLE     BIT(16)
+#define ACPI_EINJ_CXL_MEM_FATAL             BIT(17)
+#endif
+
 #endif