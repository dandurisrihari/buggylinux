{
  "hash": "8ed936b5671bfb33d89bc60bdcc7cf0470ba52fe",
  "hash_short": "8ed936b5",
  "subject": "vfs: Lazily remove mounts on unlinked files and directories.",
  "body": "With the introduction of mount namespaces and bind mounts it became\npossible to access files and directories that on some paths are mount\npoints but are not mount points on other paths.  It is very confusing\nwhen rm -rf somedir returns -EBUSY simply because somedir is mounted\nsomewhere else.  With the addition of user namespaces allowing\nunprivileged mounts this condition has gone from annoying to allowing\na DOS attack on other users in the system.\n\nThe possibility for mischief is removed by updating the vfs to support\nrename, unlink and rmdir on a dentry that is a mountpoint and by\nlazily unmounting mountpoints on deleted dentries.\n\nIn particular this change allows rename, unlink and rmdir system calls\non a dentry without a mountpoint in the current mount namespace to\nsucceed, and it allows rename, unlink, and rmdir performed on a\ndistributed filesystem to update the vfs cache even if when there is a\nmount in some namespace on the original dentry.\n\nThere are two common patterns of maintaining mounts: Mounts on trusted\npaths with the parent directory of the mount point and all ancestory\ndirectories up to / owned by root and modifiable only by root\n(i.e. /media/xxx, /dev, /dev/pts, /proc, /sys, /sys/fs/cgroup/{cpu,\ncpuacct, ...}, /usr, /usr/local).  Mounts on unprivileged directories\nmaintained by fusermount.\n\nIn the case of mounts in trusted directories owned by root and\nmodifiable only by root the current parent directory permissions are\nsufficient to ensure a mount point on a trusted path is not removed\nor renamed by anyone other than root, even if there is a context\nwhere the there are no mount points to prevent this.\n\nIn the case of mounts in directories owned by less privileged users\nraces with users modifying the path of a mount point are already a\ndanger.  fusermount already uses a combination of chdir,\n/proc/<pid>/fd/NNN, and UMOUNT_NOFOLLOW to prevent these races.  The\nremovable of global rename, unlink, and rmdir protection really adds\nnothing new to consider only a widening of the attack window, and\nfusermount is already safe against unprivileged users modifying the\ndirectory simultaneously.\n\nIn principle for perfect userspace programs returning -EBUSY for\nunlink, rmdir, and rename of dentires that have mounts in the local\nnamespace is actually unnecessary.  Unfortunately not all userspace\nprograms are perfect so retaining -EBUSY for unlink, rmdir and rename\nof dentries that have mounts in the current mount namespace plays an\nimportant role of maintaining consistency with historical behavior and\nmaking imperfect userspace applications hard to exploit.\n\nv2: Remove spurious old_dentry.\nv3: Optimized shrink_submounts_and_drop\n    Removed unsued afs label\nv4: Simplified the changes to check_submounts_and_drop\n    Do not rename check_submounts_and_drop shrink_submounts_and_drop\n    Document what why we need atomicity in check_submounts_and_drop\n    Rely on the parent inode mutex to make d_revalidate and d_invalidate\n    an atomic unit.\nv5: Refcount the mountpoint to detach in case of simultaneous\n    renames.\n\nReviewed-by: Miklos Szeredi <miklos@szeredi.hu>\nSigned-off-by: \"Eric W. Biederman\" <ebiederm@xmission.com>\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>",
  "full_message": "vfs: Lazily remove mounts on unlinked files and directories.\n\nWith the introduction of mount namespaces and bind mounts it became\npossible to access files and directories that on some paths are mount\npoints but are not mount points on other paths.  It is very confusing\nwhen rm -rf somedir returns -EBUSY simply because somedir is mounted\nsomewhere else.  With the addition of user namespaces allowing\nunprivileged mounts this condition has gone from annoying to allowing\na DOS attack on other users in the system.\n\nThe possibility for mischief is removed by updating the vfs to support\nrename, unlink and rmdir on a dentry that is a mountpoint and by\nlazily unmounting mountpoints on deleted dentries.\n\nIn particular this change allows rename, unlink and rmdir system calls\non a dentry without a mountpoint in the current mount namespace to\nsucceed, and it allows rename, unlink, and rmdir performed on a\ndistributed filesystem to update the vfs cache even if when there is a\nmount in some namespace on the original dentry.\n\nThere are two common patterns of maintaining mounts: Mounts on trusted\npaths with the parent directory of the mount point and all ancestory\ndirectories up to / owned by root and modifiable only by root\n(i.e. /media/xxx, /dev, /dev/pts, /proc, /sys, /sys/fs/cgroup/{cpu,\ncpuacct, ...}, /usr, /usr/local).  Mounts on unprivileged directories\nmaintained by fusermount.\n\nIn the case of mounts in trusted directories owned by root and\nmodifiable only by root the current parent directory permissions are\nsufficient to ensure a mount point on a trusted path is not removed\nor renamed by anyone other than root, even if there is a context\nwhere the there are no mount points to prevent this.\n\nIn the case of mounts in directories owned by less privileged users\nraces with users modifying the path of a mount point are already a\ndanger.  fusermount already uses a combination of chdir,\n/proc/<pid>/fd/NNN, and UMOUNT_NOFOLLOW to prevent these races.  The\nremovable of global rename, unlink, and rmdir protection really adds\nnothing new to consider only a widening of the attack window, and\nfusermount is already safe against unprivileged users modifying the\ndirectory simultaneously.\n\nIn principle for perfect userspace programs returning -EBUSY for\nunlink, rmdir, and rename of dentires that have mounts in the local\nnamespace is actually unnecessary.  Unfortunately not all userspace\nprograms are perfect so retaining -EBUSY for unlink, rmdir and rename\nof dentries that have mounts in the current mount namespace plays an\nimportant role of maintaining consistency with historical behavior and\nmaking imperfect userspace applications hard to exploit.\n\nv2: Remove spurious old_dentry.\nv3: Optimized shrink_submounts_and_drop\n    Removed unsued afs label\nv4: Simplified the changes to check_submounts_and_drop\n    Do not rename check_submounts_and_drop shrink_submounts_and_drop\n    Document what why we need atomicity in check_submounts_and_drop\n    Rely on the parent inode mutex to make d_revalidate and d_invalidate\n    an atomic unit.\nv5: Refcount the mountpoint to detach in case of simultaneous\n    renames.\n\nReviewed-by: Miklos Szeredi <miklos@szeredi.hu>\nSigned-off-by: \"Eric W. Biederman\" <ebiederm@xmission.com>\nSigned-off-by: Al Viro <viro@zeniv.linux.org.uk>",
  "author_name": "Eric W. Biederman",
  "author_email": "ebiederman@twitter.com",
  "author_date": "Tue Oct 1 18:33:48 2013 -0700",
  "author_date_iso": "2013-10-01T18:33:48-07:00",
  "committer_name": "Al Viro",
  "committer_email": "viro@zeniv.linux.org.uk",
  "committer_date": "Thu Oct 9 02:38:56 2014 -0400",
  "committer_date_iso": "2014-10-09T02:38:56-04:00",
  "files_changed": [
    "fs/dcache.c",
    "fs/namei.c"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "fs/dcache.c",
      "insertions": 33,
      "deletions": 27
    },
    {
      "file": "fs/namei.c",
      "insertions": 6,
      "deletions": 6
    }
  ],
  "total_insertions": 39,
  "total_deletions": 33,
  "total_changes": 72,
  "parents": [
    "80b5dce8c59b0de1ed6e403b8298e02dcb4db64b"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v3.18",
    "v3.18-rc1",
    "v3.18-rc2",
    "v3.18-rc3",
    "v3.18-rc4",
    "v3.18-rc5",
    "v3.18-rc6",
    "v3.18-rc7",
    "v3.19",
    "v3.19-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/dcache.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/namei.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}