{
  "hash": "27ae357fa82be5ab73b2ef8d39dcb8ca2563483a",
  "hash_short": "27ae357f",
  "subject": "mm, oom: fix concurrent munlock and oom reaper unmap, v3",
  "body": "Since exit_mmap() is done without the protection of mm->mmap_sem, it is\npossible for the oom reaper to concurrently operate on an mm until\nMMF_OOM_SKIP is set.\n\nThis allows munlock_vma_pages_all() to concurrently run while the oom\nreaper is operating on a vma.  Since munlock_vma_pages_range() depends\non clearing VM_LOCKED from vm_flags before actually doing the munlock to\ndetermine if any other vmas are locking the same memory, the check for\nVM_LOCKED in the oom reaper is racy.\n\nThis is especially noticeable on architectures such as powerpc where\nclearing a huge pmd requires serialize_against_pte_lookup().  If the pmd\nis zapped by the oom reaper during follow_page_mask() after the check\nfor pmd_none() is bypassed, this ends up deferencing a NULL ptl or a\nkernel oops.\n\nFix this by manually freeing all possible memory from the mm before\ndoing the munlock and then setting MMF_OOM_SKIP.  The oom reaper can not\nrun on the mm anymore so the munlock is safe to do in exit_mmap().  It\nalso matches the logic that the oom reaper currently uses for\ndetermining when to set MMF_OOM_SKIP itself, so there's no new risk of\nexcessive oom killing.\n\nThis issue fixes CVE-2018-1000200.\n\nLink: http://lkml.kernel.org/r/alpine.DEB.2.21.1804241526320.238665@chino.kir.corp.google.com\nFixes: 212925802454 (\"mm: oom: let oom_reap_task and exit_mmap run concurrently\")\nSigned-off-by: David Rientjes <rientjes@google.com>\nSuggested-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>\nAcked-by: Michal Hocko <mhocko@suse.com>\nCc: Andrea Arcangeli <aarcange@redhat.com>\nCc: <stable@vger.kernel.org>\t[4.14+]\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "full_message": "mm, oom: fix concurrent munlock and oom reaper unmap, v3\n\nSince exit_mmap() is done without the protection of mm->mmap_sem, it is\npossible for the oom reaper to concurrently operate on an mm until\nMMF_OOM_SKIP is set.\n\nThis allows munlock_vma_pages_all() to concurrently run while the oom\nreaper is operating on a vma.  Since munlock_vma_pages_range() depends\non clearing VM_LOCKED from vm_flags before actually doing the munlock to\ndetermine if any other vmas are locking the same memory, the check for\nVM_LOCKED in the oom reaper is racy.\n\nThis is especially noticeable on architectures such as powerpc where\nclearing a huge pmd requires serialize_against_pte_lookup().  If the pmd\nis zapped by the oom reaper during follow_page_mask() after the check\nfor pmd_none() is bypassed, this ends up deferencing a NULL ptl or a\nkernel oops.\n\nFix this by manually freeing all possible memory from the mm before\ndoing the munlock and then setting MMF_OOM_SKIP.  The oom reaper can not\nrun on the mm anymore so the munlock is safe to do in exit_mmap().  It\nalso matches the logic that the oom reaper currently uses for\ndetermining when to set MMF_OOM_SKIP itself, so there's no new risk of\nexcessive oom killing.\n\nThis issue fixes CVE-2018-1000200.\n\nLink: http://lkml.kernel.org/r/alpine.DEB.2.21.1804241526320.238665@chino.kir.corp.google.com\nFixes: 212925802454 (\"mm: oom: let oom_reap_task and exit_mmap run concurrently\")\nSigned-off-by: David Rientjes <rientjes@google.com>\nSuggested-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>\nAcked-by: Michal Hocko <mhocko@suse.com>\nCc: Andrea Arcangeli <aarcange@redhat.com>\nCc: <stable@vger.kernel.org>\t[4.14+]\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "author_name": "David Rientjes",
  "author_email": "rientjes@google.com",
  "author_date": "Fri May 11 16:02:04 2018 -0700",
  "author_date_iso": "2018-05-11T16:02:04-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Fri May 11 17:28:45 2018 -0700",
  "committer_date_iso": "2018-05-11T17:28:45-07:00",
  "files_changed": [
    "include/linux/oom.h",
    "mm/mmap.c",
    "mm/oom_kill.c"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "include/linux/oom.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "mm/mmap.c",
      "insertions": 26,
      "deletions": 18
    },
    {
      "file": "mm/oom_kill.c",
      "insertions": 43,
      "deletions": 38
    }
  ],
  "total_insertions": 71,
  "total_deletions": 56,
  "total_changes": 127,
  "parents": [
    "013567be19761e2d14fc2a2676fe7686ac54c9ac"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.17",
    "v4.17-rc5",
    "v4.17-rc6",
    "v4.17-rc7",
    "v4.18",
    "v4.18-rc1",
    "v4.18-rc2",
    "v4.18-rc3",
    "v4.18-rc4",
    "v4.18-rc5"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2018-1000200"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "include/linux/oom.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/mmap.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/oom_kill.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}