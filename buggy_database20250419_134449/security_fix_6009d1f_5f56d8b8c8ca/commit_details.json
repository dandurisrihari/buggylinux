{
  "hash": "6009d1fe6ba3bb2dab55921da60465329cc1cd89",
  "hash_short": "6009d1fe",
  "subject": "isdn: eicon: fix a missing-check bug",
  "body": "In divasmain.c, the function divas_write() firstly invokes the function\ndiva_xdi_open_adapter() to open the adapter that matches with the adapter\nnumber provided by the user, and then invokes the function diva_xdi_write()\nto perform the write operation using the matched adapter. The two functions\ndiva_xdi_open_adapter() and diva_xdi_write() are located in diva.c.\n\nIn diva_xdi_open_adapter(), the user command is copied to the object 'msg'\nfrom the userspace pointer 'src' through the function pointer 'cp_fn',\nwhich eventually calls copy_from_user() to do the copy. Then, the adapter\nnumber 'msg.adapter' is used to find out a matched adapter from the\n'adapter_queue'. A matched adapter will be returned if it is found.\nOtherwise, NULL is returned to indicate the failure of the verification on\nthe adapter number.\n\nAs mentioned above, if a matched adapter is returned, the function\ndiva_xdi_write() is invoked to perform the write operation. In this\nfunction, the user command is copied once again from the userspace pointer\n'src', which is the same as the 'src' pointer in diva_xdi_open_adapter() as\nboth of them are from the 'buf' pointer in divas_write(). Similarly, the\ncopy is achieved through the function pointer 'cp_fn', which finally calls\ncopy_from_user(). After the successful copy, the corresponding command\nprocessing handler of the matched adapter is invoked to perform the write\noperation.\n\nIt is obvious that there are two copies here from userspace, one is in\ndiva_xdi_open_adapter(), and one is in diva_xdi_write(). Plus, both of\nthese two copies share the same source userspace pointer, i.e., the 'buf'\npointer in divas_write(). Given that a malicious userspace process can race\nto change the content pointed by the 'buf' pointer, this can pose potential\nsecurity issues. For example, in the first copy, the user provides a valid\nadapter number to pass the verification process and a valid adapter can be\nfound. Then the user can modify the adapter number to an invalid number.\nThis way, the user can bypass the verification process of the adapter\nnumber and inject inconsistent data.\n\nThis patch reuses the data copied in\ndiva_xdi_open_adapter() and passes it to diva_xdi_write(). This way, the\nabove issues can be avoided.\n\nSigned-off-by: Wenwen Wang <wang6495@umn.edu>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "full_message": "isdn: eicon: fix a missing-check bug\n\nIn divasmain.c, the function divas_write() firstly invokes the function\ndiva_xdi_open_adapter() to open the adapter that matches with the adapter\nnumber provided by the user, and then invokes the function diva_xdi_write()\nto perform the write operation using the matched adapter. The two functions\ndiva_xdi_open_adapter() and diva_xdi_write() are located in diva.c.\n\nIn diva_xdi_open_adapter(), the user command is copied to the object 'msg'\nfrom the userspace pointer 'src' through the function pointer 'cp_fn',\nwhich eventually calls copy_from_user() to do the copy. Then, the adapter\nnumber 'msg.adapter' is used to find out a matched adapter from the\n'adapter_queue'. A matched adapter will be returned if it is found.\nOtherwise, NULL is returned to indicate the failure of the verification on\nthe adapter number.\n\nAs mentioned above, if a matched adapter is returned, the function\ndiva_xdi_write() is invoked to perform the write operation. In this\nfunction, the user command is copied once again from the userspace pointer\n'src', which is the same as the 'src' pointer in diva_xdi_open_adapter() as\nboth of them are from the 'buf' pointer in divas_write(). Similarly, the\ncopy is achieved through the function pointer 'cp_fn', which finally calls\ncopy_from_user(). After the successful copy, the corresponding command\nprocessing handler of the matched adapter is invoked to perform the write\noperation.\n\nIt is obvious that there are two copies here from userspace, one is in\ndiva_xdi_open_adapter(), and one is in diva_xdi_write(). Plus, both of\nthese two copies share the same source userspace pointer, i.e., the 'buf'\npointer in divas_write(). Given that a malicious userspace process can race\nto change the content pointed by the 'buf' pointer, this can pose potential\nsecurity issues. For example, in the first copy, the user provides a valid\nadapter number to pass the verification process and a valid adapter can be\nfound. Then the user can modify the adapter number to an invalid number.\nThis way, the user can bypass the verification process of the adapter\nnumber and inject inconsistent data.\n\nThis patch reuses the data copied in\ndiva_xdi_open_adapter() and passes it to diva_xdi_write(). This way, the\nabove issues can be avoided.\n\nSigned-off-by: Wenwen Wang <wang6495@umn.edu>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "author_name": "Wenwen Wang",
  "author_email": "wang6495@umn.edu",
  "author_date": "Mon May 21 01:58:07 2018 -0500",
  "author_date_iso": "2018-05-21T01:58:07-05:00",
  "committer_name": "David S. Miller",
  "committer_email": "davem@davemloft.net",
  "committer_date": "Tue May 22 13:48:34 2018 -0400",
  "committer_date_iso": "2018-05-22T13:48:34-04:00",
  "files_changed": [
    "drivers/isdn/hardware/eicon/diva.c",
    "drivers/isdn/hardware/eicon/diva.h",
    "drivers/isdn/hardware/eicon/divasmain.c"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "drivers/isdn/hardware/eicon/diva.c",
      "insertions": 15,
      "deletions": 7
    },
    {
      "file": "drivers/isdn/hardware/eicon/diva.h",
      "insertions": 3,
      "deletions": 2
    },
    {
      "file": "drivers/isdn/hardware/eicon/divasmain.c",
      "insertions": 11,
      "deletions": 7
    }
  ],
  "total_insertions": 29,
  "total_deletions": 16,
  "total_changes": 45,
  "parents": [
    "1f508124e987fac97ac1765e3fbb83da36f47107"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.17",
    "v4.17-rc7",
    "v4.18",
    "v4.18-rc1",
    "v4.18-rc2",
    "v4.18-rc3",
    "v4.18-rc4",
    "v4.18-rc5",
    "v4.18-rc6",
    "v4.18-rc7"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "inject",
      "bypass"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/isdn/hardware/eicon/diva.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/isdn/hardware/eicon/diva.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/isdn/hardware/eicon/divasmain.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}