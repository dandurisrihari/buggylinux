commit 946e7fd5053a218d3907268cd85c9a519561d5d8
Author: Steen Hegelund <steen.hegelund@microchip.com>
Date:   Thu Jun 24 09:07:52 2021 +0200

    net: sparx5: add port module support
    
    This add configuration of the Sparx5 port module instances.
    
    Sparx5 has in total 65 logical ports (denoted D0 to D64) and 33
    physical SerDes connections (S0 to S32).  The 65th port (D64) is fixed
    allocated to SerDes0 (S0). The remaining 64 ports can in various
    multiplexing scenarios be connected to the remaining 32 SerDes using
    QSGMII, or USGMII or USXGMII extenders. 32 of the ports can have a 1:1
    mapping to the 32 SerDes.
    
    Some additional ports (D65 to D69) are internal to the device and do not
    connect to port modules or SerDes macros. For example, internal ports are
    used for frame injection and extraction to the CPU queues.
    
    The 65 logical ports are split up into the following blocks.
    
    - 13 x 5G ports (D0-D11, D64)
    - 32 x 2G5 ports (D16-D47)
    - 12 x 10G ports (D12-D15, D48-D55)
    - 8 x 25G ports (D56-D63)
    
    Each logical port supports different line speeds, and depending on the
    speeds supported, different port modules (MAC+PCS) are needed. A port
    supporting 5 Gbps, 10 Gbps, or 25 Gbps as maximum line speed, will have a
    DEV5G, DEV10G, or DEV25G module to support the 5 Gbps, 10 Gbps (incl 5
    Gbps), or 25 Gbps (including 10 Gbps and 5 Gbps) speeds. As well as, it
    will have a shadow DEV2G5 port module to support the lower speeds
    (10/100/1000/2500Mbps). When a port needs to operate at lower speed and the
    shadow DEV2G5 needs to be connected to its corresponding SerDes
    
    Not all interface modes are supported in this series, but will be added at
    a later stage.
    
    Signed-off-by: Steen Hegelund <steen.hegelund@microchip.com>
    Signed-off-by: Bjarni Jonasson <bjarni.jonasson@microchip.com>
    Signed-off-by: Lars Povlsen <lars.povlsen@microchip.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/microchip/sparx5/sparx5_netdev.c b/drivers/net/ethernet/microchip/sparx5/sparx5_netdev.c
index b6df6e8b80d5..4c2280345ecc 100644
--- a/drivers/net/ethernet/microchip/sparx5/sparx5_netdev.c
+++ b/drivers/net/ethernet/microchip/sparx5/sparx5_netdev.c
@@ -6,6 +6,7 @@
 
 #include "sparx5_main_regs.h"
 #include "sparx5_main.h"
+#include "sparx5_port.h"
 
 /* The IFH bit position of the first VSTAX bit. This is because the
  * VSTAX bit positions in Data sheet is starting from zero.
@@ -71,6 +72,7 @@ static int sparx5_port_open(struct net_device *ndev)
 	struct sparx5_port *port = netdev_priv(ndev);
 	int err = 0;
 
+	sparx5_port_enable(port, true);
 	err = phylink_of_phy_connect(port->phylink, port->of_node, 0);
 	if (err) {
 		netdev_err(ndev, "Could not attach to PHY\n");
@@ -82,7 +84,10 @@ static int sparx5_port_open(struct net_device *ndev)
 	if (!ndev->phydev) {
 		/* power up serdes */
 		port->conf.power_down = false;
-		err = phy_power_on(port->serdes);
+		if (port->conf.serdes_reset)
+			err = sparx5_serdes_set(port->sparx5, port, &port->conf);
+		else
+			err = phy_power_on(port->serdes);
 		if (err)
 			netdev_err(ndev, "%s failed\n", __func__);
 	}
@@ -95,12 +100,17 @@ static int sparx5_port_stop(struct net_device *ndev)
 	struct sparx5_port *port = netdev_priv(ndev);
 	int err = 0;
 
+	sparx5_port_enable(port, false);
 	phylink_stop(port->phylink);
 	phylink_disconnect_phy(port->phylink);
 
 	if (!ndev->phydev) {
+		/* power down serdes */
 		port->conf.power_down = true;
-		err = phy_power_off(port->serdes);
+		if (port->conf.serdes_reset)
+			err = sparx5_serdes_set(port->sparx5, port, &port->conf);
+		else
+			err = phy_power_off(port->serdes);
 		if (err)
 			netdev_err(ndev, "%s failed\n", __func__);
 	}