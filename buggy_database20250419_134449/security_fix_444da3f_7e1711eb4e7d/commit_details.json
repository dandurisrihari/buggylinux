{
  "hash": "444da3f52407d74c9aa12187ac6b01f76ee47d62",
  "hash_short": "444da3f5",
  "subject": "bitfield.h: don't compile-time validate _val in FIELD_FIT",
  "body": "When ur_load_imm_any() is inlined into jeq_imm(), it's possible for the\ncompiler to deduce a case where _val can only have the value of -1 at\ncompile time. Specifically,\n\n/* struct bpf_insn: _s32 imm */\nu64 imm = insn->imm; /* sign extend */\nif (imm >> 32) { /* non-zero only if insn->imm is negative */\n  /* inlined from ur_load_imm_any */\n  u32 __imm = imm >> 32; /* therefore, always 0xffffffff */\n  if (__builtin_constant_p(__imm) && __imm > 255)\n    compiletime_assert_XXX()\n\nThis can result in tripping a BUILD_BUG_ON() in __BF_FIELD_CHECK() that\nchecks that a given value is representable in one byte (interpreted as\nunsigned).\n\nFIELD_FIT() should return true or false at runtime for whether a value\ncan fit for not. Don't break the build over a value that's too large for\nthe mask. We'd prefer to keep the inlining and compiler optimizations\nthough we know this case will always return false.\n\nCc: stable@vger.kernel.org\nFixes: 1697599ee301a (\"bitfield.h: add FIELD_FIT() helper\")\nLink: https://lore.kernel.org/kernel-hardening/CAK7LNASvb0UDJ0U5wkYYRzTAdnEs64HjXpEUL7d=V0CXiAXcNw@mail.gmail.com/\nReported-by: Masahiro Yamada <masahiroy@kernel.org>\nDebugged-by: Sami Tolvanen <samitolvanen@google.com>\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\nSigned-off-by: Nick Desaulniers <ndesaulniers@google.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "full_message": "bitfield.h: don't compile-time validate _val in FIELD_FIT\n\nWhen ur_load_imm_any() is inlined into jeq_imm(), it's possible for the\ncompiler to deduce a case where _val can only have the value of -1 at\ncompile time. Specifically,\n\n/* struct bpf_insn: _s32 imm */\nu64 imm = insn->imm; /* sign extend */\nif (imm >> 32) { /* non-zero only if insn->imm is negative */\n  /* inlined from ur_load_imm_any */\n  u32 __imm = imm >> 32; /* therefore, always 0xffffffff */\n  if (__builtin_constant_p(__imm) && __imm > 255)\n    compiletime_assert_XXX()\n\nThis can result in tripping a BUILD_BUG_ON() in __BF_FIELD_CHECK() that\nchecks that a given value is representable in one byte (interpreted as\nunsigned).\n\nFIELD_FIT() should return true or false at runtime for whether a value\ncan fit for not. Don't break the build over a value that's too large for\nthe mask. We'd prefer to keep the inlining and compiler optimizations\nthough we know this case will always return false.\n\nCc: stable@vger.kernel.org\nFixes: 1697599ee301a (\"bitfield.h: add FIELD_FIT() helper\")\nLink: https://lore.kernel.org/kernel-hardening/CAK7LNASvb0UDJ0U5wkYYRzTAdnEs64HjXpEUL7d=V0CXiAXcNw@mail.gmail.com/\nReported-by: Masahiro Yamada <masahiroy@kernel.org>\nDebugged-by: Sami Tolvanen <samitolvanen@google.com>\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\nSigned-off-by: Nick Desaulniers <ndesaulniers@google.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "author_name": "Jakub Kicinski",
  "author_email": "kuba@kernel.org",
  "author_date": "Mon Aug 10 11:21:11 2020 -0700",
  "author_date_iso": "2020-08-10T11:21:11-07:00",
  "committer_name": "David S. Miller",
  "committer_email": "davem@davemloft.net",
  "committer_date": "Mon Aug 10 12:16:51 2020 -0700",
  "committer_date_iso": "2020-08-10T12:16:51-07:00",
  "files_changed": [
    "include/linux/bitfield.h"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "include/linux/bitfield.h",
      "insertions": 1,
      "deletions": 1
    }
  ],
  "total_insertions": 1,
  "total_deletions": 1,
  "total_changes": 2,
  "parents": [
    "f19008e676366c44e9241af57f331b6c6edf9552"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/linux/bitfield.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}