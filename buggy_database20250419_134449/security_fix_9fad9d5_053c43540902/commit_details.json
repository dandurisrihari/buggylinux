{
  "hash": "9fad9d560af5c654bb38e0b07ee54a4e9acdc5cd",
  "hash_short": "9fad9d56",
  "subject": "scsi: sr: Fix unintentional arithmetic wraparound",
  "body": "Running syzkaller with the newly reintroduced signed integer overflow\nsanitizer produces this report:\n\n[   65.194362] ------------[ cut here ]------------\n[   65.197752] UBSAN: signed-integer-overflow in ../drivers/scsi/sr_ioctl.c:436:9\n[   65.203607] -2147483648 * 177 cannot be represented in type 'int'\n[   65.207911] CPU: 2 PID: 10416 Comm: syz-executor.1 Not tainted 6.8.0-rc2-00035-gb3ef86b5a957 #1\n[   65.213585] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.16.3-debian-1.16.3-2 04/01/2014\n[   65.219923] Call Trace:\n[   65.221556]  <TASK>\n[   65.223029]  dump_stack_lvl+0x93/0xd0\n[   65.225573]  handle_overflow+0x171/0x1b0\n[   65.228219]  sr_select_speed+0xeb/0xf0\n[   65.230786]  ? __pm_runtime_resume+0xe6/0x130\n[   65.233606]  sr_block_ioctl+0x15d/0x1d0\n...\n\nHistorically, the signed integer overflow sanitizer did not work in the\nkernel due to its interaction with `-fwrapv` but this has since been\nchanged [1] in the newest version of Clang. It was re-enabled in the kernel\nwith Commit 557f8c582a9b (\"ubsan: Reintroduce signed overflow sanitizer\").\n\nFirstly, let's change the type of \"speed\" to unsigned long as\nsr_select_speed()'s only caller passes in an unsigned long anyways.\n\n$ git grep '\\.select_speed'\n|\tdrivers/scsi/sr.c:      .select_speed           = sr_select_speed,\n...\n|\tstatic int cdrom_ioctl_select_speed(struct cdrom_device_info *cdi,\n|\t                unsigned long arg)\n|\t{\n|\t        ...\n|\t        return cdi->ops->select_speed(cdi, arg);\n|\t}\n\nNext, let's add an extra check to make sure we don't exceed 0xffff/177\n(350) since 0xffff is the max speed. This has two benefits: 1) we deal\nwith integer overflow before it happens and 2) we properly respect the\nmax speed of 0xffff. There are some \"magic\" numbers here but I did not\nwant to change more than what was necessary.\n\nLink: https://github.com/llvm/llvm-project/pull/82432 [1]\nCloses: https://github.com/KSPP/linux/issues/357\nCc: linux-hardening@vger.kernel.org\nSigned-off-by: Justin Stitt <justinstitt@google.com>\nLink: https://lore.kernel.org/r/20240508-b4-b4-sio-sr_select_speed-v2-1-00b68f724290@google.com\nReviewed-by: Kees Cook <keescook@chromium.org>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
  "full_message": "scsi: sr: Fix unintentional arithmetic wraparound\n\nRunning syzkaller with the newly reintroduced signed integer overflow\nsanitizer produces this report:\n\n[   65.194362] ------------[ cut here ]------------\n[   65.197752] UBSAN: signed-integer-overflow in ../drivers/scsi/sr_ioctl.c:436:9\n[   65.203607] -2147483648 * 177 cannot be represented in type 'int'\n[   65.207911] CPU: 2 PID: 10416 Comm: syz-executor.1 Not tainted 6.8.0-rc2-00035-gb3ef86b5a957 #1\n[   65.213585] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.16.3-debian-1.16.3-2 04/01/2014\n[   65.219923] Call Trace:\n[   65.221556]  <TASK>\n[   65.223029]  dump_stack_lvl+0x93/0xd0\n[   65.225573]  handle_overflow+0x171/0x1b0\n[   65.228219]  sr_select_speed+0xeb/0xf0\n[   65.230786]  ? __pm_runtime_resume+0xe6/0x130\n[   65.233606]  sr_block_ioctl+0x15d/0x1d0\n...\n\nHistorically, the signed integer overflow sanitizer did not work in the\nkernel due to its interaction with `-fwrapv` but this has since been\nchanged [1] in the newest version of Clang. It was re-enabled in the kernel\nwith Commit 557f8c582a9b (\"ubsan: Reintroduce signed overflow sanitizer\").\n\nFirstly, let's change the type of \"speed\" to unsigned long as\nsr_select_speed()'s only caller passes in an unsigned long anyways.\n\n$ git grep '\\.select_speed'\n|\tdrivers/scsi/sr.c:      .select_speed           = sr_select_speed,\n...\n|\tstatic int cdrom_ioctl_select_speed(struct cdrom_device_info *cdi,\n|\t                unsigned long arg)\n|\t{\n|\t        ...\n|\t        return cdi->ops->select_speed(cdi, arg);\n|\t}\n\nNext, let's add an extra check to make sure we don't exceed 0xffff/177\n(350) since 0xffff is the max speed. This has two benefits: 1) we deal\nwith integer overflow before it happens and 2) we properly respect the\nmax speed of 0xffff. There are some \"magic\" numbers here but I did not\nwant to change more than what was necessary.\n\nLink: https://github.com/llvm/llvm-project/pull/82432 [1]\nCloses: https://github.com/KSPP/linux/issues/357\nCc: linux-hardening@vger.kernel.org\nSigned-off-by: Justin Stitt <justinstitt@google.com>\nLink: https://lore.kernel.org/r/20240508-b4-b4-sio-sr_select_speed-v2-1-00b68f724290@google.com\nReviewed-by: Kees Cook <keescook@chromium.org>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
  "author_name": "Justin Stitt",
  "author_email": "justinstitt@google.com",
  "author_date": "Wed May 8 17:22:51 2024 +0000",
  "author_date_iso": "2024-05-08T17:22:51+00:00",
  "committer_name": "Martin K. Petersen",
  "committer_email": "martin.petersen@oracle.com",
  "committer_date": "Wed May 15 10:05:24 2024 -0400",
  "committer_date_iso": "2024-05-15T10:05:24-04:00",
  "files_changed": [
    "Documentation/cdrom/cdrom-standard.rst",
    "drivers/scsi/sr.h",
    "drivers/scsi/sr_ioctl.c",
    "include/linux/cdrom.h"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "Documentation/cdrom/cdrom-standard.rst",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "drivers/scsi/sr.h",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "drivers/scsi/sr_ioctl.c",
      "insertions": 4,
      "deletions": 1
    },
    {
      "file": "include/linux/cdrom.h",
      "insertions": 1,
      "deletions": 1
    }
  ],
  "total_insertions": 8,
  "total_deletions": 5,
  "total_changes": 13,
  "parents": [
    "10157b1fc1a762293381e9145041253420dfc6ad"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "Documentation/cdrom/cdrom-standard.rst",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/scsi/sr.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/scsi/sr_ioctl.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/cdrom.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}