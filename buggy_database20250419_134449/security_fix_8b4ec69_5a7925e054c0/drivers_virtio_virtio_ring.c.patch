commit 8b4ec69d7e098a7ddf832e1e7840de53ed474c77
Author: Jason Wang <jasowang@redhat.com>
Date:   Fri May 27 14:01:19 2022 +0800

    virtio: harden vring IRQ
    
    This is a rework on the previous IRQ hardening that is done for
    virtio-pci where several drawbacks were found and were reverted:
    
    1) try to use IRQF_NO_AUTOEN which is not friendly to affinity managed IRQ
       that is used by some device such as virtio-blk
    2) done only for PCI transport
    
    The vq->broken is re-used in this patch for implementing the IRQ
    hardening. The vq->broken is set to true during both initialization
    and reset. And the vq->broken is set to false in
    virtio_device_ready(). Then vring_interrupt() can check and return
    when vq->broken is true. And in this case, switch to return IRQ_NONE
    to let the interrupt core aware of such invalid interrupt to prevent
    IRQ storm.
    
    The reason of using a per queue variable instead of a per device one
    is that we may need it for per queue reset hardening in the future.
    
    Note that the hardening is only done for vring interrupt since the
    config interrupt hardening is already done in commit 22b7050a024d7
    ("virtio: defer config changed notifications"). But the method that is
    used by config interrupt can't be reused by the vring interrupt
    handler because it uses spinlock to do the synchronization which is
    expensive.
    
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: "Paul E. McKenney" <paulmck@kernel.org>
    Cc: Marc Zyngier <maz@kernel.org>
    Cc: Halil Pasic <pasic@linux.ibm.com>
    Cc: Cornelia Huck <cohuck@redhat.com>
    Cc: Vineeth Vijayan <vneethv@linux.ibm.com>
    Cc: Peter Oberparleiter <oberpar@linux.ibm.com>
    Cc: linux-s390@vger.kernel.org
    Signed-off-by: Jason Wang <jasowang@redhat.com>
    Message-Id: <20220527060120.20964-9-jasowang@redhat.com>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reviewed-by: Xuan Zhuo <xuanzhuo@linux.alibaba.com>

diff --git a/drivers/virtio/virtio_ring.c b/drivers/virtio/virtio_ring.c
index 9c231e1fded7..13a7348cedff 100644
--- a/drivers/virtio/virtio_ring.c
+++ b/drivers/virtio/virtio_ring.c
@@ -1688,7 +1688,7 @@ static struct virtqueue *vring_create_virtqueue_packed(
 	vq->we_own_ring = true;
 	vq->notify = notify;
 	vq->weak_barriers = weak_barriers;
-	vq->broken = false;
+	vq->broken = true;
 	vq->last_used_idx = 0;
 	vq->event_triggered = false;
 	vq->num_added = 0;
@@ -2134,8 +2134,11 @@ irqreturn_t vring_interrupt(int irq, void *_vq)
 		return IRQ_NONE;
 	}
 
-	if (unlikely(vq->broken))
-		return IRQ_HANDLED;
+	if (unlikely(vq->broken)) {
+		dev_warn_once(&vq->vq.vdev->dev,
+			      "virtio vring IRQ raised before DRIVER_OK");
+		return IRQ_NONE;
+	}
 
 	/* Just a hint for performance: so it's ok that this can be racy! */
 	if (vq->event)
@@ -2177,7 +2180,7 @@ struct virtqueue *__vring_new_virtqueue(unsigned int index,
 	vq->we_own_ring = false;
 	vq->notify = notify;
 	vq->weak_barriers = weak_barriers;
-	vq->broken = false;
+	vq->broken = true;
 	vq->last_used_idx = 0;
 	vq->event_triggered = false;
 	vq->num_added = 0;