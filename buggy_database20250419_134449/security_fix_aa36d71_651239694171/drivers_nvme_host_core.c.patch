commit aa36d711e945e65fa87410927800f01878a8faed
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Sun Nov 13 13:24:20 2022 +0200

    nvme-auth: convert dhchap_auth_list to an array
    
    We know exactly how many dhchap contexts we will need, there is no need
    to hold a list that we need to protect with a mutex. Convert to
    a dynamically allocated array. And dhchap_context access state is
    maintained by the chap itself.
    
    Make dhchap_auth_mutex protect only the ctrl host_key and ctrl_key
    in a fine-grained lock such that there is no long lasting acquisition
    of the lock and no need to take/release this lock when flushing
    authentication works.
    
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Christoph Hellwig <hch@lst.de>

diff --git a/drivers/nvme/host/core.c b/drivers/nvme/host/core.c
index 2944d9b565a2..bc0eede419cb 100644
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@ -3785,7 +3785,9 @@ static ssize_t nvme_ctrl_dhchap_secret_store(struct device *dev,
 		kfree(opts->dhchap_secret);
 		opts->dhchap_secret = dhchap_secret;
 		host_key = ctrl->host_key;
+		mutex_lock(&ctrl->dhchap_auth_mutex);
 		ctrl->host_key = key;
+		mutex_unlock(&ctrl->dhchap_auth_mutex);
 		nvme_auth_free_key(host_key);
 	}
 	/* Start re-authentication */
@@ -3837,7 +3839,9 @@ static ssize_t nvme_ctrl_dhchap_ctrl_secret_store(struct device *dev,
 		kfree(opts->dhchap_ctrl_secret);
 		opts->dhchap_ctrl_secret = dhchap_secret;
 		ctrl_key = ctrl->ctrl_key;
+		mutex_lock(&ctrl->dhchap_auth_mutex);
 		ctrl->ctrl_key = key;
+		mutex_unlock(&ctrl->dhchap_auth_mutex);
 		nvme_auth_free_key(ctrl_key);
 	}
 	/* Start re-authentication */