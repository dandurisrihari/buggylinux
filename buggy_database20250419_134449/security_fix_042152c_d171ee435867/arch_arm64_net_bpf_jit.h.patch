commit 042152c27c3bc3e20882f75c289ced32331f4010
Author: Xu Kuohai <xukuohai@huawei.com>
Date:   Sat Apr 2 03:39:42 2022 -0400

    bpf, arm64: Sign return address for JITed code
    
    Sign return address for JITed code when the kernel is built with pointer
    authentication enabled:
    
    1. Sign LR with paciasp instruction before LR is pushed to stack. Since
       paciasp acts like landing pads for function entry, no need to insert
       bti instruction before paciasp.
    
    2. Authenticate LR with autiasp instruction after LR is popped from stack.
    
    For BPF tail call, the stack frame constructed by the caller is reused by
    the callee. That is, the stack frame is constructed by the caller and
    destructed by the callee. Thus LR is signed and pushed to the stack in the
    caller's prologue, and poped from the stack and authenticated in the
    callee's epilogue.
    
    For BPF2BPF call, the caller and callee construct their own stack frames,
    and sign and authenticate their own LRs.
    
    Signed-off-by: Xu Kuohai <xukuohai@huawei.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Link: https://events.static.linuxfound.org/sites/events/files/slides/slides_23.pdf
    Link: https://lore.kernel.org/bpf/20220402073942.3782529-1-xukuohai@huawei.com

diff --git a/arch/arm64/net/bpf_jit.h b/arch/arm64/net/bpf_jit.h
index 3920213244f0..194c95ccc1cf 100644
--- a/arch/arm64/net/bpf_jit.h
+++ b/arch/arm64/net/bpf_jit.h
@@ -263,6 +263,9 @@
 /* HINTs */
 #define A64_HINT(x) aarch64_insn_gen_hint(x)
 
+#define A64_PACIASP A64_HINT(AARCH64_INSN_HINT_PACIASP)
+#define A64_AUTIASP A64_HINT(AARCH64_INSN_HINT_AUTIASP)
+
 /* BTI */
 #define A64_BTI_C  A64_HINT(AARCH64_INSN_HINT_BTIC)
 #define A64_BTI_J  A64_HINT(AARCH64_INSN_HINT_BTIJ)