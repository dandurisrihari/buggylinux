{
  "hash": "89e3af0277388f32d56915a6715c735e4afae5d6",
  "hash_short": "89e3af02",
  "subject": "net: microchip: sparx5: Fix possible memory leak in vcap_api_encode_rule_test()",
  "body": "Inject fault while probing kunit-example-test.ko, the duprule which\nis allocated in vcap_dup_rule() and the vcap enabled port which\nis allocated in vcap_enable() of vcap_enable_lookups in\nvcap_api_encode_rule_test() is not freed, and it cause the memory\nleaks below.\n\nUse vcap_enable_lookups() with false arg to free the vcap enabled\nport as other drivers do it. And use vcap_del_rule() to\nfree the duprule.\n\nunreferenced object 0xffff677a0278bb00 (size 64):\n  comm \"kunit_try_catch\", pid 388, jiffies 4294895987 (age 1101.840s)\n  hex dump (first 32 bytes):\n    18 bd a5 82 00 80 ff ff 18 bd a5 82 00 80 ff ff  ................\n    40 fe c8 0e be c6 ff ff 00 00 00 00 00 00 00 00  @...............\n  backtrace:\n    [<000000007d53023a>] slab_post_alloc_hook+0xb8/0x368\n    [<0000000076e3f654>] __kmem_cache_alloc_node+0x174/0x290\n    [<0000000034d76721>] kmalloc_trace+0x40/0x164\n    [<00000000013380a5>] vcap_enable_lookups+0x1c8/0x70c\n    [<00000000bbec496b>] vcap_api_encode_rule_test+0x2f8/0xb18\n    [<000000002c2bfb7b>] kunit_try_run_case+0x50/0xac\n    [<00000000ff74642b>] kunit_generic_run_threadfn_adapter+0x20/0x2c\n    [<000000004af845ca>] kthread+0x124/0x130\n    [<0000000038a000ca>] ret_from_fork+0x10/0x20\nunreferenced object 0xffff677a027803c0 (size 192):\n  comm \"kunit_try_catch\", pid 388, jiffies 4294895988 (age 1101.836s)\n  hex dump (first 32 bytes):\n    00 12 7a 00 05 00 00 00 0a 00 00 00 64 00 00 00  ..z.........d...\n    00 00 00 00 00 00 00 00 d8 03 78 02 7a 67 ff ff  ..........x.zg..\n  backtrace:\n    [<000000007d53023a>] slab_post_alloc_hook+0xb8/0x368\n    [<0000000076e3f654>] __kmem_cache_alloc_node+0x174/0x290\n    [<0000000034d76721>] kmalloc_trace+0x40/0x164\n    [<00000000c1010131>] vcap_dup_rule+0x34/0x14c\n    [<00000000d43c54a4>] vcap_add_rule+0x29c/0x32c\n    [<0000000073f1c26d>] vcap_api_encode_rule_test+0x304/0xb18\n    [<000000002c2bfb7b>] kunit_try_run_case+0x50/0xac\n    [<00000000ff74642b>] kunit_generic_run_threadfn_adapter+0x20/0x2c\n    [<000000004af845ca>] kthread+0x124/0x130\n    [<0000000038a000ca>] ret_from_fork+0x10/0x20\n\nFixes: c956b9b318d9 (\"net: microchip: sparx5: Adding KUNIT tests of key/action values in VCAP API\")\nSigned-off-by: Jinjie Ruan <ruanjinjie@huawei.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "full_message": "net: microchip: sparx5: Fix possible memory leak in vcap_api_encode_rule_test()\n\nInject fault while probing kunit-example-test.ko, the duprule which\nis allocated in vcap_dup_rule() and the vcap enabled port which\nis allocated in vcap_enable() of vcap_enable_lookups in\nvcap_api_encode_rule_test() is not freed, and it cause the memory\nleaks below.\n\nUse vcap_enable_lookups() with false arg to free the vcap enabled\nport as other drivers do it. And use vcap_del_rule() to\nfree the duprule.\n\nunreferenced object 0xffff677a0278bb00 (size 64):\n  comm \"kunit_try_catch\", pid 388, jiffies 4294895987 (age 1101.840s)\n  hex dump (first 32 bytes):\n    18 bd a5 82 00 80 ff ff 18 bd a5 82 00 80 ff ff  ................\n    40 fe c8 0e be c6 ff ff 00 00 00 00 00 00 00 00  @...............\n  backtrace:\n    [<000000007d53023a>] slab_post_alloc_hook+0xb8/0x368\n    [<0000000076e3f654>] __kmem_cache_alloc_node+0x174/0x290\n    [<0000000034d76721>] kmalloc_trace+0x40/0x164\n    [<00000000013380a5>] vcap_enable_lookups+0x1c8/0x70c\n    [<00000000bbec496b>] vcap_api_encode_rule_test+0x2f8/0xb18\n    [<000000002c2bfb7b>] kunit_try_run_case+0x50/0xac\n    [<00000000ff74642b>] kunit_generic_run_threadfn_adapter+0x20/0x2c\n    [<000000004af845ca>] kthread+0x124/0x130\n    [<0000000038a000ca>] ret_from_fork+0x10/0x20\nunreferenced object 0xffff677a027803c0 (size 192):\n  comm \"kunit_try_catch\", pid 388, jiffies 4294895988 (age 1101.836s)\n  hex dump (first 32 bytes):\n    00 12 7a 00 05 00 00 00 0a 00 00 00 64 00 00 00  ..z.........d...\n    00 00 00 00 00 00 00 00 d8 03 78 02 7a 67 ff ff  ..........x.zg..\n  backtrace:\n    [<000000007d53023a>] slab_post_alloc_hook+0xb8/0x368\n    [<0000000076e3f654>] __kmem_cache_alloc_node+0x174/0x290\n    [<0000000034d76721>] kmalloc_trace+0x40/0x164\n    [<00000000c1010131>] vcap_dup_rule+0x34/0x14c\n    [<00000000d43c54a4>] vcap_add_rule+0x29c/0x32c\n    [<0000000073f1c26d>] vcap_api_encode_rule_test+0x304/0xb18\n    [<000000002c2bfb7b>] kunit_try_run_case+0x50/0xac\n    [<00000000ff74642b>] kunit_generic_run_threadfn_adapter+0x20/0x2c\n    [<000000004af845ca>] kthread+0x124/0x130\n    [<0000000038a000ca>] ret_from_fork+0x10/0x20\n\nFixes: c956b9b318d9 (\"net: microchip: sparx5: Adding KUNIT tests of key/action values in VCAP API\")\nSigned-off-by: Jinjie Ruan <ruanjinjie@huawei.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "author_name": "Jinjie Ruan",
  "author_email": "ruanjinjie@huawei.com",
  "author_date": "Tue Sep 12 19:03:08 2023 +0800",
  "author_date_iso": "2023-09-12T19:03:08+08:00",
  "committer_name": "David S. Miller",
  "committer_email": "davem@davemloft.net",
  "committer_date": "Fri Sep 15 07:32:35 2023 +0100",
  "committer_date_iso": "2023-09-15T07:32:35+01:00",
  "files_changed": [
    "drivers/net/ethernet/microchip/vcap/vcap_api_kunit.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "drivers/net/ethernet/microchip/vcap/vcap_api_kunit.c",
      "insertions": 6,
      "deletions": 0
    }
  ],
  "total_insertions": 6,
  "total_deletions": 0,
  "total_changes": 6,
  "parents": [
    "39d0ccc185315408e7cecfcaf06d167927b51052"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "Inject"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/net/ethernet/microchip/vcap/vcap_api_kunit.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}