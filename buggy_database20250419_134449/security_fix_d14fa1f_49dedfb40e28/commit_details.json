{
  "hash": "d14fa1fcf69db9d070e75f1c4425211fa619dfc8",
  "hash_short": "d14fa1fc",
  "subject": "riscv: process: Fix kernel gp leakage",
  "body": "childregs represents the registers which are active for the new thread\nin user context. For a kernel thread, childregs->gp is never used since\nthe kernel gp is not touched by switch_to. For a user mode helper, the\ngp value can be observed in user space after execve or possibly by other\nmeans.\n\n[From the email thread]\n\nThe /* Kernel thread */ comment is somewhat inaccurate in that it is also used\nfor user_mode_helper threads, which exec a user process, e.g. /sbin/init or\nwhen /proc/sys/kernel/core_pattern is a pipe. Such threads do not have\nPF_KTHREAD set and are valid targets for ptrace etc. even before they exec.\n\nchildregs is the *user* context during syscall execution and it is observable\nfrom userspace in at least five ways:\n\n1. kernel_execve does not currently clear integer registers, so the starting\n   register state for PID 1 and other user processes started by the kernel has\n   sp = user stack, gp = kernel __global_pointer$, all other integer registers\n   zeroed by the memset in the patch comment.\n\n   This is a bug in its own right, but I'm unwilling to bet that it is the only\n   way to exploit the issue addressed by this patch.\n\n2. ptrace(PTRACE_GETREGSET): you can PTRACE_ATTACH to a user_mode_helper thread\n   before it execs, but ptrace requires SIGSTOP to be delivered which can only\n   happen at user/kernel boundaries.\n\n3. /proc/*/task/*/syscall: this is perfectly happy to read pt_regs for\n   user_mode_helpers before the exec completes, but gp is not one of the\n   registers it returns.\n\n4. PERF_SAMPLE_REGS_USER: LOCKDOWN_PERF normally prevents access to kernel\n   addresses via PERF_SAMPLE_REGS_INTR, but due to this bug kernel addresses\n   are also exposed via PERF_SAMPLE_REGS_USER which is permitted under\n   LOCKDOWN_PERF. I have not attempted to write exploit code.\n\n5. Much of the tracing infrastructure allows access to user registers. I have\n   not attempted to determine which forms of tracing allow access to user\n   registers without already allowing access to kernel registers.\n\nFixes: 7db91e57a0ac (\"RISC-V: Task implementation\")\nCc: stable@vger.kernel.org\nSigned-off-by: Stefan O'Rear <sorear@fastmail.com>\nReviewed-by: Alexandre Ghiti <alexghiti@rivosinc.com>\nLink: https://lore.kernel.org/r/20240327061258.2370291-1-sorear@fastmail.com\nSigned-off-by: Palmer Dabbelt <palmer@rivosinc.com>",
  "full_message": "riscv: process: Fix kernel gp leakage\n\nchildregs represents the registers which are active for the new thread\nin user context. For a kernel thread, childregs->gp is never used since\nthe kernel gp is not touched by switch_to. For a user mode helper, the\ngp value can be observed in user space after execve or possibly by other\nmeans.\n\n[From the email thread]\n\nThe /* Kernel thread */ comment is somewhat inaccurate in that it is also used\nfor user_mode_helper threads, which exec a user process, e.g. /sbin/init or\nwhen /proc/sys/kernel/core_pattern is a pipe. Such threads do not have\nPF_KTHREAD set and are valid targets for ptrace etc. even before they exec.\n\nchildregs is the *user* context during syscall execution and it is observable\nfrom userspace in at least five ways:\n\n1. kernel_execve does not currently clear integer registers, so the starting\n   register state for PID 1 and other user processes started by the kernel has\n   sp = user stack, gp = kernel __global_pointer$, all other integer registers\n   zeroed by the memset in the patch comment.\n\n   This is a bug in its own right, but I'm unwilling to bet that it is the only\n   way to exploit the issue addressed by this patch.\n\n2. ptrace(PTRACE_GETREGSET): you can PTRACE_ATTACH to a user_mode_helper thread\n   before it execs, but ptrace requires SIGSTOP to be delivered which can only\n   happen at user/kernel boundaries.\n\n3. /proc/*/task/*/syscall: this is perfectly happy to read pt_regs for\n   user_mode_helpers before the exec completes, but gp is not one of the\n   registers it returns.\n\n4. PERF_SAMPLE_REGS_USER: LOCKDOWN_PERF normally prevents access to kernel\n   addresses via PERF_SAMPLE_REGS_INTR, but due to this bug kernel addresses\n   are also exposed via PERF_SAMPLE_REGS_USER which is permitted under\n   LOCKDOWN_PERF. I have not attempted to write exploit code.\n\n5. Much of the tracing infrastructure allows access to user registers. I have\n   not attempted to determine which forms of tracing allow access to user\n   registers without already allowing access to kernel registers.\n\nFixes: 7db91e57a0ac (\"RISC-V: Task implementation\")\nCc: stable@vger.kernel.org\nSigned-off-by: Stefan O'Rear <sorear@fastmail.com>\nReviewed-by: Alexandre Ghiti <alexghiti@rivosinc.com>\nLink: https://lore.kernel.org/r/20240327061258.2370291-1-sorear@fastmail.com\nSigned-off-by: Palmer Dabbelt <palmer@rivosinc.com>",
  "author_name": "Stefan O'Rear",
  "author_email": "sorear@fastmail.com",
  "author_date": "Wed Mar 27 02:12:58 2024 -0400",
  "author_date_iso": "2024-03-27T02:12:58-04:00",
  "committer_name": "Palmer Dabbelt",
  "committer_email": "palmer@rivosinc.com",
  "committer_date": "Thu Apr 4 12:35:05 2024 -0700",
  "committer_date_iso": "2024-04-04T12:35:05-07:00",
  "files_changed": [
    "arch/riscv/kernel/process.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/riscv/kernel/process.c",
      "insertions": 0,
      "deletions": 3
    }
  ],
  "total_insertions": 0,
  "total_deletions": 3,
  "total_changes": 3,
  "parents": [
    "a370c2419e4680a27382d9231edcf739d5d74efc"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/riscv/kernel/process.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}