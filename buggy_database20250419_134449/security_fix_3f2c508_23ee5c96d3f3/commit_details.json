{
  "hash": "3f2c5085ed99b6ad233cf77009c2f4f898b2f7c8",
  "hash_short": "3f2c5085",
  "subject": "x86/sched/64: Don't save flags on context switch (reinstated)",
  "body": "This reinstates the following commit:\n\n  2c7577a75837 (\"sched/x86_64: Don't save flags on context switch\")\n\nwhich was reverted in:\n\n  512255a2ad2c (\"Revert 'sched/x86_64: Don't save flags on context switch'\")\n\nHistorically, Linux has always saved and restored EFLAGS across\ncontext switches.  As far as I know, the only reason to do this\nis because of the NT flag.  In particular, if something calls\nswitch_to() with the NT flag set, then we don't want to leak the\nNT flag into a different task that might try to IRET and fail\nbecause NT is set.\n\nBefore this commit:\n\n  8c7aa698baca (\"x86_64, entry: Filter RFLAGS.NT on entry from userspace\")\n\nwe could run system call bodies with NT set.  This would be a DoS or possibly\nprivilege escalation hole if scheduling in such a system call would leak\nNT into a different task.\n\nImportantly, we don't need to worry about NT being set while\npreemptible or across page faults.  The only way we can schedule\ndue to preemption or a page fault is in an interrupt entry that\nnests inside the SYSENTER prologue.  The CPU will clear NT when\nentering through an interrupt gate, so we won't schedule with NT\nset.\n\nThe only other interesting flags are IOPL and AC.  Allowing\nswitch_to() to change IOPL has no effect, as the value loaded\nduring kernel execution doesn't matter at all except between a\nSYSENTER entry and the subsequent PUSHF, and anythign that\ninterrupts in that window will restore IOPL on return.\n\nIf we call __switch_to() with AC set, we have bigger problems.\n\nSigned-off-by: Andy Lutomirski <luto@kernel.org>\nCc: Andy Lutomirski <luto@amacapital.net>\nCc: Borislav Petkov <bp@alien8.de>\nCc: Brian Gerst <brgerst@gmail.com>\nCc: Denys Vlasenko <dvlasenk@redhat.com>\nCc: H. Peter Anvin <hpa@zytor.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nLink: http://lkml.kernel.org/r/d4440fdc2a89247bffb7c003d2a9a2952bd46827.1441146105.git.luto@kernel.org\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "full_message": "x86/sched/64: Don't save flags on context switch (reinstated)\n\nThis reinstates the following commit:\n\n  2c7577a75837 (\"sched/x86_64: Don't save flags on context switch\")\n\nwhich was reverted in:\n\n  512255a2ad2c (\"Revert 'sched/x86_64: Don't save flags on context switch'\")\n\nHistorically, Linux has always saved and restored EFLAGS across\ncontext switches.  As far as I know, the only reason to do this\nis because of the NT flag.  In particular, if something calls\nswitch_to() with the NT flag set, then we don't want to leak the\nNT flag into a different task that might try to IRET and fail\nbecause NT is set.\n\nBefore this commit:\n\n  8c7aa698baca (\"x86_64, entry: Filter RFLAGS.NT on entry from userspace\")\n\nwe could run system call bodies with NT set.  This would be a DoS or possibly\nprivilege escalation hole if scheduling in such a system call would leak\nNT into a different task.\n\nImportantly, we don't need to worry about NT being set while\npreemptible or across page faults.  The only way we can schedule\ndue to preemption or a page fault is in an interrupt entry that\nnests inside the SYSENTER prologue.  The CPU will clear NT when\nentering through an interrupt gate, so we won't schedule with NT\nset.\n\nThe only other interesting flags are IOPL and AC.  Allowing\nswitch_to() to change IOPL has no effect, as the value loaded\nduring kernel execution doesn't matter at all except between a\nSYSENTER entry and the subsequent PUSHF, and anythign that\ninterrupts in that window will restore IOPL on return.\n\nIf we call __switch_to() with AC set, we have bigger problems.\n\nSigned-off-by: Andy Lutomirski <luto@kernel.org>\nCc: Andy Lutomirski <luto@amacapital.net>\nCc: Borislav Petkov <bp@alien8.de>\nCc: Brian Gerst <brgerst@gmail.com>\nCc: Denys Vlasenko <dvlasenk@redhat.com>\nCc: H. Peter Anvin <hpa@zytor.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nLink: http://lkml.kernel.org/r/d4440fdc2a89247bffb7c003d2a9a2952bd46827.1441146105.git.luto@kernel.org\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "author_name": "Andy Lutomirski",
  "author_email": "luto@kernel.org",
  "author_date": "Tue Sep 1 15:41:06 2015 -0700",
  "author_date_iso": "2015-09-01T15:41:06-07:00",
  "committer_name": "Ingo Molnar",
  "committer_email": "mingo@kernel.org",
  "committer_date": "Fri Sep 25 09:29:17 2015 +0200",
  "committer_date_iso": "2015-09-25T09:29:17+02:00",
  "files_changed": [
    "arch/x86/include/asm/switch_to.h"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/x86/include/asm/switch_to.h",
      "insertions": 8,
      "deletions": 4
    }
  ],
  "total_insertions": 8,
  "total_deletions": 4,
  "total_changes": 12,
  "parents": [
    "9c9ab385bc6c3f0787f742d5e9baf04063d9697a"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.10",
    "v4.10-rc1",
    "v4.10-rc2",
    "v4.10-rc3",
    "v4.10-rc4",
    "v4.10-rc5",
    "v4.10-rc6",
    "v4.10-rc7",
    "v4.10-rc8",
    "v4.11"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "privilege escalation"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/include/asm/switch_to.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}