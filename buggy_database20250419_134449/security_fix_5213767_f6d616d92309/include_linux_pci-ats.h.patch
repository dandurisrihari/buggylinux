commit 521376741b2c26fe53a1ec24d02da24d477eb739
Author: Jean-Philippe Brucker <jean-philippe@linaro.org>
Date:   Wed May 20 17:22:00 2020 +0200

    PCI/ATS: Only enable ATS for trusted devices
    
    Add pci_ats_supported(), which checks whether a device has an ATS
    capability, and whether it is trusted.  A device is untrusted if it is
    plugged into an external-facing port such as Thunderbolt and could be
    spoofing an existing device to exploit weaknesses in the IOMMU
    configuration.  PCIe ATS is one such weaknesses since it allows
    endpoints to cache IOMMU translations and emit transactions with
    'Translated' Address Type (10b) that partially bypass the IOMMU
    translation.
    
    The SMMUv3 and VT-d IOMMU drivers already disallow ATS and transactions
    with 'Translated' Address Type for untrusted devices.  Add the check to
    pci_enable_ats() to let other drivers (AMD IOMMU for now) benefit from
    it.
    
    By checking ats_cap, the pci_ats_supported() helper also returns whether
    ATS was globally disabled with pci=noats, and could later include more
    things, for example whether the whole PCIe hierarchy down to the
    endpoint supports ATS.
    
    Signed-off-by: Jean-Philippe Brucker <jean-philippe@linaro.org>
    Reviewed-by: Joerg Roedel <jroedel@suse.de>
    Acked-by: Bjorn Helgaas <bhelgaas@google.com>
    Link: https://lore.kernel.org/r/20200520152201.3309416-2-jean-philippe@linaro.org
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

diff --git a/include/linux/pci-ats.h b/include/linux/pci-ats.h
index d08f0869f121..f75c307f346d 100644
--- a/include/linux/pci-ats.h
+++ b/include/linux/pci-ats.h
@@ -6,11 +6,14 @@
 
 #ifdef CONFIG_PCI_ATS
 /* Address Translation Service */
+bool pci_ats_supported(struct pci_dev *dev);
 int pci_enable_ats(struct pci_dev *dev, int ps);
 void pci_disable_ats(struct pci_dev *dev);
 int pci_ats_queue_depth(struct pci_dev *dev);
 int pci_ats_page_aligned(struct pci_dev *dev);
 #else /* CONFIG_PCI_ATS */
+static inline bool pci_ats_supported(struct pci_dev *d)
+{ return false; }
 static inline int pci_enable_ats(struct pci_dev *d, int ps)
 { return -ENODEV; }
 static inline void pci_disable_ats(struct pci_dev *d) { }