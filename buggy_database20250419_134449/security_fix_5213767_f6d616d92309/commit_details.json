{
  "hash": "521376741b2c26fe53a1ec24d02da24d477eb739",
  "hash_short": "52137674",
  "subject": "PCI/ATS: Only enable ATS for trusted devices",
  "body": "Add pci_ats_supported(), which checks whether a device has an ATS\ncapability, and whether it is trusted.  A device is untrusted if it is\nplugged into an external-facing port such as Thunderbolt and could be\nspoofing an existing device to exploit weaknesses in the IOMMU\nconfiguration.  PCIe ATS is one such weaknesses since it allows\nendpoints to cache IOMMU translations and emit transactions with\n'Translated' Address Type (10b) that partially bypass the IOMMU\ntranslation.\n\nThe SMMUv3 and VT-d IOMMU drivers already disallow ATS and transactions\nwith 'Translated' Address Type for untrusted devices.  Add the check to\npci_enable_ats() to let other drivers (AMD IOMMU for now) benefit from\nit.\n\nBy checking ats_cap, the pci_ats_supported() helper also returns whether\nATS was globally disabled with pci=noats, and could later include more\nthings, for example whether the whole PCIe hierarchy down to the\nendpoint supports ATS.\n\nSigned-off-by: Jean-Philippe Brucker <jean-philippe@linaro.org>\nReviewed-by: Joerg Roedel <jroedel@suse.de>\nAcked-by: Bjorn Helgaas <bhelgaas@google.com>\nLink: https://lore.kernel.org/r/20200520152201.3309416-2-jean-philippe@linaro.org\nSigned-off-by: Joerg Roedel <jroedel@suse.de>",
  "full_message": "PCI/ATS: Only enable ATS for trusted devices\n\nAdd pci_ats_supported(), which checks whether a device has an ATS\ncapability, and whether it is trusted.  A device is untrusted if it is\nplugged into an external-facing port such as Thunderbolt and could be\nspoofing an existing device to exploit weaknesses in the IOMMU\nconfiguration.  PCIe ATS is one such weaknesses since it allows\nendpoints to cache IOMMU translations and emit transactions with\n'Translated' Address Type (10b) that partially bypass the IOMMU\ntranslation.\n\nThe SMMUv3 and VT-d IOMMU drivers already disallow ATS and transactions\nwith 'Translated' Address Type for untrusted devices.  Add the check to\npci_enable_ats() to let other drivers (AMD IOMMU for now) benefit from\nit.\n\nBy checking ats_cap, the pci_ats_supported() helper also returns whether\nATS was globally disabled with pci=noats, and could later include more\nthings, for example whether the whole PCIe hierarchy down to the\nendpoint supports ATS.\n\nSigned-off-by: Jean-Philippe Brucker <jean-philippe@linaro.org>\nReviewed-by: Joerg Roedel <jroedel@suse.de>\nAcked-by: Bjorn Helgaas <bhelgaas@google.com>\nLink: https://lore.kernel.org/r/20200520152201.3309416-2-jean-philippe@linaro.org\nSigned-off-by: Joerg Roedel <jroedel@suse.de>",
  "author_name": "Jean-Philippe Brucker",
  "author_email": "jean-philippe@linaro.org",
  "author_date": "Wed May 20 17:22:00 2020 +0200",
  "author_date_iso": "2020-05-20T17:22:00+02:00",
  "committer_name": "Joerg Roedel",
  "committer_email": "jroedel@suse.de",
  "committer_date": "Wed May 27 14:35:41 2020 +0200",
  "committer_date_iso": "2020-05-27T14:35:41+02:00",
  "files_changed": [
    "drivers/pci/ats.c",
    "include/linux/pci-ats.h"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "drivers/pci/ats.c",
      "insertions": 17,
      "deletions": 1
    },
    {
      "file": "include/linux/pci-ats.h",
      "insertions": 3,
      "deletions": 0
    }
  ],
  "total_insertions": 20,
  "total_deletions": 1,
  "total_changes": 21,
  "parents": [
    "79659190ee972c05498c338e48d80cb45490c533"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit",
      "bypass"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/pci/ats.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/pci-ats.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}