commit e16aeb072682d3dcdbdad452c974baa0d2b0c6db
Author: Amit Daniel Kachhap <amit.kachhap@arm.com>
Date:   Mon Sep 14 14:06:53 2020 +0530

    arm64: ptrauth: Introduce Armv8.3 pointer authentication enhancements
    
    Some Armv8.3 Pointer Authentication enhancements have been introduced
    which are mandatory for Armv8.6 and optional for Armv8.3. These features
    are,
    
    * ARMv8.3-PAuth2 - An enhanced PAC generation logic is added which hardens
      finding the correct PAC value of the authenticated pointer.
    
    * ARMv8.3-FPAC - Fault is generated now when the ptrauth authentication
      instruction fails in authenticating the PAC present in the address.
      This is different from earlier case when such failures just adds an
      error code in the top byte and waits for subsequent load/store to abort.
      The ptrauth instructions which may cause this fault are autiasp, retaa
      etc.
    
    The above features are now represented by additional configurations
    for the Address Authentication cpufeature and a new ESR exception class.
    
    The userspace fault received in the kernel due to ARMv8.3-FPAC is treated
    as Illegal instruction and hence signal SIGILL is injected with ILL_ILLOPN
    as the signal code. Note that this is different from earlier ARMv8.3
    ptrauth where signal SIGSEGV is issued due to Pointer authentication
    failures. The in-kernel PAC fault causes kernel to crash.
    
    Signed-off-by: Amit Daniel Kachhap <amit.kachhap@arm.com>
    Reviewed-by: Dave Martin <Dave.Martin@arm.com>
    Link: https://lore.kernel.org/r/20200914083656.21428-4-amit.kachhap@arm.com
    Signed-off-by: Will Deacon <will@kernel.org>

diff --git a/arch/arm64/include/asm/esr.h b/arch/arm64/include/asm/esr.h
index 035003acfa87..22c81f1edda2 100644
--- a/arch/arm64/include/asm/esr.h
+++ b/arch/arm64/include/asm/esr.h
@@ -35,7 +35,9 @@
 #define ESR_ELx_EC_SYS64	(0x18)
 #define ESR_ELx_EC_SVE		(0x19)
 #define ESR_ELx_EC_ERET		(0x1a)	/* EL2 only */
-/* Unallocated EC: 0x1b - 0x1E */
+/* Unallocated EC: 0x1B */
+#define ESR_ELx_EC_FPAC		(0x1C)	/* EL1 and above */
+/* Unallocated EC: 0x1D - 0x1E */
 #define ESR_ELx_EC_IMP_DEF	(0x1f)	/* EL3 only */
 #define ESR_ELx_EC_IABT_LOW	(0x20)
 #define ESR_ELx_EC_IABT_CUR	(0x21)