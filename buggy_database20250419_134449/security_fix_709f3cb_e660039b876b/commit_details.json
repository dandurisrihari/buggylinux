{
  "hash": "709f3cbd652e50e96a9d9c62a300313b636e3f6f",
  "hash_short": "709f3cbd",
  "subject": "ACPI: APEI: EINJ: Refactor available_error_type_show()",
  "body": "OSPM can discover the error injection capabilities of the platform by\nexecuting GET_ERROR_TYPE error injection action.[1] The action returns\na DWORD representing a bitmap of platform supported error injections.[2]\n\nThe available_error_type_show() function determines the bits set within\nthis DWORD and provides a verbose output, from einj_error_type_string\narray, through /sys/kernel/debug/apei/einj/available_error_type file.\n\nThe function however, assumes one to one correspondence between an error's\nposition in the bitmap and its array entry offset. Consequently, some\nerrors like Vendor Defined Error Type fail this assumption and will\nincorrectly be shown as not supported, even if their corresponding bit is\nset in the bitmap and they have an entry in the array.\n\nNavigate around the issue by converting einj_error_type_string into an\narray of structures with a predetermined mask for all error types\ncorresponding to their bit position in the DWORD returned by GET_ERROR_TYPE\naction. The same breaks the aforementioned assumption resulting in all\nsupported error types by a platform being outputted through the above\navailable_error_type file.\n\n[1] ACPI specification 6.5, Table 18.25\n[2] ACPI specification 6.5, Table 18.30\n\nSuggested-by: Alexey Kardashevskiy <alexey.kardashevskiy@amd.com>\nSigned-off-by: Avadhut Naik <Avadhut.Naik@amd.com>\nReviewed-by: Borislav Petkov (AMD) <bp@alien8.de>\nReviewed-by: Tony Luck <tony.luck@intel.com>\nSigned-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>",
  "full_message": "ACPI: APEI: EINJ: Refactor available_error_type_show()\n\nOSPM can discover the error injection capabilities of the platform by\nexecuting GET_ERROR_TYPE error injection action.[1] The action returns\na DWORD representing a bitmap of platform supported error injections.[2]\n\nThe available_error_type_show() function determines the bits set within\nthis DWORD and provides a verbose output, from einj_error_type_string\narray, through /sys/kernel/debug/apei/einj/available_error_type file.\n\nThe function however, assumes one to one correspondence between an error's\nposition in the bitmap and its array entry offset. Consequently, some\nerrors like Vendor Defined Error Type fail this assumption and will\nincorrectly be shown as not supported, even if their corresponding bit is\nset in the bitmap and they have an entry in the array.\n\nNavigate around the issue by converting einj_error_type_string into an\narray of structures with a predetermined mask for all error types\ncorresponding to their bit position in the DWORD returned by GET_ERROR_TYPE\naction. The same breaks the aforementioned assumption resulting in all\nsupported error types by a platform being outputted through the above\navailable_error_type file.\n\n[1] ACPI specification 6.5, Table 18.25\n[2] ACPI specification 6.5, Table 18.30\n\nSuggested-by: Alexey Kardashevskiy <alexey.kardashevskiy@amd.com>\nSigned-off-by: Avadhut Naik <Avadhut.Naik@amd.com>\nReviewed-by: Borislav Petkov (AMD) <bp@alien8.de>\nReviewed-by: Tony Luck <tony.luck@intel.com>\nSigned-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>",
  "author_name": "Avadhut Naik",
  "author_email": "Avadhut.Naik@amd.com",
  "author_date": "Thu Nov 16 16:47:22 2023 -0600",
  "author_date_iso": "2023-11-16T16:47:22-06:00",
  "committer_name": "Rafael J. Wysocki",
  "committer_email": "rafael.j.wysocki@intel.com",
  "committer_date": "Tue Nov 21 21:10:44 2023 +0100",
  "committer_date_iso": "2023-11-21T21:10:44+01:00",
  "files_changed": [
    "drivers/acpi/apei/einj.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "drivers/acpi/apei/einj.c",
      "insertions": 24,
      "deletions": 23
    }
  ],
  "total_insertions": 24,
  "total_deletions": 23,
  "total_changes": 47,
  "parents": [
    "98b1cc82c4affc16f5598d4fa14b1858671b2263"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/acpi/apei/einj.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}