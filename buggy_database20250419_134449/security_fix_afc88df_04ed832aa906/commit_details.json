{
  "hash": "afc88dfda013970bb1e214b331e99adca2f98312",
  "hash_short": "afc88dfd",
  "subject": "power: supply: surface-charger: replace deprecated strncpy with strscpy",
  "body": "strncpy() is deprecated for use on NUL-terminated destination strings\n[1] and as such we should prefer more robust and less ambiguous string\ninterfaces.\n\nWe expect ac->name to be NUL-terminated based on its usage with format\nstrings:\n\nsurface_charger.c:\n190: ac->psy_desc.name = ac->name;\n\n...\n\npower_supply_core.c:\n174: dev_dbg(&psy->dev, \"%s: Found supply : %s\\n\",\n175:   psy->desc->name, epsy->desc->name);\n\nMoreover, NUL-padding is not required as ac is already zero-allocated\nbefore being passed to spwr_ac_init():\n\nsurface_charger.c:\n240: ac = devm_kzalloc(&sdev->dev, sizeof(*ac), GFP_KERNEL);\n241: if (!ac)\n242:   return -ENOMEM;\n243:\n244: spwr_ac_init(ac, sdev, p->registry, p->name);\n\n... this means any future NUL-byte assignments (like the ones that\nstrncpy() does) are redundant.\n\nConsidering the above, a suitable replacement is `strscpy` [2] due to\nthe fact that it guarantees NUL-termination on the destination buffer\nwithout unnecessarily NUL-padding.\n\nLet's also opt for the more idiomatic strscpy() usage of:\n(dest, src, sizeof(dest))\n\nLink: https://www.kernel.org/doc/html/latest/process/deprecated.html#strncpy-on-nul-terminated-strings [1]\nLink: https://manpages.debian.org/testing/linux-manual-4.8/strscpy.9.en.html [2]\nLink: https://github.com/KSPP/linux/issues/90\nCc: linux-hardening@vger.kernel.org\nSigned-off-by: Justin Stitt <justinstitt@google.com>\nLink: https://lore.kernel.org/r/20231020-strncpy-drivers-power-supply-surface_charger-c-v1-1-93ddbf668e10@google.com\nSigned-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>",
  "full_message": "power: supply: surface-charger: replace deprecated strncpy with strscpy\n\nstrncpy() is deprecated for use on NUL-terminated destination strings\n[1] and as such we should prefer more robust and less ambiguous string\ninterfaces.\n\nWe expect ac->name to be NUL-terminated based on its usage with format\nstrings:\n\nsurface_charger.c:\n190: ac->psy_desc.name = ac->name;\n\n...\n\npower_supply_core.c:\n174: dev_dbg(&psy->dev, \"%s: Found supply : %s\\n\",\n175:   psy->desc->name, epsy->desc->name);\n\nMoreover, NUL-padding is not required as ac is already zero-allocated\nbefore being passed to spwr_ac_init():\n\nsurface_charger.c:\n240: ac = devm_kzalloc(&sdev->dev, sizeof(*ac), GFP_KERNEL);\n241: if (!ac)\n242:   return -ENOMEM;\n243:\n244: spwr_ac_init(ac, sdev, p->registry, p->name);\n\n... this means any future NUL-byte assignments (like the ones that\nstrncpy() does) are redundant.\n\nConsidering the above, a suitable replacement is `strscpy` [2] due to\nthe fact that it guarantees NUL-termination on the destination buffer\nwithout unnecessarily NUL-padding.\n\nLet's also opt for the more idiomatic strscpy() usage of:\n(dest, src, sizeof(dest))\n\nLink: https://www.kernel.org/doc/html/latest/process/deprecated.html#strncpy-on-nul-terminated-strings [1]\nLink: https://manpages.debian.org/testing/linux-manual-4.8/strscpy.9.en.html [2]\nLink: https://github.com/KSPP/linux/issues/90\nCc: linux-hardening@vger.kernel.org\nSigned-off-by: Justin Stitt <justinstitt@google.com>\nLink: https://lore.kernel.org/r/20231020-strncpy-drivers-power-supply-surface_charger-c-v1-1-93ddbf668e10@google.com\nSigned-off-by: Sebastian Reichel <sebastian.reichel@collabora.com>",
  "author_name": "Justin Stitt",
  "author_email": "justinstitt@google.com",
  "author_date": "Fri Oct 20 19:46:11 2023 +0000",
  "author_date_iso": "2023-10-20T19:46:11+00:00",
  "committer_name": "Sebastian Reichel",
  "committer_email": "sebastian.reichel@collabora.com",
  "committer_date": "Sat Oct 21 00:37:41 2023 +0200",
  "committer_date_iso": "2023-10-21T00:37:41+02:00",
  "files_changed": [
    "drivers/power/supply/surface_charger.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "drivers/power/supply/surface_charger.c",
      "insertions": 1,
      "deletions": 1
    }
  ],
  "total_insertions": 1,
  "total_deletions": 1,
  "total_changes": 2,
  "parents": [
    "81f07d2b0c4db3b6e53d90419db915c75beb6326"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/power/supply/surface_charger.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}