{
  "hash": "3b8a9b2e6809d281890dd0a1102dc14d2cd11caf",
  "hash_short": "3b8a9b2e",
  "subject": "Merge tag 'trace-v6.7-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/trace/linux-trace",
  "body": "Pull tracing fixes from Steven Rostedt:\n\n - Fix eventfs to check creating new files for events with names greater\n   than NAME_MAX. The eventfs lookup needs to check the return result of\n   simple_lookup().\n\n - Fix the ring buffer to check the proper max data size. Events must be\n   able to fit on the ring buffer sub-buffer, if it cannot, then it\n   fails to be written and the logic to add the event is avoided. The\n   code to check if an event can fit failed to add the possible absolute\n   timestamp which may make the event not be able to fit. This causes\n   the ring buffer to go into an infinite loop trying to find a\n   sub-buffer that would fit the event. Luckily, there's a check that\n   will bail out if it looped over a 1000 times and it also warns.\n\n   The real fix is not to add the absolute timestamp to an event that is\n   starting at the beginning of a sub-buffer because it uses the\n   sub-buffer timestamp.\n\n   By avoiding the timestamp at the start of the sub-buffer allows\n   events that pass the first check to always find a sub-buffer that it\n   can fit on.\n\n - Have large events that do not fit on a trace_seq to print \"LINE TOO\n   BIG\" like it does for the trace_pipe instead of what it does now\n   which is to silently drop the output.\n\n - Fix a memory leak of forgetting to free the spare page that is saved\n   by a trace instance.\n\n - Update the size of the snapshot buffer when the main buffer is\n   updated if the snapshot buffer is allocated.\n\n - Fix ring buffer timestamp logic by removing all the places that tried\n   to put the before_stamp back to the write stamp so that the next\n   event doesn't add an absolute timestamp. But each of these updates\n   added a race where by making the two timestamp equal, it was\n   validating the write_stamp so that it can be incorrectly used for\n   calculating the delta of an event.\n\n - There's a temp buffer used for printing the event that was using the\n   event data size for allocation when it needed to use the size of the\n   entire event (meta-data and payload data)\n\n - For hardening, use \"%.*s\" for printing the trace_marker output, to\n   limit the amount that is printed by the size of the event. This was\n   discovered by development that added a bug that truncated the '\\0'\n   and caused a crash.\n\n - Fix a use-after-free bug in the use of the histogram files when an\n   instance is being removed.\n\n - Remove a useless update in the rb_try_to_discard of the write_stamp.\n   The before_stamp was already changed to force the next event to add\n   an absolute timestamp that the write_stamp is not used. But the\n   write_stamp is modified again using an unneeded 64-bit cmpxchg.\n\n - Fix several races in the 32-bit implementation of the\n   rb_time_cmpxchg() that does a 64-bit cmpxchg.\n\n - While looking at fixing the 64-bit cmpxchg, I noticed that because\n   the ring buffer uses normal cmpxchg, and this can be done in NMI\n   context, there's some architectures that do not have a working\n   cmpxchg in NMI context. For these architectures, fail recording\n   events that happen in NMI context.\n\n* tag 'trace-v6.7-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/trace/linux-trace:\n  ring-buffer: Do not record in NMI if the arch does not support cmpxchg in NMI\n  ring-buffer: Have rb_time_cmpxchg() set the msb counter too\n  ring-buffer: Fix 32-bit rb_time_read() race with rb_time_cmpxchg()\n  ring-buffer: Fix a race in rb_time_cmpxchg() for 32 bit archs\n  ring-buffer: Remove useless update to write_stamp in rb_try_to_discard()\n  ring-buffer: Do not try to put back write_stamp\n  tracing: Fix uaf issue when open the hist or hist_debug file\n  tracing: Add size check when printing trace_marker output\n  ring-buffer: Have saved event hold the entire event\n  ring-buffer: Do not update before stamp when switching sub-buffers\n  tracing: Update snapshot buffer on resize if it is allocated\n  ring-buffer: Fix memory leak of free page\n  eventfs: Fix events beyond NAME_MAX blocking tasks\n  tracing: Have large events show up as '[LINE TOO BIG]' instead of nothing\n  ring-buffer: Fix writing to the buffer with max_data_size",
  "full_message": "Merge tag 'trace-v6.7-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/trace/linux-trace\n\nPull tracing fixes from Steven Rostedt:\n\n - Fix eventfs to check creating new files for events with names greater\n   than NAME_MAX. The eventfs lookup needs to check the return result of\n   simple_lookup().\n\n - Fix the ring buffer to check the proper max data size. Events must be\n   able to fit on the ring buffer sub-buffer, if it cannot, then it\n   fails to be written and the logic to add the event is avoided. The\n   code to check if an event can fit failed to add the possible absolute\n   timestamp which may make the event not be able to fit. This causes\n   the ring buffer to go into an infinite loop trying to find a\n   sub-buffer that would fit the event. Luckily, there's a check that\n   will bail out if it looped over a 1000 times and it also warns.\n\n   The real fix is not to add the absolute timestamp to an event that is\n   starting at the beginning of a sub-buffer because it uses the\n   sub-buffer timestamp.\n\n   By avoiding the timestamp at the start of the sub-buffer allows\n   events that pass the first check to always find a sub-buffer that it\n   can fit on.\n\n - Have large events that do not fit on a trace_seq to print \"LINE TOO\n   BIG\" like it does for the trace_pipe instead of what it does now\n   which is to silently drop the output.\n\n - Fix a memory leak of forgetting to free the spare page that is saved\n   by a trace instance.\n\n - Update the size of the snapshot buffer when the main buffer is\n   updated if the snapshot buffer is allocated.\n\n - Fix ring buffer timestamp logic by removing all the places that tried\n   to put the before_stamp back to the write stamp so that the next\n   event doesn't add an absolute timestamp. But each of these updates\n   added a race where by making the two timestamp equal, it was\n   validating the write_stamp so that it can be incorrectly used for\n   calculating the delta of an event.\n\n - There's a temp buffer used for printing the event that was using the\n   event data size for allocation when it needed to use the size of the\n   entire event (meta-data and payload data)\n\n - For hardening, use \"%.*s\" for printing the trace_marker output, to\n   limit the amount that is printed by the size of the event. This was\n   discovered by development that added a bug that truncated the '\\0'\n   and caused a crash.\n\n - Fix a use-after-free bug in the use of the histogram files when an\n   instance is being removed.\n\n - Remove a useless update in the rb_try_to_discard of the write_stamp.\n   The before_stamp was already changed to force the next event to add\n   an absolute timestamp that the write_stamp is not used. But the\n   write_stamp is modified again using an unneeded 64-bit cmpxchg.\n\n - Fix several races in the 32-bit implementation of the\n   rb_time_cmpxchg() that does a 64-bit cmpxchg.\n\n - While looking at fixing the 64-bit cmpxchg, I noticed that because\n   the ring buffer uses normal cmpxchg, and this can be done in NMI\n   context, there's some architectures that do not have a working\n   cmpxchg in NMI context. For these architectures, fail recording\n   events that happen in NMI context.\n\n* tag 'trace-v6.7-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/trace/linux-trace:\n  ring-buffer: Do not record in NMI if the arch does not support cmpxchg in NMI\n  ring-buffer: Have rb_time_cmpxchg() set the msb counter too\n  ring-buffer: Fix 32-bit rb_time_read() race with rb_time_cmpxchg()\n  ring-buffer: Fix a race in rb_time_cmpxchg() for 32 bit archs\n  ring-buffer: Remove useless update to write_stamp in rb_try_to_discard()\n  ring-buffer: Do not try to put back write_stamp\n  tracing: Fix uaf issue when open the hist or hist_debug file\n  tracing: Add size check when printing trace_marker output\n  ring-buffer: Have saved event hold the entire event\n  ring-buffer: Do not update before stamp when switching sub-buffers\n  tracing: Update snapshot buffer on resize if it is allocated\n  ring-buffer: Fix memory leak of free page\n  eventfs: Fix events beyond NAME_MAX blocking tasks\n  tracing: Have large events show up as '[LINE TOO BIG]' instead of nothing\n  ring-buffer: Fix writing to the buffer with max_data_size",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Sat Dec 16 10:40:51 2023 -0800",
  "author_date_iso": "2023-12-16T10:40:51-08:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Sat Dec 16 10:40:51 2023 -0800",
  "committer_date_iso": "2023-12-16T10:40:51-08:00",
  "files_changed": [],
  "files_changed_count": 0,
  "stats": [
    {
      "file": "fs/tracefs/event_inode.c",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "kernel/trace/ring_buffer.c",
      "insertions": 42,
      "deletions": 73
    },
    {
      "file": "kernel/trace/trace.c",
      "insertions": 13,
      "deletions": 3
    },
    {
      "file": "kernel/trace/trace.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "kernel/trace/trace_events_hist.c",
      "insertions": 8,
      "deletions": 4
    },
    {
      "file": "kernel/trace/trace_output.c",
      "insertions": 4,
      "deletions": 2
    }
  ],
  "total_insertions": 72,
  "total_deletions": 82,
  "total_changes": 154,
  "parents": [
    "c8e97fc6b4c057a350a9e9a1ad625e10cc9c39ee",
    "712292308af2265cd9b126aedfa987f10f452a33"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": []
}