diff --cc arch/arm64/kernel/signal.c
index e0d09bf5b01b,e0d09bf5b01b,e0d09bf5b01b,e0d09bf5b01b,e0d09bf5b01b,1c5e557a3617,5fe45c7c5e4f,e0d09bf5b01b,e0d09bf5b01b,e0d09bf5b01b,e0d09bf5b01b,e0d09bf5b01b,e0d09bf5b01b..ed692284f199
--- a/arch/arm64/kernel/signal.c
+++ b/arch/arm64/kernel/signal.c
@@@@@@@@@@@@@@ -56,7 -56,7 -56,7 -56,7 -56,7 -56,8 -56,8 -56,7 -56,7 -56,7 -56,7 -56,7 -56,7 +56,9 @@@@@@@@@@@@@@ struct rt_sigframe_user_layout 
             	unsigned long fpsimd_offset;
             	unsigned long esr_offset;
             	unsigned long sve_offset;
++++++ ++++++	unsigned long tpidr2_offset;
             	unsigned long za_offset;
+++++ +++++++	unsigned long zt_offset;
             	unsigned long extra_offset;
             	unsigned long end_offset;
             };
@@@@@@@@@@@@@@ -220,7 -220,7 -220,7 -220,7 -220,7 -221,8 -221,8 -220,7 -220,7 -220,7 -220,7 -220,7 -220,7 +222,9 @@@@@@@@@@@@@@ static int restore_fpsimd_context(struc
             struct user_ctxs {
             	struct fpsimd_context __user *fpsimd;
             	struct sve_context __user *sve;
++++++ ++++++	struct tpidr2_context __user *tpidr2;
             	struct za_context __user *za;
+++++ +++++++	struct zt_context __user *zt;
             };
             
             #ifdef CONFIG_ARM64_SVE
@@@@@@@@@@@@@@ -450,8 -450,8 -450,8 -450,8 -450,8 -520,10 -478,10 -450,8 -450,8 -450,8 -450,8 -450,8 -450,8 +548,12 @@@@@@@@@@@@@@ static int restore_zt_context(struct us
             #else /* ! CONFIG_ARM64_SME */
             
             /* Turn any non-optimised out attempts to use these into a link error: */
++++++ ++++++extern int preserve_tpidr2_context(void __user *ctx);
++++++ ++++++extern int restore_tpidr2_context(struct user_ctxs *user);
             extern int preserve_za_context(void __user *ctx);
             extern int restore_za_context(struct user_ctxs *user);
+++++ +++++++extern int preserve_zt_context(void __user *ctx);
+++++ +++++++extern int restore_zt_context(struct user_ctxs *user);
             
             #endif /* ! CONFIG_ARM64_SME */
             
@@@@@@@@@@@@@@ -468,7 -468,7 -468,7 -468,7 -468,7 -540,8 -498,8 -468,7 -468,7 -468,7 -468,7 -468,7 -468,7 +570,9 @@@@@@@@@@@@@@ static int parse_user_sigframe(struct u
             
             	user->fpsimd = NULL;
             	user->sve = NULL;
++++++ ++++++	user->tpidr2 = NULL;
             	user->za = NULL;
+++++ +++++++	user->zt = NULL;
             
             	if (!IS_ALIGNED((unsigned long)base, 16))
             		goto invalid;
diff --cc tools/testing/selftests/arm64/abi/syscall-abi.c
index dd7ebe536d05,dd7ebe536d05,dd7ebe536d05,834616fde23e,dd7ebe536d05,9800f9dc6b35,dd7ebe536d05,dd7ebe536d05,dd7ebe536d05,dd7ebe536d05,dd7ebe536d05,dd7ebe536d05,dd7ebe536d05..18cc123e2347
--- a/tools/testing/selftests/arm64/abi/syscall-abi.c
+++ b/tools/testing/selftests/arm64/abi/syscall-abi.c
@@@@@@@@@@@@@@ -371,20 -371,20 -371,20 -384,12 -371,20 -401,20 -371,20 -371,20 -371,20 -371,20 -371,20 -371,20 -371,20 +414,12 @@@@@@@@@@@@@@ static void test_one_syscall(struct sys
             			ksft_exit_fail_msg("PR_SVE_SET_VL failed: %s (%d)\n",
             					   strerror(errno), errno);
             
--- ---------		sve_vl &= PR_SVE_VL_LEN_MASK;
--- ---------
--- ---------		if (sve_vq != sve_vq_from_vl(sve_vl))
--- ---------			sve_vq = sve_vq_from_vl(sve_vl);
--- - -------
--- - -------		ksft_test_result(do_test(cfg, sve_vl, default_sme_vl, 0),
--- - -------				 "%s SVE VL %d\n", cfg->name, sve_vl);
--- - -------
--- - -------		if (!(getauxval(AT_HWCAP2) & HWCAP2_SME))
--- - -------			continue;
+++ +++++++++		ksft_test_result(do_test(cfg, sve_vls[sve], default_sme_vl, 0),
+++ +++++++++				 "%s SVE VL %d\n", cfg->name, sve_vls[sve]);
             
     -       		ksft_test_result(do_test(cfg, sve_vl, default_sme_vl, 0),
     -       				 "%s SVE VL %d\n", cfg->name, sve_vl);
     -       
     -       		if (!(getauxval(AT_HWCAP2) & HWCAP2_SME))
     -       			continue;
     -       
--- ---------		for (sme_vq = SVE_VQ_MAX; sme_vq > 0; --sme_vq) {
--- ---------			sme_vl = prctl(PR_SME_SET_VL, sme_vq * 16);
--- ---------			if (sme_vl == -1)
+++ +++++++++		for (sme = 0; sme < sme_vl_count; sme++) {
+++ +++++++++			ret = prctl(PR_SME_SET_VL, sme_vls[sme]);
+++ +++++++++			if (ret == -1)
             				ksft_exit_fail_msg("PR_SME_SET_VL failed: %s (%d)\n",
             						   strerror(errno), errno);
             
@@@@@@@@@@@@@@ -478,14 -478,14 -478,14 -498,19 -478,14 -509,19 -478,14 -478,14 -478,14 -478,14 -478,14 -478,14 -478,14 +529,24 @@@@@@@@@@@@@@ int main(void
             	srandom(getpid());
             
             	ksft_print_header();
--- ---------	tests += sve_count_vls();
--- ---------	tests += (sve_count_vls() * sme_count_vls()) * 3;
+++ +++++++++
+++ +++++++++	sve_count_vls();
+++ +++++++++	sme_count_vls();
+++ +++++++++
+++ +++++++++	tests += sve_vl_count;
+++ +++++++++	tests += sme_vl_count * 3;
+++ +++++++++	tests += (sve_vl_count * sme_vl_count) * 3;
             	ksft_set_plan(ARRAY_SIZE(syscalls) * tests);
             
+++++ +++++++	if (getauxval(AT_HWCAP2) & HWCAP2_SME2)
+++++ +++++++		sme_ver = 2;
+++++ +++++++	else
+++++ +++++++		sme_ver = 1;
+++++ +++++++
             	if (getauxval(AT_HWCAP2) & HWCAP2_SME_FA64)
----- -------		ksft_print_msg("SME with FA64\n");
+++++ +++++++		ksft_print_msg("SME%d with FA64\n", sme_ver);
             	else if (getauxval(AT_HWCAP2) & HWCAP2_SME)
----- -------		ksft_print_msg("SME without FA64\n");
+++++ +++++++		ksft_print_msg("SME%d without FA64\n", sme_ver);
             
             	for (i = 0; i < ARRAY_SIZE(syscalls); i++)
             		test_one_syscall(&syscalls[i]);
diff --cc tools/testing/selftests/arm64/signal/.gitignore
index e8d2b57f73ec,e8d2b57f73ec,e8d2b57f73ec,e8d2b57f73ec,e8d2b57f73ec,b7fbb65183e8,e1b6c4d961b5,e8d2b57f73ec,e8d2b57f73ec,e8d2b57f73ec,e8d2b57f73ec,e8d2b57f73ec,e8d2b57f73ec..8ab4c86837fd
--- a/tools/testing/selftests/arm64/signal/.gitignore
+++ b/tools/testing/selftests/arm64/signal/.gitignore
@@@@@@@@@@@@@@ -4,5 -4,5 -4,5 -4,5 -4,5 -4,6 -4,6 -4,5 -4,5 -4,5 -4,5 -4,5 -4,5 +4,7 @@@@@@@@@@@@@@ fake_sigreturn_
             sme_*
             ssve_*
             sve_*
++++++ ++++++tpidr2_siginfo
             za_*
+++++ +++++++zt_*
             !*.[ch]