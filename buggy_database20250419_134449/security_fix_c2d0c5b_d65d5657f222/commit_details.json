{
  "hash": "c2d0c5b28a77d549ea52c70cb828e3ae29dda24d",
  "hash_short": "c2d0c5b2",
  "subject": "IB/hfi1: Replace deprecated strncpy",
  "body": "`strncpy` is deprecated for use on NUL-terminated destination strings\n[1] and as such we should prefer more robust and less ambiguous string\ninterfaces.\n\nWe see that `buf` is expected to be NUL-terminated based on it's use\nwithin a trace event wherein `is_misc_err_name` and `is_various_name`\nmap to `is_name` through `is_table`:\n| TRACE_EVENT(hfi1_interrupt,\n| \t    TP_PROTO(struct hfi1_devdata *dd, const struct is_table *is_entry,\n| \t\t     int src),\n| \t    TP_ARGS(dd, is_entry, src),\n| \t    TP_STRUCT__entry(DD_DEV_ENTRY(dd)\n| \t\t\t     __array(char, buf, 64)\n| \t\t\t     __field(int, src)\n| \t\t\t     ),\n| \t    TP_fast_assign(DD_DEV_ASSIGN(dd);\n| \t\t\t   is_entry->is_name(__entry->buf, 64,\n| \t\t\t\t\t     src - is_entry->start);\n| \t\t\t   __entry->src = src;\n| \t\t\t   ),\n| \t    TP_printk(\"[%s] source: %s [%d]\", __get_str(dev), __entry->buf,\n| \t\t      __entry->src)\n| );\n\nConsidering the above, a suitable replacement is `strscpy_pad` due to\nthe fact that it guarantees NUL-termination on the destination buffer\nwhile maintaining the NUL-padding behavior that strncpy provides.\n\nLink: https://www.kernel.org/doc/html/latest/process/deprecated.html#strncpy-on-nul-terminated-strings [1]\nLink: https://github.com/KSPP/linux/issues/90\nCc: linux-hardening@vger.kernel.org\nSigned-off-by: Justin Stitt <justinstitt@google.com>\nLink: https://lore.kernel.org/r/20230921-strncpy-drivers-infiniband-hw-hfi1-chip-c-v1-1-37afcf4964d9@google.com\nSigned-off-by: Leon Romanovsky <leon@kernel.org>",
  "full_message": "IB/hfi1: Replace deprecated strncpy\n\n`strncpy` is deprecated for use on NUL-terminated destination strings\n[1] and as such we should prefer more robust and less ambiguous string\ninterfaces.\n\nWe see that `buf` is expected to be NUL-terminated based on it's use\nwithin a trace event wherein `is_misc_err_name` and `is_various_name`\nmap to `is_name` through `is_table`:\n| TRACE_EVENT(hfi1_interrupt,\n| \t    TP_PROTO(struct hfi1_devdata *dd, const struct is_table *is_entry,\n| \t\t     int src),\n| \t    TP_ARGS(dd, is_entry, src),\n| \t    TP_STRUCT__entry(DD_DEV_ENTRY(dd)\n| \t\t\t     __array(char, buf, 64)\n| \t\t\t     __field(int, src)\n| \t\t\t     ),\n| \t    TP_fast_assign(DD_DEV_ASSIGN(dd);\n| \t\t\t   is_entry->is_name(__entry->buf, 64,\n| \t\t\t\t\t     src - is_entry->start);\n| \t\t\t   __entry->src = src;\n| \t\t\t   ),\n| \t    TP_printk(\"[%s] source: %s [%d]\", __get_str(dev), __entry->buf,\n| \t\t      __entry->src)\n| );\n\nConsidering the above, a suitable replacement is `strscpy_pad` due to\nthe fact that it guarantees NUL-termination on the destination buffer\nwhile maintaining the NUL-padding behavior that strncpy provides.\n\nLink: https://www.kernel.org/doc/html/latest/process/deprecated.html#strncpy-on-nul-terminated-strings [1]\nLink: https://github.com/KSPP/linux/issues/90\nCc: linux-hardening@vger.kernel.org\nSigned-off-by: Justin Stitt <justinstitt@google.com>\nLink: https://lore.kernel.org/r/20230921-strncpy-drivers-infiniband-hw-hfi1-chip-c-v1-1-37afcf4964d9@google.com\nSigned-off-by: Leon Romanovsky <leon@kernel.org>",
  "author_name": "Justin Stitt",
  "author_email": "justinstitt@google.com",
  "author_date": "Thu Sep 21 07:17:47 2023 +0000",
  "author_date_iso": "2023-09-21T07:17:47+00:00",
  "committer_name": "Leon Romanovsky",
  "committer_email": "leon@kernel.org",
  "committer_date": "Fri Sep 22 13:28:54 2023 +0300",
  "committer_date_iso": "2023-09-22T13:28:54+03:00",
  "files_changed": [
    "drivers/infiniband/hw/hfi1/chip.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "drivers/infiniband/hw/hfi1/chip.c",
      "insertions": 2,
      "deletions": 2
    }
  ],
  "total_insertions": 2,
  "total_deletions": 2,
  "total_changes": 4,
  "parents": [
    "f0cc82ca116f5b710bc298ea9bbbdb05bae01f5c"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/infiniband/hw/hfi1/chip.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}