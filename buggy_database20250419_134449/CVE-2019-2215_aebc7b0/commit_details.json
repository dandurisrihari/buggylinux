{
  "hash": "aebc7b0d8d91bbc69e976909963046bc48bca4fd",
  "hash_short": "aebc7b0d",
  "subject": "list: Introduce CONFIG_LIST_HARDENED",
  "body": "Numerous production kernel configs (see [1, 2]) are choosing to enable\nCONFIG_DEBUG_LIST, which is also being recommended by KSPP for hardened\nconfigs [3]. The motivation behind this is that the option can be used\nas a security hardening feature (e.g. CVE-2019-2215 and CVE-2019-2025\nare mitigated by the option [4]).\n\nThe feature has never been designed with performance in mind, yet common\nlist manipulation is happening across hot paths all over the kernel.\n\nIntroduce CONFIG_LIST_HARDENED, which performs list pointer checking\ninline, and only upon list corruption calls the reporting slow path.\n\nTo generate optimal machine code with CONFIG_LIST_HARDENED:\n\n  1. Elide checking for pointer values which upon dereference would\n     result in an immediate access fault (i.e. minimal hardening\n     checks).  The trade-off is lower-quality error reports.\n\n  2. Use the __preserve_most function attribute (available with Clang,\n     but not yet with GCC) to minimize the code footprint for calling\n     the reporting slow path. As a result, function size of callers is\n     reduced by avoiding saving registers before calling the rarely\n     called reporting slow path.\n\n     Note that all TUs in lib/Makefile already disable function tracing,\n     including list_debug.c, and __preserve_most's implied notrace has\n     no effect in this case.\n\n  3. Because the inline checks are a subset of the full set of checks in\n     __list_*_valid_or_report(), always return false if the inline\n     checks failed.  This avoids redundant compare and conditional\n     branch right after return from the slow path.\n\nAs a side-effect of the checks being inline, if the compiler can prove\nsome condition to always be true, it can completely elide some checks.\n\nSince DEBUG_LIST is functionally a superset of LIST_HARDENED, the\nKconfig variables are changed to reflect that: DEBUG_LIST selects\nLIST_HARDENED, whereas LIST_HARDENED itself has no dependency on\nDEBUG_LIST.\n\nRunning netperf with CONFIG_LIST_HARDENED (using a Clang compiler with\n\"preserve_most\") shows throughput improvements, in my case of ~7% on\naverage (up to 20-30% on some test cases).\n\nLink: https://r.android.com/1266735 [1]\nLink: https://gitlab.archlinux.org/archlinux/packaging/packages/linux/-/blob/main/config [2]\nLink: https://kernsec.org/wiki/index.php/Kernel_Self_Protection_Project/Recommended_Settings [3]\nLink: https://googleprojectzero.blogspot.com/2019/11/bad-binder-android-in-wild-exploit.html [4]\nSigned-off-by: Marco Elver <elver@google.com>\nLink: https://lore.kernel.org/r/20230811151847.1594958-3-elver@google.com\nSigned-off-by: Kees Cook <keescook@chromium.org>",
  "full_message": "list: Introduce CONFIG_LIST_HARDENED\n\nNumerous production kernel configs (see [1, 2]) are choosing to enable\nCONFIG_DEBUG_LIST, which is also being recommended by KSPP for hardened\nconfigs [3]. The motivation behind this is that the option can be used\nas a security hardening feature (e.g. CVE-2019-2215 and CVE-2019-2025\nare mitigated by the option [4]).\n\nThe feature has never been designed with performance in mind, yet common\nlist manipulation is happening across hot paths all over the kernel.\n\nIntroduce CONFIG_LIST_HARDENED, which performs list pointer checking\ninline, and only upon list corruption calls the reporting slow path.\n\nTo generate optimal machine code with CONFIG_LIST_HARDENED:\n\n  1. Elide checking for pointer values which upon dereference would\n     result in an immediate access fault (i.e. minimal hardening\n     checks).  The trade-off is lower-quality error reports.\n\n  2. Use the __preserve_most function attribute (available with Clang,\n     but not yet with GCC) to minimize the code footprint for calling\n     the reporting slow path. As a result, function size of callers is\n     reduced by avoiding saving registers before calling the rarely\n     called reporting slow path.\n\n     Note that all TUs in lib/Makefile already disable function tracing,\n     including list_debug.c, and __preserve_most's implied notrace has\n     no effect in this case.\n\n  3. Because the inline checks are a subset of the full set of checks in\n     __list_*_valid_or_report(), always return false if the inline\n     checks failed.  This avoids redundant compare and conditional\n     branch right after return from the slow path.\n\nAs a side-effect of the checks being inline, if the compiler can prove\nsome condition to always be true, it can completely elide some checks.\n\nSince DEBUG_LIST is functionally a superset of LIST_HARDENED, the\nKconfig variables are changed to reflect that: DEBUG_LIST selects\nLIST_HARDENED, whereas LIST_HARDENED itself has no dependency on\nDEBUG_LIST.\n\nRunning netperf with CONFIG_LIST_HARDENED (using a Clang compiler with\n\"preserve_most\") shows throughput improvements, in my case of ~7% on\naverage (up to 20-30% on some test cases).\n\nLink: https://r.android.com/1266735 [1]\nLink: https://gitlab.archlinux.org/archlinux/packaging/packages/linux/-/blob/main/config [2]\nLink: https://kernsec.org/wiki/index.php/Kernel_Self_Protection_Project/Recommended_Settings [3]\nLink: https://googleprojectzero.blogspot.com/2019/11/bad-binder-android-in-wild-exploit.html [4]\nSigned-off-by: Marco Elver <elver@google.com>\nLink: https://lore.kernel.org/r/20230811151847.1594958-3-elver@google.com\nSigned-off-by: Kees Cook <keescook@chromium.org>",
  "author_name": "Marco Elver",
  "author_email": "elver@google.com",
  "author_date": "Fri Aug 11 17:18:40 2023 +0200",
  "author_date_iso": "2023-08-11T17:18:40+02:00",
  "committer_name": "Kees Cook",
  "committer_email": "keescook@chromium.org",
  "committer_date": "Tue Aug 15 14:57:25 2023 -0700",
  "committer_date_iso": "2023-08-15T14:57:25-07:00",
  "files_changed": [
    "arch/arm64/kvm/hyp/nvhe/Makefile",
    "arch/arm64/kvm/hyp/nvhe/list_debug.c",
    "drivers/misc/lkdtm/bugs.c",
    "include/linux/list.h",
    "lib/Kconfig.debug",
    "lib/Makefile",
    "lib/list_debug.c",
    "security/Kconfig.hardening"
  ],
  "files_changed_count": 8,
  "stats": [
    {
      "file": "arch/arm64/kvm/hyp/nvhe/Makefile",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/arm64/kvm/hyp/nvhe/list_debug.c",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "drivers/misc/lkdtm/bugs.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "include/linux/list.h",
      "insertions": 58,
      "deletions": 6
    },
    {
      "file": "lib/Kconfig.debug",
      "insertions": 7,
      "deletions": 2
    },
    {
      "file": "lib/Makefile",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "lib/list_debug.c",
      "insertions": 4,
      "deletions": 1
    },
    {
      "file": "security/Kconfig.hardening",
      "insertions": 13,
      "deletions": 0
    }
  ],
  "total_insertions": 88,
  "total_deletions": 13,
  "total_changes": 101,
  "parents": [
    "b16c42c8fde808b4f047d94f1f2aeda93487670d"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2019-2215",
      "CVE-2019-2025"
    ],
    "security_keywords": [
      "hardening",
      "exploit"
    ]
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "arch/arm64/kvm/hyp/nvhe/Makefile",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/list.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/misc/lkdtm/bugs.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "security/Kconfig.hardening",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "lib/Kconfig.debug",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "lib/Makefile",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kvm/hyp/nvhe/list_debug.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "lib/list_debug.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}