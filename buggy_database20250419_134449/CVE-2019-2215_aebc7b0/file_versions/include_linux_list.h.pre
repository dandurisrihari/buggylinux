commit b16c42c8fde808b4f047d94f1f2aeda93487670d
Author: Marco Elver <elver@google.com>
Date:   Fri Aug 11 17:18:39 2023 +0200

    list_debug: Introduce inline wrappers for debug checks
    
    Turn the list debug checking functions __list_*_valid() into inline
    functions that wrap the out-of-line functions. Care is taken to ensure
    the inline wrappers are always inlined, so that additional compiler
    instrumentation (such as sanitizers) does not result in redundant
    outlining.
    
    This change is preparation for performing checks in the inline wrappers.
    
    No functional change intended.
    
    Signed-off-by: Marco Elver <elver@google.com>
    Link: https://lore.kernel.org/r/20230811151847.1594958-2-elver@google.com
    Signed-off-by: Kees Cook <keescook@chromium.org>

diff --git a/include/linux/list.h b/include/linux/list.h
index f10344dbad4d..130c6a1bb45c 100644
--- a/include/linux/list.h
+++ b/include/linux/list.h
@@ -39,10 +39,39 @@ static inline void INIT_LIST_HEAD(struct list_head *list)
 }
 
 #ifdef CONFIG_DEBUG_LIST
-extern bool __list_add_valid(struct list_head *new,
-			      struct list_head *prev,
-			      struct list_head *next);
-extern bool __list_del_entry_valid(struct list_head *entry);
+/*
+ * Performs the full set of list corruption checks before __list_add().
+ * On list corruption reports a warning, and returns false.
+ */
+extern bool __list_add_valid_or_report(struct list_head *new,
+				       struct list_head *prev,
+				       struct list_head *next);
+
+/*
+ * Performs list corruption checks before __list_add(). Returns false if a
+ * corruption is detected, true otherwise.
+ */
+static __always_inline bool __list_add_valid(struct list_head *new,
+					     struct list_head *prev,
+					     struct list_head *next)
+{
+	return __list_add_valid_or_report(new, prev, next);
+}
+
+/*
+ * Performs the full set of list corruption checks before __list_del_entry().
+ * On list corruption reports a warning, and returns false.
+ */
+extern bool __list_del_entry_valid_or_report(struct list_head *entry);
+
+/*
+ * Performs list corruption checks before __list_del_entry(). Returns false if a
+ * corruption is detected, true otherwise.
+ */
+static __always_inline bool __list_del_entry_valid(struct list_head *entry)
+{
+	return __list_del_entry_valid_or_report(entry);
+}
 #else
 static inline bool __list_add_valid(struct list_head *new,
 				struct list_head *prev,