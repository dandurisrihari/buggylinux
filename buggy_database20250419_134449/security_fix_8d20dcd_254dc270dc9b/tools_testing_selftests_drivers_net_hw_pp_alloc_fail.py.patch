commit 8d20dcda404d48784f2359976811bfc189992aa0
Author: John Daley <johndale@cisco.com>
Date:   Wed Jan 15 10:13:12 2025 -0800

    selftests: drv-net-hw: inject pp_alloc_fail errors in the right place
    
    The tool pp_alloc_fail.py tested error recovery by injecting errors
    into the function page_pool_alloc_pages(). The page pool allocation
    function page_pool_dev_alloc() does not end up calling
    page_pool_alloc_pages(). page_pool_alloc_netmems() seems to be the
    function that is called by all of the page pool alloc functions in
    the API, so move error injection to that function instead.
    
    Signed-off-by: John Daley <johndale@cisco.com>
    Link: https://patch.msgid.link/20250115181312.3544-2-johndale@cisco.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

diff --git a/tools/testing/selftests/drivers/net/hw/pp_alloc_fail.py b/tools/testing/selftests/drivers/net/hw/pp_alloc_fail.py
index 05b6fbb3fcdd..ad192fef3117 100755
--- a/tools/testing/selftests/drivers/net/hw/pp_alloc_fail.py
+++ b/tools/testing/selftests/drivers/net/hw/pp_alloc_fail.py
@@ -21,9 +21,9 @@ def _enable_pp_allocation_fail():
     if not os.path.exists("/sys/kernel/debug/fail_function"):
         raise KsftSkipEx("Kernel built without function error injection (or DebugFS)")
 
-    if not os.path.exists("/sys/kernel/debug/fail_function/page_pool_alloc_pages"):
+    if not os.path.exists("/sys/kernel/debug/fail_function/page_pool_alloc_netmems"):
         with open("/sys/kernel/debug/fail_function/inject", "w") as fp:
-            fp.write("page_pool_alloc_pages\n")
+            fp.write("page_pool_alloc_netmems\n")
 
     _write_fail_config({
         "verbose": 0,
@@ -37,7 +37,7 @@ def _disable_pp_allocation_fail():
     if not os.path.exists("/sys/kernel/debug/fail_function"):
         return
 
-    if os.path.exists("/sys/kernel/debug/fail_function/page_pool_alloc_pages"):
+    if os.path.exists("/sys/kernel/debug/fail_function/page_pool_alloc_netmems"):
         with open("/sys/kernel/debug/fail_function/inject", "w") as fp:
             fp.write("\n")