{
  "hash": "d08477aa975e97f1dc64c0ae59cebf98520456ce",
  "hash_short": "d08477aa",
  "subject": "fcntl: Don't use ambiguous SIG_POLL si_codes",
  "body": "We have a weird and problematic intersection of features that when\nthey all come together result in ambiguous siginfo values, that\nwe can not support properly.\n\n- Supporting fcntl(F_SETSIG,...) with arbitrary valid signals.\n\n- Using positive values for POLL_IN, POLL_OUT, POLL_MSG, ..., etc\n  that imply they are signal specific si_codes and using the\n  aforementioned arbitrary signal to deliver them.\n\n- Supporting injection of arbitrary siginfo values for debugging and\n  checkpoint/restore.\n\nThe result is that just looking at siginfo si_codes of 1 to 6 are\nambigious.  It could either be a signal specific si_code or it could\nbe a generic si_code.\n\nFor most of the kernel this is a non-issue but for sending signals\nwith siginfo it is impossible to play back the kernel signals and\nget the same result.\n\nStrictly speaking when the si_code was changed from SI_SIGIO to\nPOLL_IN and friends between 2.2 and 2.4 this functionality was not\nambiguous, as only real time signals were supported.  Before 2.4 was\nreleased the kernel began supporting siginfo with non realtime signals\nso they could give details of why the signal was sent.\n\nThe result is that if F_SETSIG is set to one of the signals with signal\nspecific si_codes then user space can not know why the signal was sent.\n\nI grepped through a bunch of userspace programs using debian code\nsearch to get a feel for how often people choose a signal that results\nin an ambiguous si_code.  I only found one program doing so and it was\nusing SIGCHLD to test the F_SETSIG functionality, and did not appear\nto be a real world usage.\n\nTherefore the ambiguity does not appears to be a real world problem in\npractice.  Remove the ambiguity while introducing the smallest chance\nof breakage by changing the si_code to SI_SIGIO when signals with\nsignal specific si_codes are targeted.\n\nFixes: v2.3.40 -- Added support for queueing non-rt signals\nFixes: v2.3.21 -- Changed the si_code from SI_SIGIO\nSigned-off-by: \"Eric W. Biederman\" <ebiederm@xmission.com>",
  "full_message": "fcntl: Don't use ambiguous SIG_POLL si_codes\n\nWe have a weird and problematic intersection of features that when\nthey all come together result in ambiguous siginfo values, that\nwe can not support properly.\n\n- Supporting fcntl(F_SETSIG,...) with arbitrary valid signals.\n\n- Using positive values for POLL_IN, POLL_OUT, POLL_MSG, ..., etc\n  that imply they are signal specific si_codes and using the\n  aforementioned arbitrary signal to deliver them.\n\n- Supporting injection of arbitrary siginfo values for debugging and\n  checkpoint/restore.\n\nThe result is that just looking at siginfo si_codes of 1 to 6 are\nambigious.  It could either be a signal specific si_code or it could\nbe a generic si_code.\n\nFor most of the kernel this is a non-issue but for sending signals\nwith siginfo it is impossible to play back the kernel signals and\nget the same result.\n\nStrictly speaking when the si_code was changed from SI_SIGIO to\nPOLL_IN and friends between 2.2 and 2.4 this functionality was not\nambiguous, as only real time signals were supported.  Before 2.4 was\nreleased the kernel began supporting siginfo with non realtime signals\nso they could give details of why the signal was sent.\n\nThe result is that if F_SETSIG is set to one of the signals with signal\nspecific si_codes then user space can not know why the signal was sent.\n\nI grepped through a bunch of userspace programs using debian code\nsearch to get a feel for how often people choose a signal that results\nin an ambiguous si_code.  I only found one program doing so and it was\nusing SIGCHLD to test the F_SETSIG functionality, and did not appear\nto be a real world usage.\n\nTherefore the ambiguity does not appears to be a real world problem in\npractice.  Remove the ambiguity while introducing the smallest chance\nof breakage by changing the si_code to SI_SIGIO when signals with\nsignal specific si_codes are targeted.\n\nFixes: v2.3.40 -- Added support for queueing non-rt signals\nFixes: v2.3.21 -- Changed the si_code from SI_SIGIO\nSigned-off-by: \"Eric W. Biederman\" <ebiederm@xmission.com>",
  "author_name": "Eric W. Biederman",
  "author_email": "ebiederm@xmission.com",
  "author_date": "Thu Jun 29 09:28:50 2017 -0500",
  "author_date_iso": "2017-06-29T09:28:50-05:00",
  "committer_name": "Eric W. Biederman",
  "committer_email": "ebiederm@xmission.com",
  "committer_date": "Mon Jul 24 14:29:23 2017 -0500",
  "committer_date_iso": "2017-07-24T14:29:23-05:00",
  "files_changed": [
    "fs/fcntl.c",
    "include/linux/signal.h",
    "include/uapi/asm-generic/siginfo.h"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "fs/fcntl.c",
      "insertions": 12,
      "deletions": 1
    },
    {
      "file": "include/linux/signal.h",
      "insertions": 8,
      "deletions": 0
    },
    {
      "file": "include/uapi/asm-generic/siginfo.h",
      "insertions": 2,
      "deletions": 2
    }
  ],
  "total_insertions": 22,
  "total_deletions": 3,
  "total_changes": 25,
  "parents": [
    "d12fe87e62d773e81e0cb3a123c5a480a10d7d91"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.14",
    "v4.14-rc1",
    "v4.14-rc2",
    "v4.14-rc3",
    "v4.14-rc4",
    "v4.14-rc5",
    "v4.14-rc6",
    "v4.14-rc7",
    "v4.14-rc8",
    "v4.15"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/fcntl.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/signal.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/uapi/asm-generic/siginfo.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}