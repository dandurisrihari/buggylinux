{
  "hash": "50e3ed0f93f4f62ed2aa83de5db6cb84ecdd5707",
  "hash_short": "50e3ed0f",
  "subject": "arm64: mm: add support for WXN memory translation attribute",
  "body": "The AArch64 virtual memory system supports a global WXN control, which\ncan be enabled to make all writable mappings implicitly no-exec. This is\na useful hardening feature, as it prevents mistakes in managing page\ntable permissions from being exploited to attack the system.\n\nWhen enabled at EL1, the restrictions apply to both EL1 and EL0. EL1 is\ncompletely under our control, and has been cleaned up to allow WXN to be\nenabled from boot onwards. EL0 is not under our control, but given that\nwidely deployed security features such as selinux or PaX already limit\nthe ability of user space to create mappings that are writable and\nexecutable at the same time, the impact of enabling this for EL0 is\nexpected to be limited. (For this reason, common user space libraries\nthat have a legitimate need for manipulating executable code already\ncarry fallbacks such as [0].)\n\nIf enabled at compile time, the feature can still be disabled at boot if\nneeded, by passing arm64.nowxn on the kernel command line.\n\n[0] https://github.com/libffi/libffi/blob/master/src/closures.c#L440\n\nSigned-off-by: Ard Biesheuvel <ardb@kernel.org>\nReviewed-by: Kees Cook <keescook@chromium.org>\nLink: https://lore.kernel.org/r/20240214122845.2033971-88-ardb+git@google.com\nSigned-off-by: Catalin Marinas <catalin.marinas@arm.com>",
  "full_message": "arm64: mm: add support for WXN memory translation attribute\n\nThe AArch64 virtual memory system supports a global WXN control, which\ncan be enabled to make all writable mappings implicitly no-exec. This is\na useful hardening feature, as it prevents mistakes in managing page\ntable permissions from being exploited to attack the system.\n\nWhen enabled at EL1, the restrictions apply to both EL1 and EL0. EL1 is\ncompletely under our control, and has been cleaned up to allow WXN to be\nenabled from boot onwards. EL0 is not under our control, but given that\nwidely deployed security features such as selinux or PaX already limit\nthe ability of user space to create mappings that are writable and\nexecutable at the same time, the impact of enabling this for EL0 is\nexpected to be limited. (For this reason, common user space libraries\nthat have a legitimate need for manipulating executable code already\ncarry fallbacks such as [0].)\n\nIf enabled at compile time, the feature can still be disabled at boot if\nneeded, by passing arm64.nowxn on the kernel command line.\n\n[0] https://github.com/libffi/libffi/blob/master/src/closures.c#L440\n\nSigned-off-by: Ard Biesheuvel <ardb@kernel.org>\nReviewed-by: Kees Cook <keescook@chromium.org>\nLink: https://lore.kernel.org/r/20240214122845.2033971-88-ardb+git@google.com\nSigned-off-by: Catalin Marinas <catalin.marinas@arm.com>",
  "author_name": "Ard Biesheuvel",
  "author_email": "ardb@kernel.org",
  "author_date": "Wed Feb 14 13:29:29 2024 +0100",
  "author_date_iso": "2024-02-14T13:29:29+01:00",
  "committer_name": "Catalin Marinas",
  "committer_email": "catalin.marinas@arm.com",
  "committer_date": "Fri Feb 16 12:42:43 2024 +0000",
  "committer_date_iso": "2024-02-16T12:42:43+00:00",
  "files_changed": [
    "arch/arm64/Kconfig",
    "arch/arm64/include/asm/cpufeature.h",
    "arch/arm64/include/asm/mman.h",
    "arch/arm64/include/asm/mmu_context.h",
    "arch/arm64/kernel/pi/idreg-override.c",
    "arch/arm64/kernel/pi/map_kernel.c",
    "arch/arm64/mm/proc.S"
  ],
  "files_changed_count": 7,
  "stats": [
    {
      "file": "arch/arm64/Kconfig",
      "insertions": 11,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/cpufeature.h",
      "insertions": 8,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/mman.h",
      "insertions": 36,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/mmu_context.h",
      "insertions": 29,
      "deletions": 1
    },
    {
      "file": "arch/arm64/kernel/pi/idreg-override.c",
      "insertions": 3,
      "deletions": 1
    },
    {
      "file": "arch/arm64/kernel/pi/map_kernel.c",
      "insertions": 23,
      "deletions": 0
    },
    {
      "file": "arch/arm64/mm/proc.S",
      "insertions": 6,
      "deletions": 0
    }
  ],
  "total_insertions": 116,
  "total_deletions": 2,
  "total_changes": 118,
  "parents": [
    "cb1a393c40eee2f1692c995ea0cc6e45bfccde4d"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/arm64/include/asm/cpufeature.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/asm/mmu_context.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/asm/mman.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/pi/idreg-override.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/pi/map_kernel.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/mm/proc.S",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}