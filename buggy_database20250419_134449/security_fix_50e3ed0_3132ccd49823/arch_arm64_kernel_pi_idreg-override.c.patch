commit 50e3ed0f93f4f62ed2aa83de5db6cb84ecdd5707
Author: Ard Biesheuvel <ardb@kernel.org>
Date:   Wed Feb 14 13:29:29 2024 +0100

    arm64: mm: add support for WXN memory translation attribute
    
    The AArch64 virtual memory system supports a global WXN control, which
    can be enabled to make all writable mappings implicitly no-exec. This is
    a useful hardening feature, as it prevents mistakes in managing page
    table permissions from being exploited to attack the system.
    
    When enabled at EL1, the restrictions apply to both EL1 and EL0. EL1 is
    completely under our control, and has been cleaned up to allow WXN to be
    enabled from boot onwards. EL0 is not under our control, but given that
    widely deployed security features such as selinux or PaX already limit
    the ability of user space to create mappings that are writable and
    executable at the same time, the impact of enabling this for EL0 is
    expected to be limited. (For this reason, common user space libraries
    that have a legitimate need for manipulating executable code already
    carry fallbacks such as [0].)
    
    If enabled at compile time, the feature can still be disabled at boot if
    needed, by passing arm64.nowxn on the kernel command line.
    
    [0] https://github.com/libffi/libffi/blob/master/src/closures.c#L440
    
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20240214122845.2033971-88-ardb+git@google.com
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>

diff --git a/arch/arm64/kernel/pi/idreg-override.c b/arch/arm64/kernel/pi/idreg-override.c
index aad399796e81..bccfee34f62f 100644
--- a/arch/arm64/kernel/pi/idreg-override.c
+++ b/arch/arm64/kernel/pi/idreg-override.c
@@ -189,6 +189,7 @@ static const struct ftr_set_desc sw_features __prel64_initconst = {
 		FIELD("nokaslr", ARM64_SW_FEATURE_OVERRIDE_NOKASLR, NULL),
 		FIELD("hvhe", ARM64_SW_FEATURE_OVERRIDE_HVHE, hvhe_filter),
 		FIELD("rodataoff", ARM64_SW_FEATURE_OVERRIDE_RODATA_OFF, NULL),
+		FIELD("nowxn", ARM64_SW_FEATURE_OVERRIDE_NOWXN, NULL),
 		{}
 	},
 };
@@ -221,8 +222,9 @@ static const struct {
 	{ "arm64.nomops",		"id_aa64isar2.mops=0" },
 	{ "arm64.nomte",		"id_aa64pfr1.mte=0" },
 	{ "nokaslr",			"arm64_sw.nokaslr=1" },
-	{ "rodata=off",			"arm64_sw.rodataoff=1" },
+	{ "rodata=off",			"arm64_sw.rodataoff=1 arm64_sw.nowxn=1" },
 	{ "arm64.nolva",		"id_aa64mmfr2.varange=0" },
+	{ "arm64.nowxn",		"arm64_sw.nowxn=1" },
 };
 
 static int __init parse_hexdigit(const char *p, u64 *v)