{
  "hash": "304ec1b050310548db33063e567123fae8fd0301",
  "hash_short": "304ec1b0",
  "subject": "x86/uaccess: Use __uaccess_begin_nospec() and uaccess_try_nospec",
  "body": "Quoting Linus:\n\n    I do think that it would be a good idea to very expressly document\n    the fact that it's not that the user access itself is unsafe. I do\n    agree that things like \"get_user()\" want to be protected, but not\n    because of any direct bugs or problems with get_user() and friends,\n    but simply because get_user() is an excellent source of a pointer\n    that is obviously controlled from a potentially attacking user\n    space. So it's a prime candidate for then finding _subsequent_\n    accesses that can then be used to perturb the cache.\n\n__uaccess_begin_nospec() covers __get_user() and copy_from_iter() where the\nlimit check is far away from the user pointer de-reference. In those cases\na barrier_nospec() prevents speculation with a potential pointer to\nprivileged memory. uaccess_try_nospec covers get_user_try.\n\nSuggested-by: Linus Torvalds <torvalds@linux-foundation.org>\nSuggested-by: Andi Kleen <ak@linux.intel.com>\nSigned-off-by: Dan Williams <dan.j.williams@intel.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nCc: linux-arch@vger.kernel.org\nCc: Kees Cook <keescook@chromium.org>\nCc: kernel-hardening@lists.openwall.com\nCc: gregkh@linuxfoundation.org\nCc: Al Viro <viro@zeniv.linux.org.uk>\nCc: alan@linux.intel.com\nLink: https://lkml.kernel.org/r/151727416953.33451.10508284228526170604.stgit@dwillia2-desk3.amr.corp.intel.com",
  "full_message": "x86/uaccess: Use __uaccess_begin_nospec() and uaccess_try_nospec\n\nQuoting Linus:\n\n    I do think that it would be a good idea to very expressly document\n    the fact that it's not that the user access itself is unsafe. I do\n    agree that things like \"get_user()\" want to be protected, but not\n    because of any direct bugs or problems with get_user() and friends,\n    but simply because get_user() is an excellent source of a pointer\n    that is obviously controlled from a potentially attacking user\n    space. So it's a prime candidate for then finding _subsequent_\n    accesses that can then be used to perturb the cache.\n\n__uaccess_begin_nospec() covers __get_user() and copy_from_iter() where the\nlimit check is far away from the user pointer de-reference. In those cases\na barrier_nospec() prevents speculation with a potential pointer to\nprivileged memory. uaccess_try_nospec covers get_user_try.\n\nSuggested-by: Linus Torvalds <torvalds@linux-foundation.org>\nSuggested-by: Andi Kleen <ak@linux.intel.com>\nSigned-off-by: Dan Williams <dan.j.williams@intel.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nCc: linux-arch@vger.kernel.org\nCc: Kees Cook <keescook@chromium.org>\nCc: kernel-hardening@lists.openwall.com\nCc: gregkh@linuxfoundation.org\nCc: Al Viro <viro@zeniv.linux.org.uk>\nCc: alan@linux.intel.com\nLink: https://lkml.kernel.org/r/151727416953.33451.10508284228526170604.stgit@dwillia2-desk3.amr.corp.intel.com",
  "author_name": "Dan Williams",
  "author_email": "dan.j.williams@intel.com",
  "author_date": "Mon Jan 29 17:02:49 2018 -0800",
  "author_date_iso": "2018-01-29T17:02:49-08:00",
  "committer_name": "Thomas Gleixner",
  "committer_email": "tglx@linutronix.de",
  "committer_date": "Tue Jan 30 21:54:31 2018 +0100",
  "committer_date_iso": "2018-01-30T21:54:31+01:00",
  "files_changed": [
    "arch/x86/include/asm/uaccess.h",
    "arch/x86/include/asm/uaccess_32.h",
    "arch/x86/include/asm/uaccess_64.h",
    "arch/x86/lib/usercopy_32.c"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "arch/x86/include/asm/uaccess.h",
      "insertions": 3,
      "deletions": 3
    },
    {
      "file": "arch/x86/include/asm/uaccess_32.h",
      "insertions": 3,
      "deletions": 3
    },
    {
      "file": "arch/x86/include/asm/uaccess_64.h",
      "insertions": 6,
      "deletions": 6
    },
    {
      "file": "arch/x86/lib/usercopy_32.c",
      "insertions": 2,
      "deletions": 2
    }
  ],
  "total_insertions": 14,
  "total_deletions": 14,
  "total_changes": 28,
  "parents": [
    "b5c4ae4f35325d520b230bab6eb3310613b72ac1"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.16",
    "v4.16-rc1",
    "v4.16-rc2",
    "v4.16-rc3",
    "v4.16-rc4",
    "v4.16-rc5",
    "v4.16-rc6",
    "v4.16-rc7",
    "v4.17",
    "v4.17-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/include/asm/uaccess.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/uaccess_32.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/uaccess_64.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/lib/usercopy_32.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}