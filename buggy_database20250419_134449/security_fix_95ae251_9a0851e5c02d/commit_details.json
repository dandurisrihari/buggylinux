{
  "hash": "95ae251fe82838b85c6d37e5a1775006e2a42ae0",
  "hash_short": "95ae251f",
  "subject": "f2fs: add fs-verity support",
  "body": "Add fs-verity support to f2fs.  fs-verity is a filesystem feature that\nenables transparent integrity protection and authentication of read-only\nfiles.  It uses a dm-verity like mechanism at the file level: a Merkle\ntree is used to verify any block in the file in log(filesize) time.  It\nis implemented mainly by helper functions in fs/verity/.  See\nDocumentation/filesystems/fsverity.rst for the full documentation.\n\nThe f2fs support for fs-verity consists of:\n\n- Adding a filesystem feature flag and an inode flag for fs-verity.\n\n- Implementing the fsverity_operations to support enabling verity on an\n  inode and reading/writing the verity metadata.\n\n- Updating ->readpages() to verify data as it's read from verity files\n  and to support reading verity metadata pages.\n\n- Updating ->write_begin(), ->write_end(), and ->writepages() to support\n  writing verity metadata pages.\n\n- Calling the fs-verity hooks for ->open(), ->setattr(), and ->ioctl().\n\nLike ext4, f2fs stores the verity metadata (Merkle tree and\nfsverity_descriptor) past the end of the file, starting at the first 64K\nboundary beyond i_size.  This approach works because (a) verity files\nare readonly, and (b) pages fully beyond i_size aren't visible to\nuserspace but can be read/written internally by f2fs with only some\nrelatively small changes to f2fs.  Extended attributes cannot be used\nbecause (a) f2fs limits the total size of an inode's xattr entries to\n4096 bytes, which wouldn't be enough for even a single Merkle tree\nblock, and (b) f2fs encryption doesn't encrypt xattrs, yet the verity\nmetadata *must* be encrypted when the file is because it contains hashes\nof the plaintext data.\n\nAcked-by: Jaegeuk Kim <jaegeuk@kernel.org>\nAcked-by: Chao Yu <yuchao0@huawei.com>\nSigned-off-by: Eric Biggers <ebiggers@google.com>",
  "full_message": "f2fs: add fs-verity support\n\nAdd fs-verity support to f2fs.  fs-verity is a filesystem feature that\nenables transparent integrity protection and authentication of read-only\nfiles.  It uses a dm-verity like mechanism at the file level: a Merkle\ntree is used to verify any block in the file in log(filesize) time.  It\nis implemented mainly by helper functions in fs/verity/.  See\nDocumentation/filesystems/fsverity.rst for the full documentation.\n\nThe f2fs support for fs-verity consists of:\n\n- Adding a filesystem feature flag and an inode flag for fs-verity.\n\n- Implementing the fsverity_operations to support enabling verity on an\n  inode and reading/writing the verity metadata.\n\n- Updating ->readpages() to verify data as it's read from verity files\n  and to support reading verity metadata pages.\n\n- Updating ->write_begin(), ->write_end(), and ->writepages() to support\n  writing verity metadata pages.\n\n- Calling the fs-verity hooks for ->open(), ->setattr(), and ->ioctl().\n\nLike ext4, f2fs stores the verity metadata (Merkle tree and\nfsverity_descriptor) past the end of the file, starting at the first 64K\nboundary beyond i_size.  This approach works because (a) verity files\nare readonly, and (b) pages fully beyond i_size aren't visible to\nuserspace but can be read/written internally by f2fs with only some\nrelatively small changes to f2fs.  Extended attributes cannot be used\nbecause (a) f2fs limits the total size of an inode's xattr entries to\n4096 bytes, which wouldn't be enough for even a single Merkle tree\nblock, and (b) f2fs encryption doesn't encrypt xattrs, yet the verity\nmetadata *must* be encrypted when the file is because it contains hashes\nof the plaintext data.\n\nAcked-by: Jaegeuk Kim <jaegeuk@kernel.org>\nAcked-by: Chao Yu <yuchao0@huawei.com>\nSigned-off-by: Eric Biggers <ebiggers@google.com>",
  "author_name": "Eric Biggers",
  "author_email": "ebiggers@google.com",
  "author_date": "Mon Jul 22 09:26:24 2019 -0700",
  "author_date_iso": "2019-07-22T09:26:24-07:00",
  "committer_name": "Eric Biggers",
  "committer_email": "ebiggers@google.com",
  "committer_date": "Mon Aug 12 19:33:51 2019 -0700",
  "committer_date_iso": "2019-08-12T19:33:51-07:00",
  "files_changed": [
    "fs/f2fs/Makefile",
    "fs/f2fs/data.c",
    "fs/f2fs/f2fs.h",
    "fs/f2fs/file.c",
    "fs/f2fs/inode.c",
    "fs/f2fs/super.c",
    "fs/f2fs/sysfs.c",
    "fs/f2fs/verity.c",
    "fs/f2fs/xattr.h"
  ],
  "files_changed_count": 9,
  "stats": [
    {
      "file": "fs/f2fs/Makefile",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "fs/f2fs/data.c",
      "insertions": 65,
      "deletions": 10
    },
    {
      "file": "fs/f2fs/f2fs.h",
      "insertions": 17,
      "deletions": 3
    },
    {
      "file": "fs/f2fs/file.c",
      "insertions": 42,
      "deletions": 1
    },
    {
      "file": "fs/f2fs/inode.c",
      "insertions": 4,
      "deletions": 1
    },
    {
      "file": "fs/f2fs/super.c",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "fs/f2fs/sysfs.c",
      "insertions": 11,
      "deletions": 0
    },
    {
      "file": "fs/f2fs/verity.c",
      "insertions": 247,
      "deletions": 0
    },
    {
      "file": "fs/f2fs/xattr.h",
      "insertions": 2,
      "deletions": 0
    }
  ],
  "total_insertions": 392,
  "total_deletions": 15,
  "total_changes": 407,
  "parents": [
    "84fb7ca4b3f864782cb1e66e60b04d4ea1d2930b"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.4",
    "v5.4-rc1",
    "v5.4-rc2",
    "v5.4-rc3",
    "v5.4-rc4",
    "v5.4-rc5",
    "v5.4-rc6",
    "v5.4-rc7",
    "v5.4-rc8",
    "v5.5"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/f2fs/inode.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/f2fs/Makefile",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/f2fs/verity.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/f2fs/f2fs.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/f2fs/data.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/f2fs/super.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/f2fs/sysfs.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/f2fs/file.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/f2fs/xattr.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}