{
  "hash": "a5ab0de0ebaa65e0a75ec0761a2745c66a9d17dc",
  "hash_short": "a5ab0de0",
  "subject": "cxl: Calculate region bandwidth of targets with shared upstream link",
  "body": "The current bandwidth calculation aggregates all the targets. This simple\nmethod does not take into account where multiple targets sharing under\na switch or a root port where the aggregated bandwidth can be greater than\nthe upstream link of the switch.\n\nTo accurately account for the shared upstream uplink cases, a new update\nfunction is introduced by walking from the leaves to the root of the\nhierarchy and clamp the bandwidth in the process as needed. This process\nis done when all the targets for a region are present but before the\nfinal values are send to the HMAT handling code cached access_coordinate\ntargets.\n\nThe original perf calculation path was kept to calculate the latency\nperformance data that does not require the shared link consideration.\nThe shared upstream link calculation is done as a second pass when all\nthe endpoints have arrived.\n\nTesting is done via qemu with CXL hierarchy. run_qemu[1] is modified to\nsupport several CXL hierarchy layouts. The following layouts are tested:\n\nHB: Host Bridge\nRP: Root Port\nSW: Switch\nEP: End Point\n\n2 HB 2 RP 2 EP: resulting bandwidth: 624\n1 HB 2 RP 2 EP: resulting bandwidth: 624\n2 HB 2 RP 2 SW 4 EP: resulting bandwidth: 624\n\nCurrent testing, perf number from SRAT/HMAT is hacked into the kernel\ncode. However with new QEMU support of Generic Target Port that's\nincoming, the perf data injection is no longer needed.\n\n[1]: https://github.com/pmem/run_qemu\n\nSuggested-by: Jonathan Cameron <jonathan.cameron@huawei.com>\nLink: https://lore.kernel.org/linux-cxl/20240501152503.00002e60@Huawei.com/\nReviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>\nReviewed-by: Alison Schofield <alison.schofield@intel.com>\nAcked-by: Dan Williams <dan.j.williams@intel.com>\nLink: https://patch.msgid.link/20240904001316.1688225-3-dave.jiang@intel.com\nSigned-off-by: Dave Jiang <dave.jiang@intel.com>",
  "full_message": "cxl: Calculate region bandwidth of targets with shared upstream link\n\nThe current bandwidth calculation aggregates all the targets. This simple\nmethod does not take into account where multiple targets sharing under\na switch or a root port where the aggregated bandwidth can be greater than\nthe upstream link of the switch.\n\nTo accurately account for the shared upstream uplink cases, a new update\nfunction is introduced by walking from the leaves to the root of the\nhierarchy and clamp the bandwidth in the process as needed. This process\nis done when all the targets for a region are present but before the\nfinal values are send to the HMAT handling code cached access_coordinate\ntargets.\n\nThe original perf calculation path was kept to calculate the latency\nperformance data that does not require the shared link consideration.\nThe shared upstream link calculation is done as a second pass when all\nthe endpoints have arrived.\n\nTesting is done via qemu with CXL hierarchy. run_qemu[1] is modified to\nsupport several CXL hierarchy layouts. The following layouts are tested:\n\nHB: Host Bridge\nRP: Root Port\nSW: Switch\nEP: End Point\n\n2 HB 2 RP 2 EP: resulting bandwidth: 624\n1 HB 2 RP 2 EP: resulting bandwidth: 624\n2 HB 2 RP 2 SW 4 EP: resulting bandwidth: 624\n\nCurrent testing, perf number from SRAT/HMAT is hacked into the kernel\ncode. However with new QEMU support of Generic Target Port that's\nincoming, the perf data injection is no longer needed.\n\n[1]: https://github.com/pmem/run_qemu\n\nSuggested-by: Jonathan Cameron <jonathan.cameron@huawei.com>\nLink: https://lore.kernel.org/linux-cxl/20240501152503.00002e60@Huawei.com/\nReviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>\nReviewed-by: Alison Schofield <alison.schofield@intel.com>\nAcked-by: Dan Williams <dan.j.williams@intel.com>\nLink: https://patch.msgid.link/20240904001316.1688225-3-dave.jiang@intel.com\nSigned-off-by: Dave Jiang <dave.jiang@intel.com>",
  "author_name": "Dave Jiang",
  "author_email": "dave.jiang@intel.com",
  "author_date": "Tue Sep 3 17:11:51 2024 -0700",
  "author_date_iso": "2024-09-03T17:11:51-07:00",
  "committer_name": "Dave Jiang",
  "committer_email": "dave.jiang@intel.com",
  "committer_date": "Sun Sep 22 21:05:16 2024 -0700",
  "committer_date_iso": "2024-09-22T21:05:16-07:00",
  "files_changed": [
    "drivers/cxl/core/cdat.c",
    "drivers/cxl/core/core.h",
    "drivers/cxl/core/pci.c",
    "drivers/cxl/core/port.c",
    "drivers/cxl/core/region.c",
    "drivers/cxl/cxl.h"
  ],
  "files_changed_count": 6,
  "stats": [
    {
      "file": "drivers/cxl/core/cdat.c",
      "insertions": 488,
      "deletions": 9
    },
    {
      "file": "drivers/cxl/core/core.h",
      "insertions": 3,
      "deletions": 1
    },
    {
      "file": "drivers/cxl/core/pci.c",
      "insertions": 23,
      "deletions": 0
    },
    {
      "file": "drivers/cxl/core/port.c",
      "insertions": 20,
      "deletions": 0
    },
    {
      "file": "drivers/cxl/core/region.c",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "drivers/cxl/cxl.h",
      "insertions": 1,
      "deletions": 0
    }
  ],
  "total_insertions": 537,
  "total_deletions": 10,
  "total_changes": 547,
  "parents": [
    "e91be3ed30d79ccd3e87e3970a26dea844c04919"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/cxl/cxl.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/cxl/core/cdat.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/cxl/core/port.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/cxl/core/pci.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/cxl/core/core.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/cxl/core/region.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}