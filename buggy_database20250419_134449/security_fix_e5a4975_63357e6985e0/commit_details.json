{
  "hash": "e5a4975ca463e91c2009f5950e0156f0b857eb10",
  "hash_short": "e5a4975c",
  "subject": "nvme-fc: replace deprecated strncpy with strscpy",
  "body": "strncpy() is deprecated for use on NUL-terminated destination strings\n[1] and as such we should prefer more robust and less ambiguous string\ninterfaces.\n\nLet's instead use strscpy() [2] as it guarantees NUL-termination on the\ndestination buffer.\n\nMoreover, there is no need to use:\n\n|       min(FCNVME_ASSOC_HOSTNQN_LEN, NVMF_NQN_SIZE));\n\nI imagine this was originally done to make sure the destination buffer\nis NUL-terminated by ensuring we copy a number of bytes less than the\nsize of our destination, thus leaving some NUL-bytes at the end.\n\nHowever, with strscpy(), we no longer need to do this and we can instead\nopt for the more idiomatic strscpy() usage of:\n\n| strscpy(dest, src, sizeof(dest))\n\nAlso, no NUL-padding is required as lsop is zero-allocated:\n\n|       lsop = kzalloc((sizeof(*lsop) +\n|                        sizeof(*assoc_rqst) + sizeof(*assoc_acc) +\n|                        ctrl->lport->ops->lsrqst_priv_sz), GFP_KERNEL);\n\n... and assoc_rqst points to a field in lsop:\n\n|       assoc_rqst = (struct fcnvme_ls_cr_assoc_rqst *)&lsop[1];\n\nTherefore, any additional NUL-byte assignments (like the ones that\nstrncpy() makes) are redundant.\n\nLink: https://www.kernel.org/doc/html/latest/process/deprecated.html#strncpy-on-nul-terminated-strings [1]\nLink: https://manpages.debian.org/testing/linux-manual-4.8/strscpy.9.en.html [2]\nLink: https://github.com/KSPP/linux/issues/90\nCc: linux-hardening@vger.kernel.org\nSigned-off-by: Justin Stitt <justinstitt@google.com>\nSimilar-to: https://lore.kernel.org/all/20231018-strncpy-drivers-nvme-host-fabrics-c-v1-1-b6677df40a35@google.com/\nReviewed-by: Kees Cook <keescook@chromium.org>\nLink: https://lore.kernel.org/r/20231019-strncpy-drivers-nvme-host-fc-c-v1-1-5805c15e4b49@google.com\nSigned-off-by: Kees Cook <keescook@chromium.org>",
  "full_message": "nvme-fc: replace deprecated strncpy with strscpy\n\nstrncpy() is deprecated for use on NUL-terminated destination strings\n[1] and as such we should prefer more robust and less ambiguous string\ninterfaces.\n\nLet's instead use strscpy() [2] as it guarantees NUL-termination on the\ndestination buffer.\n\nMoreover, there is no need to use:\n\n|       min(FCNVME_ASSOC_HOSTNQN_LEN, NVMF_NQN_SIZE));\n\nI imagine this was originally done to make sure the destination buffer\nis NUL-terminated by ensuring we copy a number of bytes less than the\nsize of our destination, thus leaving some NUL-bytes at the end.\n\nHowever, with strscpy(), we no longer need to do this and we can instead\nopt for the more idiomatic strscpy() usage of:\n\n| strscpy(dest, src, sizeof(dest))\n\nAlso, no NUL-padding is required as lsop is zero-allocated:\n\n|       lsop = kzalloc((sizeof(*lsop) +\n|                        sizeof(*assoc_rqst) + sizeof(*assoc_acc) +\n|                        ctrl->lport->ops->lsrqst_priv_sz), GFP_KERNEL);\n\n... and assoc_rqst points to a field in lsop:\n\n|       assoc_rqst = (struct fcnvme_ls_cr_assoc_rqst *)&lsop[1];\n\nTherefore, any additional NUL-byte assignments (like the ones that\nstrncpy() makes) are redundant.\n\nLink: https://www.kernel.org/doc/html/latest/process/deprecated.html#strncpy-on-nul-terminated-strings [1]\nLink: https://manpages.debian.org/testing/linux-manual-4.8/strscpy.9.en.html [2]\nLink: https://github.com/KSPP/linux/issues/90\nCc: linux-hardening@vger.kernel.org\nSigned-off-by: Justin Stitt <justinstitt@google.com>\nSimilar-to: https://lore.kernel.org/all/20231018-strncpy-drivers-nvme-host-fabrics-c-v1-1-b6677df40a35@google.com/\nReviewed-by: Kees Cook <keescook@chromium.org>\nLink: https://lore.kernel.org/r/20231019-strncpy-drivers-nvme-host-fc-c-v1-1-5805c15e4b49@google.com\nSigned-off-by: Kees Cook <keescook@chromium.org>",
  "author_name": "Justin Stitt",
  "author_email": "justinstitt@google.com",
  "author_date": "Thu Oct 19 21:34:35 2023 +0000",
  "author_date_iso": "2023-10-19T21:34:35+00:00",
  "committer_name": "Kees Cook",
  "committer_email": "keescook@chromium.org",
  "committer_date": "Fri Dec 1 09:51:43 2023 -0800",
  "committer_date_iso": "2023-12-01T09:51:43-08:00",
  "files_changed": [
    "drivers/nvme/host/fc.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "drivers/nvme/host/fc.c",
      "insertions": 4,
      "deletions": 4
    }
  ],
  "total_insertions": 4,
  "total_deletions": 4,
  "total_changes": 8,
  "parents": [
    "ab7e8bb6e077a55ae5ac1a4bb4ebba85470d47e5"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/nvme/host/fc.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}