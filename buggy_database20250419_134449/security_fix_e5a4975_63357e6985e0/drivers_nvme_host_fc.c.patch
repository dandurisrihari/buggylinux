commit e5a4975ca463e91c2009f5950e0156f0b857eb10
Author: Justin Stitt <justinstitt@google.com>
Date:   Thu Oct 19 21:34:35 2023 +0000

    nvme-fc: replace deprecated strncpy with strscpy
    
    strncpy() is deprecated for use on NUL-terminated destination strings
    [1] and as such we should prefer more robust and less ambiguous string
    interfaces.
    
    Let's instead use strscpy() [2] as it guarantees NUL-termination on the
    destination buffer.
    
    Moreover, there is no need to use:
    
    |       min(FCNVME_ASSOC_HOSTNQN_LEN, NVMF_NQN_SIZE));
    
    I imagine this was originally done to make sure the destination buffer
    is NUL-terminated by ensuring we copy a number of bytes less than the
    size of our destination, thus leaving some NUL-bytes at the end.
    
    However, with strscpy(), we no longer need to do this and we can instead
    opt for the more idiomatic strscpy() usage of:
    
    | strscpy(dest, src, sizeof(dest))
    
    Also, no NUL-padding is required as lsop is zero-allocated:
    
    |       lsop = kzalloc((sizeof(*lsop) +
    |                        sizeof(*assoc_rqst) + sizeof(*assoc_acc) +
    |                        ctrl->lport->ops->lsrqst_priv_sz), GFP_KERNEL);
    
    ... and assoc_rqst points to a field in lsop:
    
    |       assoc_rqst = (struct fcnvme_ls_cr_assoc_rqst *)&lsop[1];
    
    Therefore, any additional NUL-byte assignments (like the ones that
    strncpy() makes) are redundant.
    
    Link: https://www.kernel.org/doc/html/latest/process/deprecated.html#strncpy-on-nul-terminated-strings [1]
    Link: https://manpages.debian.org/testing/linux-manual-4.8/strscpy.9.en.html [2]
    Link: https://github.com/KSPP/linux/issues/90
    Cc: linux-hardening@vger.kernel.org
    Signed-off-by: Justin Stitt <justinstitt@google.com>
    Similar-to: https://lore.kernel.org/all/20231018-strncpy-drivers-nvme-host-fabrics-c-v1-1-b6677df40a35@google.com/
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20231019-strncpy-drivers-nvme-host-fc-c-v1-1-5805c15e4b49@google.com
    Signed-off-by: Kees Cook <keescook@chromium.org>

diff --git a/drivers/nvme/host/fc.c b/drivers/nvme/host/fc.c
index 49c3e46eaa1e..a719ca2cd406 100644
--- a/drivers/nvme/host/fc.c
+++ b/drivers/nvme/host/fc.c
@@ -1218,10 +1218,10 @@ nvme_fc_connect_admin_queue(struct nvme_fc_ctrl *ctrl,
 	/* Linux supports only Dynamic controllers */
 	assoc_rqst->assoc_cmd.cntlid = cpu_to_be16(0xffff);
 	uuid_copy(&assoc_rqst->assoc_cmd.hostid, &ctrl->ctrl.opts->host->id);
-	strncpy(assoc_rqst->assoc_cmd.hostnqn, ctrl->ctrl.opts->host->nqn,
-		min(FCNVME_ASSOC_HOSTNQN_LEN, NVMF_NQN_SIZE));
-	strncpy(assoc_rqst->assoc_cmd.subnqn, ctrl->ctrl.opts->subsysnqn,
-		min(FCNVME_ASSOC_SUBNQN_LEN, NVMF_NQN_SIZE));
+	strscpy(assoc_rqst->assoc_cmd.hostnqn, ctrl->ctrl.opts->host->nqn,
+		sizeof(assoc_rqst->assoc_cmd.hostnqn));
+	strscpy(assoc_rqst->assoc_cmd.subnqn, ctrl->ctrl.opts->subsysnqn,
+		sizeof(assoc_rqst->assoc_cmd.subnqn));
 
 	lsop->queue = queue;
 	lsreq->rqstaddr = assoc_rqst;