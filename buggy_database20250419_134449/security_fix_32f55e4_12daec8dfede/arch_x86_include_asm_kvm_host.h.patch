commit 32f55e475ce2c4b8b124d335fcfaf1152ba977a1
Author: Sean Christopherson <seanjc@google.com>
Date:   Fri Jun 7 10:26:05 2024 -0700

    KVM: nVMX: Request immediate exit iff pending nested event needs injection
    
    When requesting an immediate exit from L2 in order to inject a pending
    event, do so only if the pending event actually requires manual injection,
    i.e. if and only if KVM actually needs to regain control in order to
    deliver the event.
    
    Avoiding the "immediate exit" isn't simply an optimization, it's necessary
    to make forward progress, as the "already expired" VMX preemption timer
    trick that KVM uses to force a VM-Exit has higher priority than events
    that aren't directly injected.
    
    At present time, this is a glorified nop as all events processed by
    vmx_has_nested_events() require injection, but that will not hold true in
    the future, e.g. if there's a pending virtual interrupt in vmcs02.RVI.
    I.e. if KVM is trying to deliver a virtual interrupt to L2, the expired
    VMX preemption timer will trigger VM-Exit before the virtual interrupt is
    delivered, and KVM will effectively hang the vCPU in an endless loop of
    forced immediate VM-Exits (because the pending virtual interrupt never
    goes away).
    
    Cc: stable@vger.kernel.org
    Link: https://lore.kernel.org/r/20240607172609.3205077-3-seanjc@google.com
    Signed-off-by: Sean Christopherson <seanjc@google.com>

diff --git a/arch/x86/include/asm/kvm_host.h b/arch/x86/include/asm/kvm_host.h
index 9bb2e164c523..b3b796f06801 100644
--- a/arch/x86/include/asm/kvm_host.h
+++ b/arch/x86/include/asm/kvm_host.h
@@ -1823,7 +1823,7 @@ struct kvm_x86_nested_ops {
 	bool (*is_exception_vmexit)(struct kvm_vcpu *vcpu, u8 vector,
 				    u32 error_code);
 	int (*check_events)(struct kvm_vcpu *vcpu);
-	bool (*has_events)(struct kvm_vcpu *vcpu);
+	bool (*has_events)(struct kvm_vcpu *vcpu, bool for_injection);
 	void (*triple_fault)(struct kvm_vcpu *vcpu);
 	int (*get_state)(struct kvm_vcpu *vcpu,
 			 struct kvm_nested_state __user *user_kvm_nested_state,