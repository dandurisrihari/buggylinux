{
  "hash": "8b41fc4454e36fbfdbb23f940d023d4dece2de29",
  "hash_short": "8b41fc44",
  "subject": "kbuild: create modules.builtin without Makefile.modbuiltin or tristate.conf",
  "body": "Commit bc081dd6e9f6 (\"kbuild: generate modules.builtin\") added\ninfrastructure to generate modules.builtin, the list of all\nbuiltin modules.\n\nBasically, it works like this:\n\n  - Kconfig generates include/config/tristate.conf, the list of\n    tristate CONFIG options with a value in a capital letter.\n\n  - scripts/Makefile.modbuiltin makes Kbuild descend into\n    directories to collect the information of builtin modules.\n\nI am not a big fan of it because Kbuild ends up with traversing\nthe source tree twice.\n\nI am not sure how perfectly it should work, but this approach cannot\navoid false positives; even if the relevant CONFIG option is tristate,\nsome Makefiles forces obj-m to obj-y.\n\nSome examples are:\n\n  arch/powerpc/platforms/powermac/Makefile:\n    obj-$(CONFIG_NVRAM:m=y)         += nvram.o\n\n  net/ipv6/Makefile:\n    obj-$(subst m,y,$(CONFIG_IPV6)) += inet6_hashtables.o\n\n  net/netlabel/Makefile:\n    obj-$(subst m,y,$(CONFIG_IPV6)) += netlabel_calipso.o\n\nNobody has complained about (or noticed) it, so it is probably fine to\nhave false positives in modules.builtin.\n\nThis commit simplifies the implementation. Let's exploit the fact\nthat every module has MODULE_LICENSE(). (modpost shows a warning if\nMODULE_LICENSE is missing. If so, 0-day bot would already have blocked\nsuch a module.)\n\nI added MODULE_FILE to <linux/module.h>. When the code is being compiled\nas builtin, it will be filled with the file path of the module, and\ncollected into modules.builtin.info. Then, scripts/link-vmlinux.sh\nextracts the list of builtin modules out of it.\n\nThis new approach fixes the false-positives above, but adds another\ntype of false-positives; non-modular code may have MODULE_LICENSE()\nby mistake. This is not a big deal, it is just the code is always\norphan. We can clean it up if we like. You can see cleanup examples by:\n\n  $ git log --grep='make.* explicitly non-modular'\n\nTo sum up, this commits deletes lots of code, but still produces almost\nequivalent results. Please note it does not increase the vmlinux size at\nall. As you can see in include/asm-generic/vmlinux.lds.h, the .modinfo\nsection is discarded in the link stage.\n\nSigned-off-by: Masahiro Yamada <masahiroy@kernel.org>",
  "full_message": "kbuild: create modules.builtin without Makefile.modbuiltin or tristate.conf\n\nCommit bc081dd6e9f6 (\"kbuild: generate modules.builtin\") added\ninfrastructure to generate modules.builtin, the list of all\nbuiltin modules.\n\nBasically, it works like this:\n\n  - Kconfig generates include/config/tristate.conf, the list of\n    tristate CONFIG options with a value in a capital letter.\n\n  - scripts/Makefile.modbuiltin makes Kbuild descend into\n    directories to collect the information of builtin modules.\n\nI am not a big fan of it because Kbuild ends up with traversing\nthe source tree twice.\n\nI am not sure how perfectly it should work, but this approach cannot\navoid false positives; even if the relevant CONFIG option is tristate,\nsome Makefiles forces obj-m to obj-y.\n\nSome examples are:\n\n  arch/powerpc/platforms/powermac/Makefile:\n    obj-$(CONFIG_NVRAM:m=y)         += nvram.o\n\n  net/ipv6/Makefile:\n    obj-$(subst m,y,$(CONFIG_IPV6)) += inet6_hashtables.o\n\n  net/netlabel/Makefile:\n    obj-$(subst m,y,$(CONFIG_IPV6)) += netlabel_calipso.o\n\nNobody has complained about (or noticed) it, so it is probably fine to\nhave false positives in modules.builtin.\n\nThis commit simplifies the implementation. Let's exploit the fact\nthat every module has MODULE_LICENSE(). (modpost shows a warning if\nMODULE_LICENSE is missing. If so, 0-day bot would already have blocked\nsuch a module.)\n\nI added MODULE_FILE to <linux/module.h>. When the code is being compiled\nas builtin, it will be filled with the file path of the module, and\ncollected into modules.builtin.info. Then, scripts/link-vmlinux.sh\nextracts the list of builtin modules out of it.\n\nThis new approach fixes the false-positives above, but adds another\ntype of false-positives; non-modular code may have MODULE_LICENSE()\nby mistake. This is not a big deal, it is just the code is always\norphan. We can clean it up if we like. You can see cleanup examples by:\n\n  $ git log --grep='make.* explicitly non-modular'\n\nTo sum up, this commits deletes lots of code, but still produces almost\nequivalent results. Please note it does not increase the vmlinux size at\nall. As you can see in include/asm-generic/vmlinux.lds.h, the .modinfo\nsection is discarded in the link stage.\n\nSigned-off-by: Masahiro Yamada <masahiroy@kernel.org>",
  "author_name": "Masahiro Yamada",
  "author_email": "masahiroy@kernel.org",
  "author_date": "Thu Dec 19 17:33:29 2019 +0900",
  "author_date_iso": "2019-12-19T17:33:29+09:00",
  "committer_name": "Masahiro Yamada",
  "committer_email": "masahiroy@kernel.org",
  "committer_date": "Tue Jan 7 02:18:39 2020 +0900",
  "committer_date_iso": "2020-01-07T02:18:39+09:00",
  "files_changed": [
    "Documentation/kbuild/kconfig.rst",
    "Makefile",
    "include/linux/module.h",
    "scripts/Kbuild.include",
    "scripts/Makefile.modbuiltin",
    "scripts/kconfig/confdata.c",
    "scripts/link-vmlinux.sh"
  ],
  "files_changed_count": 7,
  "stats": [
    {
      "file": "Documentation/kbuild/kconfig.rst",
      "insertions": 0,
      "deletions": 5
    },
    {
      "file": "Makefile",
      "insertions": 5,
      "deletions": 16
    },
    {
      "file": "include/linux/module.h",
      "insertions": 11,
      "deletions": 1
    },
    {
      "file": "scripts/Kbuild.include",
      "insertions": 0,
      "deletions": 6
    },
    {
      "file": "scripts/Makefile.modbuiltin",
      "insertions": 0,
      "deletions": 57
    },
    {
      "file": "scripts/kconfig/confdata.c",
      "insertions": 2,
      "deletions": 43
    },
    {
      "file": "scripts/link-vmlinux.sh",
      "insertions": 4,
      "deletions": 0
    }
  ],
  "total_insertions": 22,
  "total_deletions": 128,
  "total_changes": 150,
  "parents": [
    "1664a377908ed6096680e9d7cfd28facef2194f2"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.6",
    "v5.6-rc1",
    "v5.6-rc2",
    "v5.6-rc3",
    "v5.6-rc4",
    "v5.6-rc5",
    "v5.6-rc6",
    "v5.6-rc7",
    "v5.7-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "Documentation/kbuild/kconfig.rst",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "scripts/Makefile.modbuiltin",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "scripts/Kbuild.include",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/module.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "scripts/link-vmlinux.sh",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "scripts/kconfig/confdata.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "Makefile",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}