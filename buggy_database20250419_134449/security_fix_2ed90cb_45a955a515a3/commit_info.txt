Commit Hash: 2ed90cb0938a45b12eb947af062d12c7af0067b3
Subject: KVM: RISC-V: Retry fault if vma_lookup() results become invalid


Security Keywords:
- exploit

Full commit message:
KVM: RISC-V: Retry fault if vma_lookup() results become invalid

Read mmu_invalidate_seq before dropping the mmap_lock so that KVM can
detect if the results of vma_lookup() (e.g. vma_shift) become stale
before it acquires kvm->mmu_lock. This fixes a theoretical bug where a
VMA could be changed by userspace after vma_lookup() and before KVM
reads the mmu_invalidate_seq, causing KVM to install page table entries
based on a (possibly) no-longer-valid vma_shift.

Re-order the MMU cache top-up to earlier in user_mem_abort() so that it
is not done after KVM has read mmu_invalidate_seq (i.e. so as to avoid
inducing spurious fault retries).

It's unlikely that any sane userspace currently modifies VMAs in such a
way as to trigger this race. And even with directed testing I was unable
to reproduce it. But a sufficiently motivated host userspace might be
able to exploit this race.

Note KVM/ARM had the same bug and was fixed in a separate, near
identical patch (see Link).

Link: https://lore.kernel.org/kvm/20230313235454.2964067-1-dmatlack@google.com/
Fixes: 9955371cc014 ("RISC-V: KVM: Implement MMU notifiers")
Cc: stable@vger.kernel.org
Signed-off-by: David Matlack <dmatlack@google.com>
Tested-by: Anup Patel <anup@brainfault.org>
Signed-off-by: Anup Patel <anup@brainfault.org>

Metadata:
Author: David Matlack <dmatlack@google.com>
Author Date: Fri Mar 17 14:11:06 2023 -0700
Committer: Anup Patel <anup@brainfault.org>
Commit Date: Fri Apr 21 17:38:40 2023 +0530

Files Changed: 1
Lines Added: 16
Lines Removed: 9
Total Changes: 25
