{
  "hash": "2ed90cb0938a45b12eb947af062d12c7af0067b3",
  "hash_short": "2ed90cb0",
  "subject": "KVM: RISC-V: Retry fault if vma_lookup() results become invalid",
  "body": "Read mmu_invalidate_seq before dropping the mmap_lock so that KVM can\ndetect if the results of vma_lookup() (e.g. vma_shift) become stale\nbefore it acquires kvm->mmu_lock. This fixes a theoretical bug where a\nVMA could be changed by userspace after vma_lookup() and before KVM\nreads the mmu_invalidate_seq, causing KVM to install page table entries\nbased on a (possibly) no-longer-valid vma_shift.\n\nRe-order the MMU cache top-up to earlier in user_mem_abort() so that it\nis not done after KVM has read mmu_invalidate_seq (i.e. so as to avoid\ninducing spurious fault retries).\n\nIt's unlikely that any sane userspace currently modifies VMAs in such a\nway as to trigger this race. And even with directed testing I was unable\nto reproduce it. But a sufficiently motivated host userspace might be\nable to exploit this race.\n\nNote KVM/ARM had the same bug and was fixed in a separate, near\nidentical patch (see Link).\n\nLink: https://lore.kernel.org/kvm/20230313235454.2964067-1-dmatlack@google.com/\nFixes: 9955371cc014 (\"RISC-V: KVM: Implement MMU notifiers\")\nCc: stable@vger.kernel.org\nSigned-off-by: David Matlack <dmatlack@google.com>\nTested-by: Anup Patel <anup@brainfault.org>\nSigned-off-by: Anup Patel <anup@brainfault.org>",
  "full_message": "KVM: RISC-V: Retry fault if vma_lookup() results become invalid\n\nRead mmu_invalidate_seq before dropping the mmap_lock so that KVM can\ndetect if the results of vma_lookup() (e.g. vma_shift) become stale\nbefore it acquires kvm->mmu_lock. This fixes a theoretical bug where a\nVMA could be changed by userspace after vma_lookup() and before KVM\nreads the mmu_invalidate_seq, causing KVM to install page table entries\nbased on a (possibly) no-longer-valid vma_shift.\n\nRe-order the MMU cache top-up to earlier in user_mem_abort() so that it\nis not done after KVM has read mmu_invalidate_seq (i.e. so as to avoid\ninducing spurious fault retries).\n\nIt's unlikely that any sane userspace currently modifies VMAs in such a\nway as to trigger this race. And even with directed testing I was unable\nto reproduce it. But a sufficiently motivated host userspace might be\nable to exploit this race.\n\nNote KVM/ARM had the same bug and was fixed in a separate, near\nidentical patch (see Link).\n\nLink: https://lore.kernel.org/kvm/20230313235454.2964067-1-dmatlack@google.com/\nFixes: 9955371cc014 (\"RISC-V: KVM: Implement MMU notifiers\")\nCc: stable@vger.kernel.org\nSigned-off-by: David Matlack <dmatlack@google.com>\nTested-by: Anup Patel <anup@brainfault.org>\nSigned-off-by: Anup Patel <anup@brainfault.org>",
  "author_name": "David Matlack",
  "author_email": "dmatlack@google.com",
  "author_date": "Fri Mar 17 14:11:06 2023 -0700",
  "author_date_iso": "2023-03-17T14:11:06-07:00",
  "committer_name": "Anup Patel",
  "committer_email": "anup@brainfault.org",
  "committer_date": "Fri Apr 21 17:38:40 2023 +0530",
  "committer_date_iso": "2023-04-21T17:38:40+05:30",
  "files_changed": [
    "arch/riscv/kvm/mmu.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/riscv/kvm/mmu.c",
      "insertions": 16,
      "deletions": 9
    }
  ],
  "total_insertions": 16,
  "total_deletions": 9,
  "total_changes": 25,
  "parents": [
    "6a8f57ae2eb07ab39a6f0ccad60c760743051026"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/riscv/kvm/mmu.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}