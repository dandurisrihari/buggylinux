{
  "hash": "4fd466eb46a6a917c317a87fb94bfc7252a0f7ed",
  "hash_short": "4fd466eb",
  "subject": "HWPOISON: add memory cgroup filter",
  "body": "The hwpoison test suite need to inject hwpoison to a collection of\nselected task pages, and must not touch pages not owned by them and\nthus kill important system processes such as init. (But it's OK to\nmis-hwpoison free/unowned pages as well as shared clean pages.\nMis-hwpoison of shared dirty pages will kill all tasks, so the test\nsuite will target all or non of such tasks in the first place.)\n\nThe memory cgroup serves this purpose well. We can put the target\nprocesses under the control of a memory cgroup, and tell the hwpoison\ninjection code to only kill pages associated with some active memory\ncgroup.\n\nThe prerequisite for doing hwpoison stress tests with mem_cgroup is,\nthe mem_cgroup code tracks task pages _accurately_ (unless page is\nlocked).  Which we believe is/should be true.\n\nThe benefits are simplification of hwpoison injector code. Also the\nmem_cgroup code will automatically be tested by hwpoison test cases.\n\nThe alternative interfaces pin-pfn/unpin-pfn can also delegate the\n(process and page flags) filtering functions reliably to user space.\nHowever prototype implementation shows that this scheme adds more\ncomplexity than we wanted.\n\nExample test case:\n\n\tmkdir /cgroup/hwpoison\n\n\tusemem -m 100 -s 1000 &\n\techo `jobs -p` > /cgroup/hwpoison/tasks\n\n\tmemcg_ino=$(ls -id /cgroup/hwpoison | cut -f1 -d' ')\n\techo $memcg_ino > /debug/hwpoison/corrupt-filter-memcg\n\n\tpage-types -p `pidof init`   --hwpoison  # shall do nothing\n\tpage-types -p `pidof usemem` --hwpoison  # poison its pages\n\n[AK: Fix documentation]\n[Add fix for problem noticed by Li Zefan <lizf@cn.fujitsu.com>;\ndentry in the css could be NULL]\n\nCC: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>\nCC: Hugh Dickins <hugh.dickins@tiscali.co.uk>\nCC: Daisuke Nishimura <nishimura@mxp.nes.nec.co.jp>\nCC: Balbir Singh <balbir@linux.vnet.ibm.com>\nCC: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>\nCC: Li Zefan <lizf@cn.fujitsu.com>\nCC: Paul Menage <menage@google.com>\nCC: Nick Piggin <npiggin@suse.de>\nCC: Andi Kleen <andi@firstfloor.org>\nSigned-off-by: Wu Fengguang <fengguang.wu@intel.com>\nSigned-off-by: Andi Kleen <ak@linux.intel.com>",
  "full_message": "HWPOISON: add memory cgroup filter\n\nThe hwpoison test suite need to inject hwpoison to a collection of\nselected task pages, and must not touch pages not owned by them and\nthus kill important system processes such as init. (But it's OK to\nmis-hwpoison free/unowned pages as well as shared clean pages.\nMis-hwpoison of shared dirty pages will kill all tasks, so the test\nsuite will target all or non of such tasks in the first place.)\n\nThe memory cgroup serves this purpose well. We can put the target\nprocesses under the control of a memory cgroup, and tell the hwpoison\ninjection code to only kill pages associated with some active memory\ncgroup.\n\nThe prerequisite for doing hwpoison stress tests with mem_cgroup is,\nthe mem_cgroup code tracks task pages _accurately_ (unless page is\nlocked).  Which we believe is/should be true.\n\nThe benefits are simplification of hwpoison injector code. Also the\nmem_cgroup code will automatically be tested by hwpoison test cases.\n\nThe alternative interfaces pin-pfn/unpin-pfn can also delegate the\n(process and page flags) filtering functions reliably to user space.\nHowever prototype implementation shows that this scheme adds more\ncomplexity than we wanted.\n\nExample test case:\n\n\tmkdir /cgroup/hwpoison\n\n\tusemem -m 100 -s 1000 &\n\techo `jobs -p` > /cgroup/hwpoison/tasks\n\n\tmemcg_ino=$(ls -id /cgroup/hwpoison | cut -f1 -d' ')\n\techo $memcg_ino > /debug/hwpoison/corrupt-filter-memcg\n\n\tpage-types -p `pidof init`   --hwpoison  # shall do nothing\n\tpage-types -p `pidof usemem` --hwpoison  # poison its pages\n\n[AK: Fix documentation]\n[Add fix for problem noticed by Li Zefan <lizf@cn.fujitsu.com>;\ndentry in the css could be NULL]\n\nCC: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>\nCC: Hugh Dickins <hugh.dickins@tiscali.co.uk>\nCC: Daisuke Nishimura <nishimura@mxp.nes.nec.co.jp>\nCC: Balbir Singh <balbir@linux.vnet.ibm.com>\nCC: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>\nCC: Li Zefan <lizf@cn.fujitsu.com>\nCC: Paul Menage <menage@google.com>\nCC: Nick Piggin <npiggin@suse.de>\nCC: Andi Kleen <andi@firstfloor.org>\nSigned-off-by: Wu Fengguang <fengguang.wu@intel.com>\nSigned-off-by: Andi Kleen <ak@linux.intel.com>",
  "author_name": "Andi Kleen",
  "author_email": "andi@firstfloor.org",
  "author_date": "Wed Dec 16 12:19:59 2009 +0100",
  "author_date_iso": "2009-12-16T12:19:59+01:00",
  "committer_name": "Andi Kleen",
  "committer_email": "ak@linux.intel.com",
  "committer_date": "Wed Dec 16 12:19:59 2009 +0100",
  "committer_date_iso": "2009-12-16T12:19:59+01:00",
  "files_changed": [
    "Documentation/vm/hwpoison.txt",
    "mm/hwpoison-inject.c",
    "mm/internal.h",
    "mm/memory-failure.c"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "Documentation/vm/hwpoison.txt",
      "insertions": 16,
      "deletions": 0
    },
    {
      "file": "mm/hwpoison-inject.c",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "mm/internal.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "mm/memory-failure.c",
      "insertions": 46,
      "deletions": 0
    }
  ],
  "total_insertions": 70,
  "total_deletions": 0,
  "total_changes": 70,
  "parents": [
    "d324236b3333e87c8825b35f2104184734020d35"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v2.6.33",
    "v2.6.33-rc1",
    "v2.6.33-rc2",
    "v2.6.33-rc3",
    "v2.6.33-rc4",
    "v2.6.33-rc5",
    "v2.6.33-rc6",
    "v2.6.33-rc7",
    "v2.6.33-rc8",
    "v2.6.34"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "inject"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "Documentation/vm/hwpoison.txt",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/hwpoison-inject.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/internal.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/memory-failure.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}