{
  "hash": "c724f193619c896621bf5818d71ce77437f49a06",
  "hash_short": "c724f193",
  "subject": "bitmap: new bitmap_copy_safe and bitmap_{from,to}_arr32",
  "body": "This patchset replaces bitmap_{to,from}_u32array with more simple and\nstandard looking copy-like functions.\n\nbitmap_from_u32array() takes 4 arguments (bitmap_to_u32array is similar):\n - unsigned long *bitmap, which is destination;\n - unsigned int nbits, the length of destination bitmap, in bits;\n - const u32 *buf, the source; and\n - unsigned int nwords, the length of source buffer in ints.\n\nIn description to the function it is detailed like:\n* copy min(nbits, 32*nwords) bits from @buf to @bitmap, remaining\n* bits between nword and nbits in @bitmap (if any) are cleared.\n\nHaving two size arguments looks unneeded and potentially dangerous.\n\nIt is unneeded because normally user of copy-like function should take\ncare of the size of destination and make it big enough to fit source\ndata.\n\nAnd it is dangerous because function may hide possible error if user\ndoesn't provide big enough bitmap, and data becomes silently dropped.\n\nThat's why all copy-like functions have 1 argument for size of copying\ndata, and I don't see any reason to make bitmap_from_u32array()\ndifferent.\n\nOne exception that comes in mind is strncpy() which also provides size\nof destination in arguments, but it's strongly argued by the possibility\nof taking broken strings in source.  This is not the case of\nbitmap_{from,to}_u32array().\n\nThere is no many real users of bitmap_{from,to}_u32array(), and they all\nvery clearly provide size of destination matched with the size of\nsource, so additional functionality is not used in fact. Like this:\nbitmap_from_u32array(to->link_modes.supported,\n\t\t__ETHTOOL_LINK_MODE_MASK_NBITS,\n\t\tlink_usettings.link_modes.supported,\n\t\t__ETHTOOL_LINK_MODE_MASK_NU32);\nWhere:\n#define __ETHTOOL_LINK_MODE_MASK_NU32 \\\n\tDIV_ROUND_UP(__ETHTOOL_LINK_MODE_MASK_NBITS, 32)\n\nIn this patch, bitmap_copy_safe and bitmap_{from,to}_arr32 are introduced.\n\n'Safe' in bitmap_copy_safe() stands for clearing unused bits in bitmap\nbeyond last bit till the end of last word. It is useful for hardening\nAPI when bitmap is assumed to be exposed to userspace.\n\nbitmap_{from,to}_arr32 functions are replacements for\nbitmap_{from,to}_u32array. They don't take unneeded nwords argument, and\nso simpler in implementation and understanding.\n\nThis patch suggests optimization for 32-bit systems - aliasing\nbitmap_{from,to}_arr32 to bitmap_copy_safe.\n\nOther possible optimization is aliasing 64-bit LE bitmap_{from,to}_arr32 to\nmore generic function(s). But I didn't end up with the function that would\nbe helpful by itself, and can be used to alias 64-bit LE\nbitmap_{from,to}_arr32, like bitmap_copy_safe() does. So I preferred to\nleave things as is.\n\nThe following patch switches kernel to new API and introduces test for it.\n\nDiscussion is here: https://lkml.org/lkml/2017/11/15/592\n\n[ynorov@caviumnetworks.com: rename bitmap_copy_safe to bitmap_copy_clear_tail]\n  Link: http://lkml.kernel.org/r/20180201172508.5739-3-ynorov@caviumnetworks.com\nLink: http://lkml.kernel.org/r/20171228150019.27953-1-ynorov@caviumnetworks.com\nSigned-off-by: Yury Norov <ynorov@caviumnetworks.com>\nCc: Ben Hutchings <ben@decadent.org.uk>\nCc: David Decotigny <decot@googlers.com>,\nCc: David S. Miller <davem@davemloft.net>,\nCc: Geert Uytterhoeven <geert@linux-m68k.org>\nCc: Matthew Wilcox <mawilcox@microsoft.com>\nCc: Rasmus Villemoes <linux@rasmusvillemoes.dk>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "full_message": "bitmap: new bitmap_copy_safe and bitmap_{from,to}_arr32\n\nThis patchset replaces bitmap_{to,from}_u32array with more simple and\nstandard looking copy-like functions.\n\nbitmap_from_u32array() takes 4 arguments (bitmap_to_u32array is similar):\n - unsigned long *bitmap, which is destination;\n - unsigned int nbits, the length of destination bitmap, in bits;\n - const u32 *buf, the source; and\n - unsigned int nwords, the length of source buffer in ints.\n\nIn description to the function it is detailed like:\n* copy min(nbits, 32*nwords) bits from @buf to @bitmap, remaining\n* bits between nword and nbits in @bitmap (if any) are cleared.\n\nHaving two size arguments looks unneeded and potentially dangerous.\n\nIt is unneeded because normally user of copy-like function should take\ncare of the size of destination and make it big enough to fit source\ndata.\n\nAnd it is dangerous because function may hide possible error if user\ndoesn't provide big enough bitmap, and data becomes silently dropped.\n\nThat's why all copy-like functions have 1 argument for size of copying\ndata, and I don't see any reason to make bitmap_from_u32array()\ndifferent.\n\nOne exception that comes in mind is strncpy() which also provides size\nof destination in arguments, but it's strongly argued by the possibility\nof taking broken strings in source.  This is not the case of\nbitmap_{from,to}_u32array().\n\nThere is no many real users of bitmap_{from,to}_u32array(), and they all\nvery clearly provide size of destination matched with the size of\nsource, so additional functionality is not used in fact. Like this:\nbitmap_from_u32array(to->link_modes.supported,\n\t\t__ETHTOOL_LINK_MODE_MASK_NBITS,\n\t\tlink_usettings.link_modes.supported,\n\t\t__ETHTOOL_LINK_MODE_MASK_NU32);\nWhere:\n#define __ETHTOOL_LINK_MODE_MASK_NU32 \\\n\tDIV_ROUND_UP(__ETHTOOL_LINK_MODE_MASK_NBITS, 32)\n\nIn this patch, bitmap_copy_safe and bitmap_{from,to}_arr32 are introduced.\n\n'Safe' in bitmap_copy_safe() stands for clearing unused bits in bitmap\nbeyond last bit till the end of last word. It is useful for hardening\nAPI when bitmap is assumed to be exposed to userspace.\n\nbitmap_{from,to}_arr32 functions are replacements for\nbitmap_{from,to}_u32array. They don't take unneeded nwords argument, and\nso simpler in implementation and understanding.\n\nThis patch suggests optimization for 32-bit systems - aliasing\nbitmap_{from,to}_arr32 to bitmap_copy_safe.\n\nOther possible optimization is aliasing 64-bit LE bitmap_{from,to}_arr32 to\nmore generic function(s). But I didn't end up with the function that would\nbe helpful by itself, and can be used to alias 64-bit LE\nbitmap_{from,to}_arr32, like bitmap_copy_safe() does. So I preferred to\nleave things as is.\n\nThe following patch switches kernel to new API and introduces test for it.\n\nDiscussion is here: https://lkml.org/lkml/2017/11/15/592\n\n[ynorov@caviumnetworks.com: rename bitmap_copy_safe to bitmap_copy_clear_tail]\n  Link: http://lkml.kernel.org/r/20180201172508.5739-3-ynorov@caviumnetworks.com\nLink: http://lkml.kernel.org/r/20171228150019.27953-1-ynorov@caviumnetworks.com\nSigned-off-by: Yury Norov <ynorov@caviumnetworks.com>\nCc: Ben Hutchings <ben@decadent.org.uk>\nCc: David Decotigny <decot@googlers.com>,\nCc: David S. Miller <davem@davemloft.net>,\nCc: Geert Uytterhoeven <geert@linux-m68k.org>\nCc: Matthew Wilcox <mawilcox@microsoft.com>\nCc: Rasmus Villemoes <linux@rasmusvillemoes.dk>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "author_name": "Yury Norov",
  "author_email": "ynorov@caviumnetworks.com",
  "author_date": "Tue Feb 6 15:38:02 2018 -0800",
  "author_date_iso": "2018-02-06T15:38:02-08:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Tue Feb 6 18:32:44 2018 -0800",
  "committer_date_iso": "2018-02-06T18:32:44-08:00",
  "files_changed": [
    "include/linux/bitmap.h",
    "lib/bitmap.c"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "include/linux/bitmap.h",
      "insertions": 31,
      "deletions": 0
    },
    {
      "file": "lib/bitmap.c",
      "insertions": 56,
      "deletions": 0
    }
  ],
  "total_insertions": 87,
  "total_deletions": 0,
  "total_changes": 87,
  "parents": [
    "eed9c249f7f137bceaebfd69bc9544ea09be9180"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.16",
    "v4.16-rc1",
    "v4.16-rc2",
    "v4.16-rc3",
    "v4.16-rc4",
    "v4.16-rc5",
    "v4.16-rc6",
    "v4.16-rc7",
    "v4.17",
    "v4.17-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/linux/bitmap.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "lib/bitmap.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}