commit 44ca0e00b6a05ea9cf89d8a5290a225de19f4a2a
Merge: 806dc825f01f 3b446c7d27dd
Author: Catalin Marinas <catalin.marinas@arm.com>
Date:   Wed Mar 25 11:11:08 2020 +0000

    Merge branch 'for-next/kernel-ptrauth' into for-next/core
    
    * for-next/kernel-ptrauth:
      : Return address signing - in-kernel support
      arm64: Kconfig: verify binutils support for ARM64_PTR_AUTH
      lkdtm: arm64: test kernel pointer authentication
      arm64: compile the kernel with ptrauth return address signing
      kconfig: Add support for 'as-option'
      arm64: suspend: restore the kernel ptrauth keys
      arm64: __show_regs: strip PAC from lr in printk
      arm64: unwind: strip PAC from kernel addresses
      arm64: mask PAC bits of __builtin_return_address
      arm64: initialize ptrauth keys for kernel booting task
      arm64: initialize and switch ptrauth kernel keys
      arm64: enable ptrauth earlier
      arm64: cpufeature: handle conflicts based on capability
      arm64: cpufeature: Move cpu capability helpers inside C file
      arm64: ptrauth: Add bootup/runtime flags for __cpu_setup
      arm64: install user ptrauth keys at kernel exit time
      arm64: rename ptrauth key structures to be user-specific
      arm64: cpufeature: add pointer auth meta-capabilities
      arm64: cpufeature: Fix meta-capability cpufeature check

diff --cc arch/arm64/Kconfig
index 8889ce7094e0,c876afce10f3..e6712b6818fa
--- a/arch/arm64/Kconfig
+++ b/arch/arm64/Kconfig
@@@ -1518,35 -1525,31 +1528,58 @@@ config ARM64_PTR_AUT
  	  be enabled. However, KVM guest also require VHE mode and hence
  	  CONFIG_ARM64_VHE=y option to use this feature.
  
+ 	  If the feature is present on the boot CPU but not on a late CPU, then
+ 	  the late CPU will be parked. Also, if the boot CPU does not have
+ 	  address auth and the late CPU has then the late CPU will still boot
+ 	  but with the feature disabled. On such a system, this option should
+ 	  not be selected.
+ 
+ 	  This feature works with FUNCTION_GRAPH_TRACER option only if
+ 	  DYNAMIC_FTRACE_WITH_REGS is enabled.
+ 
+ config CC_HAS_BRANCH_PROT_PAC_RET
+ 	# GCC 9 or later, clang 8 or later
+ 	def_bool $(cc-option,-mbranch-protection=pac-ret+leaf)
+ 
+ config CC_HAS_SIGN_RETURN_ADDRESS
+ 	# GCC 7, 8
+ 	def_bool $(cc-option,-msign-return-address=all)
+ 
+ config AS_HAS_PAC
+ 	def_bool $(as-option,-Wa$(comma)-march=armv8.3-a)
+ 
+ config AS_HAS_CFI_NEGATE_RA_STATE
+ 	def_bool $(as-instr,.cfi_startproc\n.cfi_negate_ra_state\n.cfi_endproc\n)
+ 
  endmenu
  
 +menu "ARMv8.4 architectural features"
 +
 +config ARM64_AMU_EXTN
 +	bool "Enable support for the Activity Monitors Unit CPU extension"
 +	default y
 +	help
 +	  The activity monitors extension is an optional extension introduced
 +	  by the ARMv8.4 CPU architecture. This enables support for version 1
 +	  of the activity monitors architecture, AMUv1.
 +
 +	  To enable the use of this extension on CPUs that implement it, say Y.
 +
 +	  Note that for architectural reasons, firmware _must_ implement AMU
 +	  support when running on CPUs that present the activity monitors
 +	  extension. The required support is present in:
 +	    * Version 1.5 and later of the ARM Trusted Firmware
 +
 +	  For kernels that have this configuration enabled but boot with broken
 +	  firmware, you may need to say N here until the firmware is fixed.
 +	  Otherwise you may experience firmware panics or lockups when
 +	  accessing the counter registers. Even if you are not observing these
 +	  symptoms, the values returned by the register reads might not
 +	  correctly reflect reality. Most commonly, the value read will be 0,
 +	  indicating that the counter is not enabled.
 +
 +endmenu
 +
  menu "ARMv8.5 architectural features"
  
  config ARM64_E0PD