commit 44ca0e00b6a05ea9cf89d8a5290a225de19f4a2a
Merge: 806dc825f01f 3b446c7d27dd
Author: Catalin Marinas <catalin.marinas@arm.com>
Date:   Wed Mar 25 11:11:08 2020 +0000

    Merge branch 'for-next/kernel-ptrauth' into for-next/core
    
    * for-next/kernel-ptrauth:
      : Return address signing - in-kernel support
      arm64: Kconfig: verify binutils support for ARM64_PTR_AUTH
      lkdtm: arm64: test kernel pointer authentication
      arm64: compile the kernel with ptrauth return address signing
      kconfig: Add support for 'as-option'
      arm64: suspend: restore the kernel ptrauth keys
      arm64: __show_regs: strip PAC from lr in printk
      arm64: unwind: strip PAC from kernel addresses
      arm64: mask PAC bits of __builtin_return_address
      arm64: initialize ptrauth keys for kernel booting task
      arm64: initialize and switch ptrauth kernel keys
      arm64: enable ptrauth earlier
      arm64: cpufeature: handle conflicts based on capability
      arm64: cpufeature: Move cpu capability helpers inside C file
      arm64: ptrauth: Add bootup/runtime flags for __cpu_setup
      arm64: install user ptrauth keys at kernel exit time
      arm64: rename ptrauth key structures to be user-specific
      arm64: cpufeature: add pointer auth meta-capabilities
      arm64: cpufeature: Fix meta-capability cpufeature check

diff --cc arch/arm64/mm/proc.S
index 6bd228067ebc,4450dc83cf5c..197a9ba2d5ea
--- a/arch/arm64/mm/proc.S
+++ b/arch/arm64/mm/proc.S
@@@ -389,15 -423,13 +396,15 @@@ SYM_FUNC_START(__cpu_setup
  	tlbi	vmalle1				// Invalidate local TLB
  	dsb	nsh
  
- 	mov	x0, #3 << 20
- 	msr	cpacr_el1, x0			// Enable FP/ASIMD
- 	mov	x0, #1 << 12			// Reset mdscr_el1 and disable
- 	msr	mdscr_el1, x0			// access to the DCC from EL0
+ 	mov	x1, #3 << 20
+ 	msr	cpacr_el1, x1			// Enable FP/ASIMD
+ 	mov	x1, #1 << 12			// Reset mdscr_el1 and disable
+ 	msr	mdscr_el1, x1			// access to the DCC from EL0
  	isb					// Unmask debug exceptions now,
  	enable_dbg				// since this is per-cpu
- 	reset_pmuserenr_el0 x0			// Disable PMU access from EL0
- 	reset_amuserenr_el0 x0			// Disable AMU access from EL0
+ 	reset_pmuserenr_el0 x1			// Disable PMU access from EL0
++	reset_amuserenr_el0 x1			// Disable AMU access from EL0
 +
  	/*
  	 * Memory region attributes
  	 */