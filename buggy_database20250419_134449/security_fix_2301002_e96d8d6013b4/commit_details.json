{
  "hash": "230100276955529d5a7c69207421756b9a61a8e5",
  "hash_short": "23010027",
  "subject": "mutex: Add w/w mutex slowpath debugging",
  "body": "Injects EDEADLK conditions at pseudo-random interval, with\nexponential backoff up to UINT_MAX (to ensure that every lock\noperation still completes in a reasonable time).\n\nThis way we can test the wound slowpath even for ww mutex users\nwhere contention is never expected, and the ww deadlock\navoidance algorithm is only needed for correctness against\nmalicious userspace. An example would be protecting kernel\nmodesetting properties, which thanks to single-threaded X isn't\nreally expected to contend, ever.\n\nI've looked into using the CONFIG_FAULT_INJECTION\ninfrastructure, but decided against it for two reasons:\n\n- EDEADLK handling is mandatory for ww mutex users and should\n  never affect the outcome of a syscall. This is in contrast to -ENOMEM\n  injection. So fine configurability isn't required.\n\n- The fault injection framework only allows to set a simple\n  probability for failure. Now the probability that a ww mutex acquire\n  stage with N locks will never complete (due to too many injected\n  EDEADLK backoffs) is zero. But the expected number of ww_mutex_lock\n  operations for the completely uncontended case would be O(exp(N)).\n  The per-acuiqire ctx exponential backoff solution choosen here only\n  results in O(log N) overhead due to injection and so O(log N * N)\n  lock operations. This way we can fail with high probability (and so\n  have good test coverage even for fancy backoff and lock acquisition\n  paths) without running into patalogical cases.\n\nNote that EDEADLK will only ever be injected when we managed to\nacquire the lock. This prevents any behaviour changes for users\nwhich rely on the EALREADY semantics.\n\nSigned-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>\nSigned-off-by: Maarten Lankhorst <maarten.lankhorst@canonical.com>\nAcked-by: Peter Zijlstra <a.p.zijlstra@chello.nl>\nCc: dri-devel@lists.freedesktop.org\nCc: linaro-mm-sig@lists.linaro.org\nCc: rostedt@goodmis.org\nCc: daniel@ffwll.ch\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nLink: http://lkml.kernel.org/r/20130620113117.4001.21681.stgit@patser\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "full_message": "mutex: Add w/w mutex slowpath debugging\n\nInjects EDEADLK conditions at pseudo-random interval, with\nexponential backoff up to UINT_MAX (to ensure that every lock\noperation still completes in a reasonable time).\n\nThis way we can test the wound slowpath even for ww mutex users\nwhere contention is never expected, and the ww deadlock\navoidance algorithm is only needed for correctness against\nmalicious userspace. An example would be protecting kernel\nmodesetting properties, which thanks to single-threaded X isn't\nreally expected to contend, ever.\n\nI've looked into using the CONFIG_FAULT_INJECTION\ninfrastructure, but decided against it for two reasons:\n\n- EDEADLK handling is mandatory for ww mutex users and should\n  never affect the outcome of a syscall. This is in contrast to -ENOMEM\n  injection. So fine configurability isn't required.\n\n- The fault injection framework only allows to set a simple\n  probability for failure. Now the probability that a ww mutex acquire\n  stage with N locks will never complete (due to too many injected\n  EDEADLK backoffs) is zero. But the expected number of ww_mutex_lock\n  operations for the completely uncontended case would be O(exp(N)).\n  The per-acuiqire ctx exponential backoff solution choosen here only\n  results in O(log N) overhead due to injection and so O(log N * N)\n  lock operations. This way we can fail with high probability (and so\n  have good test coverage even for fancy backoff and lock acquisition\n  paths) without running into patalogical cases.\n\nNote that EDEADLK will only ever be injected when we managed to\nacquire the lock. This prevents any behaviour changes for users\nwhich rely on the EALREADY semantics.\n\nSigned-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>\nSigned-off-by: Maarten Lankhorst <maarten.lankhorst@canonical.com>\nAcked-by: Peter Zijlstra <a.p.zijlstra@chello.nl>\nCc: dri-devel@lists.freedesktop.org\nCc: linaro-mm-sig@lists.linaro.org\nCc: rostedt@goodmis.org\nCc: daniel@ffwll.ch\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nLink: http://lkml.kernel.org/r/20130620113117.4001.21681.stgit@patser\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "author_name": "Daniel Vetter",
  "author_email": "daniel.vetter@ffwll.ch",
  "author_date": "Thu Jun 20 13:31:17 2013 +0200",
  "author_date_iso": "2013-06-20T13:31:17+02:00",
  "committer_name": "Ingo Molnar",
  "committer_email": "mingo@kernel.org",
  "committer_date": "Wed Jun 26 12:10:56 2013 +0200",
  "committer_date_iso": "2013-06-26T12:10:56+02:00",
  "files_changed": [
    "include/linux/mutex.h",
    "kernel/mutex.c",
    "lib/Kconfig.debug"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "include/linux/mutex.h",
      "insertions": 8,
      "deletions": 0
    },
    {
      "file": "kernel/mutex.c",
      "insertions": 41,
      "deletions": 3
    },
    {
      "file": "lib/Kconfig.debug",
      "insertions": 13,
      "deletions": 0
    }
  ],
  "total_insertions": 62,
  "total_deletions": 3,
  "total_changes": 65,
  "parents": [
    "040a0a37100563754bb1fee6ff6427420bcfa609"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v3.11",
    "v3.11-rc1",
    "v3.11-rc2",
    "v3.11-rc3",
    "v3.11-rc4",
    "v3.11-rc5",
    "v3.11-rc6",
    "v3.11-rc7",
    "v3.12",
    "v3.12-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/linux/mutex.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/mutex.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "lib/Kconfig.debug",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}