{
  "hash": "7984754b99b6c89054edc405e9d9d35810a91d36",
  "hash_short": "7984754b",
  "subject": "kexec: add sysctl to disable kexec_load",
  "body": "For general-purpose (i.e.  distro) kernel builds it makes sense to build\nwith CONFIG_KEXEC to allow end users to choose what kind of things they\nwant to do with kexec.  However, in the face of trying to lock down a\nsystem with such a kernel, there needs to be a way to disable kexec_load\n(much like module loading can be disabled).  Without this, it is too easy\nfor the root user to modify kernel memory even when CONFIG_STRICT_DEVMEM\nand modules_disabled are set.  With this change, it is still possible to\nload an image for use later, then disable kexec_load so the image (or lack\nof image) can't be altered.\n\nThe intention is for using this in environments where \"perfect\"\nenforcement is hard.  Without a verified boot, along with verified\nmodules, and along with verified kexec, this is trying to give a system a\nbetter chance to defend itself (or at least grow the window of\ndiscoverability) against attack in the face of a privilege escalation.\n\nIn my mind, I consider several boot scenarios:\n\n1) Verified boot of read-only verified root fs loading fd-based\n   verification of kexec images.\n2) Secure boot of writable root fs loading signed kexec images.\n3) Regular boot loading kexec (e.g. kcrash) image early and locking it.\n4) Regular boot with no control of kexec image at all.\n\n1 and 2 don't exist yet, but will soon once the verified kexec series has\nlanded.  4 is the state of things now.  The gap between 2 and 4 is too\nlarge, so this change creates scenario 3, a middle-ground above 4 when 2\nand 1 are not possible for a system.\n\nSigned-off-by: Kees Cook <keescook@chromium.org>\nAcked-by: Rik van Riel <riel@redhat.com>\nCc: Vivek Goyal <vgoyal@redhat.com>\nCc: Eric Biederman <ebiederm@xmission.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "full_message": "kexec: add sysctl to disable kexec_load\n\nFor general-purpose (i.e.  distro) kernel builds it makes sense to build\nwith CONFIG_KEXEC to allow end users to choose what kind of things they\nwant to do with kexec.  However, in the face of trying to lock down a\nsystem with such a kernel, there needs to be a way to disable kexec_load\n(much like module loading can be disabled).  Without this, it is too easy\nfor the root user to modify kernel memory even when CONFIG_STRICT_DEVMEM\nand modules_disabled are set.  With this change, it is still possible to\nload an image for use later, then disable kexec_load so the image (or lack\nof image) can't be altered.\n\nThe intention is for using this in environments where \"perfect\"\nenforcement is hard.  Without a verified boot, along with verified\nmodules, and along with verified kexec, this is trying to give a system a\nbetter chance to defend itself (or at least grow the window of\ndiscoverability) against attack in the face of a privilege escalation.\n\nIn my mind, I consider several boot scenarios:\n\n1) Verified boot of read-only verified root fs loading fd-based\n   verification of kexec images.\n2) Secure boot of writable root fs loading signed kexec images.\n3) Regular boot loading kexec (e.g. kcrash) image early and locking it.\n4) Regular boot with no control of kexec image at all.\n\n1 and 2 don't exist yet, but will soon once the verified kexec series has\nlanded.  4 is the state of things now.  The gap between 2 and 4 is too\nlarge, so this change creates scenario 3, a middle-ground above 4 when 2\nand 1 are not possible for a system.\n\nSigned-off-by: Kees Cook <keescook@chromium.org>\nAcked-by: Rik van Riel <riel@redhat.com>\nCc: Vivek Goyal <vgoyal@redhat.com>\nCc: Eric Biederman <ebiederm@xmission.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "author_name": "Kees Cook",
  "author_email": "keescook@chromium.org",
  "author_date": "Thu Jan 23 15:55:59 2014 -0800",
  "author_date_iso": "2014-01-23T15:55:59-08:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Thu Jan 23 16:37:03 2014 -0800",
  "committer_date_iso": "2014-01-23T16:37:03-08:00",
  "files_changed": [
    "Documentation/sysctl/kernel.txt",
    "include/linux/kexec.h",
    "kernel/kexec.c",
    "kernel/sysctl.c"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "Documentation/sysctl/kernel.txt",
      "insertions": 14,
      "deletions": 1
    },
    {
      "file": "include/linux/kexec.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "kernel/kexec.c",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "kernel/sysctl.c",
      "insertions": 13,
      "deletions": 0
    }
  ],
  "total_insertions": 30,
  "total_deletions": 2,
  "total_changes": 32,
  "parents": [
    "3b96d7db3b6dc99d207bca50037274d22e48dea5"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v3.14",
    "v3.14-rc1",
    "v3.14-rc2",
    "v3.14-rc3",
    "v3.14-rc4",
    "v3.14-rc5",
    "v3.14-rc6",
    "v3.14-rc7",
    "v3.14-rc8",
    "v3.15"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "privilege escalation"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "Documentation/sysctl/kernel.txt",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/kexec.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/kexec.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/sysctl.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}