{
  "hash": "60a3b2253c413cf601783b070507d7dd6620c954",
  "hash_short": "60a3b225",
  "subject": "net: bpf: make eBPF interpreter images read-only",
  "body": "With eBPF getting more extended and exposure to user space is on it's way,\nhardening the memory range the interpreter uses to steer its command flow\nseems appropriate.  This patch moves the to be interpreted bytecode to\nread-only pages.\n\nIn case we execute a corrupted BPF interpreter image for some reason e.g.\ncaused by an attacker which got past a verifier stage, it would not only\nprovide arbitrary read/write memory access but arbitrary function calls\nas well. After setting up the BPF interpreter image, its contents do not\nchange until destruction time, thus we can setup the image on immutable\nmade pages in order to mitigate modifications to that code. The idea\nis derived from commit 314beb9bcabf (\"x86: bpf_jit_comp: secure bpf jit\nagainst spraying attacks\").\n\nThis is possible because bpf_prog is not part of sk_filter anymore.\nAfter setup bpf_prog cannot be altered during its life-time. This prevents\nany modifications to the entire bpf_prog structure (incl. function/JIT\nimage pointer).\n\nEvery eBPF program (including classic BPF that are migrated) have to call\nbpf_prog_select_runtime() to select either interpreter or a JIT image\nas a last setup step, and they all are being freed via bpf_prog_free(),\nincluding non-JIT. Therefore, we can easily integrate this into the\neBPF life-time, plus since we directly allocate a bpf_prog, we have no\nperformance penalty.\n\nTested with seccomp and test_bpf testsuite in JIT/non-JIT mode and manual\ninspection of kernel_page_tables.  Brad Spengler proposed the same idea\nvia Twitter during development of this patch.\n\nJoint work with Hannes Frederic Sowa.\n\nSuggested-by: Brad Spengler <spender@grsecurity.net>\nSigned-off-by: Daniel Borkmann <dborkman@redhat.com>\nSigned-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>\nCc: Alexei Starovoitov <ast@plumgrid.com>\nCc: Kees Cook <keescook@chromium.org>\nAcked-by: Alexei Starovoitov <ast@plumgrid.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "full_message": "net: bpf: make eBPF interpreter images read-only\n\nWith eBPF getting more extended and exposure to user space is on it's way,\nhardening the memory range the interpreter uses to steer its command flow\nseems appropriate.  This patch moves the to be interpreted bytecode to\nread-only pages.\n\nIn case we execute a corrupted BPF interpreter image for some reason e.g.\ncaused by an attacker which got past a verifier stage, it would not only\nprovide arbitrary read/write memory access but arbitrary function calls\nas well. After setting up the BPF interpreter image, its contents do not\nchange until destruction time, thus we can setup the image on immutable\nmade pages in order to mitigate modifications to that code. The idea\nis derived from commit 314beb9bcabf (\"x86: bpf_jit_comp: secure bpf jit\nagainst spraying attacks\").\n\nThis is possible because bpf_prog is not part of sk_filter anymore.\nAfter setup bpf_prog cannot be altered during its life-time. This prevents\nany modifications to the entire bpf_prog structure (incl. function/JIT\nimage pointer).\n\nEvery eBPF program (including classic BPF that are migrated) have to call\nbpf_prog_select_runtime() to select either interpreter or a JIT image\nas a last setup step, and they all are being freed via bpf_prog_free(),\nincluding non-JIT. Therefore, we can easily integrate this into the\neBPF life-time, plus since we directly allocate a bpf_prog, we have no\nperformance penalty.\n\nTested with seccomp and test_bpf testsuite in JIT/non-JIT mode and manual\ninspection of kernel_page_tables.  Brad Spengler proposed the same idea\nvia Twitter during development of this patch.\n\nJoint work with Hannes Frederic Sowa.\n\nSuggested-by: Brad Spengler <spender@grsecurity.net>\nSigned-off-by: Daniel Borkmann <dborkman@redhat.com>\nSigned-off-by: Hannes Frederic Sowa <hannes@stressinduktion.org>\nCc: Alexei Starovoitov <ast@plumgrid.com>\nCc: Kees Cook <keescook@chromium.org>\nAcked-by: Alexei Starovoitov <ast@plumgrid.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "author_name": "Daniel Borkmann",
  "author_email": "dborkman@redhat.com",
  "author_date": "Tue Sep 2 22:53:44 2014 +0200",
  "author_date_iso": "2014-09-02T22:53:44+02:00",
  "committer_name": "David S. Miller",
  "committer_email": "davem@davemloft.net",
  "committer_date": "Fri Sep 5 12:02:48 2014 -0700",
  "committer_date_iso": "2014-09-05T12:02:48-07:00",
  "files_changed": [
    "arch/arm/net/bpf_jit_32.c",
    "arch/mips/net/bpf_jit.c",
    "arch/powerpc/net/bpf_jit_comp.c",
    "arch/s390/net/bpf_jit_comp.c",
    "arch/sparc/net/bpf_jit_comp.c",
    "arch/x86/net/bpf_jit_comp.c",
    "include/linux/filter.h",
    "kernel/bpf/core.c",
    "kernel/seccomp.c",
    "lib/test_bpf.c",
    "net/core/filter.c"
  ],
  "files_changed_count": 11,
  "stats": [
    {
      "file": "arch/arm/net/bpf_jit_32.c",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "arch/mips/net/bpf_jit.c",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "arch/powerpc/net/bpf_jit_comp.c",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "arch/s390/net/bpf_jit_comp.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/sparc/net/bpf_jit_comp.c",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "arch/x86/net/bpf_jit_comp.c",
      "insertions": 6,
      "deletions": 12
    },
    {
      "file": "include/linux/filter.h",
      "insertions": 44,
      "deletions": 5
    },
    {
      "file": "kernel/bpf/core.c",
      "insertions": 78,
      "deletions": 2
    },
    {
      "file": "kernel/seccomp.c",
      "insertions": 3,
      "deletions": 4
    },
    {
      "file": "lib/test_bpf.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "net/core/filter.c",
      "insertions": 3,
      "deletions": 3
    }
  ],
  "total_insertions": 144,
  "total_deletions": 32,
  "total_changes": 176,
  "parents": [
    "4a804c01635a43ed073893532c058fbaa1f5154e"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v3.18",
    "v3.18-rc1",
    "v3.18-rc2",
    "v3.18-rc3",
    "v3.18-rc4",
    "v3.18-rc5",
    "v3.18-rc6",
    "v3.18-rc7",
    "v3.19",
    "v3.19-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/arm/net/bpf_jit_32.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/powerpc/net/bpf_jit_comp.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/mips/net/bpf_jit.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/sparc/net/bpf_jit_comp.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/s390/net/bpf_jit_comp.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/bpf/core.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/net/bpf_jit_comp.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/filter.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/seccomp.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "lib/test_bpf.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/core/filter.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}