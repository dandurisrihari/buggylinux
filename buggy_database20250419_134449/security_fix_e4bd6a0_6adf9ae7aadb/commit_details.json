{
  "hash": "e4bd6a0248b2a026e07c19995c41a4cb5a49d797",
  "hash_short": "e4bd6a02",
  "subject": "mm, memcg: fix potential undefined behaviour in page stat accounting",
  "body": "Since commit d7365e783edb (\"mm: memcontrol: fix missed end-writeback\npage accounting\") mem_cgroup_end_page_stat consumes locked and flags\nvariables directly rather than via pointers which might trigger C\nundefined behavior as those variables are initialized only in the slow\npath of mem_cgroup_begin_page_stat.\n\nAlthough mem_cgroup_end_page_stat handles parameters correctly and\ntouches them only when they hold a sensible value it is caller which\nloads a potentially uninitialized value which then might allow compiler\nto do crazy things.\n\nI haven't seen any warning from gcc and it seems that the current\nversion (4.9) doesn't exploit this type undefined behavior but Sasha has\nreported the following:\n\n  UBSan: Undefined behaviour in mm/rmap.c:1084:2\n  load of value 255 is not a valid value for type '_Bool'\n  CPU: 4 PID: 8304 Comm: rngd Not tainted 3.18.0-rc2-next-20141029-sasha-00039-g77ed13d-dirty #1427\n  Call Trace:\n    dump_stack (lib/dump_stack.c:52)\n    ubsan_epilogue (lib/ubsan.c:159)\n    __ubsan_handle_load_invalid_value (lib/ubsan.c:482)\n    page_remove_rmap (mm/rmap.c:1084 mm/rmap.c:1096)\n    unmap_page_range (./arch/x86/include/asm/atomic.h:27 include/linux/mm.h:463 mm/memory.c:1146 mm/memory.c:1258 mm/memory.c:1279 mm/memory.c:1303)\n    unmap_single_vma (mm/memory.c:1348)\n    unmap_vmas (mm/memory.c:1377 (discriminator 3))\n    exit_mmap (mm/mmap.c:2837)\n    mmput (kernel/fork.c:659)\n    do_exit (./arch/x86/include/asm/thread_info.h:168 kernel/exit.c:462 kernel/exit.c:747)\n    do_group_exit (include/linux/sched.h:775 kernel/exit.c:873)\n    SyS_exit_group (kernel/exit.c:901)\n    tracesys_phase2 (arch/x86/kernel/entry_64.S:529)\n\nFix this by using pointer parameters for both locked and flags and be\nmore robust for future compiler changes even though the current code is\nimplemented correctly.\n\nSigned-off-by: Michal Hocko <mhocko@suse.cz>\nReported-by: Sasha Levin <sasha.levin@oracle.com>\nAcked-by: Johannes Weiner <hannes@cmpxchg.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "full_message": "mm, memcg: fix potential undefined behaviour in page stat accounting\n\nSince commit d7365e783edb (\"mm: memcontrol: fix missed end-writeback\npage accounting\") mem_cgroup_end_page_stat consumes locked and flags\nvariables directly rather than via pointers which might trigger C\nundefined behavior as those variables are initialized only in the slow\npath of mem_cgroup_begin_page_stat.\n\nAlthough mem_cgroup_end_page_stat handles parameters correctly and\ntouches them only when they hold a sensible value it is caller which\nloads a potentially uninitialized value which then might allow compiler\nto do crazy things.\n\nI haven't seen any warning from gcc and it seems that the current\nversion (4.9) doesn't exploit this type undefined behavior but Sasha has\nreported the following:\n\n  UBSan: Undefined behaviour in mm/rmap.c:1084:2\n  load of value 255 is not a valid value for type '_Bool'\n  CPU: 4 PID: 8304 Comm: rngd Not tainted 3.18.0-rc2-next-20141029-sasha-00039-g77ed13d-dirty #1427\n  Call Trace:\n    dump_stack (lib/dump_stack.c:52)\n    ubsan_epilogue (lib/ubsan.c:159)\n    __ubsan_handle_load_invalid_value (lib/ubsan.c:482)\n    page_remove_rmap (mm/rmap.c:1084 mm/rmap.c:1096)\n    unmap_page_range (./arch/x86/include/asm/atomic.h:27 include/linux/mm.h:463 mm/memory.c:1146 mm/memory.c:1258 mm/memory.c:1279 mm/memory.c:1303)\n    unmap_single_vma (mm/memory.c:1348)\n    unmap_vmas (mm/memory.c:1377 (discriminator 3))\n    exit_mmap (mm/mmap.c:2837)\n    mmput (kernel/fork.c:659)\n    do_exit (./arch/x86/include/asm/thread_info.h:168 kernel/exit.c:462 kernel/exit.c:747)\n    do_group_exit (include/linux/sched.h:775 kernel/exit.c:873)\n    SyS_exit_group (kernel/exit.c:901)\n    tracesys_phase2 (arch/x86/kernel/entry_64.S:529)\n\nFix this by using pointer parameters for both locked and flags and be\nmore robust for future compiler changes even though the current code is\nimplemented correctly.\n\nSigned-off-by: Michal Hocko <mhocko@suse.cz>\nReported-by: Sasha Levin <sasha.levin@oracle.com>\nAcked-by: Johannes Weiner <hannes@cmpxchg.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "author_name": "Michal Hocko",
  "author_email": "mhocko@suse.cz",
  "author_date": "Wed Dec 10 15:44:39 2014 -0800",
  "author_date_iso": "2014-12-10T15:44:39-08:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Wed Dec 10 17:41:08 2014 -0800",
  "committer_date_iso": "2014-12-10T17:41:08-08:00",
  "files_changed": [
    "include/linux/memcontrol.h",
    "mm/memcontrol.c",
    "mm/page-writeback.c",
    "mm/rmap.c"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "include/linux/memcontrol.h",
      "insertions": 3,
      "deletions": 3
    },
    {
      "file": "mm/memcontrol.c",
      "insertions": 4,
      "deletions": 4
    },
    {
      "file": "mm/page-writeback.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "mm/rmap.c",
      "insertions": 2,
      "deletions": 2
    }
  ],
  "total_insertions": 11,
  "total_deletions": 11,
  "total_changes": 22,
  "parents": [
    "c164e038eee805147e95789dddb88ae3b3aca11c"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v3.19",
    "v3.19-rc1",
    "v3.19-rc2",
    "v3.19-rc3",
    "v3.19-rc4",
    "v3.19-rc5",
    "v3.19-rc6",
    "v3.19-rc7",
    "v4.0",
    "v4.0-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/linux/memcontrol.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/memcontrol.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/page-writeback.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/rmap.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}