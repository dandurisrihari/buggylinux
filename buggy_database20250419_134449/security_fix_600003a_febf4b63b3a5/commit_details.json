{
  "hash": "600003a364a8030b79f57ba54a3852abf95aafb0",
  "hash_short": "600003a3",
  "subject": "Merge branch 'sparx5-dma'",
  "body": "Steen Hegelund says:\n\n====================\nAdding Frame DMA functionality to Sparx5\n\nv2:\n    Removed an unused variable (proc_ctrl) from sparx5_fdma_start.\n\nThis add frame DMA functionality to the Sparx5 platform.\n\nUntil now the Sparx5 SwitchDev driver has been using register based\ninjection and extraction when sending frames to/from the host CPU.\n\nWith this series the Frame DMA functionality now added.\n\nThe Frame DMA is only used if the Frame DMA interrupt is configured in the\ndevice tree; otherwise the existing register based injection and extraction\nis used.\n\nThe Sparx5 has two ports that can be used for sending and receiving frames,\nbut there are 8 channels that can be configured: 6 for injection and 2 for\nextraction.\n\nThe additional channels can be used for more advanced scenarios e.g. where\nvirtual cores are used, but currently the driver only uses port 0 and\nchannel 0 and 6 respectively.\n\nDCB (data control block) structures are passed to the Frame DMA with\nsuitable information about frame start/end etc, as well as pointers to DB\n(data blocks) buffers.\n\nThe Frame DMA engine can use interrupts to signal back when the frames have\nbeen injected or extracted.\n\nThere is a limitation on the DB alignment also for injection: Block must\nstart on 16byte boundaries, and this is why the driver currently copies the\ndata to into separate buffers.\n\nThe Sparx5 switch core needs a IFH (Internal Frame Header) to pass\ninformation from the port to the switch core, and this header is added\nbefore injection and stripped after extraction.\n====================\n\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "full_message": "Merge branch 'sparx5-dma'\n\nSteen Hegelund says:\n\n====================\nAdding Frame DMA functionality to Sparx5\n\nv2:\n    Removed an unused variable (proc_ctrl) from sparx5_fdma_start.\n\nThis add frame DMA functionality to the Sparx5 platform.\n\nUntil now the Sparx5 SwitchDev driver has been using register based\ninjection and extraction when sending frames to/from the host CPU.\n\nWith this series the Frame DMA functionality now added.\n\nThe Frame DMA is only used if the Frame DMA interrupt is configured in the\ndevice tree; otherwise the existing register based injection and extraction\nis used.\n\nThe Sparx5 has two ports that can be used for sending and receiving frames,\nbut there are 8 channels that can be configured: 6 for injection and 2 for\nextraction.\n\nThe additional channels can be used for more advanced scenarios e.g. where\nvirtual cores are used, but currently the driver only uses port 0 and\nchannel 0 and 6 respectively.\n\nDCB (data control block) structures are passed to the Frame DMA with\nsuitable information about frame start/end etc, as well as pointers to DB\n(data blocks) buffers.\n\nThe Frame DMA engine can use interrupts to signal back when the frames have\nbeen injected or extracted.\n\nThere is a limitation on the DB alignment also for injection: Block must\nstart on 16byte boundaries, and this is why the driver currently copies the\ndata to into separate buffers.\n\nThe Sparx5 switch core needs a IFH (Internal Frame Header) to pass\ninformation from the port to the switch core, and this header is added\nbefore injection and stripped after extraction.\n====================\n\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "author_name": "David S. Miller",
  "author_email": "davem@davemloft.net",
  "author_date": "Fri Aug 20 14:28:55 2021 +0100",
  "author_date_iso": "2021-08-20T14:28:55+01:00",
  "committer_name": "David S. Miller",
  "committer_email": "davem@davemloft.net",
  "committer_date": "Fri Aug 20 14:28:55 2021 +0100",
  "committer_date_iso": "2021-08-20T14:28:55+01:00",
  "files_changed": [],
  "files_changed_count": 0,
  "stats": [
    {
      "file": "arch/arm64/boot/dts/microchip/sparx5.dtsi",
      "insertions": 3,
      "deletions": 2
    },
    {
      "file": "drivers/net/ethernet/microchip/sparx5/Makefile",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "drivers/net/ethernet/microchip/sparx5/sparx5_fdma.c",
      "insertions": 593,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/microchip/sparx5/sparx5_main.c",
      "insertions": 22,
      "deletions": 1
    },
    {
      "file": "drivers/net/ethernet/microchip/sparx5/sparx5_main.h",
      "insertions": 69,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/microchip/sparx5/sparx5_packet.c",
      "insertions": 6,
      "deletions": 7
    },
    {
      "file": "drivers/net/ethernet/microchip/sparx5/sparx5_port.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "drivers/net/ethernet/microchip/sparx5/sparx5_port.h",
      "insertions": 1,
      "deletions": 0
    }
  ],
  "total_insertions": 696,
  "total_deletions": 12,
  "total_changes": 708,
  "parents": [
    "f402303ba3ecbcbd1ad1c61d33d144dfcbd0970f",
    "920c293af8d01942caa10300ad97eabf778e8598"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": []
}