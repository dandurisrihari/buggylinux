commit 07dcd7fe89938934ddad65f738bc5aac89b8e54d
Author: David Windsor <dave@nullcore.net>
Date:   Tue Aug 15 16:45:00 2017 -0700

    fork: Define usercopy region in mm_struct slab caches
    
    In support of usercopy hardening, this patch defines a region in the
    mm_struct slab caches in which userspace copy operations are allowed.
    Only the auxv field is copied to userspace.
    
    cache object allocation:
        kernel/fork.c:
            #define allocate_mm()     (kmem_cache_alloc(mm_cachep, GFP_KERNEL))
    
            dup_mm():
                ...
                mm = allocate_mm();
    
            copy_mm(...):
                ...
                dup_mm();
    
            copy_process(...):
                ...
                copy_mm(...)
    
            _do_fork(...):
                ...
                copy_process(...)
    
    example usage trace:
    
        fs/binfmt_elf.c:
            create_elf_tables(...):
                ...
                elf_info = (elf_addr_t *)current->mm->saved_auxv;
                ...
                copy_to_user(..., elf_info, ei_index * sizeof(elf_addr_t))
    
            load_elf_binary(...):
                ...
                create_elf_tables(...);
    
    This region is known as the slab cache's usercopy region. Slab caches
    can now check that each dynamically sized copy operation involving
    cache-managed memory falls entirely within the slab's usercopy region.
    
    This patch is modified from Brad Spengler/PaX Team's PAX_USERCOPY
    whitelisting code in the last public patch of grsecurity/PaX based on my
    understanding of the code. Changes or omissions from the original code are
    mine and don't reflect the original grsecurity/PaX code.
    
    Signed-off-by: David Windsor <dave@nullcore.net>
    [kees: adjust commit log, split patch, provide usage trace]
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Acked-by: Rik van Riel <riel@redhat.com>

diff --git a/kernel/fork.c b/kernel/fork.c
index 432eadf6b58c..82f2a0441d3b 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -2225,9 +2225,11 @@ void __init proc_caches_init(void)
 	 * maximum number of CPU's we can ever have.  The cpumask_allocation
 	 * is at the end of the structure, exactly for that reason.
 	 */
-	mm_cachep = kmem_cache_create("mm_struct",
+	mm_cachep = kmem_cache_create_usercopy("mm_struct",
 			sizeof(struct mm_struct), ARCH_MIN_MMSTRUCT_ALIGN,
 			SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_ACCOUNT,
+			offsetof(struct mm_struct, saved_auxv),
+			sizeof_field(struct mm_struct, saved_auxv),
 			NULL);
 	vm_area_cachep = KMEM_CACHE(vm_area_struct, SLAB_PANIC|SLAB_ACCOUNT);
 	mmap_init();