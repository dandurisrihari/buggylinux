commit 7cd4c5c2101cb092db00f61f69d24380cf7a0ee8
Author: Frederick Lawler <fred@cloudflare.com>
Date:   Mon Aug 15 11:20:25 2022 -0500

    security, lsm: Introduce security_create_user_ns()
    
    User namespaces are an effective tool to allow programs to run with
    permission without requiring the need for a program to run as root. User
    namespaces may also be used as a sandboxing technique. However, attackers
    sometimes leverage user namespaces as an initial attack vector to perform
    some exploit. [1,2,3]
    
    While it is not the unprivileged user namespace functionality, which
    causes the kernel to be exploitable, users/administrators might want to
    more granularly limit or at least monitor how various processes use this
    functionality, while vulnerable kernel subsystems are being patched.
    
    Preventing user namespace already creation comes in a few of forms in
    order of granularity:
    
            1. /proc/sys/user/max_user_namespaces sysctl
            2. Distro specific patch(es)
            3. CONFIG_USER_NS
    
    To block a task based on its attributes, the LSM hook cred_prepare is a
    decent candidate for use because it provides more granular control, and
    it is called before create_user_ns():
    
            cred = prepare_creds()
                    security_prepare_creds()
                            call_int_hook(cred_prepare, ...
            if (cred)
                    create_user_ns(cred)
    
    Since security_prepare_creds() is meant for LSMs to copy and prepare
    credentials, access control is an unintended use of the hook. [4]
    Further, security_prepare_creds() will always return a ENOMEM if the
    hook returns any non-zero error code.
    
    This hook also does not handle the clone3 case which requires us to
    access a user space pointer to know if we're in the CLONE_NEW_USER
    call path which may be subject to a TOCTTOU attack.
    
    Lastly, cred_prepare is called in many call paths, and a targeted hook
    further limits the frequency of calls which is a beneficial outcome.
    Therefore introduce a new function security_create_user_ns() with an
    accompanying userns_create LSM hook.
    
    With the new userns_create hook, users will have more control over the
    observability and access control over user namespace creation. Users
    should expect that normal operation of user namespaces will behave as
    usual, and only be impacted when controls are implemented by users or
    administrators.
    
    This hook takes the prepared creds for LSM authors to write policy
    against. On success, the new namespace is applied to credentials,
    otherwise an error is returned.
    
    Links:
    1. https://nvd.nist.gov/vuln/detail/CVE-2022-0492
    2. https://nvd.nist.gov/vuln/detail/CVE-2022-25636
    3. https://nvd.nist.gov/vuln/detail/CVE-2022-34918
    4. https://lore.kernel.org/all/1c4b1c0d-12f6-6e9e-a6a3-cdce7418110c@schaufler-ca.com/
    
    Reviewed-by: Christian Brauner (Microsoft) <brauner@kernel.org>
    Reviewed-by: KP Singh <kpsingh@kernel.org>
    Signed-off-by: Frederick Lawler <fred@cloudflare.com>
    Signed-off-by: Paul Moore <paul@paul-moore.com>

diff --git a/include/linux/security.h b/include/linux/security.h
index 1bc362cb413f..767802fe9bfa 100644
--- a/include/linux/security.h
+++ b/include/linux/security.h
@@ -437,6 +437,7 @@ int security_task_kill(struct task_struct *p, struct kernel_siginfo *info,
 int security_task_prctl(int option, unsigned long arg2, unsigned long arg3,
 			unsigned long arg4, unsigned long arg5);
 void security_task_to_inode(struct task_struct *p, struct inode *inode);
+int security_create_user_ns(const struct cred *cred);
 int security_ipc_permission(struct kern_ipc_perm *ipcp, short flag);
 void security_ipc_getsecid(struct kern_ipc_perm *ipcp, u32 *secid);
 int security_msg_msg_alloc(struct msg_msg *msg);
@@ -1194,6 +1195,11 @@ static inline int security_task_prctl(int option, unsigned long arg2,
 static inline void security_task_to_inode(struct task_struct *p, struct inode *inode)
 { }
 
+static inline int security_create_user_ns(const struct cred *cred)
+{
+	return 0;
+}
+
 static inline int security_ipc_permission(struct kern_ipc_perm *ipcp,
 					  short flag)
 {