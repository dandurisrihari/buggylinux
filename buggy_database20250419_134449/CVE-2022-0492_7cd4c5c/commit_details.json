{
  "hash": "7cd4c5c2101cb092db00f61f69d24380cf7a0ee8",
  "hash_short": "7cd4c5c2",
  "subject": "security, lsm: Introduce security_create_user_ns()",
  "body": "User namespaces are an effective tool to allow programs to run with\npermission without requiring the need for a program to run as root. User\nnamespaces may also be used as a sandboxing technique. However, attackers\nsometimes leverage user namespaces as an initial attack vector to perform\nsome exploit. [1,2,3]\n\nWhile it is not the unprivileged user namespace functionality, which\ncauses the kernel to be exploitable, users/administrators might want to\nmore granularly limit or at least monitor how various processes use this\nfunctionality, while vulnerable kernel subsystems are being patched.\n\nPreventing user namespace already creation comes in a few of forms in\norder of granularity:\n\n        1. /proc/sys/user/max_user_namespaces sysctl\n        2. Distro specific patch(es)\n        3. CONFIG_USER_NS\n\nTo block a task based on its attributes, the LSM hook cred_prepare is a\ndecent candidate for use because it provides more granular control, and\nit is called before create_user_ns():\n\n        cred = prepare_creds()\n                security_prepare_creds()\n                        call_int_hook(cred_prepare, ...\n        if (cred)\n                create_user_ns(cred)\n\nSince security_prepare_creds() is meant for LSMs to copy and prepare\ncredentials, access control is an unintended use of the hook. [4]\nFurther, security_prepare_creds() will always return a ENOMEM if the\nhook returns any non-zero error code.\n\nThis hook also does not handle the clone3 case which requires us to\naccess a user space pointer to know if we're in the CLONE_NEW_USER\ncall path which may be subject to a TOCTTOU attack.\n\nLastly, cred_prepare is called in many call paths, and a targeted hook\nfurther limits the frequency of calls which is a beneficial outcome.\nTherefore introduce a new function security_create_user_ns() with an\naccompanying userns_create LSM hook.\n\nWith the new userns_create hook, users will have more control over the\nobservability and access control over user namespace creation. Users\nshould expect that normal operation of user namespaces will behave as\nusual, and only be impacted when controls are implemented by users or\nadministrators.\n\nThis hook takes the prepared creds for LSM authors to write policy\nagainst. On success, the new namespace is applied to credentials,\notherwise an error is returned.\n\nLinks:\n1. https://nvd.nist.gov/vuln/detail/CVE-2022-0492\n2. https://nvd.nist.gov/vuln/detail/CVE-2022-25636\n3. https://nvd.nist.gov/vuln/detail/CVE-2022-34918\n4. https://lore.kernel.org/all/1c4b1c0d-12f6-6e9e-a6a3-cdce7418110c@schaufler-ca.com/\n\nReviewed-by: Christian Brauner (Microsoft) <brauner@kernel.org>\nReviewed-by: KP Singh <kpsingh@kernel.org>\nSigned-off-by: Frederick Lawler <fred@cloudflare.com>\nSigned-off-by: Paul Moore <paul@paul-moore.com>",
  "full_message": "security, lsm: Introduce security_create_user_ns()\n\nUser namespaces are an effective tool to allow programs to run with\npermission without requiring the need for a program to run as root. User\nnamespaces may also be used as a sandboxing technique. However, attackers\nsometimes leverage user namespaces as an initial attack vector to perform\nsome exploit. [1,2,3]\n\nWhile it is not the unprivileged user namespace functionality, which\ncauses the kernel to be exploitable, users/administrators might want to\nmore granularly limit or at least monitor how various processes use this\nfunctionality, while vulnerable kernel subsystems are being patched.\n\nPreventing user namespace already creation comes in a few of forms in\norder of granularity:\n\n        1. /proc/sys/user/max_user_namespaces sysctl\n        2. Distro specific patch(es)\n        3. CONFIG_USER_NS\n\nTo block a task based on its attributes, the LSM hook cred_prepare is a\ndecent candidate for use because it provides more granular control, and\nit is called before create_user_ns():\n\n        cred = prepare_creds()\n                security_prepare_creds()\n                        call_int_hook(cred_prepare, ...\n        if (cred)\n                create_user_ns(cred)\n\nSince security_prepare_creds() is meant for LSMs to copy and prepare\ncredentials, access control is an unintended use of the hook. [4]\nFurther, security_prepare_creds() will always return a ENOMEM if the\nhook returns any non-zero error code.\n\nThis hook also does not handle the clone3 case which requires us to\naccess a user space pointer to know if we're in the CLONE_NEW_USER\ncall path which may be subject to a TOCTTOU attack.\n\nLastly, cred_prepare is called in many call paths, and a targeted hook\nfurther limits the frequency of calls which is a beneficial outcome.\nTherefore introduce a new function security_create_user_ns() with an\naccompanying userns_create LSM hook.\n\nWith the new userns_create hook, users will have more control over the\nobservability and access control over user namespace creation. Users\nshould expect that normal operation of user namespaces will behave as\nusual, and only be impacted when controls are implemented by users or\nadministrators.\n\nThis hook takes the prepared creds for LSM authors to write policy\nagainst. On success, the new namespace is applied to credentials,\notherwise an error is returned.\n\nLinks:\n1. https://nvd.nist.gov/vuln/detail/CVE-2022-0492\n2. https://nvd.nist.gov/vuln/detail/CVE-2022-25636\n3. https://nvd.nist.gov/vuln/detail/CVE-2022-34918\n4. https://lore.kernel.org/all/1c4b1c0d-12f6-6e9e-a6a3-cdce7418110c@schaufler-ca.com/\n\nReviewed-by: Christian Brauner (Microsoft) <brauner@kernel.org>\nReviewed-by: KP Singh <kpsingh@kernel.org>\nSigned-off-by: Frederick Lawler <fred@cloudflare.com>\nSigned-off-by: Paul Moore <paul@paul-moore.com>",
  "author_name": "Frederick Lawler",
  "author_email": "fred@cloudflare.com",
  "author_date": "Mon Aug 15 11:20:25 2022 -0500",
  "author_date_iso": "2022-08-15T11:20:25-05:00",
  "committer_name": "Paul Moore",
  "committer_email": "paul@paul-moore.com",
  "committer_date": "Tue Aug 16 17:32:46 2022 -0400",
  "committer_date_iso": "2022-08-16T17:32:46-04:00",
  "files_changed": [
    "include/linux/lsm_hook_defs.h",
    "include/linux/lsm_hooks.h",
    "include/linux/security.h",
    "kernel/user_namespace.c",
    "security/security.c"
  ],
  "files_changed_count": 5,
  "stats": [
    {
      "file": "include/linux/lsm_hook_defs.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "include/linux/lsm_hooks.h",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "include/linux/security.h",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "kernel/user_namespace.c",
      "insertions": 5,
      "deletions": 0
    },
    {
      "file": "security/security.c",
      "insertions": 5,
      "deletions": 0
    }
  ],
  "total_insertions": 21,
  "total_deletions": 0,
  "total_changes": 21,
  "parents": [
    "4847c0eb663ab431b56cd82c9c2627967f09f2ef"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2022-0492",
      "CVE-2022-25636",
      "CVE-2022-34918"
    ],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "include/linux/lsm_hook_defs.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/lsm_hooks.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/security.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/user_namespace.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "security/security.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}