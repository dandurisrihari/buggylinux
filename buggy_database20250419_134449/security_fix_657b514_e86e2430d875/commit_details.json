{
  "hash": "657b5146955eba331e01b9a6ae89ce2e716ba306",
  "hash_short": "657b5146",
  "subject": "mm: lock_vma_under_rcu() must check vma->anon_vma under vma lock",
  "body": "lock_vma_under_rcu() tries to guarantee that __anon_vma_prepare() can't\nbe called in the VMA-locked page fault path by ensuring that\nvma->anon_vma is set.\n\nHowever, this check happens before the VMA is locked, which means a\nconcurrent move_vma() can concurrently call unlink_anon_vmas(), which\ndisassociates the VMA's anon_vma.\n\nThis means we can get UAF in the following scenario:\n\n  THREAD 1                   THREAD 2\n  ========                   ========\n  <page fault>\n    lock_vma_under_rcu()\n      rcu_read_lock()\n      mas_walk()\n      check vma->anon_vma\n\n                             mremap() syscall\n                               move_vma()\n                                vma_start_write()\n                                 unlink_anon_vmas()\n                             <syscall end>\n\n    handle_mm_fault()\n      __handle_mm_fault()\n        handle_pte_fault()\n          do_pte_missing()\n            do_anonymous_page()\n              anon_vma_prepare()\n                __anon_vma_prepare()\n                  find_mergeable_anon_vma()\n                    mas_walk() [looks up VMA X]\n\n                             munmap() syscall (deletes VMA X)\n\n                    reusable_anon_vma() [called on freed VMA X]\n\nThis is a security bug if you can hit it, although an attacker would\nhave to win two races at once where the first race window is only a few\ninstructions wide.\n\nThis patch is based on some previous discussion with Linus Torvalds on\nthe security list.\n\nCc: stable@vger.kernel.org\nFixes: 5e31275cc997 (\"mm: add per-VMA lock and helper functions to control it\")\nSigned-off-by: Jann Horn <jannh@google.com>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "full_message": "mm: lock_vma_under_rcu() must check vma->anon_vma under vma lock\n\nlock_vma_under_rcu() tries to guarantee that __anon_vma_prepare() can't\nbe called in the VMA-locked page fault path by ensuring that\nvma->anon_vma is set.\n\nHowever, this check happens before the VMA is locked, which means a\nconcurrent move_vma() can concurrently call unlink_anon_vmas(), which\ndisassociates the VMA's anon_vma.\n\nThis means we can get UAF in the following scenario:\n\n  THREAD 1                   THREAD 2\n  ========                   ========\n  <page fault>\n    lock_vma_under_rcu()\n      rcu_read_lock()\n      mas_walk()\n      check vma->anon_vma\n\n                             mremap() syscall\n                               move_vma()\n                                vma_start_write()\n                                 unlink_anon_vmas()\n                             <syscall end>\n\n    handle_mm_fault()\n      __handle_mm_fault()\n        handle_pte_fault()\n          do_pte_missing()\n            do_anonymous_page()\n              anon_vma_prepare()\n                __anon_vma_prepare()\n                  find_mergeable_anon_vma()\n                    mas_walk() [looks up VMA X]\n\n                             munmap() syscall (deletes VMA X)\n\n                    reusable_anon_vma() [called on freed VMA X]\n\nThis is a security bug if you can hit it, although an attacker would\nhave to win two races at once where the first race window is only a few\ninstructions wide.\n\nThis patch is based on some previous discussion with Linus Torvalds on\nthe security list.\n\nCc: stable@vger.kernel.org\nFixes: 5e31275cc997 (\"mm: add per-VMA lock and helper functions to control it\")\nSigned-off-by: Jann Horn <jannh@google.com>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "author_name": "Jann Horn",
  "author_email": "jannh@google.com",
  "author_date": "Wed Jul 26 23:41:03 2023 +0200",
  "author_date_iso": "2023-07-26T23:41:03+02:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Thu Jul 27 11:13:22 2023 -0700",
  "committer_date_iso": "2023-07-27T11:13:22-07:00",
  "files_changed": [
    "mm/memory.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "mm/memory.c",
      "insertions": 16,
      "deletions": 12
    }
  ],
  "total_insertions": 16,
  "total_deletions": 12,
  "total_changes": 28,
  "parents": [
    "0a8db05b571ad5b8d5c8774a004c0424260a90bd"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "security bug"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "mm/memory.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}