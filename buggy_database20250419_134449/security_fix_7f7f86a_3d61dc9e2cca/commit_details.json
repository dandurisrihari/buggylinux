{
  "hash": "7f7f86a7bdd694bfb214479afb6a1f7266bb4d22",
  "hash_short": "7f7f86a7",
  "subject": "tools arch x86: Sync the msr-index.h copy with the kernel sources",
  "body": "To pick up the changes in:\n\n  2b1299322016731d (\"x86/speculation: Add RSB VM Exit protections\")\n  4af184ee8b2c0a69 (\"tools/power turbostat: dump secondary Turbo-Ratio-Limit\")\n  4ad3278df6fe2b08 (\"x86/speculation: Disable RRSBA behavior\")\n  d7caac991feeef1b (\"x86/cpu/amd: Add Spectral Chicken\")\n  6ad0ad2bf8a67e27 (\"x86/bugs: Report Intel retbleed vulnerability\")\n  c59a1f106f5cd484 (\"KVM: x86/pmu: Add IA32_PEBS_ENABLE MSR emulation for extended PEBS\")\n  465932db25f36648 (\"x86/cpu: Add new VMX feature, Tertiary VM-Execution control\")\n  027bbb884be006b0 (\"KVM: x86/speculation: Disable Fill buffer clear within guests\")\n  51802186158c74a0 (\"x86/speculation/mmio: Enumerate Processor MMIO Stale Data bug\")\n\nAddressing these tools/perf build warnings:\n\n    diff -u tools/arch/x86/include/asm/msr-index.h arch/x86/include/asm/msr-index.h\n    Warning: Kernel ABI header at 'tools/arch/x86/include/asm/msr-index.h' differs from latest version at 'arch/x86/include/asm/msr-index.h'\n\nThat makes the beautification scripts to pick some new entries:\n\n  $ tools/perf/trace/beauty/tracepoints/x86_msr.sh > before\n  $ cp arch/x86/include/asm/msr-index.h tools/arch/x86/include/asm/msr-index.h\n  $ tools/perf/trace/beauty/tracepoints/x86_msr.sh > after\n  $ diff -u before after\n  --- before\t2022-08-17 09:05:13.938246475 -0300\n  +++ after\t2022-08-17 09:05:22.221455851 -0300\n  @@ -161,6 +161,7 @@\n   \t[0x0000048f] = \"IA32_VMX_TRUE_EXIT_CTLS\",\n   \t[0x00000490] = \"IA32_VMX_TRUE_ENTRY_CTLS\",\n   \t[0x00000491] = \"IA32_VMX_VMFUNC\",\n  +\t[0x00000492] = \"IA32_VMX_PROCBASED_CTLS3\",\n   \t[0x000004c1] = \"IA32_PMC0\",\n   \t[0x000004d0] = \"IA32_MCG_EXT_CTL\",\n   \t[0x00000560] = \"IA32_RTIT_OUTPUT_BASE\",\n  @@ -212,6 +213,7 @@\n   \t[0x0000064D] = \"PLATFORM_ENERGY_STATUS\",\n   \t[0x0000064e] = \"PPERF\",\n   \t[0x0000064f] = \"PERF_LIMIT_REASONS\",\n  +\t[0x00000650] = \"SECONDARY_TURBO_RATIO_LIMIT\",\n   \t[0x00000658] = \"PKG_WEIGHTED_CORE_C0_RES\",\n   \t[0x00000659] = \"PKG_ANY_CORE_C0_RES\",\n   \t[0x0000065A] = \"PKG_ANY_GFXE_C0_RES\",\n  $\n\nNow one can trace systemwide asking to see backtraces to where those\nMSRs are being read/written, see this example with a previous update:\n\n  # perf trace -e msr:*_msr/max-stack=32/ --filter=\"msr>=IA32_U_CET && msr<=IA32_INT_SSP_TAB\"\n  ^C#\n\nIf we use -v (verbose mode) we can see what it does behind the scenes:\n\n  # perf trace -v -e msr:*_msr/max-stack=32/ --filter=\"msr>=IA32_U_CET && msr<=IA32_INT_SSP_TAB\"\n  Using CPUID AuthenticAMD-25-21-0\n  0x6a0\n  0x6a8\n  New filter for msr:read_msr: (msr>=0x6a0 && msr<=0x6a8) && (common_pid != 597499 && common_pid != 3313)\n  0x6a0\n  0x6a8\n  New filter for msr:write_msr: (msr>=0x6a0 && msr<=0x6a8) && (common_pid != 597499 && common_pid != 3313)\n  mmap size 528384B\n  ^C#\n\nExample with a frequent msr:\n\n  # perf trace -v -e msr:*_msr/max-stack=32/ --filter=\"msr==IA32_SPEC_CTRL\" --max-events 2\n  Using CPUID AuthenticAMD-25-21-0\n  0x48\n  New filter for msr:read_msr: (msr==0x48) && (common_pid != 2612129 && common_pid != 3841)\n  0x48\n  New filter for msr:write_msr: (msr==0x48) && (common_pid != 2612129 && common_pid != 3841)\n  mmap size 528384B\n  Looking at the vmlinux_path (8 entries long)\n  symsrc__init: build id mismatch for vmlinux.\n  Using /proc/kcore for kernel data\n  Using /proc/kallsyms for symbols\n     0.000 Timer/2525383 msr:write_msr(msr: IA32_SPEC_CTRL, val: 6)\n                                       do_trace_write_msr ([kernel.kallsyms])\n                                       do_trace_write_msr ([kernel.kallsyms])\n                                       __switch_to_xtra ([kernel.kallsyms])\n                                       __switch_to ([kernel.kallsyms])\n                                       __schedule ([kernel.kallsyms])\n                                       schedule ([kernel.kallsyms])\n                                       futex_wait_queue_me ([kernel.kallsyms])\n                                       futex_wait ([kernel.kallsyms])\n                                       do_futex ([kernel.kallsyms])\n                                       __x64_sys_futex ([kernel.kallsyms])\n                                       do_syscall_64 ([kernel.kallsyms])\n                                       entry_SYSCALL_64_after_hwframe ([kernel.kallsyms])\n                                       __futex_abstimed_wait_common64 (/usr/lib64/libpthread-2.33.so)\n     0.030 :0/0 msr:write_msr(msr: IA32_SPEC_CTRL, val: 2)\n                                       do_trace_write_msr ([kernel.kallsyms])\n                                       do_trace_write_msr ([kernel.kallsyms])\n                                       __switch_to_xtra ([kernel.kallsyms])\n                                       __switch_to ([kernel.kallsyms])\n                                       __schedule ([kernel.kallsyms])\n                                       schedule_idle ([kernel.kallsyms])\n                                       do_idle ([kernel.kallsyms])\n                                       cpu_startup_entry ([kernel.kallsyms])\n                                       secondary_startup_64_no_verify ([kernel.kallsyms])\n  #\n\nCc: Adrian Hunter <adrian.hunter@intel.com>\nCc: Daniel Sneddon <daniel.sneddon@linux.intel.com>\nCc: Ian Rogers <irogers@google.com>\nCc: Jiri Olsa <jolsa@kernel.org>\nCc: Len Brown <len.brown@intel.com>\nCc: Like Xu <like.xu@linux.intel.com>\nCc: Namhyung Kim <namhyung@kernel.org>\nCc: Paolo Bonzini <pbonzini@redhat.com>\nCc: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Robert Hoo <robert.hu@linux.intel.com>\nSigned-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>\nLink: https://lore.kernel.org/lkml/YvzbT24m2o5U%2F7+q@kernel.org/\nSigned-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>",
  "full_message": "tools arch x86: Sync the msr-index.h copy with the kernel sources\n\nTo pick up the changes in:\n\n  2b1299322016731d (\"x86/speculation: Add RSB VM Exit protections\")\n  4af184ee8b2c0a69 (\"tools/power turbostat: dump secondary Turbo-Ratio-Limit\")\n  4ad3278df6fe2b08 (\"x86/speculation: Disable RRSBA behavior\")\n  d7caac991feeef1b (\"x86/cpu/amd: Add Spectral Chicken\")\n  6ad0ad2bf8a67e27 (\"x86/bugs: Report Intel retbleed vulnerability\")\n  c59a1f106f5cd484 (\"KVM: x86/pmu: Add IA32_PEBS_ENABLE MSR emulation for extended PEBS\")\n  465932db25f36648 (\"x86/cpu: Add new VMX feature, Tertiary VM-Execution control\")\n  027bbb884be006b0 (\"KVM: x86/speculation: Disable Fill buffer clear within guests\")\n  51802186158c74a0 (\"x86/speculation/mmio: Enumerate Processor MMIO Stale Data bug\")\n\nAddressing these tools/perf build warnings:\n\n    diff -u tools/arch/x86/include/asm/msr-index.h arch/x86/include/asm/msr-index.h\n    Warning: Kernel ABI header at 'tools/arch/x86/include/asm/msr-index.h' differs from latest version at 'arch/x86/include/asm/msr-index.h'\n\nThat makes the beautification scripts to pick some new entries:\n\n  $ tools/perf/trace/beauty/tracepoints/x86_msr.sh > before\n  $ cp arch/x86/include/asm/msr-index.h tools/arch/x86/include/asm/msr-index.h\n  $ tools/perf/trace/beauty/tracepoints/x86_msr.sh > after\n  $ diff -u before after\n  --- before\t2022-08-17 09:05:13.938246475 -0300\n  +++ after\t2022-08-17 09:05:22.221455851 -0300\n  @@ -161,6 +161,7 @@\n   \t[0x0000048f] = \"IA32_VMX_TRUE_EXIT_CTLS\",\n   \t[0x00000490] = \"IA32_VMX_TRUE_ENTRY_CTLS\",\n   \t[0x00000491] = \"IA32_VMX_VMFUNC\",\n  +\t[0x00000492] = \"IA32_VMX_PROCBASED_CTLS3\",\n   \t[0x000004c1] = \"IA32_PMC0\",\n   \t[0x000004d0] = \"IA32_MCG_EXT_CTL\",\n   \t[0x00000560] = \"IA32_RTIT_OUTPUT_BASE\",\n  @@ -212,6 +213,7 @@\n   \t[0x0000064D] = \"PLATFORM_ENERGY_STATUS\",\n   \t[0x0000064e] = \"PPERF\",\n   \t[0x0000064f] = \"PERF_LIMIT_REASONS\",\n  +\t[0x00000650] = \"SECONDARY_TURBO_RATIO_LIMIT\",\n   \t[0x00000658] = \"PKG_WEIGHTED_CORE_C0_RES\",\n   \t[0x00000659] = \"PKG_ANY_CORE_C0_RES\",\n   \t[0x0000065A] = \"PKG_ANY_GFXE_C0_RES\",\n  $\n\nNow one can trace systemwide asking to see backtraces to where those\nMSRs are being read/written, see this example with a previous update:\n\n  # perf trace -e msr:*_msr/max-stack=32/ --filter=\"msr>=IA32_U_CET && msr<=IA32_INT_SSP_TAB\"\n  ^C#\n\nIf we use -v (verbose mode) we can see what it does behind the scenes:\n\n  # perf trace -v -e msr:*_msr/max-stack=32/ --filter=\"msr>=IA32_U_CET && msr<=IA32_INT_SSP_TAB\"\n  Using CPUID AuthenticAMD-25-21-0\n  0x6a0\n  0x6a8\n  New filter for msr:read_msr: (msr>=0x6a0 && msr<=0x6a8) && (common_pid != 597499 && common_pid != 3313)\n  0x6a0\n  0x6a8\n  New filter for msr:write_msr: (msr>=0x6a0 && msr<=0x6a8) && (common_pid != 597499 && common_pid != 3313)\n  mmap size 528384B\n  ^C#\n\nExample with a frequent msr:\n\n  # perf trace -v -e msr:*_msr/max-stack=32/ --filter=\"msr==IA32_SPEC_CTRL\" --max-events 2\n  Using CPUID AuthenticAMD-25-21-0\n  0x48\n  New filter for msr:read_msr: (msr==0x48) && (common_pid != 2612129 && common_pid != 3841)\n  0x48\n  New filter for msr:write_msr: (msr==0x48) && (common_pid != 2612129 && common_pid != 3841)\n  mmap size 528384B\n  Looking at the vmlinux_path (8 entries long)\n  symsrc__init: build id mismatch for vmlinux.\n  Using /proc/kcore for kernel data\n  Using /proc/kallsyms for symbols\n     0.000 Timer/2525383 msr:write_msr(msr: IA32_SPEC_CTRL, val: 6)\n                                       do_trace_write_msr ([kernel.kallsyms])\n                                       do_trace_write_msr ([kernel.kallsyms])\n                                       __switch_to_xtra ([kernel.kallsyms])\n                                       __switch_to ([kernel.kallsyms])\n                                       __schedule ([kernel.kallsyms])\n                                       schedule ([kernel.kallsyms])\n                                       futex_wait_queue_me ([kernel.kallsyms])\n                                       futex_wait ([kernel.kallsyms])\n                                       do_futex ([kernel.kallsyms])\n                                       __x64_sys_futex ([kernel.kallsyms])\n                                       do_syscall_64 ([kernel.kallsyms])\n                                       entry_SYSCALL_64_after_hwframe ([kernel.kallsyms])\n                                       __futex_abstimed_wait_common64 (/usr/lib64/libpthread-2.33.so)\n     0.030 :0/0 msr:write_msr(msr: IA32_SPEC_CTRL, val: 2)\n                                       do_trace_write_msr ([kernel.kallsyms])\n                                       do_trace_write_msr ([kernel.kallsyms])\n                                       __switch_to_xtra ([kernel.kallsyms])\n                                       __switch_to ([kernel.kallsyms])\n                                       __schedule ([kernel.kallsyms])\n                                       schedule_idle ([kernel.kallsyms])\n                                       do_idle ([kernel.kallsyms])\n                                       cpu_startup_entry ([kernel.kallsyms])\n                                       secondary_startup_64_no_verify ([kernel.kallsyms])\n  #\n\nCc: Adrian Hunter <adrian.hunter@intel.com>\nCc: Daniel Sneddon <daniel.sneddon@linux.intel.com>\nCc: Ian Rogers <irogers@google.com>\nCc: Jiri Olsa <jolsa@kernel.org>\nCc: Len Brown <len.brown@intel.com>\nCc: Like Xu <like.xu@linux.intel.com>\nCc: Namhyung Kim <namhyung@kernel.org>\nCc: Paolo Bonzini <pbonzini@redhat.com>\nCc: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Robert Hoo <robert.hu@linux.intel.com>\nSigned-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>\nLink: https://lore.kernel.org/lkml/YvzbT24m2o5U%2F7+q@kernel.org/\nSigned-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>",
  "author_name": "Arnaldo Carvalho de Melo",
  "author_email": "acme@redhat.com",
  "author_date": "Fri Aug 7 08:45:47 2020 -0300",
  "author_date_iso": "2020-08-07T08:45:47-03:00",
  "committer_name": "Arnaldo Carvalho de Melo",
  "committer_email": "acme@redhat.com",
  "committer_date": "Fri Aug 19 15:30:33 2022 -0300",
  "committer_date_iso": "2022-08-19T15:30:33-03:00",
  "files_changed": [
    "tools/arch/x86/include/asm/msr-index.h"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "tools/arch/x86/include/asm/msr-index.h",
      "insertions": 8,
      "deletions": 0
    }
  ],
  "total_insertions": 8,
  "total_deletions": 0,
  "total_changes": 8,
  "parents": [
    "cf1258ac37afe80dbf277add5f1464477b46c9f0"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "vulnerability"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "tools/arch/x86/include/asm/msr-index.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}