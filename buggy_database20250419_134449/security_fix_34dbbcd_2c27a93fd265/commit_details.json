{
  "hash": "34dbbcdbf63360661ff7bda6c5f52f99ac515f92",
  "hash_short": "34dbbcdb",
  "subject": "Make file credentials available to the seqfile interfaces",
  "body": "A lot of seqfile users seem to be using things like %pK that uses the\ncredentials of the current process, but that is actually completely\nwrong for filesystem interfaces.\n\nThe unix semantics for permission checking files is to check permissions\nat _open_ time, not at read or write time, and that is not just a small\ndetail: passing off stdin/stdout/stderr to a suid application and making\nthe actual IO happen in privileged context is a classic exploit\ntechnique.\n\nSo if we want to be able to look at permissions at read time, we need to\nuse the file open credentials, not the current ones.  Normal file\naccesses can just use \"f_cred\" (or any of the helper functions that do\nthat, like file_ns_capable()), but the seqfile interfaces do not have\nany such options.\n\nIt turns out that seq_file _does_ save away the user_ns information of\nthe file, though.  Since user_ns is just part of the full credential\ninformation, replace that special case with saving off the cred pointer\ninstead, and suddenly seq_file has all the permission information it\nneeds.\n\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "full_message": "Make file credentials available to the seqfile interfaces\n\nA lot of seqfile users seem to be using things like %pK that uses the\ncredentials of the current process, but that is actually completely\nwrong for filesystem interfaces.\n\nThe unix semantics for permission checking files is to check permissions\nat _open_ time, not at read or write time, and that is not just a small\ndetail: passing off stdin/stdout/stderr to a suid application and making\nthe actual IO happen in privileged context is a classic exploit\ntechnique.\n\nSo if we want to be able to look at permissions at read time, we need to\nuse the file open credentials, not the current ones.  Normal file\naccesses can just use \"f_cred\" (or any of the helper functions that do\nthat, like file_ns_capable()), but the seqfile interfaces do not have\nany such options.\n\nIt turns out that seq_file _does_ save away the user_ns information of\nthe file, though.  Since user_ns is just part of the full credential\ninformation, replace that special case with saving off the cred pointer\ninstead, and suddenly seq_file has all the permission information it\nneeds.\n\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Thu Apr 14 11:22:00 2016 -0700",
  "author_date_iso": "2016-04-14T11:22:00-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Thu Apr 14 12:56:09 2016 -0700",
  "committer_date_iso": "2016-04-14T12:56:09-07:00",
  "files_changed": [
    "fs/seq_file.c",
    "include/linux/seq_file.h"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "fs/seq_file.c",
      "insertions": 4,
      "deletions": 3
    },
    {
      "file": "include/linux/seq_file.h",
      "insertions": 4,
      "deletions": 9
    }
  ],
  "total_insertions": 8,
  "total_deletions": 12,
  "total_changes": 20,
  "parents": [
    "4046d6e81f33b7ef50d6668b78076d54c5e066b6"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.10",
    "v4.10-rc1",
    "v4.10-rc2",
    "v4.10-rc3",
    "v4.10-rc4",
    "v4.10-rc5",
    "v4.10-rc6",
    "v4.10-rc7",
    "v4.10-rc8",
    "v4.11"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/seq_file.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/seq_file.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}