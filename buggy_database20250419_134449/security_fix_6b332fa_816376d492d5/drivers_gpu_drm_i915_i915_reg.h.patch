commit 6b332fa20f671265638d1d62496f9607c5f6e92f
Author: Arun Siluvery <arun.siluvery@linux.intel.com>
Date:   Mon Apr 4 18:50:56 2016 +0100

    drm/i915/guc: reset GuC and retry on firmware load failure
    
    Due to timing issues in the HW, some of the status bits required for GuC
    authentication occasionally don't get set; when that happens, the GuC
    cannot be initialized and we will be left with a wedged GPU. The W/A
    suggested is to perform a soft reset of the GuC and attempt to reload
    the F/W again for few times before giving up.
    
    As the failure is dependent on timing, tests performed by triggering
    manual full gpu reset (i915_wedged) showed that we could sometimes hit
    this after several thousand iterations, but sometimes tests ran even
    longer without any issues. Reset and reload mechanism proved helpful
    when we indeed hit f/w load failure, so it is better to include this
    to improve driver stability.
    
    This change implements the following WAs,
    
            WaEnableuKernelHeaderValidFix:skl,bxt
            WaEnableGuCBootHashCheckNotSet:skl,bxt
    
    Signed-off-by: Arun Siluvery <arun.siluvery@linux.intel.com>
    Signed-off-by: Dave Gordon <david.s.gordon@intel.com>
    Reviewed-by: Alex Dai <yu.dai@intel.com>
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>

diff --git a/drivers/gpu/drm/i915/i915_reg.h b/drivers/gpu/drm/i915/i915_reg.h
index 683274f27405..30fea341ae66 100644
--- a/drivers/gpu/drm/i915/i915_reg.h
+++ b/drivers/gpu/drm/i915/i915_reg.h
@@ -165,6 +165,7 @@ static inline bool i915_mmio_reg_valid(i915_reg_t reg)
 #define  GEN6_GRDOM_MEDIA		(1 << 2)
 #define  GEN6_GRDOM_BLT			(1 << 3)
 #define  GEN6_GRDOM_VECS		(1 << 4)
+#define  GEN9_GRDOM_GUC			(1 << 5)
 #define  GEN8_GRDOM_MEDIA2		(1 << 7)
 
 #define RING_PP_DIR_BASE(ring)		_MMIO((ring)->mmio_base+0x228)