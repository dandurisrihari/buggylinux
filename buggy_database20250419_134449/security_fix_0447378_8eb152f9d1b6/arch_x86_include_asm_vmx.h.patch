commit 0447378a4a793da008451fad50bc0f93e9675ae6
Author: Marc Orr <marcorr@google.com>
Date:   Wed Jun 20 17:21:29 2018 -0700

    kvm: vmx: Nested VM-entry prereqs for event inj.
    
    This patch extends the checks done prior to a nested VM entry.
    Specifically, it extends the check_vmentry_prereqs function with checks
    for fields relevant to the VM-entry event injection information, as
    described in the Intel SDM, volume 3.
    
    This patch is motivated by a syzkaller bug, where a bad VM-entry
    interruption information field is generated in the VMCS02, which causes
    the nested VM launch to fail. Then, KVM fails to resume L1.
    
    While KVM should be improved to correctly resume L1 execution after a
    failed nested launch, this change is justified because the existing code
    to resume L1 is flaky/ad-hoc and the test coverage for resuming L1 is
    sparse.
    
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: Marc Orr <marcorr@google.com>
    [Removed comment whose parts were describing previous revisions and the
     rest was obvious from function/variable naming. - Radim]
    Signed-off-by: Radim Krčmář <rkrcmar@redhat.com>

diff --git a/arch/x86/include/asm/vmx.h b/arch/x86/include/asm/vmx.h
index 425e6b8b9547..6aa8499e1f62 100644
--- a/arch/x86/include/asm/vmx.h
+++ b/arch/x86/include/asm/vmx.h
@@ -114,6 +114,7 @@
 #define VMX_MISC_PREEMPTION_TIMER_RATE_MASK	0x0000001f
 #define VMX_MISC_SAVE_EFER_LMA			0x00000020
 #define VMX_MISC_ACTIVITY_HLT			0x00000040
+#define VMX_MISC_ZERO_LEN_INS			0x40000000
 
 /* VMFUNC functions */
 #define VMX_VMFUNC_EPTP_SWITCHING               0x00000001
@@ -351,11 +352,13 @@ enum vmcs_field {
 #define VECTORING_INFO_VALID_MASK       	INTR_INFO_VALID_MASK
 
 #define INTR_TYPE_EXT_INTR              (0 << 8) /* external interrupt */
+#define INTR_TYPE_RESERVED              (1 << 8) /* reserved */
 #define INTR_TYPE_NMI_INTR		(2 << 8) /* NMI */
 #define INTR_TYPE_HARD_EXCEPTION	(3 << 8) /* processor exception */
 #define INTR_TYPE_SOFT_INTR             (4 << 8) /* software interrupt */
 #define INTR_TYPE_PRIV_SW_EXCEPTION	(5 << 8) /* ICE breakpoint - undocumented */
 #define INTR_TYPE_SOFT_EXCEPTION	(6 << 8) /* software exception */
+#define INTR_TYPE_OTHER_EVENT           (7 << 8) /* other event */
 
 /* GUEST_INTERRUPTIBILITY_INFO flags. */
 #define GUEST_INTR_STATE_STI		0x00000001