{
  "hash": "d0edc2473be9d70f999282e1ca7863ad6ae704dc",
  "hash_short": "d0edc247",
  "subject": "block, bfq: inject other-queue I/O into seeky idle queues on NCQ flash",
  "body": "The Achilles' heel of BFQ is its failing to reach a high throughput\nwith sync random I/O on flash storage with internal queueing, in case\nthe processes doing I/O have differentiated weights.\n\nThe cause of this failure is as follows. If at least two processes do\nsync I/O, and have a different weight from each other, then BFQ plugs\nI/O dispatching every time one of these processes, while it is being\nserved, remains temporarily without pending I/O requests. This\nplugging is necessary to guarantee that every process enjoys a\nbandwidth proportional to its weight; but it empties the internal\nqueue(s) of the drive. And this kills throughput with random I/O. So,\nif some processes have differentiated weights and do both sync and\nrandom I/O, the end result is a throughput collapse.\n\nThis commit tries to counter this problem by injecting the service of\nother processes, in a controlled way, while the process in service\nhappens to have no I/O. This injection is performed only if the medium\nis non rotational and performs internal queueing, and the process in\nservice does random I/O (service injection might be beneficial for\nsequential I/O too, we'll work on that).\n\nAs an example of the benefits of this commit, on a PLEXTOR PX-256M5S\nSSD, and with five processes having differentiated weights and doing\nsync random 4KB I/O, this commit makes the throughput with bfq grow by\n400%, from 25 to 100MB/s. This higher throughput is 10MB/s lower than\nthat reached with none. As some less random I/O is added to the mix,\nthe throughput becomes equal to or higher than that with none.\n\nThis commit is a very first attempt to recover throughput without\nlosing control, and certainly has many limitations. One is, e.g., that\nthe processes whose service is injected are not chosen so as to\ndistribute the extra bandwidth they receive in accordance to their\nweights. Thus there might be loss of weighted fairness in some\ncases. Anyway, this loss concerns extra service, which would not have\nbeen received at all without this commit. Other limitations and issues\nwill probably show up with usage.\n\nSigned-off-by: Paolo Valente <paolo.valente@linaro.org>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
  "full_message": "block, bfq: inject other-queue I/O into seeky idle queues on NCQ flash\n\nThe Achilles' heel of BFQ is its failing to reach a high throughput\nwith sync random I/O on flash storage with internal queueing, in case\nthe processes doing I/O have differentiated weights.\n\nThe cause of this failure is as follows. If at least two processes do\nsync I/O, and have a different weight from each other, then BFQ plugs\nI/O dispatching every time one of these processes, while it is being\nserved, remains temporarily without pending I/O requests. This\nplugging is necessary to guarantee that every process enjoys a\nbandwidth proportional to its weight; but it empties the internal\nqueue(s) of the drive. And this kills throughput with random I/O. So,\nif some processes have differentiated weights and do both sync and\nrandom I/O, the end result is a throughput collapse.\n\nThis commit tries to counter this problem by injecting the service of\nother processes, in a controlled way, while the process in service\nhappens to have no I/O. This injection is performed only if the medium\nis non rotational and performs internal queueing, and the process in\nservice does random I/O (service injection might be beneficial for\nsequential I/O too, we'll work on that).\n\nAs an example of the benefits of this commit, on a PLEXTOR PX-256M5S\nSSD, and with five processes having differentiated weights and doing\nsync random 4KB I/O, this commit makes the throughput with bfq grow by\n400%, from 25 to 100MB/s. This higher throughput is 10MB/s lower than\nthat reached with none. As some less random I/O is added to the mix,\nthe throughput becomes equal to or higher than that with none.\n\nThis commit is a very first attempt to recover throughput without\nlosing control, and certainly has many limitations. One is, e.g., that\nthe processes whose service is injected are not chosen so as to\ndistribute the extra bandwidth they receive in accordance to their\nweights. Thus there might be loss of weighted fairness in some\ncases. Anyway, this loss concerns extra service, which would not have\nbeen received at all without this commit. Other limitations and issues\nwill probably show up with usage.\n\nSigned-off-by: Paolo Valente <paolo.valente@linaro.org>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
  "author_name": "Paolo Valente",
  "author_email": "paolo.valente@linaro.org",
  "author_date": "Fri Sep 14 16:23:08 2018 +0200",
  "author_date_iso": "2018-09-14T16:23:08+02:00",
  "committer_name": "Jens Axboe",
  "committer_email": "axboe@kernel.dk",
  "committer_date": "Fri Sep 14 13:06:03 2018 -0600",
  "committer_date_iso": "2018-09-14T13:06:03-06:00",
  "files_changed": [
    "block/bfq-iosched.c",
    "block/bfq-iosched.h"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "block/bfq-iosched.c",
      "insertions": 62,
      "deletions": 6
    },
    {
      "file": "block/bfq-iosched.h",
      "insertions": 26,
      "deletions": 0
    }
  ],
  "total_insertions": 88,
  "total_deletions": 6,
  "total_changes": 94,
  "parents": [
    "cbeb869a3d1110450186b738199963c5e68c2a71"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.20",
    "v4.20-rc1",
    "v4.20-rc2",
    "v4.20-rc3",
    "v4.20-rc4",
    "v4.20-rc5",
    "v4.20-rc6",
    "v4.20-rc7",
    "v5.0",
    "v5.0-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "inject"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "block/bfq-iosched.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "block/bfq-iosched.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}