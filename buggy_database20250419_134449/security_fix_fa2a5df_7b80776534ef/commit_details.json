{
  "hash": "fa2a5dfe2ddd0e7c77e5f608e1fa374192e5be97",
  "hash_short": "fa2a5dfe",
  "subject": "powerpc/pseries/cpuhp: delete add/remove_by_count code",
  "body": "The core DLPAR code supports two actions (add and remove) and three\nsubtypes of action:\n\n* By DRC index: the action is attempted on a single specified resource.\n  This is the usual case for processors.\n* By indexed count: the action is attempted on a range of resources\n  beginning at the specified index. This is implemented only by the memory\n  DLPAR code.\n* By count: the lower layer (CPU or memory) is responsible for locating the\n  specified number of resources to which the action can be applied.\n\nI cannot find any evidence of the \"by count\" subtype being used by drmgr or\nqemu for processors. And when I try to exercise this code, the add case\ndoes not work:\n\n  $ ppc64_cpu --smt ; nproc\n  SMT=8\n  24\n  $ printf \"cpu remove count 2\" > /sys/kernel/dlpar\n  $ nproc\n  8\n  $ printf \"cpu add count 2\" > /sys/kernel/dlpar\n  -bash: printf: write error: Invalid argument\n  $ dmesg | tail -2\n  pseries-hotplug-cpu: Failed to find enough CPUs (1 of 2) to add\n  dlpar: Could not handle DLPAR request \"cpu add count 2\"\n  $ nproc\n  8\n  $ drmgr -c cpu -a -q 2         # this uses the by-index method\n  Validating CPU DLPAR capability...yes.\n  CPU 1\n  CPU 17\n  $ nproc\n  24\n\nThis is because find_drc_info_cpus_to_add() does not increment drc_index\nappropriately during its search.\n\nThis is not hard to fix. But the _by_count() functions also have the\nproperty that they attempt to roll back all prior operations if the entire\nrequest cannot be satisfied, even though the rollback itself can encounter\nerrors. It's not possible to provide transaction-like behavior at this\nlevel, and it's undesirable to have code that can only pretend to do that.\nAny users of these functions cannot know what the state of the system is in\nthe error case. And the error paths are, to my knowledge, impossible to\ntest without adding custom error injection code.\n\nSummary:\n\n* This code has not worked reliably since its introduction.\n* There is no evidence that it is used.\n* It contains questionable rollback behaviors in error paths which are\n  difficult to test.\n\nSo let's remove it.\n\nFixes: ac71380071d1 (\"powerpc/pseries: Add CPU dlpar remove functionality\")\nFixes: 90edf184b9b7 (\"powerpc/pseries: Add CPU dlpar add functionality\")\nFixes: b015f6bc9547 (\"powerpc/pseries: Add cpu DLPAR support for drc-info property\")\nSigned-off-by: Nathan Lynch <nathanl@linux.ibm.com>\nTested-by: Daniel Henrique Barboza <danielhb413@gmail.com>\nReviewed-by: Daniel Henrique Barboza <danielhb413@gmail.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://lore.kernel.org/r/20210927201933.76786-4-nathanl@linux.ibm.com",
  "full_message": "powerpc/pseries/cpuhp: delete add/remove_by_count code\n\nThe core DLPAR code supports two actions (add and remove) and three\nsubtypes of action:\n\n* By DRC index: the action is attempted on a single specified resource.\n  This is the usual case for processors.\n* By indexed count: the action is attempted on a range of resources\n  beginning at the specified index. This is implemented only by the memory\n  DLPAR code.\n* By count: the lower layer (CPU or memory) is responsible for locating the\n  specified number of resources to which the action can be applied.\n\nI cannot find any evidence of the \"by count\" subtype being used by drmgr or\nqemu for processors. And when I try to exercise this code, the add case\ndoes not work:\n\n  $ ppc64_cpu --smt ; nproc\n  SMT=8\n  24\n  $ printf \"cpu remove count 2\" > /sys/kernel/dlpar\n  $ nproc\n  8\n  $ printf \"cpu add count 2\" > /sys/kernel/dlpar\n  -bash: printf: write error: Invalid argument\n  $ dmesg | tail -2\n  pseries-hotplug-cpu: Failed to find enough CPUs (1 of 2) to add\n  dlpar: Could not handle DLPAR request \"cpu add count 2\"\n  $ nproc\n  8\n  $ drmgr -c cpu -a -q 2         # this uses the by-index method\n  Validating CPU DLPAR capability...yes.\n  CPU 1\n  CPU 17\n  $ nproc\n  24\n\nThis is because find_drc_info_cpus_to_add() does not increment drc_index\nappropriately during its search.\n\nThis is not hard to fix. But the _by_count() functions also have the\nproperty that they attempt to roll back all prior operations if the entire\nrequest cannot be satisfied, even though the rollback itself can encounter\nerrors. It's not possible to provide transaction-like behavior at this\nlevel, and it's undesirable to have code that can only pretend to do that.\nAny users of these functions cannot know what the state of the system is in\nthe error case. And the error paths are, to my knowledge, impossible to\ntest without adding custom error injection code.\n\nSummary:\n\n* This code has not worked reliably since its introduction.\n* There is no evidence that it is used.\n* It contains questionable rollback behaviors in error paths which are\n  difficult to test.\n\nSo let's remove it.\n\nFixes: ac71380071d1 (\"powerpc/pseries: Add CPU dlpar remove functionality\")\nFixes: 90edf184b9b7 (\"powerpc/pseries: Add CPU dlpar add functionality\")\nFixes: b015f6bc9547 (\"powerpc/pseries: Add cpu DLPAR support for drc-info property\")\nSigned-off-by: Nathan Lynch <nathanl@linux.ibm.com>\nTested-by: Daniel Henrique Barboza <danielhb413@gmail.com>\nReviewed-by: Daniel Henrique Barboza <danielhb413@gmail.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://lore.kernel.org/r/20210927201933.76786-4-nathanl@linux.ibm.com",
  "author_name": "Nathan Lynch",
  "author_email": "nathanl@linux.ibm.com",
  "author_date": "Mon Sep 27 15:19:32 2021 -0500",
  "author_date_iso": "2021-09-27T15:19:32-05:00",
  "committer_name": "Michael Ellerman",
  "committer_email": "mpe@ellerman.id.au",
  "committer_date": "Sat Oct 9 00:16:00 2021 +1100",
  "committer_date_iso": "2021-10-09T00:16:00+11:00",
  "files_changed": [
    "arch/powerpc/platforms/pseries/hotplug-cpu.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/powerpc/platforms/pseries/hotplug-cpu.c",
      "insertions": 2,
      "deletions": 216
    }
  ],
  "total_insertions": 2,
  "total_deletions": 216,
  "total_changes": 218,
  "parents": [
    "983f9101740641434cea4f2e172175ff4b0276ad"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/powerpc/platforms/pseries/hotplug-cpu.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}