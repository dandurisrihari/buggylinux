{
  "hash": "8c3e8a6bdb5253b97ad532570f8b5db5f7a06407",
  "hash_short": "8c3e8a6b",
  "subject": "class: fix possible memory leak in __class_register()",
  "body": "If class_add_groups() returns error, the 'cp->subsys' need be\nunregister, and the 'cp' need be freed.\n\nWe can not call kset_unregister() here, because the 'cls' will\nbe freed in callback function class_release() and it's also\nfreed in caller's error path, it will cause double free.\n\nSo fix this by calling kobject_del() and kfree_const(name) to\ncleanup kobject. Besides, call kfree() to free the 'cp'.\n\nFault injection test can trigger this:\n\nunreferenced object 0xffff888102fa8190 (size 8):\n  comm \"modprobe\", pid 502, jiffies 4294906074 (age 49.296s)\n  hex dump (first 8 bytes):\n    70 6b 74 63 64 76 64 00                          pktcdvd.\n  backtrace:\n    [<00000000e7c7703d>] __kmalloc_track_caller+0x1ae/0x320\n    [<000000005e4d70bc>] kstrdup+0x3a/0x70\n    [<00000000c2e5e85a>] kstrdup_const+0x68/0x80\n    [<000000000049a8c7>] kvasprintf_const+0x10b/0x190\n    [<0000000029123163>] kobject_set_name_vargs+0x56/0x150\n    [<00000000747219c9>] kobject_set_name+0xab/0xe0\n    [<0000000005f1ea4e>] __class_register+0x15c/0x49a\n\nunreferenced object 0xffff888037274000 (size 1024):\n  comm \"modprobe\", pid 502, jiffies 4294906074 (age 49.296s)\n  hex dump (first 32 bytes):\n    00 40 27 37 80 88 ff ff 00 40 27 37 80 88 ff ff  .@'7.....@'7....\n    00 00 00 00 ad 4e ad de ff ff ff ff 00 00 00 00  .....N..........\n  backtrace:\n    [<00000000151f9600>] kmem_cache_alloc_trace+0x17c/0x2f0\n    [<00000000ecf3dd95>] __class_register+0x86/0x49a\n\nFixes: ced6473e7486 (\"driver core: class: add class_groups support\")\nSigned-off-by: Yang Yingliang <yangyingliang@huawei.com>\nLink: https://lore.kernel.org/r/20221026082803.3458760-1-yangyingliang@huawei.com\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
  "full_message": "class: fix possible memory leak in __class_register()\n\nIf class_add_groups() returns error, the 'cp->subsys' need be\nunregister, and the 'cp' need be freed.\n\nWe can not call kset_unregister() here, because the 'cls' will\nbe freed in callback function class_release() and it's also\nfreed in caller's error path, it will cause double free.\n\nSo fix this by calling kobject_del() and kfree_const(name) to\ncleanup kobject. Besides, call kfree() to free the 'cp'.\n\nFault injection test can trigger this:\n\nunreferenced object 0xffff888102fa8190 (size 8):\n  comm \"modprobe\", pid 502, jiffies 4294906074 (age 49.296s)\n  hex dump (first 8 bytes):\n    70 6b 74 63 64 76 64 00                          pktcdvd.\n  backtrace:\n    [<00000000e7c7703d>] __kmalloc_track_caller+0x1ae/0x320\n    [<000000005e4d70bc>] kstrdup+0x3a/0x70\n    [<00000000c2e5e85a>] kstrdup_const+0x68/0x80\n    [<000000000049a8c7>] kvasprintf_const+0x10b/0x190\n    [<0000000029123163>] kobject_set_name_vargs+0x56/0x150\n    [<00000000747219c9>] kobject_set_name+0xab/0xe0\n    [<0000000005f1ea4e>] __class_register+0x15c/0x49a\n\nunreferenced object 0xffff888037274000 (size 1024):\n  comm \"modprobe\", pid 502, jiffies 4294906074 (age 49.296s)\n  hex dump (first 32 bytes):\n    00 40 27 37 80 88 ff ff 00 40 27 37 80 88 ff ff  .@'7.....@'7....\n    00 00 00 00 ad 4e ad de ff ff ff ff 00 00 00 00  .....N..........\n  backtrace:\n    [<00000000151f9600>] kmem_cache_alloc_trace+0x17c/0x2f0\n    [<00000000ecf3dd95>] __class_register+0x86/0x49a\n\nFixes: ced6473e7486 (\"driver core: class: add class_groups support\")\nSigned-off-by: Yang Yingliang <yangyingliang@huawei.com>\nLink: https://lore.kernel.org/r/20221026082803.3458760-1-yangyingliang@huawei.com\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
  "author_name": "Yang Yingliang",
  "author_email": "yangyingliang@huawei.com",
  "author_date": "Wed Oct 26 16:28:03 2022 +0800",
  "author_date_iso": "2022-10-26T16:28:03+08:00",
  "committer_name": "Greg Kroah-Hartman",
  "committer_email": "gregkh@linuxfoundation.org",
  "committer_date": "Wed Nov 9 14:58:29 2022 +0100",
  "committer_date_iso": "2022-11-09T14:58:29+01:00",
  "files_changed": [
    "drivers/base/class.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "drivers/base/class.c",
      "insertions": 5,
      "deletions": 0
    }
  ],
  "total_insertions": 5,
  "total_deletions": 0,
  "total_changes": 5,
  "parents": [
    "1662cea4623f75d8251adf07370bbaa958f0355d"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/base/class.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}