{
  "hash": "124ea650d3072b005457faed69909221c2905a1f",
  "hash_short": "124ea650",
  "subject": "capabilities: Introduce CAP_CHECKPOINT_RESTORE",
  "body": "This patch introduces CAP_CHECKPOINT_RESTORE, a new capability facilitating\ncheckpoint/restore for non-root users.\n\nOver the last years, The CRIU (Checkpoint/Restore In Userspace) team has\nbeen asked numerous times if it is possible to checkpoint/restore a\nprocess as non-root. The answer usually was: 'almost'.\n\nThe main blocker to restore a process as non-root was to control the PID\nof the restored process. This feature available via the clone3 system\ncall, or via /proc/sys/kernel/ns_last_pid is unfortunately guarded by\nCAP_SYS_ADMIN.\n\nIn the past two years, requests for non-root checkpoint/restore have\nincreased due to the following use cases:\n* Checkpoint/Restore in an HPC environment in combination with a\n  resource manager distributing jobs where users are always running as\n  non-root. There is a desire to provide a way to checkpoint and\n  restore long running jobs.\n* Container migration as non-root\n* We have been in contact with JVM developers who are integrating\n  CRIU into a Java VM to decrease the startup time. These\n  checkpoint/restore applications are not meant to be running with\n  CAP_SYS_ADMIN.\n\nWe have seen the following workarounds:\n* Use a setuid wrapper around CRIU:\n  See https://github.com/FredHutch/slurm-examples/blob/master/checkpointer/lib/checkpointer/checkpointer-suid.c\n* Use a setuid helper that writes to ns_last_pid.\n  Unfortunately, this helper delegation technique is impossible to use\n  with clone3, and is thus prone to races.\n  See https://github.com/twosigma/set_ns_last_pid\n* Cycle through PIDs with fork() until the desired PID is reached:\n  This has been demonstrated to work with cycling rates of 100,000 PIDs/s\n  See https://github.com/twosigma/set_ns_last_pid\n* Patch out the CAP_SYS_ADMIN check from the kernel\n* Run the desired application in a new user and PID namespace to provide\n  a local CAP_SYS_ADMIN for controlling PIDs. This technique has limited\n  use in typical container environments (e.g., Kubernetes) as /proc is\n  typically protected with read-only layers (e.g., /proc/sys) for\n  hardening purposes. Read-only layers prevent additional /proc mounts\n  (due to proc's SB_I_USERNS_VISIBLE property), making the use of new\n  PID namespaces limited as certain applications need access to /proc\n  matching their PID namespace.\n\nThe introduced capability allows to:\n* Control PIDs when the current user is CAP_CHECKPOINT_RESTORE capable\n  for the corresponding PID namespace via ns_last_pid/clone3.\n* Open files in /proc/pid/map_files when the current user is\n  CAP_CHECKPOINT_RESTORE capable in the root namespace, useful for\n  recovering files that are unreachable via the file system such as\n  deleted files, or memfd files.\n\nSee corresponding selftest for an example with clone3().\n\nSigned-off-by: Adrian Reber <areber@redhat.com>\nSigned-off-by: Nicolas Viennot <Nicolas.Viennot@twosigma.com>\nReviewed-by: Serge Hallyn <serge@hallyn.com>\nAcked-by: Christian Brauner <christian.brauner@ubuntu.com>\nLink: https://lore.kernel.org/r/20200719100418.2112740-2-areber@redhat.com\nSigned-off-by: Christian Brauner <christian.brauner@ubuntu.com>",
  "full_message": "capabilities: Introduce CAP_CHECKPOINT_RESTORE\n\nThis patch introduces CAP_CHECKPOINT_RESTORE, a new capability facilitating\ncheckpoint/restore for non-root users.\n\nOver the last years, The CRIU (Checkpoint/Restore In Userspace) team has\nbeen asked numerous times if it is possible to checkpoint/restore a\nprocess as non-root. The answer usually was: 'almost'.\n\nThe main blocker to restore a process as non-root was to control the PID\nof the restored process. This feature available via the clone3 system\ncall, or via /proc/sys/kernel/ns_last_pid is unfortunately guarded by\nCAP_SYS_ADMIN.\n\nIn the past two years, requests for non-root checkpoint/restore have\nincreased due to the following use cases:\n* Checkpoint/Restore in an HPC environment in combination with a\n  resource manager distributing jobs where users are always running as\n  non-root. There is a desire to provide a way to checkpoint and\n  restore long running jobs.\n* Container migration as non-root\n* We have been in contact with JVM developers who are integrating\n  CRIU into a Java VM to decrease the startup time. These\n  checkpoint/restore applications are not meant to be running with\n  CAP_SYS_ADMIN.\n\nWe have seen the following workarounds:\n* Use a setuid wrapper around CRIU:\n  See https://github.com/FredHutch/slurm-examples/blob/master/checkpointer/lib/checkpointer/checkpointer-suid.c\n* Use a setuid helper that writes to ns_last_pid.\n  Unfortunately, this helper delegation technique is impossible to use\n  with clone3, and is thus prone to races.\n  See https://github.com/twosigma/set_ns_last_pid\n* Cycle through PIDs with fork() until the desired PID is reached:\n  This has been demonstrated to work with cycling rates of 100,000 PIDs/s\n  See https://github.com/twosigma/set_ns_last_pid\n* Patch out the CAP_SYS_ADMIN check from the kernel\n* Run the desired application in a new user and PID namespace to provide\n  a local CAP_SYS_ADMIN for controlling PIDs. This technique has limited\n  use in typical container environments (e.g., Kubernetes) as /proc is\n  typically protected with read-only layers (e.g., /proc/sys) for\n  hardening purposes. Read-only layers prevent additional /proc mounts\n  (due to proc's SB_I_USERNS_VISIBLE property), making the use of new\n  PID namespaces limited as certain applications need access to /proc\n  matching their PID namespace.\n\nThe introduced capability allows to:\n* Control PIDs when the current user is CAP_CHECKPOINT_RESTORE capable\n  for the corresponding PID namespace via ns_last_pid/clone3.\n* Open files in /proc/pid/map_files when the current user is\n  CAP_CHECKPOINT_RESTORE capable in the root namespace, useful for\n  recovering files that are unreachable via the file system such as\n  deleted files, or memfd files.\n\nSee corresponding selftest for an example with clone3().\n\nSigned-off-by: Adrian Reber <areber@redhat.com>\nSigned-off-by: Nicolas Viennot <Nicolas.Viennot@twosigma.com>\nReviewed-by: Serge Hallyn <serge@hallyn.com>\nAcked-by: Christian Brauner <christian.brauner@ubuntu.com>\nLink: https://lore.kernel.org/r/20200719100418.2112740-2-areber@redhat.com\nSigned-off-by: Christian Brauner <christian.brauner@ubuntu.com>",
  "author_name": "Adrian Reber",
  "author_email": "areber@redhat.com",
  "author_date": "Sun Jul 19 12:04:11 2020 +0200",
  "author_date_iso": "2020-07-19T12:04:11+02:00",
  "committer_name": "Christian Brauner",
  "committer_email": "christian.brauner@ubuntu.com",
  "committer_date": "Sun Jul 19 20:14:42 2020 +0200",
  "committer_date_iso": "2020-07-19T20:14:42+02:00",
  "files_changed": [
    "include/linux/capability.h",
    "include/uapi/linux/capability.h",
    "security/selinux/include/classmap.h"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "include/linux/capability.h",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "include/uapi/linux/capability.h",
      "insertions": 8,
      "deletions": 1
    },
    {
      "file": "security/selinux/include/classmap.h",
      "insertions": 3,
      "deletions": 2
    }
  ],
  "total_insertions": 17,
  "total_deletions": 3,
  "total_changes": 20,
  "parents": [
    "11ba468877bb23f28956a35e896356252d63c983"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/linux/capability.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/uapi/linux/capability.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "security/selinux/include/classmap.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}