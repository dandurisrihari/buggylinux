{
  "hash": "b299c273c06f005976cdc1b9e9299d492527607e",
  "hash_short": "b299c273",
  "subject": "KVM: x86/mmu: Move event re-injection unprotect+retry into common path",
  "body": "Move the event re-injection unprotect+retry logic into\nkvm_mmu_write_protect_fault(), i.e. unprotect and retry if and only if\nthe #PF actually hit a write-protected gfn.  Note, there is a small\npossibility that the gfn was unprotected by a different tasking between\nhitting the #PF and acquiring mmu_lock, but in that case, KVM will resume\nthe guest immediately anyways because KVM will treat the fault as spurious.\n\nAs a bonus, unprotecting _after_ handling the page fault also addresses the\ncase where the installing a SPTE to handle fault encounters a shadowed PTE,\ni.e. *creates* a read-only SPTE.\n\nOpportunstically add a comment explaining what on earth the intent of the\ncode is, as based on the changelog from commit 577bdc496614 (\"KVM: Avoid\ninstruction emulation when event delivery is pending\").\n\nLink: https://lore.kernel.org/r/20240831001538.336683-15-seanjc@google.com\nSigned-off-by: Sean Christopherson <seanjc@google.com>",
  "full_message": "KVM: x86/mmu: Move event re-injection unprotect+retry into common path\n\nMove the event re-injection unprotect+retry logic into\nkvm_mmu_write_protect_fault(), i.e. unprotect and retry if and only if\nthe #PF actually hit a write-protected gfn.  Note, there is a small\npossibility that the gfn was unprotected by a different tasking between\nhitting the #PF and acquiring mmu_lock, but in that case, KVM will resume\nthe guest immediately anyways because KVM will treat the fault as spurious.\n\nAs a bonus, unprotecting _after_ handling the page fault also addresses the\ncase where the installing a SPTE to handle fault encounters a shadowed PTE,\ni.e. *creates* a read-only SPTE.\n\nOpportunstically add a comment explaining what on earth the intent of the\ncode is, as based on the changelog from commit 577bdc496614 (\"KVM: Avoid\ninstruction emulation when event delivery is pending\").\n\nLink: https://lore.kernel.org/r/20240831001538.336683-15-seanjc@google.com\nSigned-off-by: Sean Christopherson <seanjc@google.com>",
  "author_name": "Sean Christopherson",
  "author_email": "seanjc@google.com",
  "author_date": "Fri Aug 30 17:15:29 2024 -0700",
  "author_date_iso": "2024-08-30T17:15:29-07:00",
  "committer_name": "Sean Christopherson",
  "committer_email": "seanjc@google.com",
  "committer_date": "Mon Sep 9 20:16:29 2024 -0700",
  "committer_date_iso": "2024-09-09T20:16:29-07:00",
  "files_changed": [
    "arch/x86/kvm/mmu/mmu.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/x86/kvm/mmu/mmu.c",
      "insertions": 9,
      "deletions": 21
    }
  ],
  "total_insertions": 9,
  "total_deletions": 21,
  "total_changes": 30,
  "parents": [
    "29e495bdf847ac6ad0e0d03e5db39a3ed9f12858"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/kvm/mmu/mmu.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}