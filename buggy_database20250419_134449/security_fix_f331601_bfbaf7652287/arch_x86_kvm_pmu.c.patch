commit f331601c65ad217a5c000ce20c26266d3f0aceb3
Author: Like Xu <likexu@tencent.com>
Date:   Wed Aug 31 16:53:23 2022 +0800

    KVM: x86/pmu: Don't generate PEBS records for emulated instructions
    
    KVM will accumulate an enabled counter for at least INSTRUCTIONS or
    BRANCH_INSTRUCTION hw event from any KVM emulated instructions,
    generating emulated overflow interrupt on counter overflow, which
    in theory should also happen when the PEBS counter overflows but
    it currently lacks this part of the underlying support (e.g. through
    software injection of records in the irq context or a lazy approach).
    
    In this case, KVM skips the injection of this BUFFER_OVF PMI (effectively
    dropping one PEBS record) and let the overflow counter move on. The loss
    of a single sample does not introduce a loss of accuracy, but is easily
    noticeable for certain specific instructions.
    
    This issue is expected to be addressed along with the issue
    of PEBS cross-mapped counters with a slow-path proposal.
    
    Fixes: 79f3e3b58386 ("KVM: x86/pmu: Reprogram PEBS event to emulate guest PEBS counter")
    Signed-off-by: Like Xu <likexu@tencent.com>
    Link: https://lore.kernel.org/r/20220831085328.45489-3-likexu@tencent.com
    Signed-off-by: Sean Christopherson <seanjc@google.com>

diff --git a/arch/x86/kvm/pmu.c b/arch/x86/kvm/pmu.c
index 02f9e4f245bd..390d697efde1 100644
--- a/arch/x86/kvm/pmu.c
+++ b/arch/x86/kvm/pmu.c
@@ -106,9 +106,19 @@ static inline void __kvm_perf_overflow(struct kvm_pmc *pmc, bool in_pmi)
 		return;
 
 	if (pmc->perf_event && pmc->perf_event->attr.precise_ip) {
-		/* Indicate PEBS overflow PMI to guest. */
-		skip_pmi = __test_and_set_bit(GLOBAL_STATUS_BUFFER_OVF_BIT,
-					      (unsigned long *)&pmu->global_status);
+		if (!in_pmi) {
+			/*
+			 * TODO: KVM is currently _choosing_ to not generate records
+			 * for emulated instructions, avoiding BUFFER_OVF PMI when
+			 * there are no records. Strictly speaking, it should be done
+			 * as well in the right context to improve sampling accuracy.
+			 */
+			skip_pmi = true;
+		} else {
+			/* Indicate PEBS overflow PMI to guest. */
+			skip_pmi = __test_and_set_bit(GLOBAL_STATUS_BUFFER_OVF_BIT,
+						      (unsigned long *)&pmu->global_status);
+		}
 	} else {
 		__set_bit(pmc->idx, (unsigned long *)&pmu->global_status);
 	}