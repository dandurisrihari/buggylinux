Commit Hash: 9319b647902cbd5cc884ac08a8a6d54ce111fc78
Subject: mm/writeback: fix possible divide-by-zero in wb_dirty_limits(), again


Security Keywords:
- exploit

Full commit message:
mm/writeback: fix possible divide-by-zero in wb_dirty_limits(), again

(struct dirty_throttle_control *)->thresh is an unsigned long, but is
passed as the u32 divisor argument to div_u64().  On architectures where
unsigned long is 64 bytes, the argument will be implicitly truncated.

Use div64_u64() instead of div_u64() so that the value used in the "is
this a safe division" check is the same as the divisor.

Also, remove redundant cast of the numerator to u64, as that should happen
implicitly.

This would be difficult to exploit in memcg domain, given the ratio-based
arithmetic domain_drity_limits() uses, but is much easier in global
writeback domain with a BDI_CAP_STRICTLIMIT-backing device, using e.g. 
vm.dirty_bytes=(1<<32)*PAGE_SIZE so that dtc->thresh == (1<<32)

Link: https://lkml.kernel.org/r/20240118181954.1415197-1-zokeefe@google.com
Fixes: f6789593d5ce ("mm/page-writeback.c: fix divide by zero in bdi_dirty_limits()")
Signed-off-by: Zach O'Keefe <zokeefe@google.com>
Cc: Maxim Patlasov <MPatlasov@parallels.com>
Cc: <stable@vger.kernel.org>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

Metadata:
Author: Zach O'Keefe <zokeefe@google.com>
Author Date: Thu Jan 18 10:19:53 2024 -0800
Committer: Andrew Morton <akpm@linux-foundation.org>
Commit Date: Thu Jan 25 23:52:20 2024 -0800

Files Changed: 1
Lines Added: 1
Lines Removed: 1
Total Changes: 2
