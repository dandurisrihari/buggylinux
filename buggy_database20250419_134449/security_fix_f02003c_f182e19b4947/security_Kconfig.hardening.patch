commit f02003c860d921171be4a27e2893766eb3bc6871
Author: Kees Cook <kees@kernel.org>
Date:   Tue Sep 14 12:49:03 2021 -0700

    hardening: Avoid harmless Clang option under CONFIG_INIT_STACK_ALL_ZERO
    
    Currently under Clang, CC_HAS_AUTO_VAR_INIT_ZERO requires an extra
    -enable flag compared to CC_HAS_AUTO_VAR_INIT_PATTERN. GCC 12[1] will
    not, and will happily ignore the Clang-specific flag. However, its
    presence on the command-line is both cumbersome and confusing. Due to
    GCC's tolerant behavior, though, we can continue to use a single Kconfig
    cc-option test for the feature on both compilers, but then drop the
    Clang-specific option in the Makefile.
    
    In other words, this patch does not change anything other than making the
    compiler command line shorter once GCC supports -ftrivial-auto-var-init=zero.
    
    [1] https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=a25e0b5e6ac8a77a71c229e0a7b744603365b0e9
    
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Masahiro Yamada <masahiroy@kernel.org>
    Cc: llvm@lists.linux.dev
    Fixes: dcb7c0b9461c ("hardening: Clarify Kconfig text for auto-var-init")
    Suggested-by: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/lkml/20210914102837.6172-1-will@kernel.org/
    Reviewed-by: Nick Desaulniers <ndesaulniers@google.com>
    Reviewed-by: Nathan Chancellor <nathan@kernel.org>
    Acked-by: Will Deacon <will@kernel.org>
    Signed-off-by: Kees Cook <keescook@chromium.org>

diff --git a/security/Kconfig.hardening b/security/Kconfig.hardening
index 90cbaff86e13..ded17b8abce2 100644
--- a/security/Kconfig.hardening
+++ b/security/Kconfig.hardening
@@ -23,13 +23,16 @@ config CC_HAS_AUTO_VAR_INIT_PATTERN
 	def_bool $(cc-option,-ftrivial-auto-var-init=pattern)
 
 config CC_HAS_AUTO_VAR_INIT_ZERO
+	# GCC ignores the -enable flag, so we can test for the feature with
+	# a single invocation using the flag, but drop it as appropriate in
+	# the Makefile, depending on the presence of Clang.
 	def_bool $(cc-option,-ftrivial-auto-var-init=zero -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang)
 
 choice
 	prompt "Initialize kernel stack variables at function entry"
 	default GCC_PLUGIN_STRUCTLEAK_BYREF_ALL if COMPILE_TEST && GCC_PLUGINS
 	default INIT_STACK_ALL_PATTERN if COMPILE_TEST && CC_HAS_AUTO_VAR_INIT_PATTERN
-	default INIT_STACK_ALL_ZERO if CC_HAS_AUTO_VAR_INIT_PATTERN
+	default INIT_STACK_ALL_ZERO if CC_HAS_AUTO_VAR_INIT_ZERO
 	default INIT_STACK_NONE
 	help
 	  This option enables initialization of stack variables at