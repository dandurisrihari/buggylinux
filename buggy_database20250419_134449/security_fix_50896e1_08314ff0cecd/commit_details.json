{
  "hash": "50896e180c6aa3a9c61a26ced99e15d602666a4c",
  "hash_short": "50896e18",
  "subject": "x86/speculation/l1tf: Increase 32bit PAE __PHYSICAL_PAGE_SHIFT",
  "body": "L1 Terminal Fault (L1TF) is a speculation related vulnerability. The CPU\nspeculates on PTE entries which do not have the PRESENT bit set, if the\ncontent of the resulting physical address is available in the L1D cache.\n\nThe OS side mitigation makes sure that a !PRESENT PTE entry points to a\nphysical address outside the actually existing and cachable memory\nspace. This is achieved by inverting the upper bits of the PTE. Due to the\naddress space limitations this only works for 64bit and 32bit PAE kernels,\nbut not for 32bit non PAE.\n\nThis mitigation applies to both host and guest kernels, but in case of a\n64bit host (hypervisor) and a 32bit PAE guest, inverting the upper bits of\nthe PAE address space (44bit) is not enough if the host has more than 43\nbits of populated memory address space, because the speculation treats the\nPTE content as a physical host address bypassing EPT.\n\nThe host (hypervisor) protects itself against the guest by flushing L1D as\nneeded, but pages inside the guest are not protected against attacks from\nother processes inside the same guest.\n\nFor the guest the inverted PTE mask has to match the host to provide the\nfull protection for all pages the host could possibly map into the\nguest. The hosts populated address space is not known to the guest, so the\nmask must cover the possible maximal host address space, i.e. 52 bit.\n\nOn 32bit PAE the maximum PTE mask is currently set to 44 bit because that\nis the limit imposed by 32bit unsigned long PFNs in the VMs. This limits\nthe mask to be below what the host could possible use for physical pages.\n\nThe L1TF PROT_NONE protection code uses the PTE masks to determine which\nbits to invert to make sure the higher bits are set for unmapped entries to\nprevent L1TF speculation attacks against EPT inside guests.\n\nIn order to invert all bits that could be used by the host, increase\n__PHYSICAL_PAGE_SHIFT to 52 to match 64bit.\n\nThe real limit for a 32bit PAE kernel is still 44 bits because all Linux\nPTEs are created from unsigned long PFNs, so they cannot be higher than 44\nbits on a 32bit kernel. So these extra PFN bits should be never set. The\nonly users of this macro are using it to look at PTEs, so it's safe.\n\n[ tglx: Massaged changelog ]\n\nSigned-off-by: Andi Kleen <ak@linux.intel.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nReviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>\nAcked-by: Michal Hocko <mhocko@suse.com>\nAcked-by: Dave Hansen <dave.hansen@intel.com>",
  "full_message": "x86/speculation/l1tf: Increase 32bit PAE __PHYSICAL_PAGE_SHIFT\n\nL1 Terminal Fault (L1TF) is a speculation related vulnerability. The CPU\nspeculates on PTE entries which do not have the PRESENT bit set, if the\ncontent of the resulting physical address is available in the L1D cache.\n\nThe OS side mitigation makes sure that a !PRESENT PTE entry points to a\nphysical address outside the actually existing and cachable memory\nspace. This is achieved by inverting the upper bits of the PTE. Due to the\naddress space limitations this only works for 64bit and 32bit PAE kernels,\nbut not for 32bit non PAE.\n\nThis mitigation applies to both host and guest kernels, but in case of a\n64bit host (hypervisor) and a 32bit PAE guest, inverting the upper bits of\nthe PAE address space (44bit) is not enough if the host has more than 43\nbits of populated memory address space, because the speculation treats the\nPTE content as a physical host address bypassing EPT.\n\nThe host (hypervisor) protects itself against the guest by flushing L1D as\nneeded, but pages inside the guest are not protected against attacks from\nother processes inside the same guest.\n\nFor the guest the inverted PTE mask has to match the host to provide the\nfull protection for all pages the host could possibly map into the\nguest. The hosts populated address space is not known to the guest, so the\nmask must cover the possible maximal host address space, i.e. 52 bit.\n\nOn 32bit PAE the maximum PTE mask is currently set to 44 bit because that\nis the limit imposed by 32bit unsigned long PFNs in the VMs. This limits\nthe mask to be below what the host could possible use for physical pages.\n\nThe L1TF PROT_NONE protection code uses the PTE masks to determine which\nbits to invert to make sure the higher bits are set for unmapped entries to\nprevent L1TF speculation attacks against EPT inside guests.\n\nIn order to invert all bits that could be used by the host, increase\n__PHYSICAL_PAGE_SHIFT to 52 to match 64bit.\n\nThe real limit for a 32bit PAE kernel is still 44 bits because all Linux\nPTEs are created from unsigned long PFNs, so they cannot be higher than 44\nbits on a 32bit kernel. So these extra PFN bits should be never set. The\nonly users of this macro are using it to look at PTEs, so it's safe.\n\n[ tglx: Massaged changelog ]\n\nSigned-off-by: Andi Kleen <ak@linux.intel.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nReviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>\nAcked-by: Michal Hocko <mhocko@suse.com>\nAcked-by: Dave Hansen <dave.hansen@intel.com>",
  "author_name": "Andi Kleen",
  "author_email": "ak@linux.intel.com",
  "author_date": "Wed Jun 13 15:48:21 2018 -0700",
  "author_date_iso": "2018-06-13T15:48:21-07:00",
  "committer_name": "Thomas Gleixner",
  "committer_email": "tglx@linutronix.de",
  "committer_date": "Wed Jun 20 19:09:59 2018 +0200",
  "committer_date_iso": "2018-06-20T19:09:59+02:00",
  "files_changed": [
    "arch/x86/include/asm/page_32_types.h"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/x86/include/asm/page_32_types.h",
      "insertions": 7,
      "deletions": 2
    }
  ],
  "total_insertions": 7,
  "total_deletions": 2,
  "total_changes": 9,
  "parents": [
    "ce397d215ccd07b8ae3f71db689aedb85d56ab40"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.19",
    "v4.19-rc1",
    "v4.19-rc2",
    "v4.19-rc3",
    "v4.19-rc4",
    "v4.19-rc5",
    "v4.19-rc6",
    "v4.19-rc7",
    "v4.19-rc8",
    "v4.20"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "vulnerability"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/include/asm/page_32_types.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}