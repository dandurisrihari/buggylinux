{
  "hash": "76d9b92e68f2bb55890f935c5143f4fef97a935d",
  "hash_short": "76d9b92e",
  "subject": "Merge tag 'slab-for-6.11' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab",
  "body": "Pull slab updates from Vlastimil Babka:\n \"The most prominent change this time is the kmem_buckets based\n  hardening of kmalloc() allocations from Kees Cook.\n\n  We have also extended the kmalloc() alignment guarantees for\n  non-power-of-two sizes in a way that benefits rust.\n\n  The rest are various cleanups and non-critical fixups.\n\n   - Dedicated bucket allocator (Kees Cook)\n\n     This series [1] enhances the probabilistic defense against heap\n     spraying/grooming of CONFIG_RANDOM_KMALLOC_CACHES from last year.\n\n     kmalloc() users that are known to be useful for exploits can get\n     completely separate set of kmalloc caches that can't be shared with\n     other users. The first converted users are alloc_msg() and\n     memdup_user().\n\n     The hardening is enabled by CONFIG_SLAB_BUCKETS.\n\n   - Extended kmalloc() alignment guarantees (Vlastimil Babka)\n\n     For years now we have guaranteed natural alignment for power-of-two\n     allocations, but nothing was defined for other sizes (in practice,\n     we have two such buckets, kmalloc-96 and kmalloc-192).\n\n     To avoid unnecessary padding in the rust layer due to its alignment\n     rules, extend the guarantee so that the alignment is at least the\n     largest power-of-two divisor of the requested size.\n\n     This fits what rust needs, is a superset of the existing\n     power-of-two guarantee, and does not in practice change the layout\n     (and thus does not add overhead due to padding) of the kmalloc-96\n     and kmalloc-192 caches, unless slab debugging is enabled for them.\n\n   - Cleanups and non-critical fixups (Chengming Zhou, Suren\n     Baghdasaryan, Matthew Willcox, Alex Shi, and Vlastimil Babka)\n\n     Various tweaks related to the new alloc profiling code, folio\n     conversion, debugging and more leftovers after SLAB\"\n\nLink: https://lore.kernel.org/all/20240701190152.it.631-kees@kernel.org/ [1]\n\n* tag 'slab-for-6.11' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:\n  mm/memcg: alignment memcg_data define condition\n  mm, slab: move prepare_slab_obj_exts_hook under CONFIG_MEM_ALLOC_PROFILING\n  mm, slab: move allocation tagging code in the alloc path into a hook\n  mm/util: Use dedicated slab buckets for memdup_user()\n  ipc, msg: Use dedicated slab buckets for alloc_msg()\n  mm/slab: Introduce kmem_buckets_create() and family\n  mm/slab: Introduce kvmalloc_buckets_node() that can take kmem_buckets argument\n  mm/slab: Plumb kmem_buckets into __do_kmalloc_node()\n  mm/slab: Introduce kmem_buckets typedef\n  slab, rust: extend kmalloc() alignment guarantees to remove Rust padding\n  slab: delete useless RED_INACTIVE and RED_ACTIVE\n  slab: don't put freepointer outside of object if only orig_size\n  slab: make check_object() more consistent\n  mm: Reduce the number of slab->folio casts\n  mm, slab: don't wrap internal functions with alloc_hooks()",
  "full_message": "Merge tag 'slab-for-6.11' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab\n\nPull slab updates from Vlastimil Babka:\n \"The most prominent change this time is the kmem_buckets based\n  hardening of kmalloc() allocations from Kees Cook.\n\n  We have also extended the kmalloc() alignment guarantees for\n  non-power-of-two sizes in a way that benefits rust.\n\n  The rest are various cleanups and non-critical fixups.\n\n   - Dedicated bucket allocator (Kees Cook)\n\n     This series [1] enhances the probabilistic defense against heap\n     spraying/grooming of CONFIG_RANDOM_KMALLOC_CACHES from last year.\n\n     kmalloc() users that are known to be useful for exploits can get\n     completely separate set of kmalloc caches that can't be shared with\n     other users. The first converted users are alloc_msg() and\n     memdup_user().\n\n     The hardening is enabled by CONFIG_SLAB_BUCKETS.\n\n   - Extended kmalloc() alignment guarantees (Vlastimil Babka)\n\n     For years now we have guaranteed natural alignment for power-of-two\n     allocations, but nothing was defined for other sizes (in practice,\n     we have two such buckets, kmalloc-96 and kmalloc-192).\n\n     To avoid unnecessary padding in the rust layer due to its alignment\n     rules, extend the guarantee so that the alignment is at least the\n     largest power-of-two divisor of the requested size.\n\n     This fits what rust needs, is a superset of the existing\n     power-of-two guarantee, and does not in practice change the layout\n     (and thus does not add overhead due to padding) of the kmalloc-96\n     and kmalloc-192 caches, unless slab debugging is enabled for them.\n\n   - Cleanups and non-critical fixups (Chengming Zhou, Suren\n     Baghdasaryan, Matthew Willcox, Alex Shi, and Vlastimil Babka)\n\n     Various tweaks related to the new alloc profiling code, folio\n     conversion, debugging and more leftovers after SLAB\"\n\nLink: https://lore.kernel.org/all/20240701190152.it.631-kees@kernel.org/ [1]\n\n* tag 'slab-for-6.11' of git://git.kernel.org/pub/scm/linux/kernel/git/vbabka/slab:\n  mm/memcg: alignment memcg_data define condition\n  mm, slab: move prepare_slab_obj_exts_hook under CONFIG_MEM_ALLOC_PROFILING\n  mm, slab: move allocation tagging code in the alloc path into a hook\n  mm/util: Use dedicated slab buckets for memdup_user()\n  ipc, msg: Use dedicated slab buckets for alloc_msg()\n  mm/slab: Introduce kmem_buckets_create() and family\n  mm/slab: Introduce kvmalloc_buckets_node() that can take kmem_buckets argument\n  mm/slab: Plumb kmem_buckets into __do_kmalloc_node()\n  mm/slab: Introduce kmem_buckets typedef\n  slab, rust: extend kmalloc() alignment guarantees to remove Rust padding\n  slab: delete useless RED_INACTIVE and RED_ACTIVE\n  slab: don't put freepointer outside of object if only orig_size\n  slab: make check_object() more consistent\n  mm: Reduce the number of slab->folio casts\n  mm, slab: don't wrap internal functions with alloc_hooks()",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Thu Jul 18 15:08:12 2024 -0700",
  "author_date_iso": "2024-07-18T15:08:12-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Thu Jul 18 15:08:12 2024 -0700",
  "committer_date_iso": "2024-07-18T15:08:12-07:00",
  "files_changed": [
    "include/linux/mm.h",
    "lib/fortify_kunit.c",
    "mm/util.c"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "Documentation/core-api/memory-allocation.rst",
      "insertions": 4,
      "deletions": 2
    },
    {
      "file": "include/linux/mm.h",
      "insertions": 3,
      "deletions": 3
    },
    {
      "file": "include/linux/mm_types.h",
      "insertions": 7,
      "deletions": 2
    },
    {
      "file": "include/linux/poison.h",
      "insertions": 2,
      "deletions": 5
    },
    {
      "file": "include/linux/slab.h",
      "insertions": 65,
      "deletions": 32
    },
    {
      "file": "ipc/msgutil.c",
      "insertions": 12,
      "deletions": 1
    },
    {
      "file": "kernel/configs/hardening.config",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "lib/fortify_kunit.c",
      "insertions": 0,
      "deletions": 2
    },
    {
      "file": "lib/slub_kunit.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "mm/Kconfig",
      "insertions": 17,
      "deletions": 0
    },
    {
      "file": "mm/slab.h",
      "insertions": 9,
      "deletions": 5
    },
    {
      "file": "mm/slab_common.c",
      "insertions": 104,
      "deletions": 7
    },
    {
      "file": "mm/slub.c",
      "insertions": 118,
      "deletions": 91
    },
    {
      "file": "mm/util.c",
      "insertions": 17,
      "deletions": 6
    },
    {
      "file": "rust/kernel/alloc/allocator.rs",
      "insertions": 6,
      "deletions": 13
    },
    {
      "file": "scripts/kernel-doc",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "tools/include/linux/poison.h",
      "insertions": 2,
      "deletions": 5
    }
  ],
  "total_insertions": 369,
  "total_deletions": 175,
  "total_changes": 544,
  "parents": [
    "b2fc97c18614f99179700be263ecbc667c91a4e8",
    "436381eaf2a423e60fc8340399f7d2458091b383"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/linux/mm.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "lib/fortify_kunit.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/util.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}