Commit Hash: 900cf086fd2fbad07f72f4575449e0d0958f860f
Subject: Be more robust about bad arguments in get_user_pages()


Security Keywords:
- vulnerability
- exploit

Full commit message:
Be more robust about bad arguments in get_user_pages()

So I spent a while pounding my head against my monitor trying to figure
out the vmsplice() vulnerability - how could a failure to check for
*read* access turn into a root exploit? It turns out that it's a buffer
overflow problem which is made easy by the way get_user_pages() is
coded.

In particular, "len" is a signed int, and it is only checked at the
*end* of a do {} while() loop.  So, if it is passed in as zero, the loop
will execute once and decrement len to -1.  At that point, the loop will
proceed until the next invalid address is found; in the process, it will
likely overflow the pages array passed in to get_user_pages().

I think that, if get_user_pages() has been asked to grab zero pages,
that's what it should do.  Thus this patch; it is, among other things,
enough to block the (already fixed) root exploit and any others which
might be lurking in similar code.  I also think that the number of pages
should be unsigned, but changing the prototype of this function probably
requires some more careful review.

Signed-off-by: Jonathan Corbet <corbet@lwn.net>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

Metadata:
Author: Jonathan Corbet <corbet@lwn.net>
Author Date: Mon Feb 11 16:17:33 2008 -0700
Committer: Linus Torvalds <torvalds@woody.linux-foundation.org>
Commit Date: Mon Feb 11 20:44:44 2008 -0800

Files Changed: 1
Lines Added: 2
Lines Removed: 0
Total Changes: 2
