{
  "hash": "93d3fb35aa10a8417f923871c7c58c9ad81d7a08",
  "hash_short": "93d3fb35",
  "subject": "media: atomisp: Remove watchdog timer",
  "body": "The watchdog timer code to recover from the ISP getting stuck has several\nmajor issues:\n\n1. There is no way to do fault injection and normally the ISP does not\nget stuck, so is it is impossible to test it.\n\n2. It in essence just stops all streams, resets the ISP and then brings\neverything back up. Userspace can easily do this itself by using a\ntimeout on dqbuf and then closing (which causes a poweroff) +\nre-opening the device. Doing this in userspace (if it ever turns out\nto be necessary) greatly simplifies the kernel code and in general\nwill be a more robust solution.\n\nEven just a quick look at the code finds several more issues:\n\n3. The need to sync-cancel the timers + work on streamoff requires\nisp->mutex to be dropped halfway during the ioctl opening all sorts of\nraces.\n\n4. The atomisp code supports setting up 2 pipelines, streaming from\ntwo sensors at the same time. But there is only a single wdt_work\nand stopping one of the 2 streams will cancel the timers + work,\nstopping the wdt even though the other stream might still be running.\n\n5. In case atomisp_css_flush() the sync cancel is done while keeping\nisp->mutex locked, causing a deadlock when racing with wdt_work which\nalso takes isp->mutex.\n\n6. Even though the watchdog is purely a software/driver thing which\njust checkes that new frames keep coming in, there are 2 completely\ndifferent implementations for the ISP2400/ISP2401 which is not\nnecessary at all.\n\nSo all in all I believe that it is better to just remove the current\nwatchdog implementation. Fixing all the issues with the current\nimplementation will be so much work, that if it turns out that we do\nneed something like this then doing a clean re-implementation from\nscratch will be better anyways.\n\nwdt_work was also (ab)used to reset the ISP after the firmware signalled\nan fw-assert error through the irq, add a new assert_recover_work to\nreplace this.\n\nReviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>\nSigned-off-by: Hans de Goede <hdegoede@redhat.com>\nSigned-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>",
  "full_message": "media: atomisp: Remove watchdog timer\n\nThe watchdog timer code to recover from the ISP getting stuck has several\nmajor issues:\n\n1. There is no way to do fault injection and normally the ISP does not\nget stuck, so is it is impossible to test it.\n\n2. It in essence just stops all streams, resets the ISP and then brings\neverything back up. Userspace can easily do this itself by using a\ntimeout on dqbuf and then closing (which causes a poweroff) +\nre-opening the device. Doing this in userspace (if it ever turns out\nto be necessary) greatly simplifies the kernel code and in general\nwill be a more robust solution.\n\nEven just a quick look at the code finds several more issues:\n\n3. The need to sync-cancel the timers + work on streamoff requires\nisp->mutex to be dropped halfway during the ioctl opening all sorts of\nraces.\n\n4. The atomisp code supports setting up 2 pipelines, streaming from\ntwo sensors at the same time. But there is only a single wdt_work\nand stopping one of the 2 streams will cancel the timers + work,\nstopping the wdt even though the other stream might still be running.\n\n5. In case atomisp_css_flush() the sync cancel is done while keeping\nisp->mutex locked, causing a deadlock when racing with wdt_work which\nalso takes isp->mutex.\n\n6. Even though the watchdog is purely a software/driver thing which\njust checkes that new frames keep coming in, there are 2 completely\ndifferent implementations for the ISP2400/ISP2401 which is not\nnecessary at all.\n\nSo all in all I believe that it is better to just remove the current\nwatchdog implementation. Fixing all the issues with the current\nimplementation will be so much work, that if it turns out that we do\nneed something like this then doing a clean re-implementation from\nscratch will be better anyways.\n\nwdt_work was also (ab)used to reset the ISP after the firmware signalled\nan fw-assert error through the irq, add a new assert_recover_work to\nreplace this.\n\nReviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>\nSigned-off-by: Hans de Goede <hdegoede@redhat.com>\nSigned-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>",
  "author_name": "Hans de Goede",
  "author_email": "hdegoede@redhat.com",
  "author_date": "Sat Sep 3 23:26:27 2022 +0200",
  "author_date_iso": "2022-09-03T23:26:27+02:00",
  "committer_name": "Mauro Carvalho Chehab",
  "committer_email": "mchehab@kernel.org",
  "committer_date": "Sat Sep 24 10:07:13 2022 +0200",
  "committer_date_iso": "2022-09-24T10:07:13+02:00",
  "files_changed": [
    "drivers/staging/media/atomisp/pci/atomisp_cmd.c",
    "drivers/staging/media/atomisp/pci/atomisp_cmd.h",
    "drivers/staging/media/atomisp/pci/atomisp_compat_css20.c",
    "drivers/staging/media/atomisp/pci/atomisp_internal.h",
    "drivers/staging/media/atomisp/pci/atomisp_ioctl.c",
    "drivers/staging/media/atomisp/pci/atomisp_subdev.h",
    "drivers/staging/media/atomisp/pci/atomisp_v4l2.c"
  ],
  "files_changed_count": 7,
  "stats": [
    {
      "file": "drivers/staging/media/atomisp/pci/atomisp_cmd.c",
      "insertions": 4,
      "deletions": 357
    },
    {
      "file": "drivers/staging/media/atomisp/pci/atomisp_cmd.h",
      "insertions": 1,
      "deletions": 2
    },
    {
      "file": "drivers/staging/media/atomisp/pci/atomisp_compat_css20.c",
      "insertions": 1,
      "deletions": 42
    },
    {
      "file": "drivers/staging/media/atomisp/pci/atomisp_internal.h",
      "insertions": 1,
      "deletions": 23
    },
    {
      "file": "drivers/staging/media/atomisp/pci/atomisp_ioctl.c",
      "insertions": 0,
      "deletions": 60
    },
    {
      "file": "drivers/staging/media/atomisp/pci/atomisp_subdev.h",
      "insertions": 0,
      "deletions": 14
    },
    {
      "file": "drivers/staging/media/atomisp/pci/atomisp_v4l2.c",
      "insertions": 2,
      "deletions": 41
    }
  ],
  "total_insertions": 9,
  "total_deletions": 539,
  "total_changes": 548,
  "parents": [
    "f315c1acba84fe17cd92a05e6c1c1bf26ee6bd43"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/staging/media/atomisp/pci/atomisp_compat_css20.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/staging/media/atomisp/pci/atomisp_internal.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/staging/media/atomisp/pci/atomisp_cmd.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/staging/media/atomisp/pci/atomisp_ioctl.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/staging/media/atomisp/pci/atomisp_v4l2.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/staging/media/atomisp/pci/atomisp_cmd.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/staging/media/atomisp/pci/atomisp_subdev.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}