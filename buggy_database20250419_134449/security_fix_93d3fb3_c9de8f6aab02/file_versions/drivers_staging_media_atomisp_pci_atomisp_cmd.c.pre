commit f315c1acba84fe17cd92a05e6c1c1bf26ee6bd43
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Sep 3 14:49:39 2022 +0200

    media: atomisp: Add atomisp_pipe_check() helper
    
    Several of the ioctl handlers all do the same checks
    (isp->fatal_error and asd->streaming errors) add
    an atomisp_pipe_check() helper for this.
    
    Note this changes the vidioc_s_fmt_vid_cap and vidioc_s_input handlers
    to now reject calls made while asd->streaming==STOPPING. This fixes
    a possible race where one thread can make this ioctls while
    vidioc_streamoff is running from another thread and it has
    temporarily released isp->mutex to kill the watchdog timers / work.
    
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>

diff --git a/drivers/staging/media/atomisp/pci/atomisp_cmd.c b/drivers/staging/media/atomisp/pci/atomisp_cmd.c
index 087078900415..7945852ecd13 100644
--- a/drivers/staging/media/atomisp/pci/atomisp_cmd.c
+++ b/drivers/staging/media/atomisp/pci/atomisp_cmd.c
@@ -5549,16 +5549,13 @@ int atomisp_set_fmt(struct video_device *vdev, struct v4l2_format *f)
 	struct v4l2_subdev_fh fh;
 	int ret;
 
-	lockdep_assert_held(&isp->mutex);
+	ret = atomisp_pipe_check(pipe, true);
+	if (ret)
+		return ret;
 
 	if (source_pad >= ATOMISP_SUBDEV_PADS_NUM)
 		return -EINVAL;
 
-	if (asd->streaming == ATOMISP_DEVICE_STREAMING_ENABLED) {
-		dev_warn(isp->dev, "ISP does not support set format while at streaming!\n");
-		return -EBUSY;
-	}
-
 	dev_dbg(isp->dev,
 		"setting resolution %ux%u on pad %u for asd%d, bytesperline %u\n",
 		f->fmt.pix.width, f->fmt.pix.height, source_pad,