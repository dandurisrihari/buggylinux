commit 93d3fb35aa10a8417f923871c7c58c9ad81d7a08
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Sep 3 23:26:27 2022 +0200

    media: atomisp: Remove watchdog timer
    
    The watchdog timer code to recover from the ISP getting stuck has several
    major issues:
    
    1. There is no way to do fault injection and normally the ISP does not
    get stuck, so is it is impossible to test it.
    
    2. It in essence just stops all streams, resets the ISP and then brings
    everything back up. Userspace can easily do this itself by using a
    timeout on dqbuf and then closing (which causes a poweroff) +
    re-opening the device. Doing this in userspace (if it ever turns out
    to be necessary) greatly simplifies the kernel code and in general
    will be a more robust solution.
    
    Even just a quick look at the code finds several more issues:
    
    3. The need to sync-cancel the timers + work on streamoff requires
    isp->mutex to be dropped halfway during the ioctl opening all sorts of
    races.
    
    4. The atomisp code supports setting up 2 pipelines, streaming from
    two sensors at the same time. But there is only a single wdt_work
    and stopping one of the 2 streams will cancel the timers + work,
    stopping the wdt even though the other stream might still be running.
    
    5. In case atomisp_css_flush() the sync cancel is done while keeping
    isp->mutex locked, causing a deadlock when racing with wdt_work which
    also takes isp->mutex.
    
    6. Even though the watchdog is purely a software/driver thing which
    just checkes that new frames keep coming in, there are 2 completely
    different implementations for the ISP2400/ISP2401 which is not
    necessary at all.
    
    So all in all I believe that it is better to just remove the current
    watchdog implementation. Fixing all the issues with the current
    implementation will be so much work, that if it turns out that we do
    need something like this then doing a clean re-implementation from
    scratch will be better anyways.
    
    wdt_work was also (ab)used to reset the ISP after the firmware signalled
    an fw-assert error through the irq, add a new assert_recover_work to
    replace this.
    
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>

diff --git a/drivers/staging/media/atomisp/pci/atomisp_v4l2.c b/drivers/staging/media/atomisp/pci/atomisp_v4l2.c
index aa38e0d33b5b..d55e8d32a286 100644
--- a/drivers/staging/media/atomisp/pci/atomisp_v4l2.c
+++ b/drivers/staging/media/atomisp/pci/atomisp_v4l2.c
@@ -1433,39 +1433,6 @@ static bool is_valid_device(struct pci_dev *pdev, const struct pci_device_id *id
 	return true;
 }
 
-static int init_atomisp_wdts(struct atomisp_device *isp)
-{
-	int i, err;
-
-	atomic_set(&isp->wdt_work_queued, 0);
-	isp->wdt_work_queue = alloc_workqueue(isp->v4l2_dev.name, 0, 1);
-	if (!isp->wdt_work_queue) {
-		dev_err(isp->dev, "Failed to initialize wdt work queue\n");
-		err = -ENOMEM;
-		goto alloc_fail;
-	}
-	INIT_WORK(&isp->wdt_work, atomisp_wdt_work);
-
-	for (i = 0; i < isp->num_of_streams; i++) {
-		struct atomisp_sub_device *asd = &isp->asd[i];
-
-		if (!IS_ISP2401) {
-			timer_setup(&asd->wdt, atomisp_wdt, 0);
-		} else {
-			timer_setup(&asd->video_out_capture.wdt,
-				    atomisp_wdt, 0);
-			timer_setup(&asd->video_out_preview.wdt,
-				    atomisp_wdt, 0);
-			timer_setup(&asd->video_out_vf.wdt, atomisp_wdt, 0);
-			timer_setup(&asd->video_out_video_capture.wdt,
-				    atomisp_wdt, 0);
-		}
-	}
-	return 0;
-alloc_fail:
-	return err;
-}
-
 #define ATOM_ISP_PCI_BAR	0
 
 static int atomisp_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
@@ -1698,10 +1665,8 @@ static int atomisp_pci_probe(struct pci_dev *pdev, const struct pci_device_id *i
 		dev_err(&pdev->dev, "atomisp_register_entities failed (%d)\n", err);
 		goto register_entities_fail;
 	}
-	/* init atomisp wdts */
-	err = init_atomisp_wdts(isp);
-	if (err != 0)
-		goto wdt_work_queue_fail;
+
+	INIT_WORK(&isp->assert_recovery_work, atomisp_assert_recovery_work);
 
 	/* save the iunit context only once after all the values are init'ed. */
 	atomisp_save_iunit_reg(isp);
@@ -1748,8 +1713,6 @@ static int atomisp_pci_probe(struct pci_dev *pdev, const struct pci_device_id *i
 request_irq_fail:
 	hmm_cleanup();
 	pm_runtime_get_noresume(&pdev->dev);
-	destroy_workqueue(isp->wdt_work_queue);
-wdt_work_queue_fail:
 	atomisp_unregister_entities(isp);
 register_entities_fail:
 	atomisp_uninitialize_modules(isp);
@@ -1809,8 +1772,6 @@ static void atomisp_pci_remove(struct pci_dev *pdev)
 	atomisp_msi_irq_uninit(isp);
 	atomisp_unregister_entities(isp);
 
-	destroy_workqueue(isp->wdt_work_queue);
-
 	release_firmware(isp->firmware);
 }