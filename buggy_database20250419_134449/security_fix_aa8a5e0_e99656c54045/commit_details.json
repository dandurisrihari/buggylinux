{
  "hash": "aa8a5e0062ac940f7659394f4817c948dc8c0667",
  "hash_short": "aa8a5e00",
  "subject": "powerpc/64s: Add support for RFI flush of L1-D cache",
  "body": "On some CPUs we can prevent the Meltdown vulnerability by flushing the\nL1-D cache on exit from kernel to user mode, and from hypervisor to\nguest.\n\nThis is known to be the case on at least Power7, Power8 and Power9. At\nthis time we do not know the status of the vulnerability on other CPUs\nsuch as the 970 (Apple G5), pasemi CPUs (AmigaOne X1000) or Freescale\nCPUs. As more information comes to light we can enable this, or other\nmechanisms on those CPUs.\n\nThe vulnerability occurs when the load of an architecturally\ninaccessible memory region (eg. userspace load of kernel memory) is\nspeculatively executed to the point where its result can influence the\naddress of a subsequent speculatively executed load.\n\nIn order for that to happen, the first load must hit in the L1,\nbecause before the load is sent to the L2 the permission check is\nperformed. Therefore if no kernel addresses hit in the L1 the\nvulnerability can not occur. We can ensure that is the case by\nflushing the L1 whenever we return to userspace. Similarly for\nhypervisor vs guest.\n\nIn order to flush the L1-D cache on exit, we add a section of nops at\neach (h)rfi location that returns to a lower privileged context, and\npatch that with some sequence. Newer firmwares are able to advertise\nto us that there is a special nop instruction that flushes the L1-D.\nIf we do not see that advertised, we fall back to doing a displacement\nflush in software.\n\nFor guest kernels we support migration between some CPU versions, and\ndifferent CPUs may use different flush instructions. So that we are\nprepared to migrate to a machine with a different flush instruction\nactivated, we may have to patch more than one flush instruction at\nboot if the hypervisor tells us to.\n\nIn the end this patch is mostly the work of Nicholas Piggin and\nMichael Ellerman. However a cast of thousands contributed to analysis\nof the issue, earlier versions of the patch, back ports testing etc.\nMany thanks to all of them.\n\nTested-by: Jon Masters <jcm@redhat.com>\nSigned-off-by: Nicholas Piggin <npiggin@gmail.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>",
  "full_message": "powerpc/64s: Add support for RFI flush of L1-D cache\n\nOn some CPUs we can prevent the Meltdown vulnerability by flushing the\nL1-D cache on exit from kernel to user mode, and from hypervisor to\nguest.\n\nThis is known to be the case on at least Power7, Power8 and Power9. At\nthis time we do not know the status of the vulnerability on other CPUs\nsuch as the 970 (Apple G5), pasemi CPUs (AmigaOne X1000) or Freescale\nCPUs. As more information comes to light we can enable this, or other\nmechanisms on those CPUs.\n\nThe vulnerability occurs when the load of an architecturally\ninaccessible memory region (eg. userspace load of kernel memory) is\nspeculatively executed to the point where its result can influence the\naddress of a subsequent speculatively executed load.\n\nIn order for that to happen, the first load must hit in the L1,\nbecause before the load is sent to the L2 the permission check is\nperformed. Therefore if no kernel addresses hit in the L1 the\nvulnerability can not occur. We can ensure that is the case by\nflushing the L1 whenever we return to userspace. Similarly for\nhypervisor vs guest.\n\nIn order to flush the L1-D cache on exit, we add a section of nops at\neach (h)rfi location that returns to a lower privileged context, and\npatch that with some sequence. Newer firmwares are able to advertise\nto us that there is a special nop instruction that flushes the L1-D.\nIf we do not see that advertised, we fall back to doing a displacement\nflush in software.\n\nFor guest kernels we support migration between some CPU versions, and\ndifferent CPUs may use different flush instructions. So that we are\nprepared to migrate to a machine with a different flush instruction\nactivated, we may have to patch more than one flush instruction at\nboot if the hypervisor tells us to.\n\nIn the end this patch is mostly the work of Nicholas Piggin and\nMichael Ellerman. However a cast of thousands contributed to analysis\nof the issue, earlier versions of the patch, back ports testing etc.\nMany thanks to all of them.\n\nTested-by: Jon Masters <jcm@redhat.com>\nSigned-off-by: Nicholas Piggin <npiggin@gmail.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>",
  "author_name": "Michael Ellerman",
  "author_email": "mpe@ellerman.id.au",
  "author_date": "Wed Jan 10 03:07:15 2018 +1100",
  "author_date_iso": "2018-01-10T03:07:15+11:00",
  "committer_name": "Michael Ellerman",
  "committer_email": "mpe@ellerman.id.au",
  "committer_date": "Wed Jan 10 21:27:06 2018 +1100",
  "committer_date_iso": "2018-01-10T21:27:06+11:00",
  "files_changed": [
    "arch/powerpc/include/asm/exception-64s.h",
    "arch/powerpc/include/asm/feature-fixups.h",
    "arch/powerpc/include/asm/paca.h",
    "arch/powerpc/include/asm/setup.h",
    "arch/powerpc/kernel/asm-offsets.c",
    "arch/powerpc/kernel/exceptions-64s.S",
    "arch/powerpc/kernel/setup_64.c",
    "arch/powerpc/kernel/vmlinux.lds.S",
    "arch/powerpc/lib/feature-fixups.c"
  ],
  "files_changed_count": 9,
  "stats": [
    {
      "file": "arch/powerpc/include/asm/exception-64s.h",
      "insertions": 32,
      "deletions": 8
    },
    {
      "file": "arch/powerpc/include/asm/feature-fixups.h",
      "insertions": 13,
      "deletions": 0
    },
    {
      "file": "arch/powerpc/include/asm/paca.h",
      "insertions": 10,
      "deletions": 0
    },
    {
      "file": "arch/powerpc/include/asm/setup.h",
      "insertions": 13,
      "deletions": 0
    },
    {
      "file": "arch/powerpc/kernel/asm-offsets.c",
      "insertions": 5,
      "deletions": 0
    },
    {
      "file": "arch/powerpc/kernel/exceptions-64s.S",
      "insertions": 84,
      "deletions": 0
    },
    {
      "file": "arch/powerpc/kernel/setup_64.c",
      "insertions": 79,
      "deletions": 0
    },
    {
      "file": "arch/powerpc/kernel/vmlinux.lds.S",
      "insertions": 9,
      "deletions": 0
    },
    {
      "file": "arch/powerpc/lib/feature-fixups.c",
      "insertions": 41,
      "deletions": 0
    }
  ],
  "total_insertions": 286,
  "total_deletions": 8,
  "total_changes": 294,
  "parents": [
    "c7305645eb0c1621351cfc104038831ae87c0053"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.15",
    "v4.15-rc8",
    "v4.15-rc9",
    "v4.16",
    "v4.16-rc1",
    "v4.16-rc2",
    "v4.16-rc3",
    "v4.16-rc4",
    "v4.16-rc5",
    "v4.16-rc6"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "vulnerability"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/powerpc/include/asm/paca.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/powerpc/include/asm/exception-64s.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/powerpc/kernel/vmlinux.lds.S",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/powerpc/kernel/asm-offsets.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/powerpc/include/asm/feature-fixups.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/powerpc/kernel/setup_64.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/powerpc/include/asm/setup.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/powerpc/kernel/exceptions-64s.S",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/powerpc/lib/feature-fixups.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}