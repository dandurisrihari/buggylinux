{
  "hash": "1dd2eefb8efa97b6b495c4f09fa8232727b93db1",
  "hash_short": "1dd2eefb",
  "subject": "Merge branch 'eapol-over-nl80211' into mac80211-next",
  "body": "This is the EAPoL over nl80211 patchset from Denis Kenzior, minus some\ninfrastructure patches I'd split out and applied earlier. Denis described\nit as follows:\n\nThis patchset adds support for running 802.11 authentication mechanisms (e.g.\n802.1X, 4-Way Handshake, etc) over NL80211 instead of putting them onto the\nnetwork device.  This has the advantage of fixing several long-standing race\nconditions that result from userspace operating on multiple transports in order\nto manage a 802.11 connection (e.g. NL80211 and wireless netdev, wlan0, etc).\n\nFor example, userspace would sometimes see 4-Way handshake packets before\nNL80211 signaled that the connection has been established.  Leading to ugly\nhacks or having the STA wait for retransmissions from the AP.\n\nThis also provides a way to mitigate a particularly nasty race condition where\nthe encryption key could be set prior to the 4-way handshake packet 4/4 being\nsent.  This would result in the packet being sent encrypted and discarded by\nthe peer.  The mitigation strategy for this race is for userspace to explicitly\ntell the kernel that a particular EAPoL packet should not be encrypted.\n\nTo make this possible this patchset introduces a new NL80211 command and several\nnew attributes.  A userspace that is capable of processing EAPoL packets over\nNL80211 includes a new NL80211_ATTR_CONTROL_PORT_OVER_NL80211 attribute in its\nNL80211_CMD_ASSOCIATE or NL80211_CMD_CONNECT requests being sent to the kernel.\nThe previously added NL80211_ATTR_SOCKET_OWNER attribute must also be included.\nThe latter is used by the kernel to send NL80211_CMD_CONTROL_PORT_FRAME\nnotifications back to userspace via a netlink unicast.  If the\nNL80211_ATTR_CONTROL_PORT_OVER_NL80211 attribute is not specified, then legacy\nbehavior is kept and control port packets continue to flow over the network\ninterface.\n\nIf control port over nl80211 transport is requested, then control port packets\nare intercepted just prior to being handed to the network device and sent over\nnetlink via the NL80211_CMD_CONTROL_PORT_FRAME notification.\nNL80211_ATTR_CONTROL_PORT_ETHERTYPE and NL80211_ATTR_MAC are included to\nspecify the control port frame protocol and source address respectively.  If\nthe control port frame was received unencrypted then\nNL80211_ATTR_CONTROL_PORT_NO_ENCRYPT flag is also included.  NL80211_ATTR_FRAME\nattribute contains the raw control port frame with all transport layer headers\nstripped (e.g. this would be the raw EAPoL frame).\n\nUserspace can reply to control port frames either via legacy methods (by sending\nframes to the network device) or via NL80211_CMD_CONTROL_PORT_FRAME request.\nUserspace would included NL80211_ATTR_FRAME with the raw control port frame as\nwell as NL80211_Attr_MAC and NL80211_ATTR_CONTROL_PORT_ETHERTYPE attributes to\nspecify the destination address and protocol respectively.  This allows\nPre-Authentication (protocol 0x88c7) frames to be sent via this mechanism as\nwell.  Finally, NL80211_ATTR_CONTROL_PORT_NO_ENCRYPT flag can be included to\ntell the driver to send the frame unencrypted, e.g. for 4-Way handshake 4/4\nframes.\n\nThe proposed patchset has been tested in a mac80211_hwsim based environment with\nhostapd and iwd.\n\nSigned-off-by: Johannes Berg <johannes.berg@intel.com>",
  "full_message": "Merge branch 'eapol-over-nl80211' into mac80211-next\n\nThis is the EAPoL over nl80211 patchset from Denis Kenzior, minus some\ninfrastructure patches I'd split out and applied earlier. Denis described\nit as follows:\n\nThis patchset adds support for running 802.11 authentication mechanisms (e.g.\n802.1X, 4-Way Handshake, etc) over NL80211 instead of putting them onto the\nnetwork device.  This has the advantage of fixing several long-standing race\nconditions that result from userspace operating on multiple transports in order\nto manage a 802.11 connection (e.g. NL80211 and wireless netdev, wlan0, etc).\n\nFor example, userspace would sometimes see 4-Way handshake packets before\nNL80211 signaled that the connection has been established.  Leading to ugly\nhacks or having the STA wait for retransmissions from the AP.\n\nThis also provides a way to mitigate a particularly nasty race condition where\nthe encryption key could be set prior to the 4-way handshake packet 4/4 being\nsent.  This would result in the packet being sent encrypted and discarded by\nthe peer.  The mitigation strategy for this race is for userspace to explicitly\ntell the kernel that a particular EAPoL packet should not be encrypted.\n\nTo make this possible this patchset introduces a new NL80211 command and several\nnew attributes.  A userspace that is capable of processing EAPoL packets over\nNL80211 includes a new NL80211_ATTR_CONTROL_PORT_OVER_NL80211 attribute in its\nNL80211_CMD_ASSOCIATE or NL80211_CMD_CONNECT requests being sent to the kernel.\nThe previously added NL80211_ATTR_SOCKET_OWNER attribute must also be included.\nThe latter is used by the kernel to send NL80211_CMD_CONTROL_PORT_FRAME\nnotifications back to userspace via a netlink unicast.  If the\nNL80211_ATTR_CONTROL_PORT_OVER_NL80211 attribute is not specified, then legacy\nbehavior is kept and control port packets continue to flow over the network\ninterface.\n\nIf control port over nl80211 transport is requested, then control port packets\nare intercepted just prior to being handed to the network device and sent over\nnetlink via the NL80211_CMD_CONTROL_PORT_FRAME notification.\nNL80211_ATTR_CONTROL_PORT_ETHERTYPE and NL80211_ATTR_MAC are included to\nspecify the control port frame protocol and source address respectively.  If\nthe control port frame was received unencrypted then\nNL80211_ATTR_CONTROL_PORT_NO_ENCRYPT flag is also included.  NL80211_ATTR_FRAME\nattribute contains the raw control port frame with all transport layer headers\nstripped (e.g. this would be the raw EAPoL frame).\n\nUserspace can reply to control port frames either via legacy methods (by sending\nframes to the network device) or via NL80211_CMD_CONTROL_PORT_FRAME request.\nUserspace would included NL80211_ATTR_FRAME with the raw control port frame as\nwell as NL80211_Attr_MAC and NL80211_ATTR_CONTROL_PORT_ETHERTYPE attributes to\nspecify the destination address and protocol respectively.  This allows\nPre-Authentication (protocol 0x88c7) frames to be sent via this mechanism as\nwell.  Finally, NL80211_ATTR_CONTROL_PORT_NO_ENCRYPT flag can be included to\ntell the driver to send the frame unencrypted, e.g. for 4-Way handshake 4/4\nframes.\n\nThe proposed patchset has been tested in a mac80211_hwsim based environment with\nhostapd and iwd.\n\nSigned-off-by: Johannes Berg <johannes.berg@intel.com>",
  "author_name": "Johannes Berg",
  "author_email": "johannes.berg@intel.com",
  "author_date": "Thu Mar 29 14:04:07 2018 +0200",
  "author_date_iso": "2018-03-29T14:04:07+02:00",
  "committer_name": "Johannes Berg",
  "committer_email": "johannes.berg@intel.com",
  "committer_date": "Thu Mar 29 14:09:28 2018 +0200",
  "committer_date_iso": "2018-03-29T14:09:28+02:00",
  "files_changed": [],
  "files_changed_count": 0,
  "stats": [
    {
      "file": "include/net/cfg80211.h",
      "insertions": 40,
      "deletions": 0
    },
    {
      "file": "include/uapi/linux/nl80211.h",
      "insertions": 29,
      "deletions": 1
    },
    {
      "file": "net/mac80211/cfg.c",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "net/mac80211/ibss.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "net/mac80211/ieee80211_i.h",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "net/mac80211/iface.c",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "net/mac80211/main.c",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "net/mac80211/mlme.c",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "net/mac80211/rx.c",
      "insertions": 28,
      "deletions": 5
    },
    {
      "file": "net/mac80211/tx.c",
      "insertions": 46,
      "deletions": 0
    },
    {
      "file": "net/wireless/nl80211.c",
      "insertions": 172,
      "deletions": 1
    },
    {
      "file": "net/wireless/rdev-ops.h",
      "insertions": 15,
      "deletions": 0
    },
    {
      "file": "net/wireless/trace.h",
      "insertions": 47,
      "deletions": 0
    }
  ],
  "total_insertions": 395,
  "total_deletions": 7,
  "total_changes": 402,
  "parents": [
    "4d191c75365a0067a9d5b8c8746b1bd9310c5a70",
    "018f6fbf540d7bd7223b7d0b29651c1dd5e1c606"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.17",
    "v4.17-rc1",
    "v4.17-rc2",
    "v4.17-rc3",
    "v4.17-rc4",
    "v4.17-rc5",
    "v4.17-rc6",
    "v4.17-rc7",
    "v4.18",
    "v4.18-rc1"
  ],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": []
}