commit 42b70a5f6d18165a075d189d1bee82fad7cdbf29
Author: Stanislaw Gruszka <sgruszka@redhat.com>
Date:   Thu May 26 17:14:22 2011 +0200

    iwlagn: use cts-to-self protection on 5000 adapters series
    
    This patch fixes 802.11n stability and performance regression we have
    since 2.6.35. It boost performance on my 5GHz N-only network from about
    5MB/s to 8MB/s. Similar percentage boost can be observed on 2.4 GHz.
    
    These are test results of 5x downloading of approximately 700MB iso
    image:
    
    vanilla: 5.27 5.22 4.94 4.47 5.31 ; avr 5.0420 std 0.35110
    patched: 8.07 7.95 8.06 7.99 7.96 ; avr 8.0060 std 0.055946
    
    This was achieved with NetworkManager configured to do not perform
    periodical scans, by configuring constant BSSID. With periodical scans,
    after some time, performance downgrade to unpatched driver level, like
    in example below:
    
    patched: 7.40 7.61 4.28 4.37 4.80 avr 5.6920 std 1.6683
    
    However patch still make better here, since similar test on unpatched
    driver make link disconnects with below messages after some time:
    
    wlan1: authenticate with 00:23:69:35:d1:3f (try 1)
    wlan1: authenticate with 00:23:69:35:d1:3f (try 2)
    wlan1: authenticate with 00:23:69:35:d1:3f (try 3)
    wlan1: authentication with 00:23:69:35:d1:3f timed out
    
    On 2.6.35 kernel patch helps against connection hangs with messages:
    
    iwlagn 0000:20:00.0: queue 10 stuck 3 time. Fw reload.
    iwlagn 0000:20:00.0: On demand firmware reload
    iwlagn 0000:20:00.0: Stopping AGG while state not ON or starting
    
    Cc: stable@kernel.org # 2.6.35+
    Signed-off-by: Stanislaw Gruszka <sgruszka@redhat.com>
    Acked-by: Wey-Yi Guy <wey-yi.w.guy@intel.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

diff --git a/drivers/net/wireless/iwlwifi/iwl-agn-hcmd.c b/drivers/net/wireless/iwlwifi/iwl-agn-hcmd.c
index b12c72d63ccb..23fa93deae96 100644
--- a/drivers/net/wireless/iwlwifi/iwl-agn-hcmd.c
+++ b/drivers/net/wireless/iwlwifi/iwl-agn-hcmd.c
@@ -163,17 +163,9 @@ static void iwlagn_tx_cmd_protection(struct iwl_priv *priv,
 				     __le16 fc, __le32 *tx_flags)
 {
 	if (info->control.rates[0].flags & IEEE80211_TX_RC_USE_RTS_CTS ||
-	    info->control.rates[0].flags & IEEE80211_TX_RC_USE_CTS_PROTECT) {
+	    info->control.rates[0].flags & IEEE80211_TX_RC_USE_CTS_PROTECT ||
+	    info->flags & IEEE80211_TX_CTL_AMPDU)
 		*tx_flags |= TX_CMD_FLG_PROT_REQUIRE_MSK;
-		return;
-	}
-
-	if (priv->cfg->ht_params &&
-	    priv->cfg->ht_params->use_rts_for_aggregation &&
-	    info->flags & IEEE80211_TX_CTL_AMPDU) {
-		*tx_flags |= TX_CMD_FLG_PROT_REQUIRE_MSK;
-		return;
-	}
 }
 
 /* Calc max signal level (dBm) among 3 possible receivers */