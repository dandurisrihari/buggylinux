{
  "hash": "a509a7cd79747074a2c018a45bbbc52d1f4aed44",
  "hash_short": "a509a7cd",
  "subject": "sched/uclamp: Extend sched_setattr() to support utilization clamping",
  "body": "The SCHED_DEADLINE scheduling class provides an advanced and formal\nmodel to define tasks requirements that can translate into proper\ndecisions for both task placements and frequencies selections. Other\nclasses have a more simplified model based on the POSIX concept of\npriorities.\n\nSuch a simple priority based model however does not allow to exploit\nmost advanced features of the Linux scheduler like, for example, driving\nfrequencies selection via the schedutil cpufreq governor. However, also\nfor non SCHED_DEADLINE tasks, it's still interesting to define tasks\nproperties to support scheduler decisions.\n\nUtilization clamping exposes to user-space a new set of per-task\nattributes the scheduler can use as hints about the expected/required\nutilization for a task. This allows to implement a \"proactive\" per-task\nfrequency control policy, a more advanced policy than the current one\nbased just on \"passive\" measured task utilization. For example, it's\npossible to boost interactive tasks (e.g. to get better performance) or\ncap background tasks (e.g. to be more energy/thermal efficient).\n\nIntroduce a new API to set utilization clamping values for a specified\ntask by extending sched_setattr(), a syscall which already allows to\ndefine task specific properties for different scheduling classes. A new\npair of attributes allows to specify a minimum and maximum utilization\nthe scheduler can consider for a task.\n\nDo that by validating the required clamp values before and then applying\nthe required changes using _the_ same pattern already in use for\n__setscheduler(). This ensures that the task is re-enqueued with the new\nclamp values.\n\nSigned-off-by: Patrick Bellasi <patrick.bellasi@arm.com>\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nCc: Alessio Balsini <balsini@android.com>\nCc: Dietmar Eggemann <dietmar.eggemann@arm.com>\nCc: Joel Fernandes <joelaf@google.com>\nCc: Juri Lelli <juri.lelli@redhat.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Morten Rasmussen <morten.rasmussen@arm.com>\nCc: Paul Turner <pjt@google.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Quentin Perret <quentin.perret@arm.com>\nCc: Rafael J . Wysocki <rafael.j.wysocki@intel.com>\nCc: Steve Muckle <smuckle@google.com>\nCc: Suren Baghdasaryan <surenb@google.com>\nCc: Tejun Heo <tj@kernel.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Todd Kjos <tkjos@google.com>\nCc: Vincent Guittot <vincent.guittot@linaro.org>\nCc: Viresh Kumar <viresh.kumar@linaro.org>\nLink: https://lkml.kernel.org/r/20190621084217.8167-7-patrick.bellasi@arm.com\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "full_message": "sched/uclamp: Extend sched_setattr() to support utilization clamping\n\nThe SCHED_DEADLINE scheduling class provides an advanced and formal\nmodel to define tasks requirements that can translate into proper\ndecisions for both task placements and frequencies selections. Other\nclasses have a more simplified model based on the POSIX concept of\npriorities.\n\nSuch a simple priority based model however does not allow to exploit\nmost advanced features of the Linux scheduler like, for example, driving\nfrequencies selection via the schedutil cpufreq governor. However, also\nfor non SCHED_DEADLINE tasks, it's still interesting to define tasks\nproperties to support scheduler decisions.\n\nUtilization clamping exposes to user-space a new set of per-task\nattributes the scheduler can use as hints about the expected/required\nutilization for a task. This allows to implement a \"proactive\" per-task\nfrequency control policy, a more advanced policy than the current one\nbased just on \"passive\" measured task utilization. For example, it's\npossible to boost interactive tasks (e.g. to get better performance) or\ncap background tasks (e.g. to be more energy/thermal efficient).\n\nIntroduce a new API to set utilization clamping values for a specified\ntask by extending sched_setattr(), a syscall which already allows to\ndefine task specific properties for different scheduling classes. A new\npair of attributes allows to specify a minimum and maximum utilization\nthe scheduler can consider for a task.\n\nDo that by validating the required clamp values before and then applying\nthe required changes using _the_ same pattern already in use for\n__setscheduler(). This ensures that the task is re-enqueued with the new\nclamp values.\n\nSigned-off-by: Patrick Bellasi <patrick.bellasi@arm.com>\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nCc: Alessio Balsini <balsini@android.com>\nCc: Dietmar Eggemann <dietmar.eggemann@arm.com>\nCc: Joel Fernandes <joelaf@google.com>\nCc: Juri Lelli <juri.lelli@redhat.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Morten Rasmussen <morten.rasmussen@arm.com>\nCc: Paul Turner <pjt@google.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Quentin Perret <quentin.perret@arm.com>\nCc: Rafael J . Wysocki <rafael.j.wysocki@intel.com>\nCc: Steve Muckle <smuckle@google.com>\nCc: Suren Baghdasaryan <surenb@google.com>\nCc: Tejun Heo <tj@kernel.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Todd Kjos <tkjos@google.com>\nCc: Vincent Guittot <vincent.guittot@linaro.org>\nCc: Viresh Kumar <viresh.kumar@linaro.org>\nLink: https://lkml.kernel.org/r/20190621084217.8167-7-patrick.bellasi@arm.com\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "author_name": "Patrick Bellasi",
  "author_email": "patrick.bellasi@arm.com",
  "author_date": "Fri Jun 21 09:42:07 2019 +0100",
  "author_date_iso": "2019-06-21T09:42:07+01:00",
  "committer_name": "Ingo Molnar",
  "committer_email": "mingo@kernel.org",
  "committer_date": "Mon Jun 24 19:23:46 2019 +0200",
  "committer_date_iso": "2019-06-24T19:23:46+02:00",
  "files_changed": [
    "include/linux/sched.h",
    "include/uapi/linux/sched.h",
    "include/uapi/linux/sched/types.h",
    "kernel/sched/core.c"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "include/linux/sched.h",
      "insertions": 9,
      "deletions": 0
    },
    {
      "file": "include/uapi/linux/sched.h",
      "insertions": 11,
      "deletions": 1
    },
    {
      "file": "include/uapi/linux/sched/types.h",
      "insertions": 57,
      "deletions": 9
    },
    {
      "file": "kernel/sched/core.c",
      "insertions": 84,
      "deletions": 7
    }
  ],
  "total_insertions": 161,
  "total_deletions": 17,
  "total_changes": 178,
  "parents": [
    "1d6362fa0cfc8c7b243fa92924429d826599e691"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.3",
    "v5.3-rc1",
    "v5.3-rc2",
    "v5.3-rc3",
    "v5.3-rc4",
    "v5.3-rc5",
    "v5.3-rc6",
    "v5.3-rc7",
    "v5.3-rc8",
    "v5.4"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/linux/sched.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/uapi/linux/sched.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/uapi/linux/sched/types.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/sched/core.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}