commit bb4f07f2409c26c01e97e6f9b432545f353e3b66
Author: Pali Rohár <pali@kernel.org>
Date:   Sat Oct 5 18:40:39 2024 +0200

    nfsd: Fix NFSD_MAY_BYPASS_GSS and NFSD_MAY_BYPASS_GSS_ON_ROOT
    
    Currently NFSD_MAY_BYPASS_GSS and NFSD_MAY_BYPASS_GSS_ON_ROOT do not bypass
    only GSS, but bypass any method. This is a problem specially for NFS3
    AUTH_NULL-only exports.
    
    The purpose of NFSD_MAY_BYPASS_GSS_ON_ROOT is described in RFC 2623,
    section 2.3.2, to allow mounting NFS2/3 GSS-only export without
    authentication. So few procedures which do not expose security risk used
    during mount time can be called also with AUTH_NONE or AUTH_SYS, to allow
    client mount operation to finish successfully.
    
    The problem with current implementation is that for AUTH_NULL-only exports,
    the NFSD_MAY_BYPASS_GSS_ON_ROOT is active also for NFS3 AUTH_UNIX mount
    attempts which confuse NFS3 clients, and make them think that AUTH_UNIX is
    enabled and is working. Linux NFS3 client never switches from AUTH_UNIX to
    AUTH_NONE on active mount, which makes the mount inaccessible.
    
    Fix the NFSD_MAY_BYPASS_GSS and NFSD_MAY_BYPASS_GSS_ON_ROOT implementation
    and really allow to bypass only exports which have enabled some real
    authentication (GSS, TLS, or any other).
    
    The result would be: For AUTH_NULL-only export if client attempts to do
    mount with AUTH_UNIX flavor then it will receive access errors, which
    instruct client that AUTH_UNIX flavor is not usable and will either try
    other auth flavor (AUTH_NULL if enabled) or fails mount procedure.
    Similarly if client attempt to do mount with AUTH_NULL flavor and only
    AUTH_UNIX flavor is enabled then the client will receive access error.
    
    This should fix problems with AUTH_NULL-only or AUTH_UNIX-only exports if
    client attempts to mount it with other auth flavor (e.g. with AUTH_NULL for
    AUTH_UNIX-only export, or with AUTH_UNIX for AUTH_NULL-only export).
    
    Signed-off-by: Pali Rohár <pali@kernel.org>
    Reviewed-by: NeilBrown <neilb@suse.de>
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>

diff --git a/fs/nfsd/export.c b/fs/nfsd/export.c
index c82d8e3e0d4f..0f40003d864f 100644
--- a/fs/nfsd/export.c
+++ b/fs/nfsd/export.c
@@ -1078,12 +1078,14 @@ static struct svc_export *exp_find(struct cache_detail *cd,
  * check_nfsd_access - check if access to export is allowed.
  * @exp: svc_export that is being accessed.
  * @rqstp: svc_rqst attempting to access @exp (will be NULL for LOCALIO).
+ * @may_bypass_gss: reduce strictness of authorization check
  *
  * Return values:
  *   %nfs_ok if access is granted, or
  *   %nfserr_wrongsec if access is denied
  */
-__be32 check_nfsd_access(struct svc_export *exp, struct svc_rqst *rqstp)
+__be32 check_nfsd_access(struct svc_export *exp, struct svc_rqst *rqstp,
+			 bool may_bypass_gss)
 {
 	struct exp_flavor_info *f, *end = exp->ex_flavors + exp->ex_nflavors;
 	struct svc_xprt *xprt;
@@ -1140,6 +1142,23 @@ __be32 check_nfsd_access(struct svc_export *exp, struct svc_rqst *rqstp)
 	if (nfsd4_spo_must_allow(rqstp))
 		return nfs_ok;
 
+	/* Some calls may be processed without authentication
+	 * on GSS exports. For example NFS2/3 calls on root
+	 * directory, see section 2.3.2 of rfc 2623.
+	 * For "may_bypass_gss" check that export has really
+	 * enabled some flavor with authentication (GSS or any
+	 * other) and also check that the used auth flavor is
+	 * without authentication (none or sys).
+	 */
+	if (may_bypass_gss && (
+	     rqstp->rq_cred.cr_flavor == RPC_AUTH_NULL ||
+	     rqstp->rq_cred.cr_flavor == RPC_AUTH_UNIX)) {
+		for (f = exp->ex_flavors; f < end; f++) {
+			if (f->pseudoflavor >= RPC_AUTH_DES)
+				return 0;
+		}
+	}
+
 denied:
 	return nfserr_wrongsec;
 }