{
  "hash": "6f3952cbe00b74739f540981d1afe84cd4dac879",
  "hash_short": "6f3952cb",
  "subject": "Merge tag 'for-5.12-tag' of git://git.kernel.org/pub/scm/linux/kernel/git/kdave/linux",
  "body": "Pull btrfs updates from David Sterba:\n \"This brings updates of space handling, performance improvements or bug\n  fixes. The subpage block size and zoned mode features have reached\n  state where they're usable but with limitations.\n\n  Performance or related:\n\n   - do not block on deleted block group mutex in the cleaner, avoids\n     some long stalls\n\n   - improved flushing: make it work better with ticket space\n     reservations and avoid excessive transaction commits in some\n     scenarios, slightly improves throughput for random write load\n\n   - preemptive background flushing: separate the logic from ticket\n     reservations, improve the accounting and decisions when to flush in\n     low space conditions\n\n   - less lock contention related to running delayed refs, let just one\n     thread do the flushing when there are many inside transaction\n     commit\n\n   - dbench workload improvements: avoid unnecessary work when logging\n     inodes, fewer fallbacks to transaction commit and thus less waiting\n     for it (+7% throughput, -20% latency)\n\n  Core:\n\n   - subpage block size\n      - currently read-only support\n      - refactor and generalize code where sectorsize is assumed to be\n        page size, add the subpage handling everywhere\n      - the read-write support is on the way, page sizes are still\n        limited to 4K or 64K\n\n   - zoned mode, first working version but with limitations\n      - SMR/ZBC/ZNS friendly allocation mode, utilizing the \"no fixed\n        location for structures\" and chunked allocation\n      - superblock as the only fixed data structure needs special\n        handling, uses 2 consecutive zones as a ring buffer\n      - tree-log support with a dedicated block group to avoid unordered\n        writes\n      - emulated zones on non-zoned devices\n      - not yet working\n      - all non-single block group profiles, requires more zone write\n        pointer synchronization between the multiple block groups\n      - fitrim due to dependency on space cache, can be implemented\n\n  Fixes:\n\n   - ref-verify: proper tree owner and node level tracking\n\n   - fix pinned byte accounting, causing some early ENOSPC now more\n     likely due to other changes in delayed refs\n\n  Other:\n\n   - error handling fixes and improvements\n\n   - more error injection points\n\n   - more function documentation\n\n   - more and updated tracepoints\n\n   - subset of W=1 checked by default\n\n   - update comments to allow more automatic kdoc parameter checks\"\n\n* tag 'for-5.12-tag' of git://git.kernel.org/pub/scm/linux/kernel/git/kdave/linux: (144 commits)\n  btrfs: zoned: enable to mount ZONED incompat flag\n  btrfs: zoned: deal with holes writing out tree-log pages\n  btrfs: zoned: reorder log node allocation on zoned filesystem\n  btrfs: zoned: serialize log transaction on zoned filesystems\n  btrfs: zoned: extend zoned allocator to use dedicated tree-log block group\n  btrfs: split alloc_log_tree()\n  btrfs: zoned: relocate block group to repair IO failure in zoned filesystems\n  btrfs: zoned: enable relocation on a zoned filesystem\n  btrfs: zoned: support dev-replace in zoned filesystems\n  btrfs: zoned: implement copying for zoned device-replace\n  btrfs: zoned: implement cloning for zoned device-replace\n  btrfs: zoned: mark block groups to copy for device-replace\n  btrfs: zoned: do not use async metadata checksum on zoned filesystems\n  btrfs: zoned: wait for existing extents before truncating\n  btrfs: zoned: serialize metadata IO\n  btrfs: zoned: introduce dedicated data write path for zoned filesystems\n  btrfs: zoned: enable zone append writing for direct IO\n  btrfs: zoned: use ZONE_APPEND write for zoned mode\n  btrfs: save irq flags when looking up an ordered extent\n  btrfs: zoned: cache if block group is on a sequential zone\n  ...",
  "full_message": "Merge tag 'for-5.12-tag' of git://git.kernel.org/pub/scm/linux/kernel/git/kdave/linux\n\nPull btrfs updates from David Sterba:\n \"This brings updates of space handling, performance improvements or bug\n  fixes. The subpage block size and zoned mode features have reached\n  state where they're usable but with limitations.\n\n  Performance or related:\n\n   - do not block on deleted block group mutex in the cleaner, avoids\n     some long stalls\n\n   - improved flushing: make it work better with ticket space\n     reservations and avoid excessive transaction commits in some\n     scenarios, slightly improves throughput for random write load\n\n   - preemptive background flushing: separate the logic from ticket\n     reservations, improve the accounting and decisions when to flush in\n     low space conditions\n\n   - less lock contention related to running delayed refs, let just one\n     thread do the flushing when there are many inside transaction\n     commit\n\n   - dbench workload improvements: avoid unnecessary work when logging\n     inodes, fewer fallbacks to transaction commit and thus less waiting\n     for it (+7% throughput, -20% latency)\n\n  Core:\n\n   - subpage block size\n      - currently read-only support\n      - refactor and generalize code where sectorsize is assumed to be\n        page size, add the subpage handling everywhere\n      - the read-write support is on the way, page sizes are still\n        limited to 4K or 64K\n\n   - zoned mode, first working version but with limitations\n      - SMR/ZBC/ZNS friendly allocation mode, utilizing the \"no fixed\n        location for structures\" and chunked allocation\n      - superblock as the only fixed data structure needs special\n        handling, uses 2 consecutive zones as a ring buffer\n      - tree-log support with a dedicated block group to avoid unordered\n        writes\n      - emulated zones on non-zoned devices\n      - not yet working\n      - all non-single block group profiles, requires more zone write\n        pointer synchronization between the multiple block groups\n      - fitrim due to dependency on space cache, can be implemented\n\n  Fixes:\n\n   - ref-verify: proper tree owner and node level tracking\n\n   - fix pinned byte accounting, causing some early ENOSPC now more\n     likely due to other changes in delayed refs\n\n  Other:\n\n   - error handling fixes and improvements\n\n   - more error injection points\n\n   - more function documentation\n\n   - more and updated tracepoints\n\n   - subset of W=1 checked by default\n\n   - update comments to allow more automatic kdoc parameter checks\"\n\n* tag 'for-5.12-tag' of git://git.kernel.org/pub/scm/linux/kernel/git/kdave/linux: (144 commits)\n  btrfs: zoned: enable to mount ZONED incompat flag\n  btrfs: zoned: deal with holes writing out tree-log pages\n  btrfs: zoned: reorder log node allocation on zoned filesystem\n  btrfs: zoned: serialize log transaction on zoned filesystems\n  btrfs: zoned: extend zoned allocator to use dedicated tree-log block group\n  btrfs: split alloc_log_tree()\n  btrfs: zoned: relocate block group to repair IO failure in zoned filesystems\n  btrfs: zoned: enable relocation on a zoned filesystem\n  btrfs: zoned: support dev-replace in zoned filesystems\n  btrfs: zoned: implement copying for zoned device-replace\n  btrfs: zoned: implement cloning for zoned device-replace\n  btrfs: zoned: mark block groups to copy for device-replace\n  btrfs: zoned: do not use async metadata checksum on zoned filesystems\n  btrfs: zoned: wait for existing extents before truncating\n  btrfs: zoned: serialize metadata IO\n  btrfs: zoned: introduce dedicated data write path for zoned filesystems\n  btrfs: zoned: enable zone append writing for direct IO\n  btrfs: zoned: use ZONE_APPEND write for zoned mode\n  btrfs: save irq flags when looking up an ordered extent\n  btrfs: zoned: cache if block group is on a sequential zone\n  ...",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Sun Feb 21 10:00:39 2021 -0800",
  "author_date_iso": "2021-02-21T10:00:39-08:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Sun Feb 21 10:00:39 2021 -0800",
  "committer_date_iso": "2021-02-21T10:00:39-08:00",
  "files_changed": [
    "fs/btrfs/disk-io.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "block/bio.c",
      "insertions": 33,
      "deletions": 0
    },
    {
      "file": "fs/btrfs/Makefile",
      "insertions": 18,
      "deletions": 1
    },
    {
      "file": "fs/btrfs/backref.c",
      "insertions": 8,
      "deletions": 9
    },
    {
      "file": "fs/btrfs/backref.h",
      "insertions": 6,
      "deletions": 3
    },
    {
      "file": "fs/btrfs/block-group.c",
      "insertions": 120,
      "deletions": 58
    },
    {
      "file": "fs/btrfs/block-group.h",
      "insertions": 16,
      "deletions": 5
    },
    {
      "file": "fs/btrfs/btrfs_inode.h",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "fs/btrfs/compression.c",
      "insertions": 8,
      "deletions": 2
    },
    {
      "file": "fs/btrfs/ctree.c",
      "insertions": 7,
      "deletions": 2
    },
    {
      "file": "fs/btrfs/ctree.h",
      "insertions": 13,
      "deletions": 6
    },
    {
      "file": "fs/btrfs/delalloc-space.c",
      "insertions": 17,
      "deletions": 12
    },
    {
      "file": "fs/btrfs/delayed-inode.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "fs/btrfs/delayed-ref.c",
      "insertions": 48,
      "deletions": 31
    },
    {
      "file": "fs/btrfs/delayed-ref.h",
      "insertions": 18,
      "deletions": 10
    },
    {
      "file": "fs/btrfs/dev-replace.c",
      "insertions": 185,
      "deletions": 1
    },
    {
      "file": "fs/btrfs/dev-replace.h",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "fs/btrfs/discard.c",
      "insertions": 4,
      "deletions": 2
    },
    {
      "file": "fs/btrfs/disk-io.c",
      "insertions": 152,
      "deletions": 31
    },
    {
      "file": "fs/btrfs/disk-io.h",
      "insertions": 4,
      "deletions": 2
    },
    {
      "file": "fs/btrfs/extent-tree.c",
      "insertions": 243,
      "deletions": 118
    },
    {
      "file": "fs/btrfs/extent_io.c",
      "insertions": 640,
      "deletions": 151
    },
    {
      "file": "fs/btrfs/extent_io.h",
      "insertions": 10,
      "deletions": 7
    },
    {
      "file": "fs/btrfs/extent_map.c",
      "insertions": 11,
      "deletions": 7
    },
    {
      "file": "fs/btrfs/file-item.c",
      "insertions": 14,
      "deletions": 8
    },
    {
      "file": "fs/btrfs/file.c",
      "insertions": 27,
      "deletions": 31
    },
    {
      "file": "fs/btrfs/free-space-cache.c",
      "insertions": 113,
      "deletions": 10
    },
    {
      "file": "fs/btrfs/free-space-cache.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "fs/btrfs/inode.c",
      "insertions": 269,
      "deletions": 67
    },
    {
      "file": "fs/btrfs/ioctl.c",
      "insertions": 19,
      "deletions": 10
    },
    {
      "file": "fs/btrfs/ordered-data.c",
      "insertions": 164,
      "deletions": 60
    },
    {
      "file": "fs/btrfs/ordered-data.h",
      "insertions": 39,
      "deletions": 18
    },
    {
      "file": "fs/btrfs/raid56.c",
      "insertions": 1,
      "deletions": 2
    },
    {
      "file": "fs/btrfs/ref-verify.c",
      "insertions": 22,
      "deletions": 21
    },
    {
      "file": "fs/btrfs/reflink.c",
      "insertions": 4,
      "deletions": 1
    },
    {
      "file": "fs/btrfs/relocation.c",
      "insertions": 87,
      "deletions": 12
    },
    {
      "file": "fs/btrfs/scrub.c",
      "insertions": 143,
      "deletions": 0
    },
    {
      "file": "fs/btrfs/send.c",
      "insertions": 7,
      "deletions": 24
    },
    {
      "file": "fs/btrfs/space-info.c",
      "insertions": 283,
      "deletions": 82
    },
    {
      "file": "fs/btrfs/space-info.h",
      "insertions": 24,
      "deletions": 1
    },
    {
      "file": "fs/btrfs/subpage.c",
      "insertions": 278,
      "deletions": 0
    },
    {
      "file": "fs/btrfs/subpage.h",
      "insertions": 91,
      "deletions": 0
    },
    {
      "file": "fs/btrfs/super.c",
      "insertions": 7,
      "deletions": 1
    },
    {
      "file": "fs/btrfs/sysfs.c",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "fs/btrfs/tests/extent-map-tests.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "fs/btrfs/transaction.c",
      "insertions": 92,
      "deletions": 60
    },
    {
      "file": "fs/btrfs/transaction.h",
      "insertions": 5,
      "deletions": 0
    },
    {
      "file": "fs/btrfs/tree-log.c",
      "insertions": 141,
      "deletions": 147
    },
    {
      "file": "fs/btrfs/volumes.c",
      "insertions": 308,
      "deletions": 56
    },
    {
      "file": "fs/btrfs/volumes.h",
      "insertions": 6,
      "deletions": 2
    },
    {
      "file": "fs/btrfs/zoned.c",
      "insertions": 859,
      "deletions": 14
    },
    {
      "file": "fs/btrfs/zoned.h",
      "insertions": 152,
      "deletions": 5
    },
    {
      "file": "fs/iomap/direct-io.c",
      "insertions": 37,
      "deletions": 6
    },
    {
      "file": "include/linux/bio.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "include/linux/iomap.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "include/linux/zstd.h",
      "insertions": 4,
      "deletions": 4
    },
    {
      "file": "include/trace/events/btrfs.h",
      "insertions": 103,
      "deletions": 8
    }
  ],
  "total_insertions": 4874,
  "total_deletions": 1111,
  "total_changes": 5985,
  "parents": [
    "f9d58de23152f2c16f326d7e014cfa2933b00304",
    "9d294a685fbcb256ce8c5f7fd88a7596d0f52a8a"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/btrfs/disk-io.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}