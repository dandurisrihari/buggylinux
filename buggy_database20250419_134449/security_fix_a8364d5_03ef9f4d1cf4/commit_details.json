{
  "hash": "a8364d5555b2030d093cde0f07951628e55454e1",
  "hash_short": "a8364d55",
  "subject": "slub: only IPI CPUs that have per cpu obj to flush",
  "body": "flush_all() is called for each kmem_cache_destroy().  So every cache being\ndestroyed dynamically ends up sending an IPI to each CPU in the system,\nregardless if the cache has ever been used there.\n\nFor example, if you close the Infinband ipath driver char device file, the\nclose file ops calls kmem_cache_destroy().  So running some infiniband\nconfig tool on one a single CPU dedicated to system tasks might interrupt\nthe rest of the 127 CPUs dedicated to some CPU intensive or latency\nsensitive task.\n\nI suspect there is a good chance that every line in the output of \"git\ngrep kmem_cache_destroy linux/ | grep '\\->'\" has a similar scenario.\n\nThis patch attempts to rectify this issue by sending an IPI to flush the\nper cpu objects back to the free lists only to CPUs that seem to have such\nobjects.\n\nThe check which CPU to IPI is racy but we don't care since asking a CPU\nwithout per cpu objects to flush does no damage and as far as I can tell\nthe flush_all by itself is racy against allocs on remote CPUs anyway, so\nif you required the flush_all to be determinstic, you had to arrange for\nlocking regardless.\n\nWithout this patch the following artificial test case:\n\n$ cd /sys/kernel/slab\n$ for DIR in *; do cat $DIR/alloc_calls > /dev/null; done\n\nproduces 166 IPIs on an cpuset isolated CPU. With it it produces none.\n\nThe code path of memory allocation failure for CPUMASK_OFFSTACK=y\nconfig was tested using fault injection framework.\n\nSigned-off-by: Gilad Ben-Yossef <gilad@benyossef.com>\nAcked-by: Christoph Lameter <cl@linux.com>\nCc: Chris Metcalf <cmetcalf@tilera.com>\nAcked-by: Peter Zijlstra <a.p.zijlstra@chello.nl>\nCc: Frederic Weisbecker <fweisbec@gmail.com>\nCc: Russell King <linux@arm.linux.org.uk>\nCc: Pekka Enberg <penberg@kernel.org>\nCc: Matt Mackall <mpm@selenic.com>\nCc: Sasha Levin <levinsasha928@gmail.com>\nCc: Rik van Riel <riel@redhat.com>\nCc: Andi Kleen <andi@firstfloor.org>\nCc: Mel Gorman <mel@csn.ul.ie>\nCc: Alexander Viro <viro@zeniv.linux.org.uk>\nCc: Avi Kivity <avi@redhat.com>\nCc: Michal Nazarewicz <mina86@mina86.org>\nCc: Kosaki Motohiro <kosaki.motohiro@gmail.com>\nCc: Milton Miller <miltonm@bga.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "full_message": "slub: only IPI CPUs that have per cpu obj to flush\n\nflush_all() is called for each kmem_cache_destroy().  So every cache being\ndestroyed dynamically ends up sending an IPI to each CPU in the system,\nregardless if the cache has ever been used there.\n\nFor example, if you close the Infinband ipath driver char device file, the\nclose file ops calls kmem_cache_destroy().  So running some infiniband\nconfig tool on one a single CPU dedicated to system tasks might interrupt\nthe rest of the 127 CPUs dedicated to some CPU intensive or latency\nsensitive task.\n\nI suspect there is a good chance that every line in the output of \"git\ngrep kmem_cache_destroy linux/ | grep '\\->'\" has a similar scenario.\n\nThis patch attempts to rectify this issue by sending an IPI to flush the\nper cpu objects back to the free lists only to CPUs that seem to have such\nobjects.\n\nThe check which CPU to IPI is racy but we don't care since asking a CPU\nwithout per cpu objects to flush does no damage and as far as I can tell\nthe flush_all by itself is racy against allocs on remote CPUs anyway, so\nif you required the flush_all to be determinstic, you had to arrange for\nlocking regardless.\n\nWithout this patch the following artificial test case:\n\n$ cd /sys/kernel/slab\n$ for DIR in *; do cat $DIR/alloc_calls > /dev/null; done\n\nproduces 166 IPIs on an cpuset isolated CPU. With it it produces none.\n\nThe code path of memory allocation failure for CPUMASK_OFFSTACK=y\nconfig was tested using fault injection framework.\n\nSigned-off-by: Gilad Ben-Yossef <gilad@benyossef.com>\nAcked-by: Christoph Lameter <cl@linux.com>\nCc: Chris Metcalf <cmetcalf@tilera.com>\nAcked-by: Peter Zijlstra <a.p.zijlstra@chello.nl>\nCc: Frederic Weisbecker <fweisbec@gmail.com>\nCc: Russell King <linux@arm.linux.org.uk>\nCc: Pekka Enberg <penberg@kernel.org>\nCc: Matt Mackall <mpm@selenic.com>\nCc: Sasha Levin <levinsasha928@gmail.com>\nCc: Rik van Riel <riel@redhat.com>\nCc: Andi Kleen <andi@firstfloor.org>\nCc: Mel Gorman <mel@csn.ul.ie>\nCc: Alexander Viro <viro@zeniv.linux.org.uk>\nCc: Avi Kivity <avi@redhat.com>\nCc: Michal Nazarewicz <mina86@mina86.org>\nCc: Kosaki Motohiro <kosaki.motohiro@gmail.com>\nCc: Milton Miller <miltonm@bga.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "author_name": "Gilad Ben-Yossef",
  "author_email": "gilad@benyossef.com",
  "author_date": "Wed Mar 28 14:42:44 2012 -0700",
  "author_date_iso": "2012-03-28T14:42:44-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Wed Mar 28 17:14:35 2012 -0700",
  "committer_date_iso": "2012-03-28T17:14:35-07:00",
  "files_changed": [
    "mm/slub.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "mm/slub.c",
      "insertions": 9,
      "deletions": 1
    }
  ],
  "total_insertions": 9,
  "total_deletions": 1,
  "total_changes": 10,
  "parents": [
    "b3a7e98e024ffa9f7e4554dd720c508015c4a831"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v3.10",
    "v3.10-rc1",
    "v3.10-rc2",
    "v3.10-rc3",
    "v3.10-rc4",
    "v3.10-rc5",
    "v3.10-rc6",
    "v3.10-rc7",
    "v3.11",
    "v3.11-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "mm/slub.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}