{
  "hash": "37a8f7c38339b22b69876d6f5a0ab851565284e3",
  "hash_short": "37a8f7c3",
  "subject": "x86/asm: Move 'status' from thread_struct to thread_info",
  "body": "The TS_COMPAT bit is very hot and is accessed from code paths that mostly\nalso touch thread_info::flags.  Move it into struct thread_info to improve\ncache locality.\n\nThe only reason it was in thread_struct is that there was a brief period\nduring which arch-specific fields were not allowed in struct thread_info.\n\nLinus suggested further changing:\n\n  ti->status &= ~(TS_COMPAT|TS_I386_REGS_POKED);\n\nto:\n\n  if (unlikely(ti->status & (TS_COMPAT|TS_I386_REGS_POKED)))\n          ti->status &= ~(TS_COMPAT|TS_I386_REGS_POKED);\n\non the theory that frequently dirtying the cacheline even in pure 64-bit\ncode that never needs to modify status hurts performance.  That could be a\nreasonable followup patch, but I suspect it matters less on top of this\npatch.\n\nSuggested-by: Linus Torvalds <torvalds@linux-foundation.org>\nSigned-off-by: Andy Lutomirski <luto@kernel.org>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nReviewed-by: Ingo Molnar <mingo@kernel.org>\nAcked-by: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Borislav Petkov <bp@alien8.de>\nCc: Kernel Hardening <kernel-hardening@lists.openwall.com>\nLink: https://lkml.kernel.org/r/03148bcc1b217100e6e8ecf6a5468c45cf4304b6.1517164461.git.luto@kernel.org",
  "full_message": "x86/asm: Move 'status' from thread_struct to thread_info\n\nThe TS_COMPAT bit is very hot and is accessed from code paths that mostly\nalso touch thread_info::flags.  Move it into struct thread_info to improve\ncache locality.\n\nThe only reason it was in thread_struct is that there was a brief period\nduring which arch-specific fields were not allowed in struct thread_info.\n\nLinus suggested further changing:\n\n  ti->status &= ~(TS_COMPAT|TS_I386_REGS_POKED);\n\nto:\n\n  if (unlikely(ti->status & (TS_COMPAT|TS_I386_REGS_POKED)))\n          ti->status &= ~(TS_COMPAT|TS_I386_REGS_POKED);\n\non the theory that frequently dirtying the cacheline even in pure 64-bit\ncode that never needs to modify status hurts performance.  That could be a\nreasonable followup patch, but I suspect it matters less on top of this\npatch.\n\nSuggested-by: Linus Torvalds <torvalds@linux-foundation.org>\nSigned-off-by: Andy Lutomirski <luto@kernel.org>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nReviewed-by: Ingo Molnar <mingo@kernel.org>\nAcked-by: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Borislav Petkov <bp@alien8.de>\nCc: Kernel Hardening <kernel-hardening@lists.openwall.com>\nLink: https://lkml.kernel.org/r/03148bcc1b217100e6e8ecf6a5468c45cf4304b6.1517164461.git.luto@kernel.org",
  "author_name": "Andy Lutomirski",
  "author_email": "luto@kernel.org",
  "author_date": "Sun Jan 28 10:38:50 2018 -0800",
  "author_date_iso": "2018-01-28T10:38:50-08:00",
  "committer_name": "Thomas Gleixner",
  "committer_email": "tglx@linutronix.de",
  "committer_date": "Tue Jan 30 15:30:36 2018 +0100",
  "committer_date_iso": "2018-01-30T15:30:36+01:00",
  "files_changed": [
    "arch/x86/entry/common.c",
    "arch/x86/include/asm/processor.h",
    "arch/x86/include/asm/syscall.h",
    "arch/x86/include/asm/thread_info.h",
    "arch/x86/kernel/process_64.c",
    "arch/x86/kernel/ptrace.c",
    "arch/x86/kernel/signal.c"
  ],
  "files_changed_count": 7,
  "stats": [
    {
      "file": "arch/x86/entry/common.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/x86/include/asm/processor.h",
      "insertions": 0,
      "deletions": 2
    },
    {
      "file": "arch/x86/include/asm/syscall.h",
      "insertions": 3,
      "deletions": 3
    },
    {
      "file": "arch/x86/include/asm/thread_info.h",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "arch/x86/kernel/process_64.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/x86/kernel/ptrace.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/x86/kernel/signal.c",
      "insertions": 1,
      "deletions": 1
    }
  ],
  "total_insertions": 11,
  "total_deletions": 12,
  "total_changes": 23,
  "parents": [
    "d1f7732009e0549eedf8ea1db948dc37be77fd46"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.16",
    "v4.16-rc1",
    "v4.16-rc2",
    "v4.16-rc3",
    "v4.16-rc4",
    "v4.16-rc5",
    "v4.16-rc6",
    "v4.16-rc7",
    "v4.17",
    "v4.17-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "Hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/include/asm/processor.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/entry/common.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/thread_info.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/syscall.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/signal.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/process_64.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/ptrace.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}