commit 69ebc0182406541f0be0f086cdfff13ac56e7385
Author: Catalin Marinas <catalin.marinas@arm.com>
Date:   Tue Mar 12 20:00:20 2024 +0000

    Revert "arm64: mm: add support for WXN memory translation attribute"
    
    This reverts commit 50e3ed0f93f4f62ed2aa83de5db6cb84ecdd5707.
    
    The SCTLR_EL1.WXN control forces execute-never when a page has write
    permissions. While the idea of hardening such write/exec combinations is
    good, with permissions indirection enabled (FEAT_PIE) this control
    becomes RES0. FEAT_PIE introduces a slightly different form of WXN which
    only has an effect when the base permission is RWX and the write is
    toggled by the permission overlay (FEAT_POE, not yet supported by the
    arm64 kernel). Revert the patch for now.
    
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>
    Link: https://lore.kernel.org/r/ZfGESD3a91lxH367@arm.com

diff --git a/arch/arm64/include/asm/mman.h b/arch/arm64/include/asm/mman.h
index 6d4940342ba7..5966ee4a6154 100644
--- a/arch/arm64/include/asm/mman.h
+++ b/arch/arm64/include/asm/mman.h
@@ -35,40 +35,11 @@ static inline unsigned long arch_calc_vm_flag_bits(unsigned long flags)
 }
 #define arch_calc_vm_flag_bits(flags) arch_calc_vm_flag_bits(flags)
 
-static inline bool arm64_check_wx_prot(unsigned long prot,
-				       struct task_struct *tsk)
-{
-	/*
-	 * When we are running with SCTLR_ELx.WXN==1, writable mappings are
-	 * implicitly non-executable. This means we should reject such mappings
-	 * when user space attempts to create them using mmap() or mprotect().
-	 */
-	if (arm64_wxn_enabled() &&
-	    ((prot & (PROT_WRITE | PROT_EXEC)) == (PROT_WRITE | PROT_EXEC))) {
-		/*
-		 * User space libraries such as libffi carry elaborate
-		 * heuristics to decide whether it is worth it to even attempt
-		 * to create writable executable mappings, as PaX or selinux
-		 * enabled systems will outright reject it. They will usually
-		 * fall back to something else (e.g., two separate shared
-		 * mmap()s of a temporary file) on failure.
-		 */
-		pr_info_ratelimited(
-			"process %s (%d) attempted to create PROT_WRITE+PROT_EXEC mapping\n",
-			tsk->comm, tsk->pid);
-		return false;
-	}
-	return true;
-}
-
 static inline bool arch_validate_prot(unsigned long prot,
 	unsigned long addr __always_unused)
 {
 	unsigned long supported = PROT_READ | PROT_WRITE | PROT_EXEC | PROT_SEM;
 
-	if (!arm64_check_wx_prot(prot, current))
-		return false;
-
 	if (system_supports_bti())
 		supported |= PROT_BTI;
 
@@ -79,13 +50,6 @@ static inline bool arch_validate_prot(unsigned long prot,
 }
 #define arch_validate_prot(prot, addr) arch_validate_prot(prot, addr)
 
-static inline bool arch_validate_mmap_prot(unsigned long prot,
-					   unsigned long addr)
-{
-	return arm64_check_wx_prot(prot, current);
-}
-#define arch_validate_mmap_prot arch_validate_mmap_prot
-
 static inline bool arch_validate_flags(unsigned long vm_flags)
 {
 	if (!system_supports_mte())