commit 40a2159abf3d0107bba359246554bd7d56f2171b
Author: Ben Hutchings <bhutchings@solarflare.com>
Date:   Mon Apr 28 15:59:58 2008 +0100

    sysfs: Disallow truncation of files in sysfs
    
    sysfs allows attribute files to be truncated, e.g. using ftruncate(), with the
    expected effect on their inode.   For most attributes, this doesn't change the
    "real" size of the file i.e. how much can be read from it.  However, the
    parameter validation for reading and writing binary attribute files is based
    on the inode size and not the size specified in the file's bin_attribute, so it
    can be broken by this. For example, if we try using dd to write to such a file:
    
    # pwd
    /sys/bus/pci/devices/0000:08:00.0
    # ls -l config
    -rw-r--r--  1 root root 4096 Feb  1 17:35 config
    # dd if=/dev/zero of=config bs=4 count=1
    1+0 records in
    1+0 records out
    # ls -l config
    -rw-r--r--  1 root root 0 Feb  1 17:50 config
    # dd if=/dev/zero of=config bs=4 count=1 seek=128
    dd: writing `config': No space left on device
    1+0 records in
    0+0 records out
    
    Also, after truncation to 0, parameter validation for read and write is
    disabled.  Most bin_attribute read and write methods also validate the size and
    offset, but for some this will allow out-of-range access.  This may be a
    security issue, though access to such files is often limited to root.  In any
    case, the validation should remain for safety's sake!)
    
    This was previously reported in Bugzilla as bug 9867.
    
    sysfs should ignore size changes or else refuse them (by returning -EINVAL).
    This patch makes it ignore them.
    
    Signed-off-by: Ben Hutchings <bhutchings@solarflare.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

diff --git a/fs/sysfs/inode.c b/fs/sysfs/inode.c
index f8b82e73b3bf..eb53c632f856 100644
--- a/fs/sysfs/inode.c
+++ b/fs/sysfs/inode.c
@@ -59,6 +59,8 @@ int sysfs_setattr(struct dentry * dentry, struct iattr * iattr)
 	if (error)
 		return error;
 
+	iattr->ia_valid &= ~ATTR_SIZE; /* ignore size changes */
+
 	error = inode_setattr(inode, iattr);
 	if (error)
 		return error;