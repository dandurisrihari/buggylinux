{
  "hash": "d4b9ff3d55dede868f43c4541ba999c109dbadcb",
  "hash_short": "d4b9ff3d",
  "subject": "KVM: x86: Treat MONTIOR/MWAIT as a \"partially emulated\" feature",
  "body": "Enumerate MWAIT in cpuid_func_emulated(), but only if the caller wants to\ninclude \"partially emulated\" features, i.e. features that KVM kinda sorta\nemulates, but with major caveats.  This will allow initializing the guest\ncpu_caps based on the set of features that KVM virtualizes and/or emulates,\nwithout needing to handle things like MONITOR/MWAIT as one-off exceptions.\n\nAdding one-off handling for individual features is quite painful,\nespecially when considering future hardening.  It's very doable to verify,\nat compile time, that every CPUID-based feature that KVM queries when\nemulating guest behavior is actually known to KVM, e.g. to prevent KVM\nbugs where KVM emulates some feature but fails to advertise support to\nuserspace.  In other words, any features that are special cased, i.e. not\nhandled generically in the CPUID framework, would also need to be special\ncased for any hardening efforts that build on said framework.\n\nLink: https://lore.kernel.org/r/20241128013424.4096668-44-seanjc@google.com\nSigned-off-by: Sean Christopherson <seanjc@google.com>",
  "full_message": "KVM: x86: Treat MONTIOR/MWAIT as a \"partially emulated\" feature\n\nEnumerate MWAIT in cpuid_func_emulated(), but only if the caller wants to\ninclude \"partially emulated\" features, i.e. features that KVM kinda sorta\nemulates, but with major caveats.  This will allow initializing the guest\ncpu_caps based on the set of features that KVM virtualizes and/or emulates,\nwithout needing to handle things like MONITOR/MWAIT as one-off exceptions.\n\nAdding one-off handling for individual features is quite painful,\nespecially when considering future hardening.  It's very doable to verify,\nat compile time, that every CPUID-based feature that KVM queries when\nemulating guest behavior is actually known to KVM, e.g. to prevent KVM\nbugs where KVM emulates some feature but fails to advertise support to\nuserspace.  In other words, any features that are special cased, i.e. not\nhandled generically in the CPUID framework, would also need to be special\ncased for any hardening efforts that build on said framework.\n\nLink: https://lore.kernel.org/r/20241128013424.4096668-44-seanjc@google.com\nSigned-off-by: Sean Christopherson <seanjc@google.com>",
  "author_name": "Sean Christopherson",
  "author_email": "seanjc@google.com",
  "author_date": "Wed Nov 27 17:34:10 2024 -0800",
  "author_date_iso": "2024-11-27T17:34:10-08:00",
  "committer_name": "Sean Christopherson",
  "committer_email": "seanjc@google.com",
  "committer_date": "Wed Dec 18 14:20:08 2024 -0800",
  "committer_date_iso": "2024-12-18T14:20:08-08:00",
  "files_changed": [
    "arch/x86/kvm/cpuid.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/x86/kvm/cpuid.c",
      "insertions": 13,
      "deletions": 2
    }
  ],
  "total_insertions": 13,
  "total_deletions": 2,
  "total_changes": 15,
  "parents": [
    "ff402f56e8eb21d65c73e559fb5db5a00cedb14a"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/kvm/cpuid.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}