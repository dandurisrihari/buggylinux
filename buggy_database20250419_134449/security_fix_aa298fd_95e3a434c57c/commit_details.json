{
  "hash": "aa298fdf535d47df1279b12a0212deb2389f709a",
  "hash_short": "aa298fdf",
  "subject": "mm/memory-failure: try to send SIGBUS even if unmap failed",
  "body": "Patch series \"Enhance soft hwpoison handling and injection\", v4.\n\nThis series is aimed at the following enhancements:\n\n- Let one hwpoison injector, that is, madvise(MADV_HWPOISON) to behave\n  more like as if a real UE occurred.  Because the other two injectors\n  such as hwpoison-inject and the 'einj' on x86 can't, and it seems to me\n  we need a better simulation to real UE scenario.\n- For years, if the kernel is unable to unmap a hwpoisoned page, it send\n  a SIGKILL instead of SIGBUS to prevent user process from potentially\n  accessing the page again.  But in doing so, the user process also lose\n  important information: vaddr, for recovery.  Fortunately, the kernel\n  already has code to kill process re-accessing a hwpoisoned page, so\n  remove the '!unmap_success' check.\n- Right now, if a thp page under GUP longterm pin is hwpoisoned, and\n  kernel cannot split the thp page, memory-failure simply ignores the UE\n  and returns.  That's not ideal, it could deliver a SIGBUS with useful\n  information for userspace recovery.\n\n\nThis patch (of 5):\n\nFor years when it comes down to kill a process due to hwpoison, a SIGBUS\nis delivered only if unmap has been successful.  Otherwise, a SIGKILL is\ndelivered.  And the reason for that is to prevent the involved process\nfrom accessing the hwpoisoned page again.\n\nSince then a lot has changed, a hwpoisoned page is marked and upon being\nre-accessed, the memory-failure handler invokes kill_accessing_process()\nto kill the process immediately.  So let's take out the '!unmap_success'\nfactor and try to deliver SIGBUS if possible.\n\nLink: https://lkml.kernel.org/r/20240524215306.2705454-1-jane.chu@oracle.com\nLink: https://lkml.kernel.org/r/20240524215306.2705454-2-jane.chu@oracle.com\nSigned-off-by: Jane Chu <jane.chu@oracle.com>\nReviewed-by: Oscar Salvador <osalvador@suse.de>\nAcked-by: Miaohe Lin <linmiaohe@huawei.com>\nCc: Naoya Horiguchi <nao.horiguchi@gmail.com>\nCc: Oscar Salvador <oalvador@suse.de>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>",
  "full_message": "mm/memory-failure: try to send SIGBUS even if unmap failed\n\nPatch series \"Enhance soft hwpoison handling and injection\", v4.\n\nThis series is aimed at the following enhancements:\n\n- Let one hwpoison injector, that is, madvise(MADV_HWPOISON) to behave\n  more like as if a real UE occurred.  Because the other two injectors\n  such as hwpoison-inject and the 'einj' on x86 can't, and it seems to me\n  we need a better simulation to real UE scenario.\n- For years, if the kernel is unable to unmap a hwpoisoned page, it send\n  a SIGKILL instead of SIGBUS to prevent user process from potentially\n  accessing the page again.  But in doing so, the user process also lose\n  important information: vaddr, for recovery.  Fortunately, the kernel\n  already has code to kill process re-accessing a hwpoisoned page, so\n  remove the '!unmap_success' check.\n- Right now, if a thp page under GUP longterm pin is hwpoisoned, and\n  kernel cannot split the thp page, memory-failure simply ignores the UE\n  and returns.  That's not ideal, it could deliver a SIGBUS with useful\n  information for userspace recovery.\n\n\nThis patch (of 5):\n\nFor years when it comes down to kill a process due to hwpoison, a SIGBUS\nis delivered only if unmap has been successful.  Otherwise, a SIGKILL is\ndelivered.  And the reason for that is to prevent the involved process\nfrom accessing the hwpoisoned page again.\n\nSince then a lot has changed, a hwpoisoned page is marked and upon being\nre-accessed, the memory-failure handler invokes kill_accessing_process()\nto kill the process immediately.  So let's take out the '!unmap_success'\nfactor and try to deliver SIGBUS if possible.\n\nLink: https://lkml.kernel.org/r/20240524215306.2705454-1-jane.chu@oracle.com\nLink: https://lkml.kernel.org/r/20240524215306.2705454-2-jane.chu@oracle.com\nSigned-off-by: Jane Chu <jane.chu@oracle.com>\nReviewed-by: Oscar Salvador <osalvador@suse.de>\nAcked-by: Miaohe Lin <linmiaohe@huawei.com>\nCc: Naoya Horiguchi <nao.horiguchi@gmail.com>\nCc: Oscar Salvador <oalvador@suse.de>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>",
  "author_name": "Jane Chu",
  "author_email": "jane.chu@oracle.com",
  "author_date": "Fri May 24 15:53:02 2024 -0600",
  "author_date_iso": "2024-05-24T15:53:02-06:00",
  "committer_name": "Andrew Morton",
  "committer_email": "akpm@linux-foundation.org",
  "committer_date": "Wed Jul 3 19:29:57 2024 -0700",
  "committer_date_iso": "2024-07-03T19:29:57-07:00",
  "files_changed": [
    "mm/memory-failure.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "mm/memory-failure.c",
      "insertions": 4,
      "deletions": 11
    }
  ],
  "total_insertions": 4,
  "total_deletions": 11,
  "total_changes": 15,
  "parents": [
    "6faa49d1c4404e0b949fd92f1e891c24870d4f86"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "mm/memory-failure.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}