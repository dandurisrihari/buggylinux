{
  "hash": "1eba86c096e35e3cc83de1ad2c26f2d70470211b",
  "hash_short": "1eba86c0",
  "subject": "mm: change page type prior to adding page table entry",
  "body": "Patch series \"page table check\", v3.\n\nEnsure that some memory corruptions are prevented by checking at the\ntime of insertion of entries into user page tables that there is no\nillegal sharing.\n\nWe have recently found a problem [1] that existed in kernel since 4.14.\nThe problem was caused by broken page ref count and led to memory\nleaking from one process into another.  The problem was accidentally\ndetected by studying a dump of one process and noticing that one page\ncontains memory that should not belong to this process.\n\nThere are some other page->_refcount related problems that were recently\nfixed: [2], [3] which potentially could also lead to illegal sharing.\n\nIn addition to hardening refcount [4] itself, this work is an attempt to\nprevent this class of memory corruption issues.\n\nIt uses a simple state machine that is independent from regular MM logic\nto check for illegal sharing at time pages are inserted and removed from\npage tables.\n\n[1] https://lore.kernel.org/all/xr9335nxwc5y.fsf@gthelen2.svl.corp.google.com\n[2] https://lore.kernel.org/all/1582661774-30925-2-git-send-email-akaher@vmware.com\n[3] https://lore.kernel.org/all/20210622021423.154662-3-mike.kravetz@oracle.com\n[4] https://lore.kernel.org/all/20211221150140.988298-1-pasha.tatashin@soleen.com\n\nThis patch (of 4):\n\nThere are a few places where we first update the entry in the user page\ntable, and later change the struct page to indicate that this is\nanonymous or file page.\n\nIn most places, however, we first configure the page metadata and then\ninsert entries into the page table.  Page table check, will use the\ninformation from struct page to verify the type of entry is inserted.\n\nChange the order in all places to first update struct page, and later to\nupdate page table.\n\nThis means that we first do calls that may change the type of page (anon\nor file):\n\n\tpage_move_anon_rmap\n\tpage_add_anon_rmap\n\tdo_page_add_anon_rmap\n\tpage_add_new_anon_rmap\n\tpage_add_file_rmap\n\thugepage_add_anon_rmap\n\thugepage_add_new_anon_rmap\n\nAnd after that do calls that add entries to the page table:\n\n\tset_huge_pte_at\n\tset_pte_at\n\nLink: https://lkml.kernel.org/r/20211221154650.1047963-1-pasha.tatashin@soleen.com\nLink: https://lkml.kernel.org/r/20211221154650.1047963-2-pasha.tatashin@soleen.com\nSigned-off-by: Pasha Tatashin <pasha.tatashin@soleen.com>\nCc: David Rientjes <rientjes@google.com>\nCc: Paul Turner <pjt@google.com>\nCc: Wei Xu <weixugc@google.com>\nCc: Greg Thelen <gthelen@google.com>\nCc: Ingo Molnar <mingo@redhat.com>\nCc: Jonathan Corbet <corbet@lwn.net>\nCc: Will Deacon <will@kernel.org>\nCc: Mike Rapoport <rppt@kernel.org>\nCc: Kees Cook <keescook@chromium.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Masahiro Yamada <masahiroy@kernel.org>\nCc: Sami Tolvanen <samitolvanen@google.com>\nCc: Dave Hansen <dave.hansen@linux.intel.com>\nCc: Frederic Weisbecker <frederic@kernel.org>\nCc: \"H. Peter Anvin\" <hpa@zytor.com>\nCc: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>\nCc: Jiri Slaby <jirislaby@kernel.org>\nCc: Muchun Song <songmuchun@bytedance.com>\nCc: Hugh Dickins <hughd@google.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "full_message": "mm: change page type prior to adding page table entry\n\nPatch series \"page table check\", v3.\n\nEnsure that some memory corruptions are prevented by checking at the\ntime of insertion of entries into user page tables that there is no\nillegal sharing.\n\nWe have recently found a problem [1] that existed in kernel since 4.14.\nThe problem was caused by broken page ref count and led to memory\nleaking from one process into another.  The problem was accidentally\ndetected by studying a dump of one process and noticing that one page\ncontains memory that should not belong to this process.\n\nThere are some other page->_refcount related problems that were recently\nfixed: [2], [3] which potentially could also lead to illegal sharing.\n\nIn addition to hardening refcount [4] itself, this work is an attempt to\nprevent this class of memory corruption issues.\n\nIt uses a simple state machine that is independent from regular MM logic\nto check for illegal sharing at time pages are inserted and removed from\npage tables.\n\n[1] https://lore.kernel.org/all/xr9335nxwc5y.fsf@gthelen2.svl.corp.google.com\n[2] https://lore.kernel.org/all/1582661774-30925-2-git-send-email-akaher@vmware.com\n[3] https://lore.kernel.org/all/20210622021423.154662-3-mike.kravetz@oracle.com\n[4] https://lore.kernel.org/all/20211221150140.988298-1-pasha.tatashin@soleen.com\n\nThis patch (of 4):\n\nThere are a few places where we first update the entry in the user page\ntable, and later change the struct page to indicate that this is\nanonymous or file page.\n\nIn most places, however, we first configure the page metadata and then\ninsert entries into the page table.  Page table check, will use the\ninformation from struct page to verify the type of entry is inserted.\n\nChange the order in all places to first update struct page, and later to\nupdate page table.\n\nThis means that we first do calls that may change the type of page (anon\nor file):\n\n\tpage_move_anon_rmap\n\tpage_add_anon_rmap\n\tdo_page_add_anon_rmap\n\tpage_add_new_anon_rmap\n\tpage_add_file_rmap\n\thugepage_add_anon_rmap\n\thugepage_add_new_anon_rmap\n\nAnd after that do calls that add entries to the page table:\n\n\tset_huge_pte_at\n\tset_pte_at\n\nLink: https://lkml.kernel.org/r/20211221154650.1047963-1-pasha.tatashin@soleen.com\nLink: https://lkml.kernel.org/r/20211221154650.1047963-2-pasha.tatashin@soleen.com\nSigned-off-by: Pasha Tatashin <pasha.tatashin@soleen.com>\nCc: David Rientjes <rientjes@google.com>\nCc: Paul Turner <pjt@google.com>\nCc: Wei Xu <weixugc@google.com>\nCc: Greg Thelen <gthelen@google.com>\nCc: Ingo Molnar <mingo@redhat.com>\nCc: Jonathan Corbet <corbet@lwn.net>\nCc: Will Deacon <will@kernel.org>\nCc: Mike Rapoport <rppt@kernel.org>\nCc: Kees Cook <keescook@chromium.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Masahiro Yamada <masahiroy@kernel.org>\nCc: Sami Tolvanen <samitolvanen@google.com>\nCc: Dave Hansen <dave.hansen@linux.intel.com>\nCc: Frederic Weisbecker <frederic@kernel.org>\nCc: \"H. Peter Anvin\" <hpa@zytor.com>\nCc: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>\nCc: Jiri Slaby <jirislaby@kernel.org>\nCc: Muchun Song <songmuchun@bytedance.com>\nCc: Hugh Dickins <hughd@google.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "author_name": "Pasha Tatashin",
  "author_email": "pasha.tatashin@soleen.com",
  "author_date": "Fri Jan 14 14:06:29 2022 -0800",
  "author_date_iso": "2022-01-14T14:06:29-08:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Sat Jan 15 16:30:28 2022 +0200",
  "committer_date_iso": "2022-01-15T16:30:28+02:00",
  "files_changed": [
    "mm/hugetlb.c",
    "mm/memory.c",
    "mm/migrate.c",
    "mm/swapfile.c"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "mm/hugetlb.c",
      "insertions": 3,
      "deletions": 3
    },
    {
      "file": "mm/memory.c",
      "insertions": 5,
      "deletions": 4
    },
    {
      "file": "mm/migrate.c",
      "insertions": 2,
      "deletions": 3
    },
    {
      "file": "mm/swapfile.c",
      "insertions": 2,
      "deletions": 2
    }
  ],
  "total_insertions": 12,
  "total_deletions": 12,
  "total_changes": 24,
  "parents": [
    "4b8fec2867c85e081c1c9f800e0ec82eff71134f"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "mm/hugetlb.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/memory.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/migrate.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/swapfile.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}