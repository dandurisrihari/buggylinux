{
  "hash": "1662cea4623f75d8251adf07370bbaa958f0355d",
  "hash_short": "1662cea4",
  "subject": "kset: fix memory leak when kset_register() returns error",
  "body": "Inject fault while loading module, kset_register() may fail.\nIf it fails, the kset.kobj.name allocated by kobject_set_name()\nwhich must be called before a call to kset_register() may be\nleaked, since refcount of kobj was set in kset_init().\n\nTo mitigate this, we free the name in kset_register() when an\nerror is encountered, i.e. when kset_register() returns an error.\n\nA kset may be embedded in a larger structure which may be dynamically\nallocated in callers, it needs to be freed in ktype.release() or error\npath in callers, in this case, we can not call kset_put() in kset_register(),\nor it will cause double free, so just call kfree_const() to free the\nname and set it to NULL to avoid accessing bad pointer in callers.\n\nWith this fix, the callers don't need care about freeing the name\nand may call kset_put() if kset_register() fails.\n\nSuggested-by: Luben Tuikov <luben.tuikov@amd.com>\nSigned-off-by: Yang Yingliang <yangyingliang@huawei.com>\nReviewed-by: <luben.tuikov@amd.com>\nLink: https://lore.kernel.org/r/20221025071549.1280528-1-yangyingliang@huawei.com\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
  "full_message": "kset: fix memory leak when kset_register() returns error\n\nInject fault while loading module, kset_register() may fail.\nIf it fails, the kset.kobj.name allocated by kobject_set_name()\nwhich must be called before a call to kset_register() may be\nleaked, since refcount of kobj was set in kset_init().\n\nTo mitigate this, we free the name in kset_register() when an\nerror is encountered, i.e. when kset_register() returns an error.\n\nA kset may be embedded in a larger structure which may be dynamically\nallocated in callers, it needs to be freed in ktype.release() or error\npath in callers, in this case, we can not call kset_put() in kset_register(),\nor it will cause double free, so just call kfree_const() to free the\nname and set it to NULL to avoid accessing bad pointer in callers.\n\nWith this fix, the callers don't need care about freeing the name\nand may call kset_put() if kset_register() fails.\n\nSuggested-by: Luben Tuikov <luben.tuikov@amd.com>\nSigned-off-by: Yang Yingliang <yangyingliang@huawei.com>\nReviewed-by: <luben.tuikov@amd.com>\nLink: https://lore.kernel.org/r/20221025071549.1280528-1-yangyingliang@huawei.com\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>",
  "author_name": "Yang Yingliang",
  "author_email": "yangyingliang@huawei.com",
  "author_date": "Tue Oct 25 15:15:49 2022 +0800",
  "author_date_iso": "2022-10-25T15:15:49+08:00",
  "committer_name": "Greg Kroah-Hartman",
  "committer_email": "gregkh@linuxfoundation.org",
  "committer_date": "Tue Oct 25 18:57:09 2022 +0200",
  "committer_date_iso": "2022-10-25T18:57:09+02:00",
  "files_changed": [
    "lib/kobject.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "lib/kobject.c",
      "insertions": 8,
      "deletions": 1
    }
  ],
  "total_insertions": 8,
  "total_deletions": 1,
  "total_changes": 9,
  "parents": [
    "7376e561fd2e017e9a53f975209777234b8b434e"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "Inject"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "lib/kobject.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}