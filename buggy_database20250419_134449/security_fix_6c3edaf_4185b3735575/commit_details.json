{
  "hash": "6c3edaf9fd6a3be7fb5bc6931897c24cd3848f84",
  "hash_short": "6c3edaf9",
  "subject": "tracing: Introduce trace event injection",
  "body": "We have been trying to use rasdaemon to monitor hardware errors like\ncorrectable memory errors. rasdaemon uses trace events to monitor\nvarious hardware errors. In order to test it, we have to inject some\nhardware errors, unfortunately not all of them provide error\ninjections. MCE does provide a way to inject MCE errors, but errors\nlike PCI error and devlink error don't, it is not easy to add error\ninjection to each of them. Instead, it is relatively easier to just\nallow users to inject trace events in a generic way so that all trace\nevents can be injected.\n\nThis patch introduces trace event injection, where a new 'inject' is\nadded to each tracepoint directory. Users could write into this file\nwith key=value pairs to specify the value of each fields of the trace\nevent, all unspecified fields are set to zero values by default.\n\nFor example, for the net/net_dev_queue tracepoint, we can inject:\n\n  INJECT=/sys/kernel/debug/tracing/events/net/net_dev_queue/inject\n  echo \"\" > $INJECT\n  echo \"name='test'\" > $INJECT\n  echo \"name='test' len=1024\" > $INJECT\n  cat /sys/kernel/debug/tracing/trace\n  ...\n   <...>-614   [000] ....    36.571483: net_dev_queue: dev= skbaddr=00000000fbf338c2 len=0\n   <...>-614   [001] ....   136.588252: net_dev_queue: dev=test skbaddr=00000000fbf338c2 len=0\n   <...>-614   [001] .N..   208.431878: net_dev_queue: dev=test skbaddr=00000000fbf338c2 len=1024\n\nTriggers could be triggered as usual too:\n\n  echo \"stacktrace if len == 1025\" > /sys/kernel/debug/tracing/events/net/net_dev_queue/trigger\n  echo \"len=1025\" > $INJECT\n  cat /sys/kernel/debug/tracing/trace\n  ...\n      bash-614   [000] ....    36.571483: net_dev_queue: dev= skbaddr=00000000fbf338c2 len=0\n      bash-614   [001] ....   136.588252: net_dev_queue: dev=test skbaddr=00000000fbf338c2 len=0\n      bash-614   [001] .N..   208.431878: net_dev_queue: dev=test skbaddr=00000000fbf338c2 len=1024\n      bash-614   [001] .N.1   284.236349: <stack trace>\n => event_inject_write\n => vfs_write\n => ksys_write\n => do_syscall_64\n => entry_SYSCALL_64_after_hwframe\n\nThe only thing that can't be injected is string pointers as they\nrequire constant string pointers, this can't be done at run time.\n\nLink: http://lkml.kernel.org/r/20191130045218.18979-1-xiyou.wangcong@gmail.com\n\nCc: Ingo Molnar <mingo@redhat.com>\nSigned-off-by: Cong Wang <xiyou.wangcong@gmail.com>\nSigned-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>",
  "full_message": "tracing: Introduce trace event injection\n\nWe have been trying to use rasdaemon to monitor hardware errors like\ncorrectable memory errors. rasdaemon uses trace events to monitor\nvarious hardware errors. In order to test it, we have to inject some\nhardware errors, unfortunately not all of them provide error\ninjections. MCE does provide a way to inject MCE errors, but errors\nlike PCI error and devlink error don't, it is not easy to add error\ninjection to each of them. Instead, it is relatively easier to just\nallow users to inject trace events in a generic way so that all trace\nevents can be injected.\n\nThis patch introduces trace event injection, where a new 'inject' is\nadded to each tracepoint directory. Users could write into this file\nwith key=value pairs to specify the value of each fields of the trace\nevent, all unspecified fields are set to zero values by default.\n\nFor example, for the net/net_dev_queue tracepoint, we can inject:\n\n  INJECT=/sys/kernel/debug/tracing/events/net/net_dev_queue/inject\n  echo \"\" > $INJECT\n  echo \"name='test'\" > $INJECT\n  echo \"name='test' len=1024\" > $INJECT\n  cat /sys/kernel/debug/tracing/trace\n  ...\n   <...>-614   [000] ....    36.571483: net_dev_queue: dev= skbaddr=00000000fbf338c2 len=0\n   <...>-614   [001] ....   136.588252: net_dev_queue: dev=test skbaddr=00000000fbf338c2 len=0\n   <...>-614   [001] .N..   208.431878: net_dev_queue: dev=test skbaddr=00000000fbf338c2 len=1024\n\nTriggers could be triggered as usual too:\n\n  echo \"stacktrace if len == 1025\" > /sys/kernel/debug/tracing/events/net/net_dev_queue/trigger\n  echo \"len=1025\" > $INJECT\n  cat /sys/kernel/debug/tracing/trace\n  ...\n      bash-614   [000] ....    36.571483: net_dev_queue: dev= skbaddr=00000000fbf338c2 len=0\n      bash-614   [001] ....   136.588252: net_dev_queue: dev=test skbaddr=00000000fbf338c2 len=0\n      bash-614   [001] .N..   208.431878: net_dev_queue: dev=test skbaddr=00000000fbf338c2 len=1024\n      bash-614   [001] .N.1   284.236349: <stack trace>\n => event_inject_write\n => vfs_write\n => ksys_write\n => do_syscall_64\n => entry_SYSCALL_64_after_hwframe\n\nThe only thing that can't be injected is string pointers as they\nrequire constant string pointers, this can't be done at run time.\n\nLink: http://lkml.kernel.org/r/20191130045218.18979-1-xiyou.wangcong@gmail.com\n\nCc: Ingo Molnar <mingo@redhat.com>\nSigned-off-by: Cong Wang <xiyou.wangcong@gmail.com>\nSigned-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>",
  "author_name": "Cong Wang",
  "author_email": "xiyou.wangcong@gmail.com",
  "author_date": "Fri Nov 29 20:52:18 2019 -0800",
  "author_date_iso": "2019-11-29T20:52:18-08:00",
  "committer_name": "Steven Rostedt (VMware)",
  "committer_email": "rostedt@goodmis.org",
  "committer_date": "Mon Dec 2 11:07:00 2019 -0500",
  "committer_date_iso": "2019-12-02T11:07:00-05:00",
  "files_changed": [
    "kernel/trace/Kconfig",
    "kernel/trace/Makefile",
    "kernel/trace/trace.h",
    "kernel/trace/trace_events.c",
    "kernel/trace/trace_events_inject.c"
  ],
  "files_changed_count": 5,
  "stats": [
    {
      "file": "kernel/trace/Kconfig",
      "insertions": 9,
      "deletions": 0
    },
    {
      "file": "kernel/trace/Makefile",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "kernel/trace/trace.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "kernel/trace/trace_events.c",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "kernel/trace/trace_events_inject.c",
      "insertions": 331,
      "deletions": 0
    }
  ],
  "total_insertions": 348,
  "total_deletions": 0,
  "total_changes": 348,
  "parents": [
    "02a65a0bfbef5c644f520885a0a85b45b9703cf3"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.5",
    "v5.5-rc1",
    "v5.5-rc2",
    "v5.5-rc3",
    "v5.5-rc4",
    "v5.5-rc5",
    "v5.5-rc6",
    "v5.5-rc7",
    "v5.6",
    "v5.6-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "kernel/trace/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/trace/Makefile",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/trace/trace.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/trace/trace_events.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/trace/trace_events_inject.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}