{
  "hash": "10496f261ed30592c6a7f8315f6b5ec055db624a",
  "hash_short": "10496f26",
  "subject": "Merge branch 'bpf-sleepable'",
  "body": "Alexei Starovoitov says:\n\n====================\nv2->v3:\n- switched to minimal allowlist approach. Essentially that means that syscall\n  entry, few btrfs allow_error_inject functions, should_fail_bio(), and two LSM\n  hooks: file_mprotect and bprm_committed_creds are the only hooks that allow\n  attaching of sleepable BPF programs. When comprehensive analysis of LSM hooks\n  will be done this allowlist will be extended.\n- added patch 1 that fixes prototypes of two mm functions to reliably work with\n  error injection. It's also necessary for resolve_btfids tool to recognize\n  these two funcs, but that's secondary.\n\nv1->v2:\n- split fmod_ret fix into separate patch\n- added denylist\n\nv1:\nThis patch set introduces the minimal viable support for sleepable bpf programs.\nIn this patch only fentry/fexit/fmod_ret and lsm progs can be sleepable.\nOnly array and pre-allocated hash and lru maps allowed.\n\nHere is 'perf report' difference of sleepable vs non-sleepable:\n   3.86%  bench     [k] __srcu_read_unlock\n   3.22%  bench     [k] __srcu_read_lock\n   0.92%  bench     [k] bpf_prog_740d4210cdcd99a3_bench_trigger_fentry_sleep\n   0.50%  bench     [k] bpf_trampoline_10297\n   0.26%  bench     [k] __bpf_prog_exit_sleepable\n   0.21%  bench     [k] __bpf_prog_enter_sleepable\nvs\n   0.88%  bench     [k] bpf_prog_740d4210cdcd99a3_bench_trigger_fentry\n   0.84%  bench     [k] bpf_trampoline_10297\n   0.13%  bench     [k] __bpf_prog_enter\n   0.12%  bench     [k] __bpf_prog_exit\nvs\n   0.79%  bench     [k] bpf_prog_740d4210cdcd99a3_bench_trigger_fentry_sleep\n   0.72%  bench     [k] bpf_trampoline_10381\n   0.31%  bench     [k] __bpf_prog_exit_sleepable\n   0.29%  bench     [k] __bpf_prog_enter_sleepable\n\nSleepable vs non-sleepable program invocation overhead is only marginally higher\ndue to rcu_trace. srcu approach is much slower.\n====================\n\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>",
  "full_message": "Merge branch 'bpf-sleepable'\n\nAlexei Starovoitov says:\n\n====================\nv2->v3:\n- switched to minimal allowlist approach. Essentially that means that syscall\n  entry, few btrfs allow_error_inject functions, should_fail_bio(), and two LSM\n  hooks: file_mprotect and bprm_committed_creds are the only hooks that allow\n  attaching of sleepable BPF programs. When comprehensive analysis of LSM hooks\n  will be done this allowlist will be extended.\n- added patch 1 that fixes prototypes of two mm functions to reliably work with\n  error injection. It's also necessary for resolve_btfids tool to recognize\n  these two funcs, but that's secondary.\n\nv1->v2:\n- split fmod_ret fix into separate patch\n- added denylist\n\nv1:\nThis patch set introduces the minimal viable support for sleepable bpf programs.\nIn this patch only fentry/fexit/fmod_ret and lsm progs can be sleepable.\nOnly array and pre-allocated hash and lru maps allowed.\n\nHere is 'perf report' difference of sleepable vs non-sleepable:\n   3.86%  bench     [k] __srcu_read_unlock\n   3.22%  bench     [k] __srcu_read_lock\n   0.92%  bench     [k] bpf_prog_740d4210cdcd99a3_bench_trigger_fentry_sleep\n   0.50%  bench     [k] bpf_trampoline_10297\n   0.26%  bench     [k] __bpf_prog_exit_sleepable\n   0.21%  bench     [k] __bpf_prog_enter_sleepable\nvs\n   0.88%  bench     [k] bpf_prog_740d4210cdcd99a3_bench_trigger_fentry\n   0.84%  bench     [k] bpf_trampoline_10297\n   0.13%  bench     [k] __bpf_prog_enter\n   0.12%  bench     [k] __bpf_prog_exit\nvs\n   0.79%  bench     [k] bpf_prog_740d4210cdcd99a3_bench_trigger_fentry_sleep\n   0.72%  bench     [k] bpf_trampoline_10381\n   0.31%  bench     [k] __bpf_prog_exit_sleepable\n   0.29%  bench     [k] __bpf_prog_enter_sleepable\n\nSleepable vs non-sleepable program invocation overhead is only marginally higher\ndue to rcu_trace. srcu approach is much slower.\n====================\n\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>",
  "author_name": "Daniel Borkmann",
  "author_email": "daniel@iogearbox.net",
  "author_date": "Fri Aug 28 21:20:33 2020 +0200",
  "author_date_iso": "2020-08-28T21:20:33+02:00",
  "committer_name": "Daniel Borkmann",
  "committer_email": "daniel@iogearbox.net",
  "committer_date": "Fri Aug 28 21:20:38 2020 +0200",
  "committer_date_iso": "2020-08-28T21:20:38+02:00",
  "files_changed": [],
  "files_changed_count": 0,
  "stats": [
    {
      "file": "arch/x86/net/bpf_jit_comp.c",
      "insertions": 21,
      "deletions": 11
    },
    {
      "file": "include/linux/bpf.h",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "include/uapi/linux/bpf.h",
      "insertions": 16,
      "deletions": 0
    },
    {
      "file": "init/Kconfig",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "kernel/bpf/arraymap.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "kernel/bpf/hashtab.c",
      "insertions": 6,
      "deletions": 6
    },
    {
      "file": "kernel/bpf/helpers.c",
      "insertions": 22,
      "deletions": 0
    },
    {
      "file": "kernel/bpf/syscall.c",
      "insertions": 10,
      "deletions": 3
    },
    {
      "file": "kernel/bpf/trampoline.c",
      "insertions": 25,
      "deletions": 3
    },
    {
      "file": "kernel/bpf/verifier.c",
      "insertions": 79,
      "deletions": 2
    },
    {
      "file": "kernel/trace/bpf_trace.c",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "mm/filemap.c",
      "insertions": 4,
      "deletions": 4
    },
    {
      "file": "mm/page_alloc.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "tools/include/uapi/linux/bpf.h",
      "insertions": 16,
      "deletions": 0
    },
    {
      "file": "tools/lib/bpf/libbpf.c",
      "insertions": 24,
      "deletions": 1
    },
    {
      "file": "tools/testing/selftests/bpf/bench.c",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/benchs/bench_trigger.c",
      "insertions": 17,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/prog_tests/test_lsm.c",
      "insertions": 9,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/progs/lsm.c",
      "insertions": 64,
      "deletions": 2
    },
    {
      "file": "tools/testing/selftests/bpf/progs/trigger_bench.c",
      "insertions": 7,
      "deletions": 0
    }
  ],
  "total_insertions": 331,
  "total_deletions": 33,
  "total_changes": 364,
  "parents": [
    "d557ea39a5f894630c403b78703ac92b08b7dd62",
    "e68a144547fc7a956952260539cb7b8bb9afbcc0"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": []
}