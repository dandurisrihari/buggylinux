commit 0ec8ce07394442d722806fe61b901a5b2b17249d
Author: Fenghua Yu <fenghua.yu@intel.com>
Date:   Fri Oct 14 15:25:41 2022 -0700

    dmaengine: idxd: Do not enable user type Work Queue without Shared Virtual Addressing
    
    When the idxd_user_drv driver is bound to a Work Queue (WQ) device
    without IOMMU or with IOMMU Passthrough without Shared Virtual
    Addressing (SVA), the application gains direct access to physical
    memory via the device by programming physical address to a submitted
    descriptor. This allows direct userspace read and write access to
    arbitrary physical memory. This is inconsistent with the security
    goals of a good kernel API.
    
    Unlike vfio_pci driver, the IDXD char device driver does not provide any
    ways to pin user pages and translate the address from user VA to IOVA or
    PA without IOMMU SVA. Therefore the application has no way to instruct the
    device to perform DMA function. This makes the char device not usable for
    normal application usage.
    
    Since user type WQ without SVA cannot be used for normal application usage
    and presents the security issue, bind idxd_user_drv driver and enable user
    type WQ only when SVA is enabled (i.e. user PASID is enabled).
    
    Fixes: 448c3de8ac83 ("dmaengine: idxd: create user driver for wq 'device'")
    Cc: stable@vger.kernel.org
    Suggested-by: Arjan Van De Ven <arjan.van.de.ven@intel.com>
    Signed-off-by: Fenghua Yu <fenghua.yu@intel.com>
    Reviewed-by: Dave Jiang <dave.jiang@intel.com>
    Reviewed-by: Jerry Snitselaar <jsnitsel@redhat.com>
    Link: https://lore.kernel.org/r/20221014222541.3912195-1-fenghua.yu@intel.com
    Signed-off-by: Vinod Koul <vkoul@kernel.org>

diff --git a/include/uapi/linux/idxd.h b/include/uapi/linux/idxd.h
index 095299c75828..2b9e7feba3f3 100644
--- a/include/uapi/linux/idxd.h
+++ b/include/uapi/linux/idxd.h
@@ -29,6 +29,7 @@ enum idxd_scmd_stat {
 	IDXD_SCMD_WQ_NO_SIZE = 0x800e0000,
 	IDXD_SCMD_WQ_NO_PRIV = 0x800f0000,
 	IDXD_SCMD_WQ_IRQ_ERR = 0x80100000,
+	IDXD_SCMD_WQ_USER_NO_IOMMU = 0x80110000,
 };
 
 #define IDXD_SCMD_SOFTERR_MASK	0x80000000