commit 2b06a9e336170d7e3c807c21d5cd85cbc92fff4e
Author: David Windsor <dave@nullcore.net>
Date:   Sat Jun 10 22:50:34 2017 -0400

    exofs: Define usercopy region in exofs_inode_cache slab cache
    
    The exofs short symlink names, stored in struct exofs_i_info.i_data and
    therefore contained in the exofs_inode_cache slab cache, need to be copied
    to/from userspace.
    
    cache object allocation:
        fs/exofs/super.c:
            exofs_alloc_inode(...):
                ...
                oi = kmem_cache_alloc(exofs_inode_cachep, GFP_KERNEL);
                ...
                return &oi->vfs_inode;
    
        fs/exofs/namei.c:
            exofs_symlink(...):
                ...
                inode->i_link = (char *)oi->i_data;
    
    example usage trace:
        readlink_copy+0x43/0x70
        vfs_readlink+0x62/0x110
        SyS_readlinkat+0x100/0x130
    
        fs/namei.c:
            readlink_copy(..., link):
                ...
                copy_to_user(..., link, len);
    
            (inlined in vfs_readlink)
            generic_readlink(dentry, ...):
                struct inode *inode = d_inode(dentry);
                const char *link = inode->i_link;
                ...
                readlink_copy(..., link);
    
    In support of usercopy hardening, this patch defines a region in the
    exofs_inode_cache slab cache in which userspace copy operations are
    allowed.
    
    This region is known as the slab cache's usercopy region. Slab caches
    can now check that each dynamically sized copy operation involving
    cache-managed memory falls entirely within the slab's usercopy region.
    
    This patch is modified from Brad Spengler/PaX Team's PAX_USERCOPY
    whitelisting code in the last public patch of grsecurity/PaX based on my
    understanding of the code. Changes or omissions from the original code are
    mine and don't reflect the original grsecurity/PaX code.
    
    Signed-off-by: David Windsor <dave@nullcore.net>
    [kees: adjust commit log, provide usage trace]
    Cc: Boaz Harrosh <ooo@electrozaur.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>

diff --git a/fs/exofs/super.c b/fs/exofs/super.c
index 819624cfc8da..e5c532875bb7 100644
--- a/fs/exofs/super.c
+++ b/fs/exofs/super.c
@@ -192,10 +192,13 @@ static void exofs_init_once(void *foo)
  */
 static int init_inodecache(void)
 {
-	exofs_inode_cachep = kmem_cache_create("exofs_inode_cache",
+	exofs_inode_cachep = kmem_cache_create_usercopy("exofs_inode_cache",
 				sizeof(struct exofs_i_info), 0,
 				SLAB_RECLAIM_ACCOUNT | SLAB_MEM_SPREAD |
-				SLAB_ACCOUNT, exofs_init_once);
+				SLAB_ACCOUNT,
+				offsetof(struct exofs_i_info, i_data),
+				sizeof_field(struct exofs_i_info, i_data),
+				exofs_init_once);
 	if (exofs_inode_cachep == NULL)
 		return -ENOMEM;
 	return 0;