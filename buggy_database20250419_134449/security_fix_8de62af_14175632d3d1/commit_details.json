{
  "hash": "8de62af018cc9262649d7688f7eb1409b2d8f594",
  "hash_short": "8de62af0",
  "subject": "x86/tdx: Disable NOTIFY_ENABLES",
  "body": "== Background ==\n\nThere is a class of side-channel attacks against SGX enclaves called\n\"SGX Step\"[1]. These attacks create lots of exceptions inside of\nenclaves. Basically, run an in-enclave instruction, cause an exception.\nOver and over.\n\nThere is a concern that a VMM could attack a TDX guest in the same way\nby causing lots of #VE's. The TDX architecture includes new\ncountermeasures for these attacks. It basically counts the number of\nexceptions and can send another *special* exception once the number of\nVMM-induced #VE's hits a critical threshold[2].\n\n== Problem ==\n\nBut, these special exceptions are independent of any action that the\nguest takes. They can occur anywhere that the guest executes. This\nincludes sensitive areas like the entry code. The (non-paranoid) #VE\nhandler is incapable of handling exceptions in these areas.\n\n== Solution ==\n\nFortunately, the special exceptions can be disabled by the guest via\nwrite to NOTIFY_ENABLES TDCS field. NOTIFY_ENABLES is disabled by\ndefault, but might be enabled by a bootloader, firmware or an earlier\nkernel before the current kernel runs.\n\nDisable NOTIFY_ENABLES feature explicitly and unconditionally. Any\nNOTIFY_ENABLES-based #VE's that occur before this point will end up\nin the early #VE exception handler and die due to unexpected exit\nreason.\n\n[1] https://github.com/jovanbulck/sgx-step\n[2] https://intel.github.io/ccc-linux-guest-hardening-docs/security-spec.html#safety-against-ve-in-kernel-code\n\nSigned-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>\nSigned-off-by: Dave Hansen <dave.hansen@linux.intel.com>\nReviewed-by: Dave Hansen <dave.hansen@intel.com>\nLink: https://lore.kernel.org/all/20230126221159.8635-8-kirill.shutemov%40linux.intel.com",
  "full_message": "x86/tdx: Disable NOTIFY_ENABLES\n\n== Background ==\n\nThere is a class of side-channel attacks against SGX enclaves called\n\"SGX Step\"[1]. These attacks create lots of exceptions inside of\nenclaves. Basically, run an in-enclave instruction, cause an exception.\nOver and over.\n\nThere is a concern that a VMM could attack a TDX guest in the same way\nby causing lots of #VE's. The TDX architecture includes new\ncountermeasures for these attacks. It basically counts the number of\nexceptions and can send another *special* exception once the number of\nVMM-induced #VE's hits a critical threshold[2].\n\n== Problem ==\n\nBut, these special exceptions are independent of any action that the\nguest takes. They can occur anywhere that the guest executes. This\nincludes sensitive areas like the entry code. The (non-paranoid) #VE\nhandler is incapable of handling exceptions in these areas.\n\n== Solution ==\n\nFortunately, the special exceptions can be disabled by the guest via\nwrite to NOTIFY_ENABLES TDCS field. NOTIFY_ENABLES is disabled by\ndefault, but might be enabled by a bootloader, firmware or an earlier\nkernel before the current kernel runs.\n\nDisable NOTIFY_ENABLES feature explicitly and unconditionally. Any\nNOTIFY_ENABLES-based #VE's that occur before this point will end up\nin the early #VE exception handler and die due to unexpected exit\nreason.\n\n[1] https://github.com/jovanbulck/sgx-step\n[2] https://intel.github.io/ccc-linux-guest-hardening-docs/security-spec.html#safety-against-ve-in-kernel-code\n\nSigned-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>\nSigned-off-by: Dave Hansen <dave.hansen@linux.intel.com>\nReviewed-by: Dave Hansen <dave.hansen@intel.com>\nLink: https://lore.kernel.org/all/20230126221159.8635-8-kirill.shutemov%40linux.intel.com",
  "author_name": "Kirill A. Shutemov",
  "author_email": "kirill.shutemov@linux.intel.com",
  "author_date": "Fri Jan 27 01:11:59 2023 +0300",
  "author_date_iso": "2023-01-27T01:11:59+03:00",
  "committer_name": "Dave Hansen",
  "committer_email": "dave.hansen@linux.intel.com",
  "committer_date": "Fri Jan 27 09:46:05 2023 -0800",
  "committer_date_iso": "2023-01-27T09:46:05-08:00",
  "files_changed": [
    "arch/x86/coco/tdx/tdx.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/x86/coco/tdx/tdx.c",
      "insertions": 7,
      "deletions": 0
    }
  ],
  "total_insertions": 7,
  "total_deletions": 0,
  "total_changes": 7,
  "parents": [
    "47e67cf317ed6ad22a3df9762daae75dfcba76a8"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/coco/tdx/tdx.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}