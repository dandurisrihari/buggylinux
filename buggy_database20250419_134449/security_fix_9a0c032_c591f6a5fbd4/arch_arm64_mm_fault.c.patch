commit 9a0c032825e073e002ee80cf2577431d7296a7f7
Author: Julien Thierry <julien.thierry.kdev@gmail.com>
Date:   Tue Aug 28 16:51:15 2018 +0100

    arm64: Use daifflag_restore after bp_hardening
    
    For EL0 entries requiring bp_hardening, daif status is kept at
    DAIF_PROCCTX_NOIRQ until after hardening has been done. Then interrupts
    are enabled through local_irq_enable().
    
    Before using local_irq_* functions, daifflags should be properly restored
    to a state where IRQs are enabled.
    
    Enable IRQs by restoring DAIF_PROCCTX state after bp hardening.
    
    Acked-by: James Morse <james.morse@arm.com>
    Signed-off-by: Julien Thierry <julien.thierry@arm.com>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: Mark Rutland <mark.rutland@arm.com>
    Signed-off-by: Catalin Marinas <catalin.marinas@arm.com>

diff --git a/arch/arm64/mm/fault.c b/arch/arm64/mm/fault.c
index 1aa487a37a0a..d0e638ef3af6 100644
--- a/arch/arm64/mm/fault.c
+++ b/arch/arm64/mm/fault.c
@@ -37,6 +37,7 @@
 #include <asm/cmpxchg.h>
 #include <asm/cpufeature.h>
 #include <asm/exception.h>
+#include <asm/daifflags.h>
 #include <asm/debug-monitors.h>
 #include <asm/esr.h>
 #include <asm/sysreg.h>
@@ -776,7 +777,7 @@ asmlinkage void __exception do_el0_ia_bp_hardening(unsigned long addr,
 	if (addr > TASK_SIZE)
 		arm64_apply_bp_hardening();
 
-	local_irq_enable();
+	local_daif_restore(DAIF_PROCCTX);
 	do_mem_abort(addr, esr, regs);
 }
 
@@ -790,7 +791,7 @@ asmlinkage void __exception do_sp_pc_abort(unsigned long addr,
 	if (user_mode(regs)) {
 		if (instruction_pointer(regs) > TASK_SIZE)
 			arm64_apply_bp_hardening();
-		local_irq_enable();
+		local_daif_restore(DAIF_PROCCTX);
 	}
 
 	clear_siginfo(&info);