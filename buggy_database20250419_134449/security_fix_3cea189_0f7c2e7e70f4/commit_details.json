{
  "hash": "3cea1891748e0ed8e79fa5d9afe40750319751d1",
  "hash_short": "3cea1891",
  "subject": "selftests: kvm: Test MSR exiting to userspace",
  "body": "Add a selftest to test that when the ioctl KVM_X86_SET_MSR_FILTER is\ncalled with an MSR list, those MSRs exit to userspace.\n\nThis test uses 3 MSRs to test this:\n  1. MSR_IA32_XSS, an MSR the kernel knows about.\n  2. MSR_IA32_FLUSH_CMD, an MSR the kernel does not know about.\n  3. MSR_NON_EXISTENT, an MSR invented in this test for the purposes of\n     passing a fake MSR from the guest to userspace.  KVM just acts as a\n     pass through.\n\nUserspace is also able to inject a #GP.  This is demonstrated when\nMSR_IA32_XSS and MSR_IA32_FLUSH_CMD are misused in the test.  When this\nhappens a #GP is initiated in userspace to be thrown in the guest which is\nhandled gracefully by the exception handling framework introduced earlier\nin this series.\n\nTests for the generic instruction emulator were also added.  For this to\nwork the module parameter kvm.force_emulation_prefix=1 has to be enabled.\nIf it isn't enabled the tests will be skipped.\n\nA test was also added to ensure the MSR permission bitmap is being set\ncorrectly by executing reads and writes of MSR_FS_BASE and MSR_GS_BASE\nin the guest while alternating which MSR userspace should intercept.  If\nthe permission bitmap is being set correctly only one of the MSRs should\nbe coming through at a time, and the guest should be able to read and\nwrite the other one directly.\n\nSigned-off-by: Aaron Lewis <aaronlewis@google.com>\nReviewed-by: Alexander Graf <graf@amazon.com>\nMessage-Id: <20201012194716.3950330-5-aaronlewis@google.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
  "full_message": "selftests: kvm: Test MSR exiting to userspace\n\nAdd a selftest to test that when the ioctl KVM_X86_SET_MSR_FILTER is\ncalled with an MSR list, those MSRs exit to userspace.\n\nThis test uses 3 MSRs to test this:\n  1. MSR_IA32_XSS, an MSR the kernel knows about.\n  2. MSR_IA32_FLUSH_CMD, an MSR the kernel does not know about.\n  3. MSR_NON_EXISTENT, an MSR invented in this test for the purposes of\n     passing a fake MSR from the guest to userspace.  KVM just acts as a\n     pass through.\n\nUserspace is also able to inject a #GP.  This is demonstrated when\nMSR_IA32_XSS and MSR_IA32_FLUSH_CMD are misused in the test.  When this\nhappens a #GP is initiated in userspace to be thrown in the guest which is\nhandled gracefully by the exception handling framework introduced earlier\nin this series.\n\nTests for the generic instruction emulator were also added.  For this to\nwork the module parameter kvm.force_emulation_prefix=1 has to be enabled.\nIf it isn't enabled the tests will be skipped.\n\nA test was also added to ensure the MSR permission bitmap is being set\ncorrectly by executing reads and writes of MSR_FS_BASE and MSR_GS_BASE\nin the guest while alternating which MSR userspace should intercept.  If\nthe permission bitmap is being set correctly only one of the MSRs should\nbe coming through at a time, and the guest should be able to read and\nwrite the other one directly.\n\nSigned-off-by: Aaron Lewis <aaronlewis@google.com>\nReviewed-by: Alexander Graf <graf@amazon.com>\nMessage-Id: <20201012194716.3950330-5-aaronlewis@google.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
  "author_name": "Aaron Lewis",
  "author_email": "aaronlewis@google.com",
  "author_date": "Mon Oct 12 12:47:16 2020 -0700",
  "author_date_iso": "2020-10-12T12:47:16-07:00",
  "committer_name": "Paolo Bonzini",
  "committer_email": "pbonzini@redhat.com",
  "committer_date": "Fri Dec 11 19:00:57 2020 -0500",
  "committer_date_iso": "2020-12-11T19:00:57-05:00",
  "files_changed": [
    "tools/testing/selftests/kvm/.gitignore",
    "tools/testing/selftests/kvm/Makefile",
    "tools/testing/selftests/kvm/lib/kvm_util.c",
    "tools/testing/selftests/kvm/x86_64/userspace_msr_exit_test.c"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "tools/testing/selftests/kvm/.gitignore",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/kvm/Makefile",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "tools/testing/selftests/kvm/lib/kvm_util.c",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/kvm/x86_64/userspace_msr_exit_test.c",
      "insertions": 560,
      "deletions": 0
    }
  ],
  "total_insertions": 565,
  "total_deletions": 1,
  "total_changes": 566,
  "parents": [
    "6c44221b05236cc65d76cb5dc2463f738edff39d"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "inject"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "tools/testing/selftests/kvm/.gitignore",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "tools/testing/selftests/kvm/Makefile",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "tools/testing/selftests/kvm/lib/kvm_util.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "tools/testing/selftests/kvm/x86_64/userspace_msr_exit_test.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}