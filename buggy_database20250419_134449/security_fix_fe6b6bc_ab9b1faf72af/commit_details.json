{
  "hash": "fe6b6bc802b40081e8a7a1abe8d32b88d10a03e1",
  "hash_short": "fe6b6bc8",
  "subject": "KVM: VMX: Enable bus lock VM exit",
  "body": "Virtual Machine can exploit bus locks to degrade the performance of\nsystem. Bus lock can be caused by split locked access to writeback(WB)\nmemory or by using locks on uncacheable(UC) memory. The bus lock is\ntypically >1000 cycles slower than an atomic operation within a cache\nline. It also disrupts performance on other cores (which must wait for\nthe bus lock to be released before their memory operations can\ncomplete).\n\nTo address the threat, bus lock VM exit is introduced to notify the VMM\nwhen a bus lock was acquired, allowing it to enforce throttling or other\npolicy based mitigations.\n\nA VMM can enable VM exit due to bus locks by setting a new \"Bus Lock\nDetection\" VM-execution control(bit 30 of Secondary Processor-based VM\nexecution controls). If delivery of this VM exit was preempted by a\nhigher priority VM exit (e.g. EPT misconfiguration, EPT violation, APIC\naccess VM exit, APIC write VM exit, exception bitmap exiting), bit 26 of\nexit reason in vmcs field is set to 1.\n\nIn current implementation, the KVM exposes this capability through\nKVM_CAP_X86_BUS_LOCK_EXIT. The user can get the supported mode bitmap\n(i.e. off and exit) and enable it explicitly (disabled by default). If\nbus locks in guest are detected by KVM, exit to user space even when\ncurrent exit reason is handled by KVM internally. Set a new field\nKVM_RUN_BUS_LOCK in vcpu->run->flags to inform the user space that there\nis a bus lock detected in guest.\n\nDocument for Bus Lock VM exit is now available at the latest \"Intel\nArchitecture Instruction Set Extensions Programming Reference\".\n\nDocument Link:\nhttps://software.intel.com/content/www/us/en/develop/download/intel-architecture-instruction-set-extensions-programming-reference.html\n\nCo-developed-by: Xiaoyao Li <xiaoyao.li@intel.com>\nSigned-off-by: Xiaoyao Li <xiaoyao.li@intel.com>\nSigned-off-by: Chenyi Qiang <chenyi.qiang@intel.com>\nMessage-Id: <20201106090315.18606-4-chenyi.qiang@intel.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
  "full_message": "KVM: VMX: Enable bus lock VM exit\n\nVirtual Machine can exploit bus locks to degrade the performance of\nsystem. Bus lock can be caused by split locked access to writeback(WB)\nmemory or by using locks on uncacheable(UC) memory. The bus lock is\ntypically >1000 cycles slower than an atomic operation within a cache\nline. It also disrupts performance on other cores (which must wait for\nthe bus lock to be released before their memory operations can\ncomplete).\n\nTo address the threat, bus lock VM exit is introduced to notify the VMM\nwhen a bus lock was acquired, allowing it to enforce throttling or other\npolicy based mitigations.\n\nA VMM can enable VM exit due to bus locks by setting a new \"Bus Lock\nDetection\" VM-execution control(bit 30 of Secondary Processor-based VM\nexecution controls). If delivery of this VM exit was preempted by a\nhigher priority VM exit (e.g. EPT misconfiguration, EPT violation, APIC\naccess VM exit, APIC write VM exit, exception bitmap exiting), bit 26 of\nexit reason in vmcs field is set to 1.\n\nIn current implementation, the KVM exposes this capability through\nKVM_CAP_X86_BUS_LOCK_EXIT. The user can get the supported mode bitmap\n(i.e. off and exit) and enable it explicitly (disabled by default). If\nbus locks in guest are detected by KVM, exit to user space even when\ncurrent exit reason is handled by KVM internally. Set a new field\nKVM_RUN_BUS_LOCK in vcpu->run->flags to inform the user space that there\nis a bus lock detected in guest.\n\nDocument for Bus Lock VM exit is now available at the latest \"Intel\nArchitecture Instruction Set Extensions Programming Reference\".\n\nDocument Link:\nhttps://software.intel.com/content/www/us/en/develop/download/intel-architecture-instruction-set-extensions-programming-reference.html\n\nCo-developed-by: Xiaoyao Li <xiaoyao.li@intel.com>\nSigned-off-by: Xiaoyao Li <xiaoyao.li@intel.com>\nSigned-off-by: Chenyi Qiang <chenyi.qiang@intel.com>\nMessage-Id: <20201106090315.18606-4-chenyi.qiang@intel.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
  "author_name": "Chenyi Qiang",
  "author_email": "chenyi.qiang@intel.com",
  "author_date": "Fri Nov 6 17:03:14 2020 +0800",
  "author_date_iso": "2020-11-06T17:03:14+08:00",
  "committer_name": "Paolo Bonzini",
  "committer_email": "pbonzini@redhat.com",
  "committer_date": "Thu Feb 4 05:27:21 2021 -0500",
  "committer_date_iso": "2021-02-04T05:27:21-05:00",
  "files_changed": [
    "arch/x86/include/asm/kvm_host.h",
    "arch/x86/include/asm/vmx.h",
    "arch/x86/include/asm/vmxfeatures.h",
    "arch/x86/include/uapi/asm/kvm.h",
    "arch/x86/include/uapi/asm/vmx.h",
    "arch/x86/kvm/vmx/capabilities.h",
    "arch/x86/kvm/vmx/vmx.c",
    "arch/x86/kvm/vmx/vmx.h",
    "arch/x86/kvm/x86.c",
    "include/uapi/linux/kvm.h"
  ],
  "files_changed_count": 10,
  "stats": [
    {
      "file": "arch/x86/include/asm/kvm_host.h",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/vmx.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/vmxfeatures.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/uapi/asm/kvm.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/uapi/asm/vmx.h",
      "insertions": 3,
      "deletions": 1
    },
    {
      "file": "arch/x86/kvm/vmx/capabilities.h",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "arch/x86/kvm/vmx/vmx.c",
      "insertions": 35,
      "deletions": 2
    },
    {
      "file": "arch/x86/kvm/vmx/vmx.h",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/x86/kvm/x86.c",
      "insertions": 23,
      "deletions": 0
    },
    {
      "file": "include/uapi/linux/kvm.h",
      "insertions": 5,
      "deletions": 0
    }
  ],
  "total_insertions": 83,
  "total_deletions": 4,
  "total_changes": 87,
  "parents": [
    "15aad3be9adb3fb7fba84190a2ce57d66e8b51da"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/include/uapi/asm/vmx.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/kvm_host.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/uapi/asm/kvm.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/vmxfeatures.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/vmx.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kvm/vmx/capabilities.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kvm/vmx/vmx.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/uapi/linux/kvm.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kvm/vmx/vmx.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kvm/x86.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}