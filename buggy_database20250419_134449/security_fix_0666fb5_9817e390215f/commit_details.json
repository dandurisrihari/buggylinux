{
  "hash": "0666fb51b1483f27506e212cc7f7b2645b5c7acc",
  "hash_short": "0666fb51",
  "subject": "ptrace: ptrace_resume() shouldn't wake up !TASK_TRACED thread",
  "body": "It is not clear why ptrace_resume() does wake_up_process(). Unless the\ncaller is PTRACE_KILL the tracee should be TASK_TRACED so we can use\nwake_up_state(__TASK_TRACED). If sys_ptrace() races with SIGKILL we do\nnot need the extra and potentionally spurious wakeup.\n\nIf the caller is PTRACE_KILL, wake_up_process() is even more wrong.\nThe tracee can sleep in any state in any place, and if we have a buggy\ncode which doesn't handle a spurious wakeup correctly PTRACE_KILL can\nbe used to exploit it. For example:\n\n\tint main(void)\n\t{\n\t\tint child, status;\n\n\t\tchild = fork();\n\t\tif (!child) {\n\t\t\tint ret;\n\n\t\t\tassert(ptrace(PTRACE_TRACEME, 0,0,0) == 0);\n\n\t\t\tret = pause();\n\t\t\tprintf(\"pause: %d %m\\n\", ret);\n\n\t\t\treturn 0x23;\n\t\t}\n\n\t\tsleep(1);\n\t\tassert(ptrace(PTRACE_KILL, child, 0,0) == 0);\n\n\t\tassert(child == wait(&status));\n\t\tprintf(\"wait: %x\\n\", status);\n\n\t\treturn 0;\n\t}\n\nprints \"pause: -1 Unknown error 514\", -ERESTARTNOHAND leaks to the\nuserland. In this case sys_pause() is buggy as well and should be\nfixed.\n\nI do not know what was the original rationality behind PTRACE_KILL.\nThe man page is simply wrong and afaics it was always wrong. Imho\nit should be deprecated, or may be it should do send_sig(SIGKILL)\nas Denys suggests, but in any case I do not think that the current\nbehaviour was intentional.\n\nNote: there is another problem, ptrace_resume() changes ->exit_code\nand this can race with SIGKILL too. Eventually we should change ptrace\nto not use ->exit_code.\n\nSigned-off-by: Oleg Nesterov <oleg@redhat.com>",
  "full_message": "ptrace: ptrace_resume() shouldn't wake up !TASK_TRACED thread\n\nIt is not clear why ptrace_resume() does wake_up_process(). Unless the\ncaller is PTRACE_KILL the tracee should be TASK_TRACED so we can use\nwake_up_state(__TASK_TRACED). If sys_ptrace() races with SIGKILL we do\nnot need the extra and potentionally spurious wakeup.\n\nIf the caller is PTRACE_KILL, wake_up_process() is even more wrong.\nThe tracee can sleep in any state in any place, and if we have a buggy\ncode which doesn't handle a spurious wakeup correctly PTRACE_KILL can\nbe used to exploit it. For example:\n\n\tint main(void)\n\t{\n\t\tint child, status;\n\n\t\tchild = fork();\n\t\tif (!child) {\n\t\t\tint ret;\n\n\t\t\tassert(ptrace(PTRACE_TRACEME, 0,0,0) == 0);\n\n\t\t\tret = pause();\n\t\t\tprintf(\"pause: %d %m\\n\", ret);\n\n\t\t\treturn 0x23;\n\t\t}\n\n\t\tsleep(1);\n\t\tassert(ptrace(PTRACE_KILL, child, 0,0) == 0);\n\n\t\tassert(child == wait(&status));\n\t\tprintf(\"wait: %x\\n\", status);\n\n\t\treturn 0;\n\t}\n\nprints \"pause: -1 Unknown error 514\", -ERESTARTNOHAND leaks to the\nuserland. In this case sys_pause() is buggy as well and should be\nfixed.\n\nI do not know what was the original rationality behind PTRACE_KILL.\nThe man page is simply wrong and afaics it was always wrong. Imho\nit should be deprecated, or may be it should do send_sig(SIGKILL)\nas Denys suggests, but in any case I do not think that the current\nbehaviour was intentional.\n\nNote: there is another problem, ptrace_resume() changes ->exit_code\nand this can race with SIGKILL too. Eventually we should change ptrace\nto not use ->exit_code.\n\nSigned-off-by: Oleg Nesterov <oleg@redhat.com>",
  "author_name": "Oleg Nesterov",
  "author_email": "oleg@redhat.com",
  "author_date": "Wed May 25 19:20:21 2011 +0200",
  "author_date_iso": "2011-05-25T19:20:21+02:00",
  "committer_name": "Oleg Nesterov",
  "committer_email": "oleg@redhat.com",
  "committer_date": "Wed May 25 19:20:21 2011 +0200",
  "committer_date_iso": "2011-05-25T19:20:21+02:00",
  "files_changed": [
    "kernel/ptrace.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "kernel/ptrace.c",
      "insertions": 1,
      "deletions": 1
    }
  ],
  "total_insertions": 1,
  "total_deletions": 1,
  "total_changes": 2,
  "parents": [
    "22e12bbc9bc38c6d0bd541d061a0f547596fc19d"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v3.0",
    "v3.0-rc1",
    "v3.0-rc2",
    "v3.0-rc3",
    "v3.0-rc4",
    "v3.0-rc5",
    "v3.0-rc6",
    "v3.0-rc7",
    "v3.1",
    "v3.1-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "kernel/ptrace.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}