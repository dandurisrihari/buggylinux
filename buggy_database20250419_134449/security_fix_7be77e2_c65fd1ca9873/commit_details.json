{
  "hash": "7be77e20d59fc3dd3fdde31641e0bc821114d26b",
  "hash_short": "7be77e20",
  "subject": "Fix user struct leakage with locked IPC shem segment",
  "body": "When user locks an ipc shmem segmant with SHM_LOCK ctl and the segment is\nalready locked the shmem_lock() function returns 0.  After this the\nsubsequent code leaks the existing user struct:\n\n== ipc/shm.c: sys_shmctl() ==\n     ...\n     err = shmem_lock(shp->shm_file, 1, user);\n     if (!err) {\n          shp->shm_perm.mode |= SHM_LOCKED;\n          shp->mlock_user = user;\n     }\n     ...\n==\n\nOther results of this are:\n1. the new shp->mlock_user is not get-ed and will point to freed\n   memory when the task dies.\n2. the RLIMIT_MEMLOCK is screwed on both user structs.\n\nThe exploit looks like this:\n\n==\n    id = shmget(...);\n    setresuid(uid, 0, 0);\n    shmctl(id, SHM_LOCK, NULL);\n    setresuid(uid + 1, 0, 0);\n    shmctl(id, SHM_LOCK, NULL);\n==\n\nMy solution is to return 0 to the userspace and do not change the\nsegment's user.\n\nSigned-off-by: Pavel Emelianov <xemul@openvz.org>\nCc: <stable@kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "full_message": "Fix user struct leakage with locked IPC shem segment\n\nWhen user locks an ipc shmem segmant with SHM_LOCK ctl and the segment is\nalready locked the shmem_lock() function returns 0.  After this the\nsubsequent code leaks the existing user struct:\n\n== ipc/shm.c: sys_shmctl() ==\n     ...\n     err = shmem_lock(shp->shm_file, 1, user);\n     if (!err) {\n          shp->shm_perm.mode |= SHM_LOCKED;\n          shp->mlock_user = user;\n     }\n     ...\n==\n\nOther results of this are:\n1. the new shp->mlock_user is not get-ed and will point to freed\n   memory when the task dies.\n2. the RLIMIT_MEMLOCK is screwed on both user structs.\n\nThe exploit looks like this:\n\n==\n    id = shmget(...);\n    setresuid(uid, 0, 0);\n    shmctl(id, SHM_LOCK, NULL);\n    setresuid(uid + 1, 0, 0);\n    shmctl(id, SHM_LOCK, NULL);\n==\n\nMy solution is to return 0 to the userspace and do not change the\nsegment's user.\n\nSigned-off-by: Pavel Emelianov <xemul@openvz.org>\nCc: <stable@kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "author_name": "Pavel Emelianov",
  "author_email": "xemul@openvz.org",
  "author_date": "Tue Jul 31 00:38:48 2007 -0700",
  "author_date_iso": "2007-07-31T00:38:48-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@woody.linux-foundation.org",
  "committer_date": "Tue Jul 31 15:39:40 2007 -0700",
  "committer_date_iso": "2007-07-31T15:39:40-07:00",
  "files_changed": [
    "ipc/shm.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "ipc/shm.c",
      "insertions": 1,
      "deletions": 1
    }
  ],
  "total_insertions": 1,
  "total_deletions": 1,
  "total_changes": 2,
  "parents": [
    "ad0b142772eb1f88f0e77cb63c38b0005e83c2bd"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v2.6.23",
    "v2.6.23-rc2",
    "v2.6.23-rc3",
    "v2.6.23-rc4",
    "v2.6.23-rc5",
    "v2.6.23-rc6",
    "v2.6.23-rc7",
    "v2.6.23-rc8",
    "v2.6.23-rc9",
    "v2.6.24"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "ipc/shm.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}