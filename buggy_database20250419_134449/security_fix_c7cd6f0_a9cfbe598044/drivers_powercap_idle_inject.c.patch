commit c7cd6f04c0dfb6d44337f92b4c32126d20339873
Author: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
Date:   Tue Jan 17 10:22:40 2023 -0800

    powercap: idle_inject: Support 100% idle injection
    
    The users of the idle injection framework allow 100% idle injection. For
    example: thermal/cpuidle_cooling.c driver. When the ratio is set to
    100%, the runtime_duration becomes zero.
    
    However, idle_inject_set_duration() in the idle injection framework
    silently ignores run_duration_us == 0 without any error (it is a void
    function). The caller will then assume that everything is fine and
    100% idle is effective, but in reality the idle duration will not
    change.
    
    There are two options:
    
     - The caller may change their max state to 99% instead of 100% and
       document that 100% is not supported by the idle inject framework.
    
     - Add 100% idle support to the idle inject framework.
    
    Since there are other protections via RT throttling, this framework can
    allow 100% idle. The RT throttling will be activated at 95% idle by
    default. The caller disabling RT throttling and injecting 100% idle,
    should be aware that CPU can't be used at all.
    
    The idle inject timer is started for (run_duration_us + idle_duration_us)
    duration. Hence replace (run_duration_us && idle_duration_us) with
    (run_duration_us + idle_duration_us) in the function
    idle_inject_set_duration(). Also check for !(run_duration_us +
    idle_duration_us) to return -EINVAL in idle_inject_start().
    
    Signed-off-by: Srinivas Pandruvada <srinivas.pandruvada@linux.intel.com>
    Acked-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    [ rjw: Changelog edits ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/drivers/powercap/idle_inject.c b/drivers/powercap/idle_inject.c
index fe86a09e3b67..c03b5402c03b 100644
--- a/drivers/powercap/idle_inject.c
+++ b/drivers/powercap/idle_inject.c
@@ -155,10 +155,12 @@ void idle_inject_set_duration(struct idle_inject_device *ii_dev,
 			      unsigned int run_duration_us,
 			      unsigned int idle_duration_us)
 {
-	if (run_duration_us && idle_duration_us) {
+	if (run_duration_us + idle_duration_us) {
 		WRITE_ONCE(ii_dev->run_duration_us, run_duration_us);
 		WRITE_ONCE(ii_dev->idle_duration_us, idle_duration_us);
 	}
+	if (!run_duration_us)
+		pr_debug("CPU is forced to 100 percent idle\n");
 }
 
 /**
@@ -201,7 +203,7 @@ int idle_inject_start(struct idle_inject_device *ii_dev)
 	unsigned int idle_duration_us = READ_ONCE(ii_dev->idle_duration_us);
 	unsigned int run_duration_us = READ_ONCE(ii_dev->run_duration_us);
 
-	if (!idle_duration_us || !run_duration_us)
+	if (!(idle_duration_us + run_duration_us))
 		return -EINVAL;
 
 	pr_debug("Starting injecting idle cycles on CPUs '%*pbl'\n",