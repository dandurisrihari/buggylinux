commit d3c58f24be1bf10fa9e11977080a2398ddcd8361
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Thu Aug 6 23:19:01 2020 -0700

    mm, slab/slub: move and improve cache_from_obj()
    
    The function cache_from_obj() was added by commit b9ce5ef49f00 ("sl[au]b:
    always get the cache from its page in kmem_cache_free()") to support
    kmemcg, where per-memcg cache can be different from the root one, so we
    can't use the kmem_cache pointer given to kmem_cache_free().
    
    Prior to that commit, SLUB already had debugging check+warning that could
    be enabled to compare the given kmem_cache pointer to one referenced by
    the slab page where the object-to-be-freed resides.  This check was moved
    to cache_from_obj().  Later the check was also enabled for
    SLAB_FREELIST_HARDENED configs by commit 598a0717a816 ("mm/slab: validate
    cache membership under freelist hardening").
    
    These checks and warnings can be useful especially for the debugging,
    which can be improved.  Commit 598a0717a816 changed the pr_err() with
    WARN_ON_ONCE() to WARN_ONCE() so only the first hit is now reported,
    others are silent.  This patch changes it to WARN() so that all errors are
    reported.
    
    It's also useful to print SLUB allocation/free tracking info for the
    offending object, if tracking is enabled.  We could export the SLUB
    print_tracking() function and provide an empty one for SLAB, or realize
    that both the debugging and hardening cases in cache_from_obj() are only
    supported by SLUB anyway.  So this patch moves cache_from_obj() from
    slab.h to separate instances in slab.c and slub.c, where the SLAB version
    only does the kmemcg lookup and even could be completely removed once the
    kmemcg rework [1] is merged.  The SLUB version can thus easily use the
    print_tracking() function.  It can also use the kmem_cache_debug_flags()
    static key check for improved performance in kernels without the hardening
    and with debugging not enabled on boot.
    
    [1] https://lore.kernel.org/r/20200608230654.828134-18-guro@fb.com
    
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Vijayanand Jitta <vjitta@codeaurora.org>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Joonsoo Kim <iamjoonsoo.kim@lge.com>
    Cc: Pekka Enberg <penberg@kernel.org>
    Link: http://lkml.kernel.org/r/20200610163135.17364-10-vbabka@suse.cz
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/mm/slab.c b/mm/slab.c
index 390e249aaa8d..af3d3887b9b8 100644
--- a/mm/slab.c
+++ b/mm/slab.c
@@ -3678,6 +3678,14 @@ void *__kmalloc_track_caller(size_t size, gfp_t flags, unsigned long caller)
 }
 EXPORT_SYMBOL(__kmalloc_track_caller);
 
+static inline struct kmem_cache *cache_from_obj(struct kmem_cache *s, void *x)
+{
+	if (memcg_kmem_enabled())
+		return virt_to_cache(x);
+	else
+		return s;
+}
+
 /**
  * kmem_cache_free - Deallocate an object
  * @cachep: The cache the allocation was from.