{
  "hash": "6a94785fb9f8dd3c76f32b7a029691ab3fc884c5",
  "hash_short": "6a94785f",
  "subject": "Merge branch 'pci/err'",
  "body": "- Stop writing AER Capability when we don't own it (Sean V Kelley)\n\n- Bind RCEC devices to the Port driver (Qiuxu Zhuo)\n\n- Cache the RCEC RA Capability offset (Sean V Kelley)\n\n- Add pci_walk_bridge() (Sean V Kelley)\n\n- Clear AER status only when we control AER (Sean V Kelley)\n\n- Recover from RCEC AER errors (Sean V Kelley)\n\n- Add pcie_link_rcec() to associate RCiEPs with RCECs (Sean V Kelley)\n\n- Recover from RCiEP AER errors (Sean V Kelley)\n\n- Add pcie_walk_rcec() for RCEC AER handling (Sean V Kelley)\n\n- Add pcie_walk_rcec() for RCEC PME handling (Sean V Kelley)\n\n- Add RCEC AER error injection support (Qiuxu Zhuo)\n\n* pci/err:\n  PCI/AER: Add RCEC AER error injection support\n  PCI/PME: Add pcie_walk_rcec() to RCEC PME handling\n  PCI/AER: Add pcie_walk_rcec() to RCEC AER handling\n  PCI/ERR: Recover from RCiEP AER errors\n  PCI/ERR: Add pcie_link_rcec() to associate RCiEPs\n  PCI/ERR: Recover from RCEC AER errors\n  PCI/ERR: Clear AER status only when we control AER\n  PCI/ERR: Add pci_walk_bridge() to pcie_do_recovery()\n  PCI/ERR: Avoid negated conditional for clarity\n  PCI/ERR: Use \"bridge\" for clarity in pcie_do_recovery()\n  PCI/ERR: Simplify by computing pci_pcie_type() once\n  PCI/ERR: Simplify by using pci_upstream_bridge()\n  PCI/ERR: Rename reset_link() to reset_subordinates()\n  PCI/ERR: Cache RCEC EA Capability offset in pci_init_capabilities()\n  PCI/ERR: Bind RCEC devices to the Root Port driver\n  PCI/AER: Write AER Capability only when we control it",
  "full_message": "Merge branch 'pci/err'\n\n- Stop writing AER Capability when we don't own it (Sean V Kelley)\n\n- Bind RCEC devices to the Port driver (Qiuxu Zhuo)\n\n- Cache the RCEC RA Capability offset (Sean V Kelley)\n\n- Add pci_walk_bridge() (Sean V Kelley)\n\n- Clear AER status only when we control AER (Sean V Kelley)\n\n- Recover from RCEC AER errors (Sean V Kelley)\n\n- Add pcie_link_rcec() to associate RCiEPs with RCECs (Sean V Kelley)\n\n- Recover from RCiEP AER errors (Sean V Kelley)\n\n- Add pcie_walk_rcec() for RCEC AER handling (Sean V Kelley)\n\n- Add pcie_walk_rcec() for RCEC PME handling (Sean V Kelley)\n\n- Add RCEC AER error injection support (Qiuxu Zhuo)\n\n* pci/err:\n  PCI/AER: Add RCEC AER error injection support\n  PCI/PME: Add pcie_walk_rcec() to RCEC PME handling\n  PCI/AER: Add pcie_walk_rcec() to RCEC AER handling\n  PCI/ERR: Recover from RCiEP AER errors\n  PCI/ERR: Add pcie_link_rcec() to associate RCiEPs\n  PCI/ERR: Recover from RCEC AER errors\n  PCI/ERR: Clear AER status only when we control AER\n  PCI/ERR: Add pci_walk_bridge() to pcie_do_recovery()\n  PCI/ERR: Avoid negated conditional for clarity\n  PCI/ERR: Use \"bridge\" for clarity in pcie_do_recovery()\n  PCI/ERR: Simplify by computing pci_pcie_type() once\n  PCI/ERR: Simplify by using pci_upstream_bridge()\n  PCI/ERR: Rename reset_link() to reset_subordinates()\n  PCI/ERR: Cache RCEC EA Capability offset in pci_init_capabilities()\n  PCI/ERR: Bind RCEC devices to the Root Port driver\n  PCI/AER: Write AER Capability only when we control it",
  "author_name": "Bjorn Helgaas",
  "author_email": "bhelgaas@google.com",
  "author_date": "Tue Dec 15 15:11:06 2020 -0600",
  "author_date_iso": "2020-12-15T15:11:06-06:00",
  "committer_name": "Bjorn Helgaas",
  "committer_email": "bhelgaas@google.com",
  "committer_date": "Tue Dec 15 15:11:06 2020 -0600",
  "committer_date_iso": "2020-12-15T15:11:06-06:00",
  "files_changed": [
    "drivers/pci/pci.h",
    "drivers/pci/probe.c",
    "include/linux/pci.h",
    "include/uapi/linux/pci_regs.h"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "drivers/pci/pci.h",
      "insertions": 27,
      "deletions": 2
    },
    {
      "file": "drivers/pci/pcie/Makefile",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "drivers/pci/pcie/aer.c",
      "insertions": 75,
      "deletions": 26
    },
    {
      "file": "drivers/pci/pcie/aer_inject.c",
      "insertions": 4,
      "deletions": 1
    },
    {
      "file": "drivers/pci/pcie/err.c",
      "insertions": 68,
      "deletions": 27
    },
    {
      "file": "drivers/pci/pcie/pme.c",
      "insertions": 12,
      "deletions": 4
    },
    {
      "file": "drivers/pci/pcie/portdrv_core.c",
      "insertions": 3,
      "deletions": 6
    },
    {
      "file": "drivers/pci/pcie/portdrv_pci.c",
      "insertions": 10,
      "deletions": 3
    },
    {
      "file": "drivers/pci/pcie/rcec.c",
      "insertions": 190,
      "deletions": 0
    },
    {
      "file": "drivers/pci/probe.c",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "include/linux/pci.h",
      "insertions": 5,
      "deletions": 0
    },
    {
      "file": "include/linux/pci_ids.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "include/uapi/linux/pci_regs.h",
      "insertions": 7,
      "deletions": 0
    }
  ],
  "total_insertions": 405,
  "total_deletions": 70,
  "total_changes": 475,
  "parents": [
    "e8722508dd78609b453b960d0b8163749d1f78b8",
    "d292dd0eb3ac6ce6ea66715bb9f6b8e2ae70747c"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/pci/pci.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/pci/probe.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/pci.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/uapi/linux/pci_regs.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}