{
  "hash": "380cf5ba6b0a0b307f4afb62b186ca801defb203",
  "hash_short": "380cf5ba",
  "subject": "fs: Treat foreign mounts as nosuid",
  "body": "If a process gets access to a mount from a different user\nnamespace, that process should not be able to take advantage of\nsetuid files or selinux entrypoints from that filesystem.  Prevent\nthis by treating mounts from other mount namespaces and those not\nowned by current_user_ns() or an ancestor as nosuid.\n\nThis will make it safer to allow more complex filesystems to be\nmounted in non-root user namespaces.\n\nThis does not remove the need for MNT_LOCK_NOSUID.  The setuid,\nsetgid, and file capability bits can no longer be abused if code in\na user namespace were to clear nosuid on an untrusted filesystem,\nbut this patch, by itself, is insufficient to protect the system\nfrom abuse of files that, when execed, would increase MAC privilege.\n\nAs a more concrete explanation, any task that can manipulate a\nvfsmount associated with a given user namespace already has\ncapabilities in that namespace and all of its descendents.  If they\ncan cause a malicious setuid, setgid, or file-caps executable to\nappear in that mount, then that executable will only allow them to\nelevate privileges in exactly the set of namespaces in which they\nare already privileges.\n\nOn the other hand, if they can cause a malicious executable to\nappear with a dangerous MAC label, running it could change the\ncaller's security context in a way that should not have been\npossible, even inside the namespace in which the task is confined.\n\nAs a hardening measure, this would have made CVE-2014-5207 much\nmore difficult to exploit.\n\nSigned-off-by: Andy Lutomirski <luto@amacapital.net>\nSigned-off-by: Seth Forshee <seth.forshee@canonical.com>\nAcked-by: James Morris <james.l.morris@oracle.com>\nAcked-by: Serge Hallyn <serge.hallyn@canonical.com>\nSigned-off-by: Eric W. Biederman <ebiederm@xmission.com>",
  "full_message": "fs: Treat foreign mounts as nosuid\n\nIf a process gets access to a mount from a different user\nnamespace, that process should not be able to take advantage of\nsetuid files or selinux entrypoints from that filesystem.  Prevent\nthis by treating mounts from other mount namespaces and those not\nowned by current_user_ns() or an ancestor as nosuid.\n\nThis will make it safer to allow more complex filesystems to be\nmounted in non-root user namespaces.\n\nThis does not remove the need for MNT_LOCK_NOSUID.  The setuid,\nsetgid, and file capability bits can no longer be abused if code in\na user namespace were to clear nosuid on an untrusted filesystem,\nbut this patch, by itself, is insufficient to protect the system\nfrom abuse of files that, when execed, would increase MAC privilege.\n\nAs a more concrete explanation, any task that can manipulate a\nvfsmount associated with a given user namespace already has\ncapabilities in that namespace and all of its descendents.  If they\ncan cause a malicious setuid, setgid, or file-caps executable to\nappear in that mount, then that executable will only allow them to\nelevate privileges in exactly the set of namespaces in which they\nare already privileges.\n\nOn the other hand, if they can cause a malicious executable to\nappear with a dangerous MAC label, running it could change the\ncaller's security context in a way that should not have been\npossible, even inside the namespace in which the task is confined.\n\nAs a hardening measure, this would have made CVE-2014-5207 much\nmore difficult to exploit.\n\nSigned-off-by: Andy Lutomirski <luto@amacapital.net>\nSigned-off-by: Seth Forshee <seth.forshee@canonical.com>\nAcked-by: James Morris <james.l.morris@oracle.com>\nAcked-by: Serge Hallyn <serge.hallyn@canonical.com>\nSigned-off-by: Eric W. Biederman <ebiederm@xmission.com>",
  "author_name": "Andy Lutomirski",
  "author_email": "luto@amacapital.net",
  "author_date": "Thu Jun 23 16:41:05 2016 -0500",
  "author_date_iso": "2016-06-23T16:41:05-05:00",
  "committer_name": "Eric W. Biederman",
  "committer_email": "ebiederm@xmission.com",
  "committer_date": "Fri Jun 24 10:40:41 2016 -0500",
  "committer_date_iso": "2016-06-24T10:40:41-05:00",
  "files_changed": [
    "fs/exec.c",
    "fs/namespace.c",
    "include/linux/mount.h",
    "security/commoncap.c",
    "security/selinux/hooks.c"
  ],
  "files_changed_count": 5,
  "stats": [
    {
      "file": "fs/exec.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "fs/namespace.c",
      "insertions": 13,
      "deletions": 0
    },
    {
      "file": "include/linux/mount.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "security/commoncap.c",
      "insertions": 7,
      "deletions": 1
    },
    {
      "file": "security/selinux/hooks.c",
      "insertions": 1,
      "deletions": 1
    }
  ],
  "total_insertions": 23,
  "total_deletions": 3,
  "total_changes": 26,
  "parents": [
    "d07b846f6200454c50d791796edb82660192513d"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.10",
    "v4.10-rc1",
    "v4.10-rc2",
    "v4.10-rc3",
    "v4.10-rc4",
    "v4.10-rc5",
    "v4.10-rc6",
    "v4.10-rc7",
    "v4.10-rc8",
    "v4.11"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2014-5207"
    ],
    "security_keywords": [
      "hardening",
      "exploit"
    ]
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "fs/exec.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/namespace.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/mount.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "security/commoncap.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "security/selinux/hooks.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}