{
  "hash": "018ee47f14893d500131dfca2ff9f3ff8ebd4ed2",
  "hash_short": "018ee47f",
  "subject": "mm: multi-gen LRU: exploit locality in rmap",
  "body": "Searching the rmap for PTEs mapping each page on an LRU list (to test and\nclear the accessed bit) can be expensive because pages from different VMAs\n(PA space) are not cache friendly to the rmap (VA space).  For workloads\nmostly using mapped pages, searching the rmap can incur the highest CPU\ncost in the reclaim path.\n\nThis patch exploits spatial locality to reduce the trips into the rmap. \nWhen shrink_page_list() walks the rmap and finds a young PTE, a new\nfunction lru_gen_look_around() scans at most BITS_PER_LONG-1 adjacent\nPTEs.  On finding another young PTE, it clears the accessed bit and\nupdates the gen counter of the page mapped by this PTE to\n(max_seq%MAX_NR_GENS)+1.\n\nServer benchmark results:\n  Single workload:\n    fio (buffered I/O): no change\n\n  Single workload:\n    memcached (anon): +[3, 5]%\n                Ops/sec      KB/sec\n      patch1-6: 1106168.46   43025.04\n      patch1-7: 1147696.57   44640.29\n\n  Configurations:\n    no change\n\nClient benchmark results:\n  kswapd profiles:\n    patch1-6\n      39.03%  lzo1x_1_do_compress (real work)\n      18.47%  page_vma_mapped_walk (overhead)\n       6.74%  _raw_spin_unlock_irq\n       3.97%  do_raw_spin_lock\n       2.49%  ptep_clear_flush\n       2.48%  anon_vma_interval_tree_iter_first\n       1.92%  folio_referenced_one\n       1.88%  __zram_bvec_write\n       1.48%  memmove\n       1.31%  vma_interval_tree_iter_next\n\n    patch1-7\n      48.16%  lzo1x_1_do_compress (real work)\n       8.20%  page_vma_mapped_walk (overhead)\n       7.06%  _raw_spin_unlock_irq\n       2.92%  ptep_clear_flush\n       2.53%  __zram_bvec_write\n       2.11%  do_raw_spin_lock\n       2.02%  memmove\n       1.93%  lru_gen_look_around\n       1.56%  free_unref_page_list\n       1.40%  memset\n\n  Configurations:\n    no change\n\nLink: https://lkml.kernel.org/r/20220918080010.2920238-8-yuzhao@google.com\nSigned-off-by: Yu Zhao <yuzhao@google.com>\nAcked-by: Barry Song <baohua@kernel.org>\nAcked-by: Brian Geffon <bgeffon@google.com>\nAcked-by: Jan Alexander Steffens (heftig) <heftig@archlinux.org>\nAcked-by: Oleksandr Natalenko <oleksandr@natalenko.name>\nAcked-by: Steven Barrett <steven@liquorix.net>\nAcked-by: Suleiman Souhlal <suleiman@google.com>\nTested-by: Daniel Byrne <djbyrne@mtu.edu>\nTested-by: Donald Carr <d@chaos-reins.com>\nTested-by: Holger Hoffst\u00e4tte <holger@applied-asynchrony.com>\nTested-by: Konstantin Kharlamov <Hi-Angel@yandex.ru>\nTested-by: Shuang Zhai <szhai2@cs.rochester.edu>\nTested-by: Sofia Trinh <sofia.trinh@edi.works>\nTested-by: Vaibhav Jain <vaibhav@linux.ibm.com>\nCc: Andi Kleen <ak@linux.intel.com>\nCc: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>\nCc: Catalin Marinas <catalin.marinas@arm.com>\nCc: Dave Hansen <dave.hansen@linux.intel.com>\nCc: Hillf Danton <hdanton@sina.com>\nCc: Jens Axboe <axboe@kernel.dk>\nCc: Johannes Weiner <hannes@cmpxchg.org>\nCc: Jonathan Corbet <corbet@lwn.net>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Matthew Wilcox <willy@infradead.org>\nCc: Mel Gorman <mgorman@suse.de>\nCc: Miaohe Lin <linmiaohe@huawei.com>\nCc: Michael Larabel <Michael@MichaelLarabel.com>\nCc: Michal Hocko <mhocko@kernel.org>\nCc: Mike Rapoport <rppt@kernel.org>\nCc: Mike Rapoport <rppt@linux.ibm.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Qi Zheng <zhengqi.arch@bytedance.com>\nCc: Tejun Heo <tj@kernel.org>\nCc: Vlastimil Babka <vbabka@suse.cz>\nCc: Will Deacon <will@kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>",
  "full_message": "mm: multi-gen LRU: exploit locality in rmap\n\nSearching the rmap for PTEs mapping each page on an LRU list (to test and\nclear the accessed bit) can be expensive because pages from different VMAs\n(PA space) are not cache friendly to the rmap (VA space).  For workloads\nmostly using mapped pages, searching the rmap can incur the highest CPU\ncost in the reclaim path.\n\nThis patch exploits spatial locality to reduce the trips into the rmap. \nWhen shrink_page_list() walks the rmap and finds a young PTE, a new\nfunction lru_gen_look_around() scans at most BITS_PER_LONG-1 adjacent\nPTEs.  On finding another young PTE, it clears the accessed bit and\nupdates the gen counter of the page mapped by this PTE to\n(max_seq%MAX_NR_GENS)+1.\n\nServer benchmark results:\n  Single workload:\n    fio (buffered I/O): no change\n\n  Single workload:\n    memcached (anon): +[3, 5]%\n                Ops/sec      KB/sec\n      patch1-6: 1106168.46   43025.04\n      patch1-7: 1147696.57   44640.29\n\n  Configurations:\n    no change\n\nClient benchmark results:\n  kswapd profiles:\n    patch1-6\n      39.03%  lzo1x_1_do_compress (real work)\n      18.47%  page_vma_mapped_walk (overhead)\n       6.74%  _raw_spin_unlock_irq\n       3.97%  do_raw_spin_lock\n       2.49%  ptep_clear_flush\n       2.48%  anon_vma_interval_tree_iter_first\n       1.92%  folio_referenced_one\n       1.88%  __zram_bvec_write\n       1.48%  memmove\n       1.31%  vma_interval_tree_iter_next\n\n    patch1-7\n      48.16%  lzo1x_1_do_compress (real work)\n       8.20%  page_vma_mapped_walk (overhead)\n       7.06%  _raw_spin_unlock_irq\n       2.92%  ptep_clear_flush\n       2.53%  __zram_bvec_write\n       2.11%  do_raw_spin_lock\n       2.02%  memmove\n       1.93%  lru_gen_look_around\n       1.56%  free_unref_page_list\n       1.40%  memset\n\n  Configurations:\n    no change\n\nLink: https://lkml.kernel.org/r/20220918080010.2920238-8-yuzhao@google.com\nSigned-off-by: Yu Zhao <yuzhao@google.com>\nAcked-by: Barry Song <baohua@kernel.org>\nAcked-by: Brian Geffon <bgeffon@google.com>\nAcked-by: Jan Alexander Steffens (heftig) <heftig@archlinux.org>\nAcked-by: Oleksandr Natalenko <oleksandr@natalenko.name>\nAcked-by: Steven Barrett <steven@liquorix.net>\nAcked-by: Suleiman Souhlal <suleiman@google.com>\nTested-by: Daniel Byrne <djbyrne@mtu.edu>\nTested-by: Donald Carr <d@chaos-reins.com>\nTested-by: Holger Hoffst\u00e4tte <holger@applied-asynchrony.com>\nTested-by: Konstantin Kharlamov <Hi-Angel@yandex.ru>\nTested-by: Shuang Zhai <szhai2@cs.rochester.edu>\nTested-by: Sofia Trinh <sofia.trinh@edi.works>\nTested-by: Vaibhav Jain <vaibhav@linux.ibm.com>\nCc: Andi Kleen <ak@linux.intel.com>\nCc: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>\nCc: Catalin Marinas <catalin.marinas@arm.com>\nCc: Dave Hansen <dave.hansen@linux.intel.com>\nCc: Hillf Danton <hdanton@sina.com>\nCc: Jens Axboe <axboe@kernel.dk>\nCc: Johannes Weiner <hannes@cmpxchg.org>\nCc: Jonathan Corbet <corbet@lwn.net>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Matthew Wilcox <willy@infradead.org>\nCc: Mel Gorman <mgorman@suse.de>\nCc: Miaohe Lin <linmiaohe@huawei.com>\nCc: Michael Larabel <Michael@MichaelLarabel.com>\nCc: Michal Hocko <mhocko@kernel.org>\nCc: Mike Rapoport <rppt@kernel.org>\nCc: Mike Rapoport <rppt@linux.ibm.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Qi Zheng <zhengqi.arch@bytedance.com>\nCc: Tejun Heo <tj@kernel.org>\nCc: Vlastimil Babka <vbabka@suse.cz>\nCc: Will Deacon <will@kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>",
  "author_name": "Yu Zhao",
  "author_email": "yuzhao@google.com",
  "author_date": "Sun Sep 18 02:00:04 2022 -0600",
  "author_date_iso": "2022-09-18T02:00:04-06:00",
  "committer_name": "Andrew Morton",
  "committer_email": "akpm@linux-foundation.org",
  "committer_date": "Mon Sep 26 19:46:09 2022 -0700",
  "committer_date_iso": "2022-09-26T19:46:09-07:00",
  "files_changed": [
    "include/linux/memcontrol.h",
    "include/linux/mm.h",
    "include/linux/mmzone.h",
    "mm/internal.h",
    "mm/memcontrol.c",
    "mm/rmap.c",
    "mm/swap.c",
    "mm/vmscan.c"
  ],
  "files_changed_count": 8,
  "stats": [
    {
      "file": "include/linux/memcontrol.h",
      "insertions": 31,
      "deletions": 0
    },
    {
      "file": "include/linux/mm.h",
      "insertions": 5,
      "deletions": 0
    },
    {
      "file": "include/linux/mmzone.h",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "mm/internal.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "mm/memcontrol.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "mm/rmap.c",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "mm/swap.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "mm/vmscan.c",
      "insertions": 184,
      "deletions": 0
    }
  ],
  "total_insertions": 236,
  "total_deletions": 2,
  "total_changes": 238,
  "parents": [
    "ac35a490237446b71e3b4b782b1596967edd0aa8"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/linux/mm.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/memcontrol.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/internal.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/mmzone.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/swap.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/rmap.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/memcontrol.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/vmscan.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}