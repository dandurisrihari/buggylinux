commit 2e1c0170771e6bf31bc785ea43a44e6e85e36268
Author: Lorenzo Stoakes <lorenzo.stoakes@oracle.com>
Date:   Wed Mar 22 18:57:01 2023 +0000

    fs/proc/kcore: avoid bounce buffer for ktext data
    
    Patch series "convert read_kcore(), vread() to use iterators", v8.
    
    While reviewing Baoquan's recent changes to permit vread() access to
    vm_map_ram regions of vmalloc allocations, Willy pointed out [1] that it
    would be nice to refactor vread() as a whole, since its only user is
    read_kcore() and the existing form of vread() necessitates the use of a
    bounce buffer.
    
    This patch series does exactly that, as well as adjusting how we read the
    kernel text section to avoid the use of a bounce buffer in this case as
    well.
    
    This has been tested against the test case which motivated Baoquan's
    changes in the first place [2] which continues to function correctly, as
    do the vmalloc self tests.
    
    
    This patch (of 4):
    
    Commit df04abfd181a ("fs/proc/kcore.c: Add bounce buffer for ktext data")
    introduced the use of a bounce buffer to retrieve kernel text data for
    /proc/kcore in order to avoid failures arising from hardened user copies
    enabled by CONFIG_HARDENED_USERCOPY in check_kernel_text_object().
    
    We can avoid doing this if instead of copy_to_user() we use
    _copy_to_user() which bypasses the hardening check.  This is more
    efficient than using a bounce buffer and simplifies the code.
    
    We do so as part an overall effort to eliminate bounce buffer usage in the
    function with an eye to converting it an iterator read.
    
    Link: https://lkml.kernel.org/r/cover.1679566220.git.lstoakes@gmail.com
    Link: https://lore.kernel.org/all/Y8WfDSRkc%2FOHP3oD@casper.infradead.org/ [1]
    Link: https://lore.kernel.org/all/87ilk6gos2.fsf@oracle.com/T/#u [2]
    Link: https://lkml.kernel.org/r/fd39b0bfa7edc76d360def7d034baaee71d90158.1679511146.git.lstoakes@gmail.com
    Signed-off-by: Lorenzo Stoakes <lstoakes@gmail.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: Baoquan He <bhe@redhat.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Liu Shixin <liushixin2@huawei.com>
    Cc: Matthew Wilcox (Oracle) <willy@infradead.org>
    Cc: Uladzislau Rezki (Sony) <urezki@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

diff --git a/fs/proc/kcore.c b/fs/proc/kcore.c
index 71157ee35c1a..556f310d6aa4 100644
--- a/fs/proc/kcore.c
+++ b/fs/proc/kcore.c
@@ -541,19 +541,12 @@ read_kcore(struct file *file, char __user *buffer, size_t buflen, loff_t *fpos)
 		case KCORE_VMEMMAP:
 		case KCORE_TEXT:
 			/*
-			 * Using bounce buffer to bypass the
-			 * hardened user copy kernel text checks.
+			 * We use _copy_to_user() to bypass usermode hardening
+			 * which would otherwise prevent this operation.
 			 */
-			if (copy_from_kernel_nofault(buf, (void *)start, tsz)) {
-				if (clear_user(buffer, tsz)) {
-					ret = -EFAULT;
-					goto out;
-				}
-			} else {
-				if (copy_to_user(buffer, buf, tsz)) {
-					ret = -EFAULT;
-					goto out;
-				}
+			if (_copy_to_user(buffer, (char *)start, tsz)) {
+				ret = -EFAULT;
+				goto out;
 			}
 			break;
 		default: