{
  "hash": "2e1c0170771e6bf31bc785ea43a44e6e85e36268",
  "hash_short": "2e1c0170",
  "subject": "fs/proc/kcore: avoid bounce buffer for ktext data",
  "body": "Patch series \"convert read_kcore(), vread() to use iterators\", v8.\n\nWhile reviewing Baoquan's recent changes to permit vread() access to\nvm_map_ram regions of vmalloc allocations, Willy pointed out [1] that it\nwould be nice to refactor vread() as a whole, since its only user is\nread_kcore() and the existing form of vread() necessitates the use of a\nbounce buffer.\n\nThis patch series does exactly that, as well as adjusting how we read the\nkernel text section to avoid the use of a bounce buffer in this case as\nwell.\n\nThis has been tested against the test case which motivated Baoquan's\nchanges in the first place [2] which continues to function correctly, as\ndo the vmalloc self tests.\n\n\nThis patch (of 4):\n\nCommit df04abfd181a (\"fs/proc/kcore.c: Add bounce buffer for ktext data\")\nintroduced the use of a bounce buffer to retrieve kernel text data for\n/proc/kcore in order to avoid failures arising from hardened user copies\nenabled by CONFIG_HARDENED_USERCOPY in check_kernel_text_object().\n\nWe can avoid doing this if instead of copy_to_user() we use\n_copy_to_user() which bypasses the hardening check.  This is more\nefficient than using a bounce buffer and simplifies the code.\n\nWe do so as part an overall effort to eliminate bounce buffer usage in the\nfunction with an eye to converting it an iterator read.\n\nLink: https://lkml.kernel.org/r/cover.1679566220.git.lstoakes@gmail.com\nLink: https://lore.kernel.org/all/Y8WfDSRkc%2FOHP3oD@casper.infradead.org/ [1]\nLink: https://lore.kernel.org/all/87ilk6gos2.fsf@oracle.com/T/#u [2]\nLink: https://lkml.kernel.org/r/fd39b0bfa7edc76d360def7d034baaee71d90158.1679511146.git.lstoakes@gmail.com\nSigned-off-by: Lorenzo Stoakes <lstoakes@gmail.com>\nReviewed-by: David Hildenbrand <david@redhat.com>\nReviewed-by: Baoquan He <bhe@redhat.com>\nCc: Alexander Viro <viro@zeniv.linux.org.uk>\nCc: Jens Axboe <axboe@kernel.dk>\nCc: Jiri Olsa <jolsa@kernel.org>\nCc: Liu Shixin <liushixin2@huawei.com>\nCc: Matthew Wilcox (Oracle) <willy@infradead.org>\nCc: Uladzislau Rezki (Sony) <urezki@gmail.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>",
  "full_message": "fs/proc/kcore: avoid bounce buffer for ktext data\n\nPatch series \"convert read_kcore(), vread() to use iterators\", v8.\n\nWhile reviewing Baoquan's recent changes to permit vread() access to\nvm_map_ram regions of vmalloc allocations, Willy pointed out [1] that it\nwould be nice to refactor vread() as a whole, since its only user is\nread_kcore() and the existing form of vread() necessitates the use of a\nbounce buffer.\n\nThis patch series does exactly that, as well as adjusting how we read the\nkernel text section to avoid the use of a bounce buffer in this case as\nwell.\n\nThis has been tested against the test case which motivated Baoquan's\nchanges in the first place [2] which continues to function correctly, as\ndo the vmalloc self tests.\n\n\nThis patch (of 4):\n\nCommit df04abfd181a (\"fs/proc/kcore.c: Add bounce buffer for ktext data\")\nintroduced the use of a bounce buffer to retrieve kernel text data for\n/proc/kcore in order to avoid failures arising from hardened user copies\nenabled by CONFIG_HARDENED_USERCOPY in check_kernel_text_object().\n\nWe can avoid doing this if instead of copy_to_user() we use\n_copy_to_user() which bypasses the hardening check.  This is more\nefficient than using a bounce buffer and simplifies the code.\n\nWe do so as part an overall effort to eliminate bounce buffer usage in the\nfunction with an eye to converting it an iterator read.\n\nLink: https://lkml.kernel.org/r/cover.1679566220.git.lstoakes@gmail.com\nLink: https://lore.kernel.org/all/Y8WfDSRkc%2FOHP3oD@casper.infradead.org/ [1]\nLink: https://lore.kernel.org/all/87ilk6gos2.fsf@oracle.com/T/#u [2]\nLink: https://lkml.kernel.org/r/fd39b0bfa7edc76d360def7d034baaee71d90158.1679511146.git.lstoakes@gmail.com\nSigned-off-by: Lorenzo Stoakes <lstoakes@gmail.com>\nReviewed-by: David Hildenbrand <david@redhat.com>\nReviewed-by: Baoquan He <bhe@redhat.com>\nCc: Alexander Viro <viro@zeniv.linux.org.uk>\nCc: Jens Axboe <axboe@kernel.dk>\nCc: Jiri Olsa <jolsa@kernel.org>\nCc: Liu Shixin <liushixin2@huawei.com>\nCc: Matthew Wilcox (Oracle) <willy@infradead.org>\nCc: Uladzislau Rezki (Sony) <urezki@gmail.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>",
  "author_name": "Lorenzo Stoakes",
  "author_email": "lstoakes@gmail.com",
  "author_date": "Wed Mar 22 18:57:01 2023 +0000",
  "author_date_iso": "2023-03-22T18:57:01+00:00",
  "committer_name": "Andrew Morton",
  "committer_email": "akpm@linux-foundation.org",
  "committer_date": "Wed Apr 5 19:42:56 2023 -0700",
  "committer_date_iso": "2023-04-05T19:42:56-07:00",
  "files_changed": [
    "fs/proc/kcore.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "fs/proc/kcore.c",
      "insertions": 5,
      "deletions": 12
    }
  ],
  "total_insertions": 5,
  "total_deletions": 12,
  "total_changes": 17,
  "parents": [
    "3f6dac0fd1b83178137e7b4e722d8f29612cbec1"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/proc/kcore.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}