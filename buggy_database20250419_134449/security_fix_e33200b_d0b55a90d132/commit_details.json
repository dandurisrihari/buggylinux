{
  "hash": "e33200bc01a6cfe73aa022cd4af92c1501c1e09a",
  "hash_short": "e33200bc",
  "subject": "Merge branch 'tls-offload-netdev-and-mlx5-support'",
  "body": "Boris Pismenny says:\n\n====================\nTLS offload, netdev & MLX5 support\n\nThe following series provides TLS TX inline crypto offload.\n\nv1->v2:\n   - Added IS_ENABLED(CONFIG_TLS_DEVICE) and a STATIC_KEY for icsk_clean_acked\n   - File license fix\n   - Fix spelling, comment by DaveW\n   - Move memory allocations out of tls_set_device_offload and other misc fixes,\n\tcomments by Kiril.\n\nv2->v3:\n   - Reversed xmas tree where needed and style fixes\n   - Removed the need for skb_page_frag_refill, per Eric's comment\n   - IPv6 dependency fixes\n\nv3->v4:\n   - Remove \"inline\" from functions in C files\n   - Make clean_acked_data_enabled a static variable and add enable/disable functions to control it.\n   - Remove unnecessary variable initialization mentioned by ShannonN\n   - Rebase over TLS RX\n   - Refactor the tls_software_fallback to reduce the number of variables mentioned by KirilT\n\nv4->v5:\n   - Add missing CONFIG_TLS_DEVICE\n\nv5->v6:\n   - Move changes to the software implementation into a seperate patch\n   - Fix some checkpatch warnings\n   - GPL export the enable/disable clean_acked_data functions\n\nv6->v7:\n   - Use the dst_entry to obtain the netdev in dev_get_by_index\n   - Remove the IPv6 patch since it is redundent now\n\nv7->v8:\n   - Fix a merge conflict in mlx5 header\n\nv8->v9:\n   - Fix false -Wmaybe-uninitialized warning\n   - Fix empty space in the end of new files\n\nv9->v10:\n   - Remove default \"n\" in net/Kconfig\n\nThis series adds a generic infrastructure to offload TLS crypto to a\nnetwork devices. It enables the kernel TLS socket to skip encryption and\nauthentication operations on the transmit side of the data path. Leaving\nthose computationally expensive operations to the NIC.\n\nThe NIC offload infrastructure builds TLS records and pushes them to the\nTCP layer just like the SW KTLS implementation and using the same API.\nTCP segmentation is mostly unaffected. Currently the only exception is\nthat we prevent mixed SKBs where only part of the payload requires\noffload. In the future we are likely to add a similar restriction\nfollowing a change cipher spec record.\n\nThe notable differences between SW KTLS and NIC offloaded TLS\nimplementations are as follows:\n1. The offloaded implementation builds \"plaintext TLS record\", those\nrecords contain plaintext instead of ciphertext and place holder bytes\ninstead of authentication tags.\n2. The offloaded implementation maintains a mapping from TCP sequence\nnumber to TLS records. Thus given a TCP SKB sent from a NIC offloaded\nTLS socket, we can use the tls NIC offload infrastructure to obtain\nenough context to encrypt the payload of the SKB.\nA TLS record is released when the last byte of the record is ack'ed,\nthis is done through the new icsk_clean_acked callback.\n\nThe infrastructure should be extendable to support various NIC offload\nimplementations.  However it is currently written with the\nimplementation below in mind:\nThe NIC assumes that packets from each offloaded stream are sent as\nplaintext and in-order. It keeps track of the TLS records in the TCP\nstream. When a packet marked for offload is transmitted, the NIC\nencrypts the payload in-place and puts authentication tags in the\nrelevant place holders.\n\nThe responsibility for handling out-of-order packets (i.e. TCP\nretransmission, qdisc drops) falls on the netdev driver.\n\nThe netdev driver keeps track of the expected TCP SN from the NIC's\nperspective.  If the next packet to transmit matches the expected TCP\nSN, the driver advances the expected TCP SN, and transmits the packet\nwith TLS offload indication.\n\nIf the next packet to transmit does not match the expected TCP SN. The\ndriver calls the TLS layer to obtain the TLS record that includes the\nTCP of the packet for transmission. Using this TLS record, the driver\nposts a work entry on the transmit queue to reconstruct the NIC TLS\nstate required for the offload of the out-of-order packet. It updates\nthe expected TCP SN accordingly and transmit the now in-order packet.\nThe same queue is used for packet transmission and TLS context\nreconstruction to avoid the need for flushing the transmit queue before\nissuing the context reconstruction request.\n\nExpected TCP SN is accessed without a lock, under the assumption that\nTCP doesn't transmit SKBs from different TX queue concurrently.\n\nIf packets are rerouted to a different netdevice, then a software\nfallback routine handles encryption.\n\nPaper: https://www.netdevconf.org/1.2/papers/netdevconf-TLS.pdf\n====================\n\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "full_message": "Merge branch 'tls-offload-netdev-and-mlx5-support'\n\nBoris Pismenny says:\n\n====================\nTLS offload, netdev & MLX5 support\n\nThe following series provides TLS TX inline crypto offload.\n\nv1->v2:\n   - Added IS_ENABLED(CONFIG_TLS_DEVICE) and a STATIC_KEY for icsk_clean_acked\n   - File license fix\n   - Fix spelling, comment by DaveW\n   - Move memory allocations out of tls_set_device_offload and other misc fixes,\n\tcomments by Kiril.\n\nv2->v3:\n   - Reversed xmas tree where needed and style fixes\n   - Removed the need for skb_page_frag_refill, per Eric's comment\n   - IPv6 dependency fixes\n\nv3->v4:\n   - Remove \"inline\" from functions in C files\n   - Make clean_acked_data_enabled a static variable and add enable/disable functions to control it.\n   - Remove unnecessary variable initialization mentioned by ShannonN\n   - Rebase over TLS RX\n   - Refactor the tls_software_fallback to reduce the number of variables mentioned by KirilT\n\nv4->v5:\n   - Add missing CONFIG_TLS_DEVICE\n\nv5->v6:\n   - Move changes to the software implementation into a seperate patch\n   - Fix some checkpatch warnings\n   - GPL export the enable/disable clean_acked_data functions\n\nv6->v7:\n   - Use the dst_entry to obtain the netdev in dev_get_by_index\n   - Remove the IPv6 patch since it is redundent now\n\nv7->v8:\n   - Fix a merge conflict in mlx5 header\n\nv8->v9:\n   - Fix false -Wmaybe-uninitialized warning\n   - Fix empty space in the end of new files\n\nv9->v10:\n   - Remove default \"n\" in net/Kconfig\n\nThis series adds a generic infrastructure to offload TLS crypto to a\nnetwork devices. It enables the kernel TLS socket to skip encryption and\nauthentication operations on the transmit side of the data path. Leaving\nthose computationally expensive operations to the NIC.\n\nThe NIC offload infrastructure builds TLS records and pushes them to the\nTCP layer just like the SW KTLS implementation and using the same API.\nTCP segmentation is mostly unaffected. Currently the only exception is\nthat we prevent mixed SKBs where only part of the payload requires\noffload. In the future we are likely to add a similar restriction\nfollowing a change cipher spec record.\n\nThe notable differences between SW KTLS and NIC offloaded TLS\nimplementations are as follows:\n1. The offloaded implementation builds \"plaintext TLS record\", those\nrecords contain plaintext instead of ciphertext and place holder bytes\ninstead of authentication tags.\n2. The offloaded implementation maintains a mapping from TCP sequence\nnumber to TLS records. Thus given a TCP SKB sent from a NIC offloaded\nTLS socket, we can use the tls NIC offload infrastructure to obtain\nenough context to encrypt the payload of the SKB.\nA TLS record is released when the last byte of the record is ack'ed,\nthis is done through the new icsk_clean_acked callback.\n\nThe infrastructure should be extendable to support various NIC offload\nimplementations.  However it is currently written with the\nimplementation below in mind:\nThe NIC assumes that packets from each offloaded stream are sent as\nplaintext and in-order. It keeps track of the TLS records in the TCP\nstream. When a packet marked for offload is transmitted, the NIC\nencrypts the payload in-place and puts authentication tags in the\nrelevant place holders.\n\nThe responsibility for handling out-of-order packets (i.e. TCP\nretransmission, qdisc drops) falls on the netdev driver.\n\nThe netdev driver keeps track of the expected TCP SN from the NIC's\nperspective.  If the next packet to transmit matches the expected TCP\nSN, the driver advances the expected TCP SN, and transmits the packet\nwith TLS offload indication.\n\nIf the next packet to transmit does not match the expected TCP SN. The\ndriver calls the TLS layer to obtain the TLS record that includes the\nTCP of the packet for transmission. Using this TLS record, the driver\nposts a work entry on the transmit queue to reconstruct the NIC TLS\nstate required for the offload of the out-of-order packet. It updates\nthe expected TCP SN accordingly and transmit the now in-order packet.\nThe same queue is used for packet transmission and TLS context\nreconstruction to avoid the need for flushing the transmit queue before\nissuing the context reconstruction request.\n\nExpected TCP SN is accessed without a lock, under the assumption that\nTCP doesn't transmit SKBs from different TX queue concurrently.\n\nIf packets are rerouted to a different netdevice, then a software\nfallback routine handles encryption.\n\nPaper: https://www.netdevconf.org/1.2/papers/netdevconf-TLS.pdf\n====================\n\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "author_name": "David S. Miller",
  "author_email": "davem@davemloft.net",
  "author_date": "Tue May 1 09:42:48 2018 -0400",
  "author_date_iso": "2018-05-01T09:42:48-04:00",
  "committer_name": "David S. Miller",
  "committer_email": "davem@davemloft.net",
  "committer_date": "Tue May 1 09:42:48 2018 -0400",
  "committer_date_iso": "2018-05-01T09:42:48-04:00",
  "files_changed": [],
  "files_changed_count": 0,
  "stats": [
    {
      "file": "MAINTAINERS",
      "insertions": 5,
      "deletions": 14
    },
    {
      "file": "drivers/net/ethernet/mellanox/mlx5/core/Kconfig",
      "insertions": 11,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/mellanox/mlx5/core/Makefile",
      "insertions": 4,
      "deletions": 2
    },
    {
      "file": "drivers/net/ethernet/mellanox/mlx5/core/accel/tls.c",
      "insertions": 71,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/mellanox/mlx5/core/accel/tls.h",
      "insertions": 86,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/mellanox/mlx5/core/en.h",
      "insertions": 21,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/mellanox/mlx5/core/en_accel/en_accel.h",
      "insertions": 72,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/mellanox/mlx5/core/en_accel/ipsec.h",
      "insertions": 0,
      "deletions": 3
    },
    {
      "file": "drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls.c",
      "insertions": 197,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls.h",
      "insertions": 87,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls_rxtx.c",
      "insertions": 278,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls_rxtx.h",
      "insertions": 50,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/mellanox/mlx5/core/en_accel/tls_stats.c",
      "insertions": 89,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/mellanox/mlx5/core/en_main.c",
      "insertions": 9,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/mellanox/mlx5/core/en_stats.c",
      "insertions": 32,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/mellanox/mlx5/core/en_stats.h",
      "insertions": 9,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/mellanox/mlx5/core/en_tx.c",
      "insertions": 22,
      "deletions": 15
    },
    {
      "file": "drivers/net/ethernet/mellanox/mlx5/core/fpga/core.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/mellanox/mlx5/core/fpga/ipsec.c",
      "insertions": 1,
      "deletions": 4
    },
    {
      "file": "drivers/net/ethernet/mellanox/mlx5/core/fpga/sdk.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/mellanox/mlx5/core/fpga/tls.c",
      "insertions": 562,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/mellanox/mlx5/core/fpga/tls.h",
      "insertions": 68,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/mellanox/mlx5/core/main.c",
      "insertions": 11,
      "deletions": 0
    },
    {
      "file": "include/linux/mlx5/mlx5_ifc.h",
      "insertions": 0,
      "deletions": 16
    },
    {
      "file": "include/linux/mlx5/mlx5_ifc_fpga.h",
      "insertions": 77,
      "deletions": 0
    },
    {
      "file": "include/linux/netdev_features.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "include/linux/netdevice.h",
      "insertions": 24,
      "deletions": 0
    },
    {
      "file": "include/linux/skbuff.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "include/net/inet_connection_sock.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "include/net/sock.h",
      "insertions": 21,
      "deletions": 0
    },
    {
      "file": "include/net/tcp.h",
      "insertions": 8,
      "deletions": 0
    },
    {
      "file": "include/net/tls.h",
      "insertions": 100,
      "deletions": 20
    },
    {
      "file": "net/Kconfig",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "net/core/dev.c",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "net/core/ethtool.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "net/core/skbuff.c",
      "insertions": 5,
      "deletions": 4
    },
    {
      "file": "net/ipv4/tcp_input.c",
      "insertions": 25,
      "deletions": 0
    },
    {
      "file": "net/tls/Kconfig",
      "insertions": 10,
      "deletions": 0
    },
    {
      "file": "net/tls/Makefile",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "net/tls/tls_device.c",
      "insertions": 764,
      "deletions": 0
    },
    {
      "file": "net/tls/tls_device_fallback.c",
      "insertions": 450,
      "deletions": 0
    },
    {
      "file": "net/tls/tls_main.c",
      "insertions": 89,
      "deletions": 54
    },
    {
      "file": "net/tls/tls_sw.c",
      "insertions": 79,
      "deletions": 59
    }
  ],
  "total_insertions": 3355,
  "total_deletions": 191,
  "total_changes": 3546,
  "parents": [
    "1a1f4a28f3cb9f6c3420e5a646372209f4850552",
    "f9c8141fc10324cef00f7e5a3358ccdbe1bd10b4"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.18",
    "v4.18-rc1",
    "v4.18-rc2",
    "v4.18-rc3",
    "v4.18-rc4",
    "v4.18-rc5",
    "v4.18-rc6",
    "v4.18-rc7",
    "v4.18-rc8",
    "v4.19"
  ],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": []
}