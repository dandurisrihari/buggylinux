{
  "hash": "6aee4badd8126f3a2b6d31c5e2db2439d316374f",
  "hash_short": "6aee4bad",
  "subject": "Merge branch 'work.openat2' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs",
  "body": "Pull openat2 support from Al Viro:\n \"This is the openat2() series from Aleksa Sarai.\n\n  I'm afraid that the rest of namei stuff will have to wait - it got\n  zero review the last time I'd posted #work.namei, and there had been a\n  leak in the posted series I'd caught only last weekend. I was going to\n  repost it on Monday, but the window opened and the odds of getting any\n  review during that... Oh, well.\n\n  Anyway, openat2 part should be ready; that _did_ get sane amount of\n  review and public testing, so here it comes\"\n\nFrom Aleksa's description of the series:\n \"For a very long time, extending openat(2) with new features has been\n  incredibly frustrating. This stems from the fact that openat(2) is\n  possibly the most famous counter-example to the mantra \"don't silently\n  accept garbage from userspace\" -- it doesn't check whether unknown\n  flags are present[1].\n\n  This means that (generally) the addition of new flags to openat(2) has\n  been fraught with backwards-compatibility issues (O_TMPFILE has to be\n  defined as __O_TMPFILE|O_DIRECTORY|[O_RDWR or O_WRONLY] to ensure old\n  kernels gave errors, since it's insecure to silently ignore the\n  flag[2]). All new security-related flags therefore have a tough road\n  to being added to openat(2).\n\n  Furthermore, the need for some sort of control over VFS's path\n  resolution (to avoid malicious paths resulting in inadvertent\n  breakouts) has been a very long-standing desire of many userspace\n  applications.\n\n  This patchset is a revival of Al Viro's old AT_NO_JUMPS[3] patchset\n  (which was a variant of David Drysdale's O_BENEATH patchset[4] which\n  was a spin-off of the Capsicum project[5]) with a few additions and\n  changes made based on the previous discussion within [6] as well as\n  others I felt were useful.\n\n  In line with the conclusions of the original discussion of\n  AT_NO_JUMPS, the flag has been split up into separate flags. However,\n  instead of being an openat(2) flag it is provided through a new\n  syscall openat2(2) which provides several other improvements to the\n  openat(2) interface (see the patch description for more details). The\n  following new LOOKUP_* flags are added:\n\n  LOOKUP_NO_XDEV:\n\n     Blocks all mountpoint crossings (upwards, downwards, or through\n     absolute links). Absolute pathnames alone in openat(2) do not\n     trigger this. Magic-link traversal which implies a vfsmount jump is\n     also blocked (though magic-link jumps on the same vfsmount are\n     permitted).\n\n  LOOKUP_NO_MAGICLINKS:\n\n     Blocks resolution through /proc/$pid/fd-style links. This is done\n     by blocking the usage of nd_jump_link() during resolution in a\n     filesystem. The term \"magic-links\" is used to match with the only\n     reference to these links in Documentation/, but I'm happy to change\n     the name.\n\n     It should be noted that this is different to the scope of\n     ~LOOKUP_FOLLOW in that it applies to all path components. However,\n     you can do openat2(NO_FOLLOW|NO_MAGICLINKS) on a magic-link and it\n     will *not* fail (assuming that no parent component was a\n     magic-link), and you will have an fd for the magic-link.\n\n     In order to correctly detect magic-links, the introduction of a new\n     LOOKUP_MAGICLINK_JUMPED state flag was required.\n\n  LOOKUP_BENEATH:\n\n     Disallows escapes to outside the starting dirfd's\n     tree, using techniques such as \"..\" or absolute links. Absolute\n     paths in openat(2) are also disallowed.\n\n     Conceptually this flag is to ensure you \"stay below\" a certain\n     point in the filesystem tree -- but this requires some additional\n     to protect against various races that would allow escape using\n     \"..\".\n\n     Currently LOOKUP_BENEATH implies LOOKUP_NO_MAGICLINKS, because it\n     can trivially beam you around the filesystem (breaking the\n     protection). In future, there might be similar safety checks done\n     as in LOOKUP_IN_ROOT, but that requires more discussion.\n\n  In addition, two new flags are added that expand on the above ideas:\n\n  LOOKUP_NO_SYMLINKS:\n\n     Does what it says on the tin. No symlink resolution is allowed at\n     all, including magic-links. Just as with LOOKUP_NO_MAGICLINKS this\n     can still be used with NOFOLLOW to open an fd for the symlink as\n     long as no parent path had a symlink component.\n\n  LOOKUP_IN_ROOT:\n\n     This is an extension of LOOKUP_BENEATH that, rather than blocking\n     attempts to move past the root, forces all such movements to be\n     scoped to the starting point. This provides chroot(2)-like\n     protection but without the cost of a chroot(2) for each filesystem\n     operation, as well as being safe against race attacks that\n     chroot(2) is not.\n\n     If a race is detected (as with LOOKUP_BENEATH) then an error is\n     generated, and similar to LOOKUP_BENEATH it is not permitted to\n     cross magic-links with LOOKUP_IN_ROOT.\n\n     The primary need for this is from container runtimes, which\n     currently need to do symlink scoping in userspace[7] when opening\n     paths in a potentially malicious container.\n\n     There is a long list of CVEs that could have bene mitigated by\n     having RESOLVE_THIS_ROOT (such as CVE-2017-1002101,\n     CVE-2017-1002102, CVE-2018-15664, and CVE-2019-5736, just to name a\n     few).\n\n  In order to make all of the above more usable, I'm working on\n  libpathrs[8] which is a C-friendly library for safe path resolution.\n  It features a userspace-emulated backend if the kernel doesn't support\n  openat2(2). Hopefully we can get userspace to switch to using it, and\n  thus get openat2(2) support for free once it's ready.\n\n  Future work would include implementing things like\n  RESOLVE_NO_AUTOMOUNT and possibly a RESOLVE_NO_REMOTE (to allow\n  programs to be sure they don't hit DoSes though stale NFS handles)\"\n\n* 'work.openat2' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs:\n  Documentation: path-lookup: include new LOOKUP flags\n  selftests: add openat2(2) selftests\n  open: introduce openat2(2) syscall\n  namei: LOOKUP_{IN_ROOT,BENEATH}: permit limited \"..\" resolution\n  namei: LOOKUP_IN_ROOT: chroot-like scoped resolution\n  namei: LOOKUP_BENEATH: O_BENEATH-like scoped resolution\n  namei: LOOKUP_NO_XDEV: block mountpoint crossing\n  namei: LOOKUP_NO_MAGICLINKS: block magic-link resolution\n  namei: LOOKUP_NO_SYMLINKS: block symlink resolution\n  namei: allow set_root() to produce errors\n  namei: allow nd_jump_link() to produce errors\n  nsfs: clean-up ns_get_path() signature to return int\n  namei: only return -ECHILD from follow_dotdot_rcu()",
  "full_message": "Merge branch 'work.openat2' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs\n\nPull openat2 support from Al Viro:\n \"This is the openat2() series from Aleksa Sarai.\n\n  I'm afraid that the rest of namei stuff will have to wait - it got\n  zero review the last time I'd posted #work.namei, and there had been a\n  leak in the posted series I'd caught only last weekend. I was going to\n  repost it on Monday, but the window opened and the odds of getting any\n  review during that... Oh, well.\n\n  Anyway, openat2 part should be ready; that _did_ get sane amount of\n  review and public testing, so here it comes\"\n\nFrom Aleksa's description of the series:\n \"For a very long time, extending openat(2) with new features has been\n  incredibly frustrating. This stems from the fact that openat(2) is\n  possibly the most famous counter-example to the mantra \"don't silently\n  accept garbage from userspace\" -- it doesn't check whether unknown\n  flags are present[1].\n\n  This means that (generally) the addition of new flags to openat(2) has\n  been fraught with backwards-compatibility issues (O_TMPFILE has to be\n  defined as __O_TMPFILE|O_DIRECTORY|[O_RDWR or O_WRONLY] to ensure old\n  kernels gave errors, since it's insecure to silently ignore the\n  flag[2]). All new security-related flags therefore have a tough road\n  to being added to openat(2).\n\n  Furthermore, the need for some sort of control over VFS's path\n  resolution (to avoid malicious paths resulting in inadvertent\n  breakouts) has been a very long-standing desire of many userspace\n  applications.\n\n  This patchset is a revival of Al Viro's old AT_NO_JUMPS[3] patchset\n  (which was a variant of David Drysdale's O_BENEATH patchset[4] which\n  was a spin-off of the Capsicum project[5]) with a few additions and\n  changes made based on the previous discussion within [6] as well as\n  others I felt were useful.\n\n  In line with the conclusions of the original discussion of\n  AT_NO_JUMPS, the flag has been split up into separate flags. However,\n  instead of being an openat(2) flag it is provided through a new\n  syscall openat2(2) which provides several other improvements to the\n  openat(2) interface (see the patch description for more details). The\n  following new LOOKUP_* flags are added:\n\n  LOOKUP_NO_XDEV:\n\n     Blocks all mountpoint crossings (upwards, downwards, or through\n     absolute links). Absolute pathnames alone in openat(2) do not\n     trigger this. Magic-link traversal which implies a vfsmount jump is\n     also blocked (though magic-link jumps on the same vfsmount are\n     permitted).\n\n  LOOKUP_NO_MAGICLINKS:\n\n     Blocks resolution through /proc/$pid/fd-style links. This is done\n     by blocking the usage of nd_jump_link() during resolution in a\n     filesystem. The term \"magic-links\" is used to match with the only\n     reference to these links in Documentation/, but I'm happy to change\n     the name.\n\n     It should be noted that this is different to the scope of\n     ~LOOKUP_FOLLOW in that it applies to all path components. However,\n     you can do openat2(NO_FOLLOW|NO_MAGICLINKS) on a magic-link and it\n     will *not* fail (assuming that no parent component was a\n     magic-link), and you will have an fd for the magic-link.\n\n     In order to correctly detect magic-links, the introduction of a new\n     LOOKUP_MAGICLINK_JUMPED state flag was required.\n\n  LOOKUP_BENEATH:\n\n     Disallows escapes to outside the starting dirfd's\n     tree, using techniques such as \"..\" or absolute links. Absolute\n     paths in openat(2) are also disallowed.\n\n     Conceptually this flag is to ensure you \"stay below\" a certain\n     point in the filesystem tree -- but this requires some additional\n     to protect against various races that would allow escape using\n     \"..\".\n\n     Currently LOOKUP_BENEATH implies LOOKUP_NO_MAGICLINKS, because it\n     can trivially beam you around the filesystem (breaking the\n     protection). In future, there might be similar safety checks done\n     as in LOOKUP_IN_ROOT, but that requires more discussion.\n\n  In addition, two new flags are added that expand on the above ideas:\n\n  LOOKUP_NO_SYMLINKS:\n\n     Does what it says on the tin. No symlink resolution is allowed at\n     all, including magic-links. Just as with LOOKUP_NO_MAGICLINKS this\n     can still be used with NOFOLLOW to open an fd for the symlink as\n     long as no parent path had a symlink component.\n\n  LOOKUP_IN_ROOT:\n\n     This is an extension of LOOKUP_BENEATH that, rather than blocking\n     attempts to move past the root, forces all such movements to be\n     scoped to the starting point. This provides chroot(2)-like\n     protection but without the cost of a chroot(2) for each filesystem\n     operation, as well as being safe against race attacks that\n     chroot(2) is not.\n\n     If a race is detected (as with LOOKUP_BENEATH) then an error is\n     generated, and similar to LOOKUP_BENEATH it is not permitted to\n     cross magic-links with LOOKUP_IN_ROOT.\n\n     The primary need for this is from container runtimes, which\n     currently need to do symlink scoping in userspace[7] when opening\n     paths in a potentially malicious container.\n\n     There is a long list of CVEs that could have bene mitigated by\n     having RESOLVE_THIS_ROOT (such as CVE-2017-1002101,\n     CVE-2017-1002102, CVE-2018-15664, and CVE-2019-5736, just to name a\n     few).\n\n  In order to make all of the above more usable, I'm working on\n  libpathrs[8] which is a C-friendly library for safe path resolution.\n  It features a userspace-emulated backend if the kernel doesn't support\n  openat2(2). Hopefully we can get userspace to switch to using it, and\n  thus get openat2(2) support for free once it's ready.\n\n  Future work would include implementing things like\n  RESOLVE_NO_AUTOMOUNT and possibly a RESOLVE_NO_REMOTE (to allow\n  programs to be sure they don't hit DoSes though stale NFS handles)\"\n\n* 'work.openat2' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs:\n  Documentation: path-lookup: include new LOOKUP flags\n  selftests: add openat2(2) selftests\n  open: introduce openat2(2) syscall\n  namei: LOOKUP_{IN_ROOT,BENEATH}: permit limited \"..\" resolution\n  namei: LOOKUP_IN_ROOT: chroot-like scoped resolution\n  namei: LOOKUP_BENEATH: O_BENEATH-like scoped resolution\n  namei: LOOKUP_NO_XDEV: block mountpoint crossing\n  namei: LOOKUP_NO_MAGICLINKS: block magic-link resolution\n  namei: LOOKUP_NO_SYMLINKS: block symlink resolution\n  namei: allow set_root() to produce errors\n  namei: allow nd_jump_link() to produce errors\n  nsfs: clean-up ns_get_path() signature to return int\n  namei: only return -ECHILD from follow_dotdot_rcu()",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Wed Jan 29 11:20:24 2020 -0800",
  "author_date_iso": "2020-01-29T11:20:24-08:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Wed Jan 29 11:20:24 2020 -0800",
  "committer_date_iso": "2020-01-29T11:20:24-08:00",
  "files_changed": [
    "MAINTAINERS",
    "arch/arm64/include/asm/unistd.h",
    "arch/m68k/kernel/syscalls/syscall.tbl",
    "fs/namei.c",
    "fs/nsfs.c",
    "fs/proc/base.c",
    "fs/proc/namespaces.c",
    "include/linux/namei.h",
    "include/linux/proc_ns.h",
    "include/linux/syscalls.h",
    "kernel/events/core.c",
    "security/apparmor/apparmorfs.c",
    "tools/testing/selftests/Makefile"
  ],
  "files_changed_count": 13,
  "stats": [
    {
      "file": "CREDITS",
      "insertions": 3,
      "deletions": 1
    },
    {
      "file": "Documentation/filesystems/path-lookup.rst",
      "insertions": 62,
      "deletions": 6
    },
    {
      "file": "MAINTAINERS",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/alpha/kernel/syscalls/syscall.tbl",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/arm/tools/syscall.tbl",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/unistd.h",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/arm64/include/asm/unistd32.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "arch/ia64/kernel/syscalls/syscall.tbl",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/m68k/kernel/syscalls/syscall.tbl",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/microblaze/kernel/syscalls/syscall.tbl",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/mips/kernel/syscalls/syscall_n32.tbl",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/mips/kernel/syscalls/syscall_n64.tbl",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/mips/kernel/syscalls/syscall_o32.tbl",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/parisc/kernel/syscalls/syscall.tbl",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/powerpc/kernel/syscalls/syscall.tbl",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/s390/kernel/syscalls/syscall.tbl",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/sh/kernel/syscalls/syscall.tbl",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/sparc/kernel/syscalls/syscall.tbl",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/entry/syscalls/syscall_32.tbl",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/entry/syscalls/syscall_64.tbl",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/xtensa/kernel/syscalls/syscall.tbl",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "fs/namei.c",
      "insertions": 165,
      "deletions": 34
    },
    {
      "file": "fs/nsfs.c",
      "insertions": 14,
      "deletions": 15
    },
    {
      "file": "fs/open.c",
      "insertions": 113,
      "deletions": 34
    },
    {
      "file": "fs/proc/base.c",
      "insertions": 1,
      "deletions": 2
    },
    {
      "file": "fs/proc/namespaces.c",
      "insertions": 12,
      "deletions": 8
    },
    {
      "file": "include/linux/fcntl.h",
      "insertions": 15,
      "deletions": 1
    },
    {
      "file": "include/linux/namei.h",
      "insertions": 11,
      "deletions": 1
    },
    {
      "file": "include/linux/proc_ns.h",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "include/linux/syscalls.h",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "include/uapi/asm-generic/unistd.h",
      "insertions": 4,
      "deletions": 1
    },
    {
      "file": "include/uapi/linux/fcntl.h",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "include/uapi/linux/openat2.h",
      "insertions": 39,
      "deletions": 0
    },
    {
      "file": "kernel/bpf/offload.c",
      "insertions": 6,
      "deletions": 6
    },
    {
      "file": "kernel/events/core.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "security/apparmor/apparmorfs.c",
      "insertions": 4,
      "deletions": 2
    },
    {
      "file": "tools/testing/selftests/Makefile",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/openat2/.gitignore",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/openat2/Makefile",
      "insertions": 8,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/openat2/helpers.c",
      "insertions": 109,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/openat2/helpers.h",
      "insertions": 106,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/openat2/openat2_test.c",
      "insertions": 312,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/openat2/rename_attack_test.c",
      "insertions": 160,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/openat2/resolve_test.c",
      "insertions": 523,
      "deletions": 0
    }
  ],
  "total_insertions": 1696,
  "total_deletions": 116,
  "total_changes": 1812,
  "parents": [
    "15d6632496537fa66488221ee5dd2f9fb318ef2e",
    "b55eef872a96738ea9cb35774db5ce9a7d3a648f"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.6",
    "v5.6-rc1",
    "v5.6-rc2",
    "v5.6-rc3",
    "v5.6-rc4",
    "v5.6-rc5",
    "v5.6-rc6",
    "v5.6-rc7",
    "v5.7-rc1"
  ],
  "is_merge": true,
  "security_info": {
    "cve_ids": [
      "CVE-2017-1002101",
      "CVE-2017-1002102",
      "CVE-2018-15664",
      "CVE-2019-5736"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "fs/namei.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/asm/unistd.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/m68k/kernel/syscalls/syscall.tbl",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/namei.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/proc/base.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/proc/namespaces.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/nsfs.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/proc_ns.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/syscalls.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "tools/testing/selftests/Makefile",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "security/apparmor/apparmorfs.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "MAINTAINERS",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/events/core.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}