commit 0378daef0c6cf1c2ba525bde0b529f0d4ef5233b
Merge: 05487215e6b9 16314874b12b
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Sun Aug 9 12:58:23 2020 -0400

    Merge tag 'kvmarm-5.9' of git://git.kernel.org/pub/scm/linux/kernel/git/kvmarm/kvmarm into kvm-next-5.6
    
    KVM/arm64 updates for Linux 5.9:
    
    - Split the VHE and nVHE hypervisor code bases, build the EL2 code
      separately, allowing for the VHE code to now be built with instrumentation
    
    - Level-based TLB invalidation support
    
    - Restructure of the vcpu register storage to accomodate the NV code
    
    - Pointer Authentication available for guests on nVHE hosts
    
    - Simplification of the system register table parsing
    
    - MMU cleanups and fixes
    
    - A number of post-32bit cleanups and other fixes

diff --cc arch/arm64/kvm/sys_regs.c
index 138961d7ebe3,1fbab5f066bf..077293b5115f
--- a/arch/arm64/kvm/sys_regs.c
+++ b/arch/arm64/kvm/sys_regs.c
@@@ -2335,40 -2327,24 +2327,24 @@@ static int kvm_handle_cp_32(struct kvm_
  	return 1;
  }
  
 -int kvm_handle_cp15_64(struct kvm_vcpu *vcpu, struct kvm_run *run)
 +int kvm_handle_cp15_64(struct kvm_vcpu *vcpu)
  {
- 	const struct sys_reg_desc *target_specific;
- 	size_t num;
- 
- 	target_specific = get_target_table(vcpu->arch.target, false, &num);
- 	return kvm_handle_cp_64(vcpu,
- 				cp15_64_regs, ARRAY_SIZE(cp15_64_regs),
- 				target_specific, num);
+ 	return kvm_handle_cp_64(vcpu, cp15_64_regs, ARRAY_SIZE(cp15_64_regs));
  }
  
 -int kvm_handle_cp15_32(struct kvm_vcpu *vcpu, struct kvm_run *run)
 +int kvm_handle_cp15_32(struct kvm_vcpu *vcpu)
  {
- 	const struct sys_reg_desc *target_specific;
- 	size_t num;
- 
- 	target_specific = get_target_table(vcpu->arch.target, false, &num);
- 	return kvm_handle_cp_32(vcpu,
- 				cp15_regs, ARRAY_SIZE(cp15_regs),
- 				target_specific, num);
+ 	return kvm_handle_cp_32(vcpu, cp15_regs, ARRAY_SIZE(cp15_regs));
  }
  
 -int kvm_handle_cp14_64(struct kvm_vcpu *vcpu, struct kvm_run *run)
 +int kvm_handle_cp14_64(struct kvm_vcpu *vcpu)
  {
- 	return kvm_handle_cp_64(vcpu,
- 				cp14_64_regs, ARRAY_SIZE(cp14_64_regs),
- 				NULL, 0);
+ 	return kvm_handle_cp_64(vcpu, cp14_64_regs, ARRAY_SIZE(cp14_64_regs));
  }
  
 -int kvm_handle_cp14_32(struct kvm_vcpu *vcpu, struct kvm_run *run)
 +int kvm_handle_cp14_32(struct kvm_vcpu *vcpu)
  {
- 	return kvm_handle_cp_32(vcpu,
- 				cp14_regs, ARRAY_SIZE(cp14_regs),
- 				NULL, 0);
+ 	return kvm_handle_cp_32(vcpu, cp14_regs, ARRAY_SIZE(cp14_regs));
  }
  
  static bool is_imp_def_sys_reg(struct sys_reg_params *params)
@@@ -2416,11 -2392,12 +2392,11 @@@ void kvm_reset_sys_regs(struct kvm_vcp
  /**
   * kvm_handle_sys_reg -- handles a mrs/msr trap on a guest sys_reg access
   * @vcpu: The VCPU pointer
 - * @run:  The kvm_run struct
   */
 -int kvm_handle_sys_reg(struct kvm_vcpu *vcpu, struct kvm_run *run)
 +int kvm_handle_sys_reg(struct kvm_vcpu *vcpu)
  {
  	struct sys_reg_params params;
- 	unsigned long esr = kvm_vcpu_get_hsr(vcpu);
+ 	unsigned long esr = kvm_vcpu_get_esr(vcpu);
  	int Rt = kvm_vcpu_sys_get_rt(vcpu);
  	int ret;