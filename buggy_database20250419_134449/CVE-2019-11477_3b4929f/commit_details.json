{
  "hash": "3b4929f65b0d8249f19a50245cd88ed1a2f78cff",
  "hash_short": "3b4929f6",
  "subject": "tcp: limit payload size of sacked skbs",
  "body": "Jonathan Looney reported that TCP can trigger the following crash\nin tcp_shifted_skb() :\n\n\tBUG_ON(tcp_skb_pcount(skb) < pcount);\n\nThis can happen if the remote peer has advertized the smallest\nMSS that linux TCP accepts : 48\n\nAn skb can hold 17 fragments, and each fragment can hold 32KB\non x86, or 64KB on PowerPC.\n\nThis means that the 16bit witdh of TCP_SKB_CB(skb)->tcp_gso_segs\ncan overflow.\n\nNote that tcp_sendmsg() builds skbs with less than 64KB\nof payload, so this problem needs SACK to be enabled.\nSACK blocks allow TCP to coalesce multiple skbs in the retransmit\nqueue, thus filling the 17 fragments to maximal capacity.\n\nCVE-2019-11477 -- u16 overflow of TCP_SKB_CB(skb)->tcp_gso_segs\n\nFixes: 832d11c5cd07 (\"tcp: Try to restore large SKBs while SACK processing\")\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nReported-by: Jonathan Looney <jtl@netflix.com>\nAcked-by: Neal Cardwell <ncardwell@google.com>\nReviewed-by: Tyler Hicks <tyhicks@canonical.com>\nCc: Yuchung Cheng <ycheng@google.com>\nCc: Bruce Curtis <brucec@netflix.com>\nCc: Jonathan Lemon <jonathan.lemon@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "full_message": "tcp: limit payload size of sacked skbs\n\nJonathan Looney reported that TCP can trigger the following crash\nin tcp_shifted_skb() :\n\n\tBUG_ON(tcp_skb_pcount(skb) < pcount);\n\nThis can happen if the remote peer has advertized the smallest\nMSS that linux TCP accepts : 48\n\nAn skb can hold 17 fragments, and each fragment can hold 32KB\non x86, or 64KB on PowerPC.\n\nThis means that the 16bit witdh of TCP_SKB_CB(skb)->tcp_gso_segs\ncan overflow.\n\nNote that tcp_sendmsg() builds skbs with less than 64KB\nof payload, so this problem needs SACK to be enabled.\nSACK blocks allow TCP to coalesce multiple skbs in the retransmit\nqueue, thus filling the 17 fragments to maximal capacity.\n\nCVE-2019-11477 -- u16 overflow of TCP_SKB_CB(skb)->tcp_gso_segs\n\nFixes: 832d11c5cd07 (\"tcp: Try to restore large SKBs while SACK processing\")\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nReported-by: Jonathan Looney <jtl@netflix.com>\nAcked-by: Neal Cardwell <ncardwell@google.com>\nReviewed-by: Tyler Hicks <tyhicks@canonical.com>\nCc: Yuchung Cheng <ycheng@google.com>\nCc: Bruce Curtis <brucec@netflix.com>\nCc: Jonathan Lemon <jonathan.lemon@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "author_name": "Eric Dumazet",
  "author_email": "edumazet@google.com",
  "author_date": "Fri May 17 17:17:22 2019 -0700",
  "author_date_iso": "2019-05-17T17:17:22-07:00",
  "committer_name": "David S. Miller",
  "committer_email": "davem@davemloft.net",
  "committer_date": "Sat Jun 15 18:47:31 2019 -0700",
  "committer_date_iso": "2019-06-15T18:47:31-07:00",
  "files_changed": [
    "include/linux/tcp.h",
    "include/net/tcp.h",
    "net/ipv4/tcp.c",
    "net/ipv4/tcp_input.c",
    "net/ipv4/tcp_output.c"
  ],
  "files_changed_count": 5,
  "stats": [
    {
      "file": "include/linux/tcp.h",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "include/net/tcp.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "net/ipv4/tcp.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "net/ipv4/tcp_input.c",
      "insertions": 20,
      "deletions": 6
    },
    {
      "file": "net/ipv4/tcp_output.c",
      "insertions": 3,
      "deletions": 3
    }
  ],
  "total_insertions": 30,
  "total_deletions": 9,
  "total_changes": 39,
  "parents": [
    "1eb4169c1e6b3c95f3a99c2c7f91b10e6c98e848"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.2",
    "v5.2-rc6",
    "v5.2-rc7",
    "v5.3",
    "v5.3-rc1",
    "v5.3-rc2",
    "v5.3-rc3",
    "v5.3-rc4",
    "v5.3-rc5",
    "v5.3-rc6"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2019-11477"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "include/linux/tcp.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/net/tcp.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/ipv4/tcp.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/ipv4/tcp_input.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/ipv4/tcp_output.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}