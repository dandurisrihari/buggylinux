{
  "hash": "d0989d01c66fed6a741820a96b8cca6688f183ff",
  "hash_short": "d0989d01",
  "subject": "Merge tag 'hardening-v6.1-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux",
  "body": "Pull kernel hardening updates from Kees Cook:\n \"Most of the collected changes here are fixes across the tree for\n  various hardening features (details noted below).\n\n  The most notable new feature here is the addition of the memcpy()\n  overflow warning (under CONFIG_FORTIFY_SOURCE), which is the next step\n  on the path to killing the common class of \"trivially detectable\"\n  buffer overflow conditions (i.e. on arrays with sizes known at compile\n  time) that have resulted in many exploitable vulnerabilities over the\n  years (e.g. BleedingTooth).\n\n  This feature is expected to still have some undiscovered false\n  positives. It's been in -next for a full development cycle and all the\n  reported false positives have been fixed in their respective trees.\n  All the known-bad code patterns we could find with Coccinelle are also\n  either fixed in their respective trees or in flight.\n\n  The commit message in commit 54d9469bc515 (\"fortify: Add run-time WARN\n  for cross-field memcpy()\") for the feature has extensive details, but\n  I'll repeat here that this is a warning _only_, and is not intended to\n  actually block overflows (yet). The many patches fixing array sizes\n  and struct members have been landing for several years now, and we're\n  finally able to turn this on to find any remaining stragglers.\n\n  Summary:\n\n  Various fixes across several hardening areas:\n\n   - loadpin: Fix verity target enforcement (Matthias Kaehlcke).\n\n   - zero-call-used-regs: Add missing clobbers in paravirt (Bill\n     Wendling).\n\n   - CFI: clean up sparc function pointer type mismatches (Bart Van\n     Assche).\n\n   - Clang: Adjust compiler flag detection for various Clang changes\n     (Sami Tolvanen, Kees Cook).\n\n   - fortify: Fix warnings in arch-specific code in sh, ARM, and xen.\n\n  Improvements to existing features:\n\n   - testing: improve overflow KUnit test, introduce fortify KUnit test,\n     add more coverage to LKDTM tests (Bart Van Assche, Kees Cook).\n\n   - overflow: Relax overflow type checking for wider utility.\n\n  New features:\n\n   - string: Introduce strtomem() and strtomem_pad() to fill a gap in\n     strncpy() replacement needs.\n\n   - um: Enable FORTIFY_SOURCE support.\n\n   - fortify: Enable run-time struct member memcpy() overflow warning\"\n\n* tag 'hardening-v6.1-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux: (27 commits)\n  Makefile.extrawarn: Move -Wcast-function-type-strict to W=1\n  hardening: Remove Clang's enable flag for -ftrivial-auto-var-init=zero\n  sparc: Unbreak the build\n  x86/paravirt: add extra clobbers with ZERO_CALL_USED_REGS enabled\n  x86/paravirt: clean up typos and grammaros\n  fortify: Convert to struct vs member helpers\n  fortify: Explicitly check bounds are compile-time constants\n  x86/entry: Work around Clang __bdos() bug\n  ARM: decompressor: Include .data.rel.ro.local\n  fortify: Adjust KUnit test for modular build\n  sh: machvec: Use char[] for section boundaries\n  kunit/memcpy: Avoid pathological compile-time string size\n  lib: Improve the is_signed_type() kunit test\n  LoadPin: Require file with verity root digests to have a header\n  dm: verity-loadpin: Only trust verity targets with enforcement\n  LoadPin: Fix Kconfig doc about format of file with verity digests\n  um: Enable FORTIFY_SOURCE\n  lkdtm: Update tests for memcpy() run-time warnings\n  fortify: Add run-time WARN for cross-field memcpy()\n  fortify: Use SIZE_MAX instead of (size_t)-1\n  ...",
  "full_message": "Merge tag 'hardening-v6.1-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux\n\nPull kernel hardening updates from Kees Cook:\n \"Most of the collected changes here are fixes across the tree for\n  various hardening features (details noted below).\n\n  The most notable new feature here is the addition of the memcpy()\n  overflow warning (under CONFIG_FORTIFY_SOURCE), which is the next step\n  on the path to killing the common class of \"trivially detectable\"\n  buffer overflow conditions (i.e. on arrays with sizes known at compile\n  time) that have resulted in many exploitable vulnerabilities over the\n  years (e.g. BleedingTooth).\n\n  This feature is expected to still have some undiscovered false\n  positives. It's been in -next for a full development cycle and all the\n  reported false positives have been fixed in their respective trees.\n  All the known-bad code patterns we could find with Coccinelle are also\n  either fixed in their respective trees or in flight.\n\n  The commit message in commit 54d9469bc515 (\"fortify: Add run-time WARN\n  for cross-field memcpy()\") for the feature has extensive details, but\n  I'll repeat here that this is a warning _only_, and is not intended to\n  actually block overflows (yet). The many patches fixing array sizes\n  and struct members have been landing for several years now, and we're\n  finally able to turn this on to find any remaining stragglers.\n\n  Summary:\n\n  Various fixes across several hardening areas:\n\n   - loadpin: Fix verity target enforcement (Matthias Kaehlcke).\n\n   - zero-call-used-regs: Add missing clobbers in paravirt (Bill\n     Wendling).\n\n   - CFI: clean up sparc function pointer type mismatches (Bart Van\n     Assche).\n\n   - Clang: Adjust compiler flag detection for various Clang changes\n     (Sami Tolvanen, Kees Cook).\n\n   - fortify: Fix warnings in arch-specific code in sh, ARM, and xen.\n\n  Improvements to existing features:\n\n   - testing: improve overflow KUnit test, introduce fortify KUnit test,\n     add more coverage to LKDTM tests (Bart Van Assche, Kees Cook).\n\n   - overflow: Relax overflow type checking for wider utility.\n\n  New features:\n\n   - string: Introduce strtomem() and strtomem_pad() to fill a gap in\n     strncpy() replacement needs.\n\n   - um: Enable FORTIFY_SOURCE support.\n\n   - fortify: Enable run-time struct member memcpy() overflow warning\"\n\n* tag 'hardening-v6.1-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/kees/linux: (27 commits)\n  Makefile.extrawarn: Move -Wcast-function-type-strict to W=1\n  hardening: Remove Clang's enable flag for -ftrivial-auto-var-init=zero\n  sparc: Unbreak the build\n  x86/paravirt: add extra clobbers with ZERO_CALL_USED_REGS enabled\n  x86/paravirt: clean up typos and grammaros\n  fortify: Convert to struct vs member helpers\n  fortify: Explicitly check bounds are compile-time constants\n  x86/entry: Work around Clang __bdos() bug\n  ARM: decompressor: Include .data.rel.ro.local\n  fortify: Adjust KUnit test for modular build\n  sh: machvec: Use char[] for section boundaries\n  kunit/memcpy: Avoid pathological compile-time string size\n  lib: Improve the is_signed_type() kunit test\n  LoadPin: Require file with verity root digests to have a header\n  dm: verity-loadpin: Only trust verity targets with enforcement\n  LoadPin: Fix Kconfig doc about format of file with verity digests\n  um: Enable FORTIFY_SOURCE\n  lkdtm: Update tests for memcpy() run-time warnings\n  fortify: Add run-time WARN for cross-field memcpy()\n  fortify: Use SIZE_MAX instead of (size_t)-1\n  ...",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Mon Oct 3 17:24:22 2022 -0700",
  "author_date_iso": "2022-10-03T17:24:22-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Mon Oct 3 17:24:22 2022 -0700",
  "committer_date_iso": "2022-10-03T17:24:22-07:00",
  "files_changed": [
    "MAINTAINERS",
    "Makefile",
    "lib/Kconfig.debug",
    "lib/Makefile",
    "scripts/Makefile.extrawarn"
  ],
  "files_changed_count": 5,
  "stats": [
    {
      "file": "Documentation/process/deprecated.rst",
      "insertions": 7,
      "deletions": 4
    },
    {
      "file": "MAINTAINERS",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "Makefile",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/arm/boot/compressed/vmlinux.lds.S",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "arch/sh/include/asm/sections.h",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/sh/kernel/machvec.c",
      "insertions": 5,
      "deletions": 5
    },
    {
      "file": "arch/sparc/include/asm/smp_32.h",
      "insertions": 6,
      "deletions": 9
    },
    {
      "file": "arch/sparc/kernel/leon_smp.c",
      "insertions": 7,
      "deletions": 5
    },
    {
      "file": "arch/sparc/kernel/sun4d_smp.c",
      "insertions": 7,
      "deletions": 5
    },
    {
      "file": "arch/sparc/kernel/sun4m_smp.c",
      "insertions": 6,
      "deletions": 4
    },
    {
      "file": "arch/sparc/mm/srmmu.c",
      "insertions": 13,
      "deletions": 16
    },
    {
      "file": "arch/um/Kconfig",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/um/os-Linux/user_syms.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/paravirt_types.h",
      "insertions": 18,
      "deletions": 9
    },
    {
      "file": "arch/x86/xen/enlighten_pv.c",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "drivers/md/dm-verity-loadpin.c",
      "insertions": 8,
      "deletions": 0
    },
    {
      "file": "drivers/md/dm-verity-target.c",
      "insertions": 16,
      "deletions": 0
    },
    {
      "file": "drivers/md/dm-verity.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "drivers/misc/lkdtm/fortify.c",
      "insertions": 83,
      "deletions": 13
    },
    {
      "file": "include/linux/fortify-string.h",
      "insertions": 178,
      "deletions": 67
    },
    {
      "file": "include/linux/overflow.h",
      "insertions": 41,
      "deletions": 31
    },
    {
      "file": "include/linux/string.h",
      "insertions": 43,
      "deletions": 0
    },
    {
      "file": "lib/Kconfig.debug",
      "insertions": 21,
      "deletions": 0
    },
    {
      "file": "lib/Makefile",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "lib/fortify_kunit.c",
      "insertions": 76,
      "deletions": 0
    },
    {
      "file": "lib/is_signed_type_kunit.c",
      "insertions": 53,
      "deletions": 0
    },
    {
      "file": "lib/memcpy_kunit.c",
      "insertions": 55,
      "deletions": 4
    },
    {
      "file": "lib/overflow_kunit.c",
      "insertions": 122,
      "deletions": 55
    },
    {
      "file": "scripts/Makefile.extrawarn",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "security/Kconfig.hardening",
      "insertions": 10,
      "deletions": 4
    },
    {
      "file": "security/loadpin/Kconfig",
      "insertions": 6,
      "deletions": 1
    },
    {
      "file": "security/loadpin/loadpin.c",
      "insertions": 15,
      "deletions": 1
    },
    {
      "file": "tools/testing/selftests/lkdtm/tests.txt",
      "insertions": 5,
      "deletions": 3
    }
  ],
  "total_insertions": 815,
  "total_deletions": 240,
  "total_changes": 1055,
  "parents": [
    "865dad2022c52ac6c5c9a87c5cec78a69f633fb6",
    "2120635108b35ecad9c59c8b44f6cbdf4f98214e"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "MAINTAINERS",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "Makefile",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "lib/Kconfig.debug",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "lib/Makefile",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "scripts/Makefile.extrawarn",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}