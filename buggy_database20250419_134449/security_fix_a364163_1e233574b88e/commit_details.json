{
  "hash": "a3641631d14571242eec0d30c9faa786cbf52d44",
  "hash_short": "a3641631",
  "subject": "KVM: cpuid: Fix read/write out-of-bounds vulnerability in cpuid emulation",
  "body": "If \"i\" is the last element in the vcpu->arch.cpuid_entries[] array, it\npotentially can be exploited the vulnerability. this will out-of-bounds\nread and write.  Luckily, the effect is small:\n\n\t/* when no next entry is found, the current entry[i] is reselected */\n\tfor (j = i + 1; ; j = (j + 1) % nent) {\n\t\tstruct kvm_cpuid_entry2 *ej = &vcpu->arch.cpuid_entries[j];\n\t\tif (ej->function == e->function) {\n\nIt reads ej->maxphyaddr, which is user controlled.  However...\n\n\t\t\tej->flags |= KVM_CPUID_FLAG_STATE_READ_NEXT;\n\nAfter cpuid_entries there is\n\n\tint maxphyaddr;\n\tstruct x86_emulate_ctxt emulate_ctxt;  /* 16-byte aligned */\n\nSo we have:\n\n- cpuid_entries at offset 1B50 (6992)\n- maxphyaddr at offset 27D0 (6992 + 3200 = 10192)\n- padding at 27D4...27DF\n- emulate_ctxt at 27E0\n\nAnd it writes in the padding.  Pfew, writing the ops field of emulate_ctxt\nwould have been much worse.\n\nThis patch fixes it by modding the index to avoid the out-of-bounds\naccess. Worst case, i == j and ej->function == e->function,\nthe loop can bail out.\n\nReported-by: Moguofang <moguofang@huawei.com>\nCc: Paolo Bonzini <pbonzini@redhat.com>\nCc: Radim Kr\u010dm\u00e1\u0159 <rkrcmar@redhat.com>\nCc: Guofang Mo <moguofang@huawei.com>\nCc: stable@vger.kernel.org\nSigned-off-by: Wanpeng Li <wanpeng.li@hotmail.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
  "full_message": "KVM: cpuid: Fix read/write out-of-bounds vulnerability in cpuid emulation\n\nIf \"i\" is the last element in the vcpu->arch.cpuid_entries[] array, it\npotentially can be exploited the vulnerability. this will out-of-bounds\nread and write.  Luckily, the effect is small:\n\n\t/* when no next entry is found, the current entry[i] is reselected */\n\tfor (j = i + 1; ; j = (j + 1) % nent) {\n\t\tstruct kvm_cpuid_entry2 *ej = &vcpu->arch.cpuid_entries[j];\n\t\tif (ej->function == e->function) {\n\nIt reads ej->maxphyaddr, which is user controlled.  However...\n\n\t\t\tej->flags |= KVM_CPUID_FLAG_STATE_READ_NEXT;\n\nAfter cpuid_entries there is\n\n\tint maxphyaddr;\n\tstruct x86_emulate_ctxt emulate_ctxt;  /* 16-byte aligned */\n\nSo we have:\n\n- cpuid_entries at offset 1B50 (6992)\n- maxphyaddr at offset 27D0 (6992 + 3200 = 10192)\n- padding at 27D4...27DF\n- emulate_ctxt at 27E0\n\nAnd it writes in the padding.  Pfew, writing the ops field of emulate_ctxt\nwould have been much worse.\n\nThis patch fixes it by modding the index to avoid the out-of-bounds\naccess. Worst case, i == j and ej->function == e->function,\nthe loop can bail out.\n\nReported-by: Moguofang <moguofang@huawei.com>\nCc: Paolo Bonzini <pbonzini@redhat.com>\nCc: Radim Kr\u010dm\u00e1\u0159 <rkrcmar@redhat.com>\nCc: Guofang Mo <moguofang@huawei.com>\nCc: stable@vger.kernel.org\nSigned-off-by: Wanpeng Li <wanpeng.li@hotmail.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
  "author_name": "Wanpeng Li",
  "author_email": "wanpeng.li@hotmail.com",
  "author_date": "Thu Jun 8 01:22:07 2017 -0700",
  "author_date_iso": "2017-06-08T01:22:07-07:00",
  "committer_name": "Paolo Bonzini",
  "committer_email": "pbonzini@redhat.com",
  "committer_date": "Thu Jun 8 15:38:21 2017 +0200",
  "committer_date_iso": "2017-06-08T15:38:21+02:00",
  "files_changed": [
    "arch/x86/kvm/cpuid.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/x86/kvm/cpuid.c",
      "insertions": 11,
      "deletions": 9
    }
  ],
  "total_insertions": 11,
  "total_deletions": 9,
  "total_changes": 20,
  "parents": [
    "38a4f43d5698daec601f4c5652ec287e594faf84"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.12",
    "v4.12-rc5",
    "v4.12-rc6",
    "v4.12-rc7",
    "v4.13",
    "v4.13-rc1",
    "v4.13-rc2",
    "v4.13-rc3",
    "v4.13-rc4",
    "v4.13-rc5"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "vulnerability"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/kvm/cpuid.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}