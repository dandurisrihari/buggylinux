{
  "hash": "acfcdb78d5d4cdb78e975210c8825b9a112463f6",
  "hash_short": "acfcdb78",
  "subject": "net: dsa: felix: fix stuck CPU-injected packets with short taprio windows",
  "body": "With this port schedule:\n\ntc qdisc replace dev $send_if parent root handle 100 taprio \\\n\tnum_tc 8 queues 1@0 1@1 1@2 1@3 1@4 1@5 1@6 1@7 \\\n\tmap 0 1 2 3 4 5 6 7 \\\n\tbase-time 0 cycle-time 10000 \\\n\tsched-entry S 01 1250 \\\n\tsched-entry S 02 1250 \\\n\tsched-entry S 04 1250 \\\n\tsched-entry S 08 1250 \\\n\tsched-entry S 10 1250 \\\n\tsched-entry S 20 1250 \\\n\tsched-entry S 40 1250 \\\n\tsched-entry S 80 1250 \\\n\tflags 2\n\nptp4l would fail to take TX timestamps of Pdelay_Resp messages like this:\n\nincreasing tx_timestamp_timeout may correct this issue, but it is likely caused by a driver bug\nptp4l[4134.168]: port 2: send peer delay response failed\n\nIt turns out that the driver can't take their TX timestamps because it\ncan't transmit them in the first place. And there's nothing special\nabout the Pdelay_Resp packets - they're just regular 68 byte packets.\nBut with this taprio configuration, the switch would refuse to send even\nthe ETH_ZLEN minimum packet size.\n\nThis should have definitely not been the case. When applying the taprio\nconfig, the driver prints:\n\nmscc_felix 0000:00:00.5: port 0 tc 0 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 132 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 1 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 132 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 2 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 132 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 3 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 132 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 4 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 132 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 5 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 132 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 6 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 132 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 7 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 132 octets including FCS\n\nand thus, everything under 132 bytes - ETH_FCS_LEN should have been sent\nwithout problems. Yet it's not.\n\nFor the forwarding path, the configuration is fine, yet packets injected\nfrom Linux get stuck with this schedule no matter what.\n\nThe first hint that the static guard bands are the cause of the problem\nis that reverting Michael Walle's commit 297c4de6f780 (\"net: dsa: felix:\nre-enable TAS guard band mode\") made things work. It must be that the\nguard bands are calculated incorrectly.\n\nI remembered that there is a magic constant in the driver, set to 33 ns\nfor no logical reason other than experimentation, which says \"never let\nthe static guard bands get so large as to leave less than this amount of\nremaining space in the time slot, because the queue system will refuse\nto schedule packets otherwise, and they will get stuck\". I had a hunch\nthat my previous experimentally-determined value was only good for\npackets coming from the forwarding path, and that the CPU injection path\nneeded more.\n\nI came to the new value of 35 ns through binary search, after seeing\nthat with 544 ns (the bit time required to send the Pdelay_Resp packet\nat gigabit) it works. Again, this is purely experimental, there's no\nlogic and the manual doesn't say anything.\n\nThe new driver prints for this schedule look like this:\n\nmscc_felix 0000:00:00.5: port 0 tc 0 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 131 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 1 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 131 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 2 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 131 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 3 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 131 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 4 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 131 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 5 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 131 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 6 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 131 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 7 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 131 octets including FCS\n\nSo yes, the maximum MTU is now even smaller by 1 byte than before.\nThis is maybe counter-intuitive, but makes more sense with a diagram of\none time slot.\n\nBefore:\n\n Gate open                                   Gate close\n |                                                    |\n v           1250 ns total time slot duration         v\n <---------------------------------------------------->\n <----><---------------------------------------------->\n  33 ns            1217 ns static guard band\n  useful\n\n Gate open                                   Gate close\n |                                                    |\n v           1250 ns total time slot duration         v\n <---------------------------------------------------->\n <-----><--------------------------------------------->\n  35 ns            1215 ns static guard band\n  useful\n\nThe static guard band implemented by this switch hardware directly\ndetermines the maximum allowable MTU for that traffic class. The larger\nit is, the earlier the switch will stop scheduling frames for\ntransmission, because otherwise they might overrun the gate close time\n(and avoiding that is the entire purpose of Michael's patch).\nSo, we now have guard bands smaller by 2 ns, thus, in this particular\ncase, we lose a byte of the maximum MTU.\n\nFixes: 11afdc6526de (\"net: dsa: felix: tc-taprio intervals smaller than MTU should send at least one packet\")\nSigned-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>\nReviewed-by: Michael Walle <mwalle@kernel.org>\nLink: https://patch.msgid.link/20241210132640.3426788-1-vladimir.oltean@nxp.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
  "full_message": "net: dsa: felix: fix stuck CPU-injected packets with short taprio windows\n\nWith this port schedule:\n\ntc qdisc replace dev $send_if parent root handle 100 taprio \\\n\tnum_tc 8 queues 1@0 1@1 1@2 1@3 1@4 1@5 1@6 1@7 \\\n\tmap 0 1 2 3 4 5 6 7 \\\n\tbase-time 0 cycle-time 10000 \\\n\tsched-entry S 01 1250 \\\n\tsched-entry S 02 1250 \\\n\tsched-entry S 04 1250 \\\n\tsched-entry S 08 1250 \\\n\tsched-entry S 10 1250 \\\n\tsched-entry S 20 1250 \\\n\tsched-entry S 40 1250 \\\n\tsched-entry S 80 1250 \\\n\tflags 2\n\nptp4l would fail to take TX timestamps of Pdelay_Resp messages like this:\n\nincreasing tx_timestamp_timeout may correct this issue, but it is likely caused by a driver bug\nptp4l[4134.168]: port 2: send peer delay response failed\n\nIt turns out that the driver can't take their TX timestamps because it\ncan't transmit them in the first place. And there's nothing special\nabout the Pdelay_Resp packets - they're just regular 68 byte packets.\nBut with this taprio configuration, the switch would refuse to send even\nthe ETH_ZLEN minimum packet size.\n\nThis should have definitely not been the case. When applying the taprio\nconfig, the driver prints:\n\nmscc_felix 0000:00:00.5: port 0 tc 0 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 132 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 1 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 132 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 2 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 132 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 3 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 132 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 4 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 132 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 5 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 132 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 6 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 132 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 7 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 132 octets including FCS\n\nand thus, everything under 132 bytes - ETH_FCS_LEN should have been sent\nwithout problems. Yet it's not.\n\nFor the forwarding path, the configuration is fine, yet packets injected\nfrom Linux get stuck with this schedule no matter what.\n\nThe first hint that the static guard bands are the cause of the problem\nis that reverting Michael Walle's commit 297c4de6f780 (\"net: dsa: felix:\nre-enable TAS guard band mode\") made things work. It must be that the\nguard bands are calculated incorrectly.\n\nI remembered that there is a magic constant in the driver, set to 33 ns\nfor no logical reason other than experimentation, which says \"never let\nthe static guard bands get so large as to leave less than this amount of\nremaining space in the time slot, because the queue system will refuse\nto schedule packets otherwise, and they will get stuck\". I had a hunch\nthat my previous experimentally-determined value was only good for\npackets coming from the forwarding path, and that the CPU injection path\nneeded more.\n\nI came to the new value of 35 ns through binary search, after seeing\nthat with 544 ns (the bit time required to send the Pdelay_Resp packet\nat gigabit) it works. Again, this is purely experimental, there's no\nlogic and the manual doesn't say anything.\n\nThe new driver prints for this schedule look like this:\n\nmscc_felix 0000:00:00.5: port 0 tc 0 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 131 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 1 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 131 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 2 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 131 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 3 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 131 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 4 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 131 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 5 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 131 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 6 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 131 octets including FCS\nmscc_felix 0000:00:00.5: port 0 tc 7 min gate length 1250 ns not enough for max frame size 1526 at 1000 Mbps, dropping frames over 131 octets including FCS\n\nSo yes, the maximum MTU is now even smaller by 1 byte than before.\nThis is maybe counter-intuitive, but makes more sense with a diagram of\none time slot.\n\nBefore:\n\n Gate open                                   Gate close\n |                                                    |\n v           1250 ns total time slot duration         v\n <---------------------------------------------------->\n <----><---------------------------------------------->\n  33 ns            1217 ns static guard band\n  useful\n\n Gate open                                   Gate close\n |                                                    |\n v           1250 ns total time slot duration         v\n <---------------------------------------------------->\n <-----><--------------------------------------------->\n  35 ns            1215 ns static guard band\n  useful\n\nThe static guard band implemented by this switch hardware directly\ndetermines the maximum allowable MTU for that traffic class. The larger\nit is, the earlier the switch will stop scheduling frames for\ntransmission, because otherwise they might overrun the gate close time\n(and avoiding that is the entire purpose of Michael's patch).\nSo, we now have guard bands smaller by 2 ns, thus, in this particular\ncase, we lose a byte of the maximum MTU.\n\nFixes: 11afdc6526de (\"net: dsa: felix: tc-taprio intervals smaller than MTU should send at least one packet\")\nSigned-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>\nReviewed-by: Michael Walle <mwalle@kernel.org>\nLink: https://patch.msgid.link/20241210132640.3426788-1-vladimir.oltean@nxp.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
  "author_name": "Vladimir Oltean",
  "author_email": "vladimir.oltean@nxp.com",
  "author_date": "Tue Dec 10 15:26:40 2024 +0200",
  "author_date_iso": "2024-12-10T15:26:40+02:00",
  "committer_name": "Jakub Kicinski",
  "committer_email": "kuba@kernel.org",
  "committer_date": "Wed Dec 11 20:24:56 2024 -0800",
  "committer_date_iso": "2024-12-11T20:24:56-08:00",
  "files_changed": [
    "drivers/net/dsa/ocelot/felix_vsc9959.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "drivers/net/dsa/ocelot/felix_vsc9959.c",
      "insertions": 11,
      "deletions": 6
    }
  ],
  "total_insertions": 11,
  "total_deletions": 6,
  "total_changes": 17,
  "parents": [
    "6bd8614fc2d076fc21b7488c9f279853960964e2"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/net/dsa/ocelot/felix_vsc9959.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}