commit b611fddc0435738e64453bbf1dadd4b12a801858
Author: Christoph Hellwig <hch@lst.de>
Date:   Wed Sep 18 07:30:08 2024 +0200

    xfs: don't ifdef around the exact minlen allocations
    
    Exact minlen allocations only exist as an error injection tool for debug
    builds.  Currently this is implemented using ifdefs, which means the code
    isn't even compiled for non-XFS_DEBUG builds.  Enhance the compile test
    coverage by always building the code and use the compilers' dead code
    elimination to remove it from the generated binary instead.
    
    The only downside is that the alloc_minlen_only field is unconditionally
    added to struct xfs_alloc_args now, but by moving it around and packing
    it tightly this doesn't actually increase the size of the structure.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Darrick J. Wong <djwong@kernel.org>
    Signed-off-by: Carlos Maiolino <cem@kernel.org>

diff --git a/fs/xfs/libxfs/xfs_bmap.c b/fs/xfs/libxfs/xfs_bmap.c
index d5a8403b469b..5263b66bbd3c 100644
--- a/fs/xfs/libxfs/xfs_bmap.c
+++ b/fs/xfs/libxfs/xfs_bmap.c
@@ -3477,7 +3477,6 @@ xfs_bmap_process_allocated_extent(
 	xfs_bmap_alloc_account(ap);
 }
 
-#ifdef DEBUG
 static int
 xfs_bmap_exact_minlen_extent_alloc(
 	struct xfs_bmalloca	*ap)
@@ -3539,11 +3538,6 @@ xfs_bmap_exact_minlen_extent_alloc(
 
 	return 0;
 }
-#else
-
-#define xfs_bmap_exact_minlen_extent_alloc(bma) (-EFSCORRUPTED)
-
-#endif
 
 /*
  * If we are not low on available data blocks and we are allocating at