{
  "hash": "b611fddc0435738e64453bbf1dadd4b12a801858",
  "hash_short": "b611fddc",
  "subject": "xfs: don't ifdef around the exact minlen allocations",
  "body": "Exact minlen allocations only exist as an error injection tool for debug\nbuilds.  Currently this is implemented using ifdefs, which means the code\nisn't even compiled for non-XFS_DEBUG builds.  Enhance the compile test\ncoverage by always building the code and use the compilers' dead code\nelimination to remove it from the generated binary instead.\n\nThe only downside is that the alloc_minlen_only field is unconditionally\nadded to struct xfs_alloc_args now, but by moving it around and packing\nit tightly this doesn't actually increase the size of the structure.\n\nSigned-off-by: Christoph Hellwig <hch@lst.de>\nReviewed-by: Darrick J. Wong <djwong@kernel.org>\nSigned-off-by: Carlos Maiolino <cem@kernel.org>",
  "full_message": "xfs: don't ifdef around the exact minlen allocations\n\nExact minlen allocations only exist as an error injection tool for debug\nbuilds.  Currently this is implemented using ifdefs, which means the code\nisn't even compiled for non-XFS_DEBUG builds.  Enhance the compile test\ncoverage by always building the code and use the compilers' dead code\nelimination to remove it from the generated binary instead.\n\nThe only downside is that the alloc_minlen_only field is unconditionally\nadded to struct xfs_alloc_args now, but by moving it around and packing\nit tightly this doesn't actually increase the size of the structure.\n\nSigned-off-by: Christoph Hellwig <hch@lst.de>\nReviewed-by: Darrick J. Wong <djwong@kernel.org>\nSigned-off-by: Carlos Maiolino <cem@kernel.org>",
  "author_name": "Christoph Hellwig",
  "author_email": "hch@lst.de",
  "author_date": "Wed Sep 18 07:30:08 2024 +0200",
  "author_date_iso": "2024-09-18T07:30:08+02:00",
  "committer_name": "Carlos Maiolino",
  "committer_email": "cem@kernel.org",
  "committer_date": "Mon Oct 7 08:00:11 2024 +0200",
  "committer_date_iso": "2024-10-07T08:00:11+02:00",
  "files_changed": [
    "fs/xfs/libxfs/xfs_alloc.c",
    "fs/xfs/libxfs/xfs_alloc.h",
    "fs/xfs/libxfs/xfs_bmap.c"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "fs/xfs/libxfs/xfs_alloc.c",
      "insertions": 2,
      "deletions": 5
    },
    {
      "file": "fs/xfs/libxfs/xfs_alloc.h",
      "insertions": 1,
      "deletions": 3
    },
    {
      "file": "fs/xfs/libxfs/xfs_bmap.c",
      "insertions": 0,
      "deletions": 6
    }
  ],
  "total_insertions": 3,
  "total_deletions": 14,
  "total_changes": 17,
  "parents": [
    "865469cd41bce2b04bef9539cbf70676878bc8df"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/xfs/libxfs/xfs_alloc.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/xfs/libxfs/xfs_alloc.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/xfs/libxfs/xfs_bmap.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}