{
  "hash": "39d3c0b5968b5421922e2fc939b6d6158df8ac1c",
  "hash_short": "39d3c0b5",
  "subject": "xfs: No need for inode number error injection in __xfs_dir3_data_check",
  "body": "We call xfs_dir_ino_validate() for every dir entry in a directory\nwhen doing validity checking of the directory. It calls\nxfs_verify_dir_ino() then emits a corruption report if bad or does\nerror injection if good. It is extremely costly:\n\n  43.27%  [kernel]  [k] xfs_dir3_leaf_check_int\n  10.28%  [kernel]  [k] __xfs_dir3_data_check\n   6.61%  [kernel]  [k] xfs_verify_dir_ino\n   4.16%  [kernel]  [k] xfs_errortag_test\n   4.00%  [kernel]  [k] memcpy\n   3.48%  [kernel]  [k] xfs_dir_ino_validate\n\n7% of the cpu usage in this directory traversal workload is\nxfs_dir_ino_validate() doing absolutely nothing.\n\nWe don't need error injection to simulate a bad inode numbers in the\ndirectory structure because we can do that by fuzzing the structure\non disk.\n\nAnd we don't need a corruption report, because the\n__xfs_dir3_data_check() will emit one if the inode number is bad.\n\nSo just call xfs_verify_dir_ino() directly here, and get rid of all\nthis unnecessary overhead:\n\n  40.30%  [kernel]  [k] xfs_dir3_leaf_check_int\n  10.98%  [kernel]  [k] __xfs_dir3_data_check\n   8.10%  [kernel]  [k] xfs_verify_dir_ino\n   4.42%  [kernel]  [k] memcpy\n   2.22%  [kernel]  [k] xfs_dir2_data_get_ftype\n   1.52%  [kernel]  [k] do_raw_spin_lock\n\nSigned-off-by: Dave Chinner <dchinner@redhat.com>\nReviewed-by: Darrick J. Wong <djwong@kernel.org>\nReviewed-by: Christoph Hellwig <hch@lst.de>\nSigned-off-by: Darrick J. Wong <djwong@kernel.org>",
  "full_message": "xfs: No need for inode number error injection in __xfs_dir3_data_check\n\nWe call xfs_dir_ino_validate() for every dir entry in a directory\nwhen doing validity checking of the directory. It calls\nxfs_verify_dir_ino() then emits a corruption report if bad or does\nerror injection if good. It is extremely costly:\n\n  43.27%  [kernel]  [k] xfs_dir3_leaf_check_int\n  10.28%  [kernel]  [k] __xfs_dir3_data_check\n   6.61%  [kernel]  [k] xfs_verify_dir_ino\n   4.16%  [kernel]  [k] xfs_errortag_test\n   4.00%  [kernel]  [k] memcpy\n   3.48%  [kernel]  [k] xfs_dir_ino_validate\n\n7% of the cpu usage in this directory traversal workload is\nxfs_dir_ino_validate() doing absolutely nothing.\n\nWe don't need error injection to simulate a bad inode numbers in the\ndirectory structure because we can do that by fuzzing the structure\non disk.\n\nAnd we don't need a corruption report, because the\n__xfs_dir3_data_check() will emit one if the inode number is bad.\n\nSo just call xfs_verify_dir_ino() directly here, and get rid of all\nthis unnecessary overhead:\n\n  40.30%  [kernel]  [k] xfs_dir3_leaf_check_int\n  10.98%  [kernel]  [k] __xfs_dir3_data_check\n   8.10%  [kernel]  [k] xfs_verify_dir_ino\n   4.42%  [kernel]  [k] memcpy\n   2.22%  [kernel]  [k] xfs_dir2_data_get_ftype\n   1.52%  [kernel]  [k] do_raw_spin_lock\n\nSigned-off-by: Dave Chinner <dchinner@redhat.com>\nReviewed-by: Darrick J. Wong <djwong@kernel.org>\nReviewed-by: Christoph Hellwig <hch@lst.de>\nSigned-off-by: Darrick J. Wong <djwong@kernel.org>",
  "author_name": "Dave Chinner",
  "author_email": "dchinner@redhat.com",
  "author_date": "Mon Mar 22 09:52:05 2021 -0700",
  "author_date_iso": "2021-03-22T09:52:05-07:00",
  "committer_name": "Darrick J. Wong",
  "committer_email": "djwong@kernel.org",
  "committer_date": "Thu Mar 25 16:47:51 2021 -0700",
  "committer_date_iso": "2021-03-25T16:47:51-07:00",
  "files_changed": [
    "fs/xfs/libxfs/xfs_dir2_data.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "fs/xfs/libxfs/xfs_dir2_data.c",
      "insertions": 1,
      "deletions": 1
    }
  ],
  "total_insertions": 1,
  "total_deletions": 1,
  "total_changes": 2,
  "parents": [
    "ec08c14ba28ce073b3f63c8edbee0f3c38e1b6a1"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/xfs/libxfs/xfs_dir2_data.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}