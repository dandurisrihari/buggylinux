{
  "hash": "d90a7a0ec83fb86622cd7dae23255d3c50a99ec8",
  "hash_short": "d90a7a0e",
  "subject": "x86/bugs, kvm: Introduce boot-time control of L1TF mitigations",
  "body": "Introduce the 'l1tf=' kernel command line option to allow for boot-time\nswitching of mitigation that is used on processors affected by L1TF.\n\nThe possible values are:\n\n  full\n\tProvides all available mitigations for the L1TF vulnerability. Disables\n\tSMT and enables all mitigations in the hypervisors. SMT control via\n\t/sys/devices/system/cpu/smt/control is still possible after boot.\n\tHypervisors will issue a warning when the first VM is started in\n\ta potentially insecure configuration, i.e. SMT enabled or L1D flush\n\tdisabled.\n\n  full,force\n\tSame as 'full', but disables SMT control. Implies the 'nosmt=force'\n\tcommand line option. sysfs control of SMT and the hypervisor flush\n\tcontrol is disabled.\n\n  flush\n\tLeaves SMT enabled and enables the conditional hypervisor mitigation.\n\tHypervisors will issue a warning when the first VM is started in a\n\tpotentially insecure configuration, i.e. SMT enabled or L1D flush\n\tdisabled.\n\n  flush,nosmt\n\tDisables SMT and enables the conditional hypervisor mitigation. SMT\n\tcontrol via /sys/devices/system/cpu/smt/control is still possible\n\tafter boot. If SMT is reenabled or flushing disabled at runtime\n\thypervisors will issue a warning.\n\n  flush,nowarn\n\tSame as 'flush', but hypervisors will not warn when\n\ta VM is started in a potentially insecure configuration.\n\n  off\n\tDisables hypervisor mitigations and doesn't emit any warnings.\n\nDefault is 'flush'.\n\nLet KVM adhere to these semantics, which means:\n\n  - 'lt1f=full,force'\t: Performe L1D flushes. No runtime control\n    \t\t\t  possible.\n\n  - 'l1tf=full'\n  - 'l1tf-flush'\n  - 'l1tf=flush,nosmt'\t: Perform L1D flushes and warn on VM start if\n\t\t\t  SMT has been runtime enabled or L1D flushing\n\t\t\t  has been run-time enabled\n\t\t\t  \n  - 'l1tf=flush,nowarn'\t: Perform L1D flushes and no warnings are emitted.\n  \n  - 'l1tf=off'\t\t: L1D flushes are not performed and no warnings\n\t\t\t  are emitted.\n\nKVM can always override the L1D flushing behavior using its 'vmentry_l1d_flush'\nmodule parameter except when lt1f=full,force is set.\n\nThis makes KVM's private 'nosmt' option redundant, and as it is a bit\nnon-systematic anyway (this is something to control globally, not on\nhypervisor level), remove that option.\n\nAdd the missing Documentation entry for the l1tf vulnerability sysfs file\nwhile at it.\n\nSigned-off-by: Jiri Kosina <jkosina@suse.cz>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nTested-by: Jiri Kosina <jkosina@suse.cz>\nReviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>\nReviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>\nLink: https://lkml.kernel.org/r/20180713142323.202758176@linutronix.de",
  "full_message": "x86/bugs, kvm: Introduce boot-time control of L1TF mitigations\n\nIntroduce the 'l1tf=' kernel command line option to allow for boot-time\nswitching of mitigation that is used on processors affected by L1TF.\n\nThe possible values are:\n\n  full\n\tProvides all available mitigations for the L1TF vulnerability. Disables\n\tSMT and enables all mitigations in the hypervisors. SMT control via\n\t/sys/devices/system/cpu/smt/control is still possible after boot.\n\tHypervisors will issue a warning when the first VM is started in\n\ta potentially insecure configuration, i.e. SMT enabled or L1D flush\n\tdisabled.\n\n  full,force\n\tSame as 'full', but disables SMT control. Implies the 'nosmt=force'\n\tcommand line option. sysfs control of SMT and the hypervisor flush\n\tcontrol is disabled.\n\n  flush\n\tLeaves SMT enabled and enables the conditional hypervisor mitigation.\n\tHypervisors will issue a warning when the first VM is started in a\n\tpotentially insecure configuration, i.e. SMT enabled or L1D flush\n\tdisabled.\n\n  flush,nosmt\n\tDisables SMT and enables the conditional hypervisor mitigation. SMT\n\tcontrol via /sys/devices/system/cpu/smt/control is still possible\n\tafter boot. If SMT is reenabled or flushing disabled at runtime\n\thypervisors will issue a warning.\n\n  flush,nowarn\n\tSame as 'flush', but hypervisors will not warn when\n\ta VM is started in a potentially insecure configuration.\n\n  off\n\tDisables hypervisor mitigations and doesn't emit any warnings.\n\nDefault is 'flush'.\n\nLet KVM adhere to these semantics, which means:\n\n  - 'lt1f=full,force'\t: Performe L1D flushes. No runtime control\n    \t\t\t  possible.\n\n  - 'l1tf=full'\n  - 'l1tf-flush'\n  - 'l1tf=flush,nosmt'\t: Perform L1D flushes and warn on VM start if\n\t\t\t  SMT has been runtime enabled or L1D flushing\n\t\t\t  has been run-time enabled\n\t\t\t  \n  - 'l1tf=flush,nowarn'\t: Perform L1D flushes and no warnings are emitted.\n  \n  - 'l1tf=off'\t\t: L1D flushes are not performed and no warnings\n\t\t\t  are emitted.\n\nKVM can always override the L1D flushing behavior using its 'vmentry_l1d_flush'\nmodule parameter except when lt1f=full,force is set.\n\nThis makes KVM's private 'nosmt' option redundant, and as it is a bit\nnon-systematic anyway (this is something to control globally, not on\nhypervisor level), remove that option.\n\nAdd the missing Documentation entry for the l1tf vulnerability sysfs file\nwhile at it.\n\nSigned-off-by: Jiri Kosina <jkosina@suse.cz>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nTested-by: Jiri Kosina <jkosina@suse.cz>\nReviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>\nReviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>\nLink: https://lkml.kernel.org/r/20180713142323.202758176@linutronix.de",
  "author_name": "Jiri Kosina",
  "author_email": "jkosina@suse.cz",
  "author_date": "Fri Jul 13 16:23:25 2018 +0200",
  "author_date_iso": "2018-07-13T16:23:25+02:00",
  "committer_name": "Thomas Gleixner",
  "committer_email": "tglx@linutronix.de",
  "committer_date": "Fri Jul 13 16:29:56 2018 +0200",
  "committer_date_iso": "2018-07-13T16:29:56+02:00",
  "files_changed": [
    "Documentation/ABI/testing/sysfs-devices-system-cpu",
    "Documentation/admin-guide/kernel-parameters.txt",
    "arch/x86/include/asm/processor.h",
    "arch/x86/kernel/cpu/bugs.c",
    "arch/x86/kvm/vmx.c"
  ],
  "files_changed_count": 5,
  "stats": [
    {
      "file": "Documentation/ABI/testing/sysfs-devices-system-cpu",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "Documentation/admin-guide/kernel-parameters.txt",
      "insertions": 62,
      "deletions": 6
    },
    {
      "file": "arch/x86/include/asm/processor.h",
      "insertions": 12,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/cpu/bugs.c",
      "insertions": 44,
      "deletions": 0
    },
    {
      "file": "arch/x86/kvm/vmx.c",
      "insertions": 43,
      "deletions": 13
    }
  ],
  "total_insertions": 165,
  "total_deletions": 19,
  "total_changes": 184,
  "parents": [
    "fee0aede6f4739c87179eca76136f83210953b86"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.19",
    "v4.19-rc1",
    "v4.19-rc2",
    "v4.19-rc3",
    "v4.19-rc4",
    "v4.19-rc5",
    "v4.19-rc6",
    "v4.19-rc7",
    "v4.19-rc8",
    "v4.20"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "vulnerability"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "Documentation/ABI/testing/sysfs-devices-system-cpu",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "Documentation/admin-guide/kernel-parameters.txt",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/processor.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/cpu/bugs.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kvm/vmx.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}