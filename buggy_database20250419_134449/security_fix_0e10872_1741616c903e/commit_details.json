{
  "hash": "0e108725f6cc5b3be9e607f89c9fbcbb236367b7",
  "hash_short": "0e108725",
  "subject": "string: Adjust strtomem() logic to allow for smaller sources",
  "body": "Arnd noticed we have a case where a shorter source string is being copied\ninto a destination byte array, but this results in a strnlen() call that\nexceeds the size of the source. This is seen with -Wstringop-overread:\n\nIn file included from ../include/linux/uuid.h:11,\n                 from ../include/linux/mod_devicetable.h:14,\n                 from ../include/linux/cpufeature.h:12,\n                 from ../arch/x86/coco/tdx/tdx.c:7:\n../arch/x86/coco/tdx/tdx.c: In function 'tdx_panic.constprop':\n../include/linux/string.h:284:9: error: 'strnlen' specified bound 64 exceeds source size 60 [-Werror=stringop-overread]\n  284 |         memcpy_and_pad(dest, _dest_len, src, strnlen(src, _dest_len), pad); \\\n      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../arch/x86/coco/tdx/tdx.c:124:9: note: in expansion of macro 'strtomem_pad'\n  124 |         strtomem_pad(message.str, msg, '\\0');\n      |         ^~~~~~~~~~~~\n\nUse the smaller of the two buffer sizes when calling strnlen(). When\nsrc length is unknown (SIZE_MAX), it is adjusted to use dest length,\nwhich is what the original code did.\n\nReported-by: Arnd Bergmann <arnd@arndb.de>\nFixes: dfbafa70bde2 (\"string: Introduce strtomem() and strtomem_pad()\")\nTested-by: Arnd Bergmann <arnd@arndb.de>\nCc: Andy Shevchenko <andy@kernel.org>\nCc: linux-hardening@vger.kernel.org\nSigned-off-by: Kees Cook <keescook@chromium.org>",
  "full_message": "string: Adjust strtomem() logic to allow for smaller sources\n\nArnd noticed we have a case where a shorter source string is being copied\ninto a destination byte array, but this results in a strnlen() call that\nexceeds the size of the source. This is seen with -Wstringop-overread:\n\nIn file included from ../include/linux/uuid.h:11,\n                 from ../include/linux/mod_devicetable.h:14,\n                 from ../include/linux/cpufeature.h:12,\n                 from ../arch/x86/coco/tdx/tdx.c:7:\n../arch/x86/coco/tdx/tdx.c: In function 'tdx_panic.constprop':\n../include/linux/string.h:284:9: error: 'strnlen' specified bound 64 exceeds source size 60 [-Werror=stringop-overread]\n  284 |         memcpy_and_pad(dest, _dest_len, src, strnlen(src, _dest_len), pad); \\\n      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n../arch/x86/coco/tdx/tdx.c:124:9: note: in expansion of macro 'strtomem_pad'\n  124 |         strtomem_pad(message.str, msg, '\\0');\n      |         ^~~~~~~~~~~~\n\nUse the smaller of the two buffer sizes when calling strnlen(). When\nsrc length is unknown (SIZE_MAX), it is adjusted to use dest length,\nwhich is what the original code did.\n\nReported-by: Arnd Bergmann <arnd@arndb.de>\nFixes: dfbafa70bde2 (\"string: Introduce strtomem() and strtomem_pad()\")\nTested-by: Arnd Bergmann <arnd@arndb.de>\nCc: Andy Shevchenko <andy@kernel.org>\nCc: linux-hardening@vger.kernel.org\nSigned-off-by: Kees Cook <keescook@chromium.org>",
  "author_name": "Kees Cook",
  "author_email": "keescook@chromium.org",
  "author_date": "Wed Oct 18 10:53:58 2023 -0700",
  "author_date_iso": "2023-10-18T10:53:58-07:00",
  "committer_name": "Kees Cook",
  "committer_email": "keescook@chromium.org",
  "committer_date": "Wed Oct 18 17:56:32 2023 -0700",
  "committer_date_iso": "2023-10-18T17:56:32-07:00",
  "files_changed": [
    "include/linux/string.h"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "include/linux/string.h",
      "insertions": 5,
      "deletions": 2
    }
  ],
  "total_insertions": 5,
  "total_deletions": 2,
  "total_changes": 7,
  "parents": [
    "faed498d0db78adc1eee6bab3a8480bcb7e17e6e"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/linux/string.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}