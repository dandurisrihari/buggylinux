{
  "hash": "be6aab0e9fa6d3c6d75aa1e38ac972d8b4ee82b8",
  "hash_short": "be6aab0e",
  "subject": "[PATCH] fix memory corruption from misinterpreted bad_inode_ops return values",
  "body": "CVE-2006-5753 is for a case where an inode can be marked bad, switching\nthe ops to bad_inode_ops, which are all connected as:\n\nstatic int return_EIO(void)\n{\n        return -EIO;\n}\n\n#define EIO_ERROR ((void *) (return_EIO))\n\nstatic struct inode_operations bad_inode_ops =\n{\n        .create         = bad_inode_create\n...etc...\n\nThe problem here is that the void cast causes return types to not be\npromoted, and for ops such as listxattr which expect more than 32 bits of\nreturn value, the 32-bit -EIO is interpreted as a large positive 64-bit\nnumber, i.e. 0x00000000fffffffa instead of 0xfffffffa.\n\nThis goes particularly badly when the return value is taken as a number of\nbytes to copy into, say, a user's buffer for example...\n\nI originally had coded up the fix by creating a return_EIO_<TYPE> macro\nfor each return type, like this:\n\nstatic int return_EIO_int(void)\n{\n\treturn -EIO;\n}\n#define EIO_ERROR_INT ((void *) (return_EIO_int))\n\nstatic struct inode_operations bad_inode_ops =\n{\n\t.create\t\t= EIO_ERROR_INT,\n...etc...\n\nbut Al felt that it was probably better to create an EIO-returner for each\nactual op signature.  Since so few ops share a signature, I just went ahead\n& created an EIO function for each individual file & inode op that returns\na value.\n\nSigned-off-by: Eric Sandeen <sandeen@redhat.com>\nCc: Al Viro <viro@zeniv.linux.org.uk>\nSigned-off-by: Andrew Morton <akpm@osdl.org>\nSigned-off-by: Linus Torvalds <torvalds@osdl.org>",
  "full_message": "[PATCH] fix memory corruption from misinterpreted bad_inode_ops return values\n\nCVE-2006-5753 is for a case where an inode can be marked bad, switching\nthe ops to bad_inode_ops, which are all connected as:\n\nstatic int return_EIO(void)\n{\n        return -EIO;\n}\n\n#define EIO_ERROR ((void *) (return_EIO))\n\nstatic struct inode_operations bad_inode_ops =\n{\n        .create         = bad_inode_create\n...etc...\n\nThe problem here is that the void cast causes return types to not be\npromoted, and for ops such as listxattr which expect more than 32 bits of\nreturn value, the 32-bit -EIO is interpreted as a large positive 64-bit\nnumber, i.e. 0x00000000fffffffa instead of 0xfffffffa.\n\nThis goes particularly badly when the return value is taken as a number of\nbytes to copy into, say, a user's buffer for example...\n\nI originally had coded up the fix by creating a return_EIO_<TYPE> macro\nfor each return type, like this:\n\nstatic int return_EIO_int(void)\n{\n\treturn -EIO;\n}\n#define EIO_ERROR_INT ((void *) (return_EIO_int))\n\nstatic struct inode_operations bad_inode_ops =\n{\n\t.create\t\t= EIO_ERROR_INT,\n...etc...\n\nbut Al felt that it was probably better to create an EIO-returner for each\nactual op signature.  Since so few ops share a signature, I just went ahead\n& created an EIO function for each individual file & inode op that returns\na value.\n\nSigned-off-by: Eric Sandeen <sandeen@redhat.com>\nCc: Al Viro <viro@zeniv.linux.org.uk>\nSigned-off-by: Andrew Morton <akpm@osdl.org>\nSigned-off-by: Linus Torvalds <torvalds@osdl.org>",
  "author_name": "Eric Sandeen",
  "author_email": "sandeen@redhat.com",
  "author_date": "Fri Jan 5 16:36:36 2007 -0800",
  "author_date_iso": "2007-01-05T16:36:36-08:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@woody.osdl.org",
  "committer_date": "Fri Jan 5 23:55:23 2007 -0800",
  "committer_date_iso": "2007-01-05T23:55:23-08:00",
  "files_changed": [
    "fs/bad_inode.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "fs/bad_inode.c",
      "insertions": 289,
      "deletions": 41
    }
  ],
  "total_insertions": 289,
  "total_deletions": 41,
  "total_changes": 330,
  "parents": [
    "2723f9603a8f8bb2cd8c7b581f7c94b8d75e3837"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v2.6.20",
    "v2.6.20-rc4",
    "v2.6.20-rc5",
    "v2.6.20-rc6",
    "v2.6.20-rc7",
    "v2.6.21",
    "v2.6.21-rc1",
    "v2.6.21-rc2",
    "v2.6.21-rc3",
    "v2.6.21-rc4"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [
      "CVE-2006-5753"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "fs/bad_inode.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}