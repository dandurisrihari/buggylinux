{
  "hash": "93396936ed0ce2c6f44140bd14728611d0bb065e",
  "hash_short": "93396936",
  "subject": "arm64: kprobe: add checks for ARMv8.3-PAuth combined instructions",
  "body": "Currently the ARMv8.3-PAuth combined branch instructions (braa, retaa\netc.) are not simulated for out-of-line execution with a handler. Hence the\nuprobe of such instructions leads to kernel warnings in a loop as they are\nnot explicitly checked and fall into INSN_GOOD categories. Other combined\ninstructions like LDRAA and LDRBB can be probed.\n\nThe issue of the combined branch instructions is fixed by adding\ngroup definitions of all such instructions and rejecting their probes.\nThe instruction groups added are br_auth(braa, brab, braaz and brabz),\nblr_auth(blraa, blrab, blraaz and blrabz), ret_auth(retaa and retab) and\neret_auth(eretaa and eretab).\n\nWarning log:\n WARNING: CPU: 0 PID: 156 at arch/arm64/kernel/probes/uprobes.c:182 uprobe_single_step_handler+0x34/0x50\n Modules linked in:\n CPU: 0 PID: 156 Comm: func Not tainted 5.9.0-rc3 #188\n Hardware name: Foundation-v8A (DT)\n pstate: 804003c9 (Nzcv DAIF +PAN -UAO BTYPE=--)\n pc : uprobe_single_step_handler+0x34/0x50\n lr : single_step_handler+0x70/0xf8\n sp : ffff800012af3e30\n x29: ffff800012af3e30 x28: ffff000878723b00\n x27: 0000000000000000 x26: 0000000000000000\n x25: 0000000000000000 x24: 0000000000000000\n x23: 0000000060001000 x22: 00000000cb000022\n x21: ffff800012065ce8 x20: ffff800012af3ec0\n x19: ffff800012068d50 x18: 0000000000000000\n x17: 0000000000000000 x16: 0000000000000000\n x15: 0000000000000000 x14: 0000000000000000\n x13: 0000000000000000 x12: 0000000000000000\n x11: 0000000000000000 x10: 0000000000000000\n x9 : ffff800010085c90 x8 : 0000000000000000\n x7 : 0000000000000000 x6 : ffff80001205a9c8\n x5 : ffff80001205a000 x4 : ffff80001233db80\n x3 : ffff8000100a7a60 x2 : 0020000000000003\n x1 : 0000fffffffff008 x0 : ffff800012af3ec0\n Call trace:\n  uprobe_single_step_handler+0x34/0x50\n  single_step_handler+0x70/0xf8\n  do_debug_exception+0xb8/0x130\n  el0_sync_handler+0x138/0x1b8\n  el0_sync+0x158/0x180\n\nFixes: 74afda4016a7 (\"arm64: compile the kernel with ptrauth return address signing\")\nFixes: 04ca3204fa09 (\"arm64: enable pointer authentication\")\nSigned-off-by: Amit Daniel Kachhap <amit.kachhap@arm.com>\nReviewed-by: Dave Martin <Dave.Martin@arm.com>\nLink: https://lore.kernel.org/r/20200914083656.21428-2-amit.kachhap@arm.com\nSigned-off-by: Will Deacon <will@kernel.org>",
  "full_message": "arm64: kprobe: add checks for ARMv8.3-PAuth combined instructions\n\nCurrently the ARMv8.3-PAuth combined branch instructions (braa, retaa\netc.) are not simulated for out-of-line execution with a handler. Hence the\nuprobe of such instructions leads to kernel warnings in a loop as they are\nnot explicitly checked and fall into INSN_GOOD categories. Other combined\ninstructions like LDRAA and LDRBB can be probed.\n\nThe issue of the combined branch instructions is fixed by adding\ngroup definitions of all such instructions and rejecting their probes.\nThe instruction groups added are br_auth(braa, brab, braaz and brabz),\nblr_auth(blraa, blrab, blraaz and blrabz), ret_auth(retaa and retab) and\neret_auth(eretaa and eretab).\n\nWarning log:\n WARNING: CPU: 0 PID: 156 at arch/arm64/kernel/probes/uprobes.c:182 uprobe_single_step_handler+0x34/0x50\n Modules linked in:\n CPU: 0 PID: 156 Comm: func Not tainted 5.9.0-rc3 #188\n Hardware name: Foundation-v8A (DT)\n pstate: 804003c9 (Nzcv DAIF +PAN -UAO BTYPE=--)\n pc : uprobe_single_step_handler+0x34/0x50\n lr : single_step_handler+0x70/0xf8\n sp : ffff800012af3e30\n x29: ffff800012af3e30 x28: ffff000878723b00\n x27: 0000000000000000 x26: 0000000000000000\n x25: 0000000000000000 x24: 0000000000000000\n x23: 0000000060001000 x22: 00000000cb000022\n x21: ffff800012065ce8 x20: ffff800012af3ec0\n x19: ffff800012068d50 x18: 0000000000000000\n x17: 0000000000000000 x16: 0000000000000000\n x15: 0000000000000000 x14: 0000000000000000\n x13: 0000000000000000 x12: 0000000000000000\n x11: 0000000000000000 x10: 0000000000000000\n x9 : ffff800010085c90 x8 : 0000000000000000\n x7 : 0000000000000000 x6 : ffff80001205a9c8\n x5 : ffff80001205a000 x4 : ffff80001233db80\n x3 : ffff8000100a7a60 x2 : 0020000000000003\n x1 : 0000fffffffff008 x0 : ffff800012af3ec0\n Call trace:\n  uprobe_single_step_handler+0x34/0x50\n  single_step_handler+0x70/0xf8\n  do_debug_exception+0xb8/0x130\n  el0_sync_handler+0x138/0x1b8\n  el0_sync+0x158/0x180\n\nFixes: 74afda4016a7 (\"arm64: compile the kernel with ptrauth return address signing\")\nFixes: 04ca3204fa09 (\"arm64: enable pointer authentication\")\nSigned-off-by: Amit Daniel Kachhap <amit.kachhap@arm.com>\nReviewed-by: Dave Martin <Dave.Martin@arm.com>\nLink: https://lore.kernel.org/r/20200914083656.21428-2-amit.kachhap@arm.com\nSigned-off-by: Will Deacon <will@kernel.org>",
  "author_name": "Amit Daniel Kachhap",
  "author_email": "amit.kachhap@arm.com",
  "author_date": "Mon Sep 14 14:06:51 2020 +0530",
  "author_date_iso": "2020-09-14T14:06:51+05:30",
  "committer_name": "Will Deacon",
  "committer_email": "will@kernel.org",
  "committer_date": "Mon Sep 14 12:07:02 2020 +0100",
  "committer_date_iso": "2020-09-14T12:07:02+01:00",
  "files_changed": [
    "arch/arm64/include/asm/insn.h",
    "arch/arm64/kernel/insn.c",
    "arch/arm64/kernel/probes/decode-insn.c"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "arch/arm64/include/asm/insn.h",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "arch/arm64/kernel/insn.c",
      "insertions": 4,
      "deletions": 1
    },
    {
      "file": "arch/arm64/kernel/probes/decode-insn.c",
      "insertions": 2,
      "deletions": 1
    }
  ],
  "total_insertions": 10,
  "total_deletions": 2,
  "total_changes": 12,
  "parents": [
    "f75aef392f869018f78cfedf3c320a6b3fcfda6b"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/arm64/include/asm/insn.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/insn.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/probes/decode-insn.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}