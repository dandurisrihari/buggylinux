{
  "hash": "c93d8f88580921c84d2213161ef3c22560511b84",
  "hash_short": "c93d8f88",
  "subject": "ext4: add basic fs-verity support",
  "body": "Add most of fs-verity support to ext4.  fs-verity is a filesystem\nfeature that enables transparent integrity protection and authentication\nof read-only files.  It uses a dm-verity like mechanism at the file\nlevel: a Merkle tree is used to verify any block in the file in\nlog(filesize) time.  It is implemented mainly by helper functions in\nfs/verity/.  See Documentation/filesystems/fsverity.rst for the full\ndocumentation.\n\nThis commit adds all of ext4 fs-verity support except for the actual\ndata verification, including:\n\n- Adding a filesystem feature flag and an inode flag for fs-verity.\n\n- Implementing the fsverity_operations to support enabling verity on an\n  inode and reading/writing the verity metadata.\n\n- Updating ->write_begin(), ->write_end(), and ->writepages() to support\n  writing verity metadata pages.\n\n- Calling the fs-verity hooks for ->open(), ->setattr(), and ->ioctl().\n\next4 stores the verity metadata (Merkle tree and fsverity_descriptor)\npast the end of the file, starting at the first 64K boundary beyond\ni_size.  This approach works because (a) verity files are readonly, and\n(b) pages fully beyond i_size aren't visible to userspace but can be\nread/written internally by ext4 with only some relatively small changes\nto ext4.  This approach avoids having to depend on the EA_INODE feature\nand on rearchitecturing ext4's xattr support to support paging\nmulti-gigabyte xattrs into memory, and to support encrypting xattrs.\nNote that the verity metadata *must* be encrypted when the file is,\nsince it contains hashes of the plaintext data.\n\nThis patch incorporates work by Theodore Ts'o and Chandan Rajendra.\n\nReviewed-by: Theodore Ts'o <tytso@mit.edu>\nSigned-off-by: Eric Biggers <ebiggers@google.com>",
  "full_message": "ext4: add basic fs-verity support\n\nAdd most of fs-verity support to ext4.  fs-verity is a filesystem\nfeature that enables transparent integrity protection and authentication\nof read-only files.  It uses a dm-verity like mechanism at the file\nlevel: a Merkle tree is used to verify any block in the file in\nlog(filesize) time.  It is implemented mainly by helper functions in\nfs/verity/.  See Documentation/filesystems/fsverity.rst for the full\ndocumentation.\n\nThis commit adds all of ext4 fs-verity support except for the actual\ndata verification, including:\n\n- Adding a filesystem feature flag and an inode flag for fs-verity.\n\n- Implementing the fsverity_operations to support enabling verity on an\n  inode and reading/writing the verity metadata.\n\n- Updating ->write_begin(), ->write_end(), and ->writepages() to support\n  writing verity metadata pages.\n\n- Calling the fs-verity hooks for ->open(), ->setattr(), and ->ioctl().\n\next4 stores the verity metadata (Merkle tree and fsverity_descriptor)\npast the end of the file, starting at the first 64K boundary beyond\ni_size.  This approach works because (a) verity files are readonly, and\n(b) pages fully beyond i_size aren't visible to userspace but can be\nread/written internally by ext4 with only some relatively small changes\nto ext4.  This approach avoids having to depend on the EA_INODE feature\nand on rearchitecturing ext4's xattr support to support paging\nmulti-gigabyte xattrs into memory, and to support encrypting xattrs.\nNote that the verity metadata *must* be encrypted when the file is,\nsince it contains hashes of the plaintext data.\n\nThis patch incorporates work by Theodore Ts'o and Chandan Rajendra.\n\nReviewed-by: Theodore Ts'o <tytso@mit.edu>\nSigned-off-by: Eric Biggers <ebiggers@google.com>",
  "author_name": "Eric Biggers",
  "author_email": "ebiggers@google.com",
  "author_date": "Mon Jul 22 09:26:24 2019 -0700",
  "author_date_iso": "2019-07-22T09:26:24-07:00",
  "committer_name": "Eric Biggers",
  "committer_email": "ebiggers@google.com",
  "committer_date": "Mon Aug 12 19:33:50 2019 -0700",
  "committer_date_iso": "2019-08-12T19:33:50-07:00",
  "files_changed": [
    "fs/ext4/Makefile",
    "fs/ext4/ext4.h",
    "fs/ext4/file.c",
    "fs/ext4/inode.c",
    "fs/ext4/ioctl.c",
    "fs/ext4/super.c",
    "fs/ext4/sysfs.c",
    "fs/ext4/verity.c"
  ],
  "files_changed_count": 8,
  "stats": [
    {
      "file": "fs/ext4/Makefile",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "fs/ext4/ext4.h",
      "insertions": 19,
      "deletions": 2
    },
    {
      "file": "fs/ext4/file.c",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "fs/ext4/inode.c",
      "insertions": 38,
      "deletions": 15
    },
    {
      "file": "fs/ext4/ioctl.c",
      "insertions": 13,
      "deletions": 0
    },
    {
      "file": "fs/ext4/super.c",
      "insertions": 9,
      "deletions": 0
    },
    {
      "file": "fs/ext4/sysfs.c",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "fs/ext4/verity.c",
      "insertions": 367,
      "deletions": 0
    }
  ],
  "total_insertions": 457,
  "total_deletions": 17,
  "total_changes": 474,
  "parents": [
    "432434c9f8e18cb4cf0fe05bc3eeceada0e10dc6"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.4",
    "v5.4-rc1",
    "v5.4-rc2",
    "v5.4-rc3",
    "v5.4-rc4",
    "v5.4-rc5",
    "v5.4-rc6",
    "v5.4-rc7",
    "v5.4-rc8",
    "v5.5"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/ext4/Makefile",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/ext4/sysfs.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/ext4/verity.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/ext4/file.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/ext4/ioctl.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/ext4/inode.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/ext4/ext4.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/ext4/super.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}