{
  "hash": "4286a3ec2595697f398ce1dc895a2f5b006dae99",
  "hash_short": "4286a3ec",
  "subject": "Merge tag 'kvm-x86-mmu-6.15' of https://github.com/kvm-x86/linux into HEAD",
  "body": "KVM x86/mmu changes for 6.15\n\nAdd support for \"fast\" aging of SPTEs in both the TDP MMU and Shadow MMU, where\n\"fast\" means \"without holding mmu_lock\".  Not taking mmu_lock allows multiple\naging actions to run in parallel, and more importantly avoids stalling vCPUs,\ne.g. due to holding mmu_lock for an extended duration while a vCPU is faulting\nin memory.\n\nFor the TDP MMU, protect aging via RCU; the page tables are RCU-protected and\nKVM doesn't need to access any metadata to age SPTEs.\n\nFor the Shadow MMU, use bit 1 of rmap pointers (bit 0 is used to terminate a\nlist of rmaps) to implement a per-rmap single-bit spinlock.  When aging a gfn,\nacquire the rmap's spinlock with read-only permissions, which allows hardening\nand optimizing the locking and aging, e.g. locking an rmap for write requires\nmmu_lock to also be held.  The lock is NOT a true R/W spinlock, i.e. multiple\nconcurrent readers aren't supported.\n\nTo avoid forcing all SPTE updates to use atomic operations (clearing the\nAccessed bit out of mmu_lock makes it inherently volatile), rework and rename\nspte_has_volatile_bits() to spte_needs_atomic_update() and deliberately exclude\nthe Accessed bit.  KVM (and mm/) already tolerates false positives/negatives\nfor Accessed information, and all testing has shown that reducing the latency\nof aging is far more beneficial to overall system performance than providing\n\"perfect\" young/old information.",
  "full_message": "Merge tag 'kvm-x86-mmu-6.15' of https://github.com/kvm-x86/linux into HEAD\n\nKVM x86/mmu changes for 6.15\n\nAdd support for \"fast\" aging of SPTEs in both the TDP MMU and Shadow MMU, where\n\"fast\" means \"without holding mmu_lock\".  Not taking mmu_lock allows multiple\naging actions to run in parallel, and more importantly avoids stalling vCPUs,\ne.g. due to holding mmu_lock for an extended duration while a vCPU is faulting\nin memory.\n\nFor the TDP MMU, protect aging via RCU; the page tables are RCU-protected and\nKVM doesn't need to access any metadata to age SPTEs.\n\nFor the Shadow MMU, use bit 1 of rmap pointers (bit 0 is used to terminate a\nlist of rmaps) to implement a per-rmap single-bit spinlock.  When aging a gfn,\nacquire the rmap's spinlock with read-only permissions, which allows hardening\nand optimizing the locking and aging, e.g. locking an rmap for write requires\nmmu_lock to also be held.  The lock is NOT a true R/W spinlock, i.e. multiple\nconcurrent readers aren't supported.\n\nTo avoid forcing all SPTE updates to use atomic operations (clearing the\nAccessed bit out of mmu_lock makes it inherently volatile), rework and rename\nspte_has_volatile_bits() to spte_needs_atomic_update() and deliberately exclude\nthe Accessed bit.  KVM (and mm/) already tolerates false positives/negatives\nfor Accessed information, and all testing has shown that reducing the latency\nof aging is far more beneficial to overall system performance than providing\n\"perfect\" young/old information.",
  "author_name": "Paolo Bonzini",
  "author_email": "pbonzini@redhat.com",
  "author_date": "Wed Mar 19 09:04:33 2025 -0400",
  "author_date_iso": "2025-03-19T09:04:33-04:00",
  "committer_name": "Paolo Bonzini",
  "committer_email": "pbonzini@redhat.com",
  "committer_date": "Wed Mar 19 09:04:33 2025 -0400",
  "committer_date_iso": "2025-03-19T09:04:33-04:00",
  "files_changed": [
    "arch/x86/include/asm/kvm_host.h",
    "arch/x86/kvm/mmu/mmu.c"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "Documentation/virt/kvm/locking.rst",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "arch/x86/include/asm/kvm_host.h",
      "insertions": 3,
      "deletions": 1
    },
    {
      "file": "arch/x86/kvm/Kconfig",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "arch/x86/kvm/mmu/mmu.c",
      "insertions": 269,
      "deletions": 96
    },
    {
      "file": "arch/x86/kvm/mmu/spte.c",
      "insertions": 19,
      "deletions": 12
    },
    {
      "file": "arch/x86/kvm/mmu/spte.h",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "arch/x86/kvm/mmu/tdp_iter.h",
      "insertions": 15,
      "deletions": 19
    },
    {
      "file": "arch/x86/kvm/mmu/tdp_mmu.c",
      "insertions": 28,
      "deletions": 17
    },
    {
      "file": "include/linux/kvm_host.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "virt/kvm/Kconfig",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "virt/kvm/kvm_main.c",
      "insertions": 32,
      "deletions": 23
    }
  ],
  "total_insertions": 375,
  "total_deletions": 171,
  "total_changes": 546,
  "parents": [
    "e335300095c370149aada9783df2d7bf5b0db7c7",
    "0dab791f05ce2c9f0215f50cb46ed0c3126fe211"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/include/asm/kvm_host.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kvm/mmu/mmu.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}