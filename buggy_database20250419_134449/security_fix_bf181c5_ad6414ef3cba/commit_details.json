{
  "hash": "bf181c582588f8f7406d52f2ee228539b465f173",
  "hash_short": "bf181c58",
  "subject": "mm/hwpoison: fix unpoison_memory()",
  "body": "After recent soft-offline rework, error pages can be taken off from\nbuddy allocator, but the existing unpoison_memory() does not properly\nundo the operation.  Moreover, due to the recent change on\n__get_hwpoison_page(), get_page_unless_zero() is hardly called for\nhwpoisoned pages.  So __get_hwpoison_page() highly likely returns -EBUSY\n(meaning to fail to grab page refcount) and unpoison just clears\nPG_hwpoison without releasing a refcount.  That does not lead to a\ncritical issue like kernel panic, but unpoisoned pages never get back to\nbuddy (leaked permanently), which is not good.\n\nTo (partially) fix this, we need to identify \"taken off\" pages from\nother types of hwpoisoned pages.  We can't use refcount or page flags\nfor this purpose, so a pseudo flag is defined by hacking ->private\nfield.  Someone might think that put_page() is enough to cancel\ntaken-off pages, but the normal free path contains some operations not\nsuitable for the current purpose, and can fire VM_BUG_ON().\n\nNote that unpoison_memory() is now supposed to be cancel hwpoison events\ninjected only by madvise() or\n/sys/devices/system/memory/{hard,soft}_offline_page, not by MCE\ninjection, so please don't try to use unpoison when testing with MCE\ninjection.\n\n[lkp@intel.com: report build failure for ARCH=i386]\n\nLink: https://lkml.kernel.org/r/20211115084006.3728254-4-naoya.horiguchi@linux.dev\nSigned-off-by: Naoya Horiguchi <naoya.horiguchi@nec.com>\nReviewed-by: Yang Shi <shy828301@gmail.com>\nCc: David Hildenbrand <david@redhat.com>\nCc: Oscar Salvador <osalvador@suse.de>\nCc: Michal Hocko <mhocko@suse.com>\nCc: Ding Hui <dinghui@sangfor.com.cn>\nCc: Tony Luck <tony.luck@intel.com>\nCc: \"Aneesh Kumar K.V\" <aneesh.kumar@linux.vnet.ibm.com>\nCc: Miaohe Lin <linmiaohe@huawei.com>\nCc: Peter Xu <peterx@redhat.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "full_message": "mm/hwpoison: fix unpoison_memory()\n\nAfter recent soft-offline rework, error pages can be taken off from\nbuddy allocator, but the existing unpoison_memory() does not properly\nundo the operation.  Moreover, due to the recent change on\n__get_hwpoison_page(), get_page_unless_zero() is hardly called for\nhwpoisoned pages.  So __get_hwpoison_page() highly likely returns -EBUSY\n(meaning to fail to grab page refcount) and unpoison just clears\nPG_hwpoison without releasing a refcount.  That does not lead to a\ncritical issue like kernel panic, but unpoisoned pages never get back to\nbuddy (leaked permanently), which is not good.\n\nTo (partially) fix this, we need to identify \"taken off\" pages from\nother types of hwpoisoned pages.  We can't use refcount or page flags\nfor this purpose, so a pseudo flag is defined by hacking ->private\nfield.  Someone might think that put_page() is enough to cancel\ntaken-off pages, but the normal free path contains some operations not\nsuitable for the current purpose, and can fire VM_BUG_ON().\n\nNote that unpoison_memory() is now supposed to be cancel hwpoison events\ninjected only by madvise() or\n/sys/devices/system/memory/{hard,soft}_offline_page, not by MCE\ninjection, so please don't try to use unpoison when testing with MCE\ninjection.\n\n[lkp@intel.com: report build failure for ARCH=i386]\n\nLink: https://lkml.kernel.org/r/20211115084006.3728254-4-naoya.horiguchi@linux.dev\nSigned-off-by: Naoya Horiguchi <naoya.horiguchi@nec.com>\nReviewed-by: Yang Shi <shy828301@gmail.com>\nCc: David Hildenbrand <david@redhat.com>\nCc: Oscar Salvador <osalvador@suse.de>\nCc: Michal Hocko <mhocko@suse.com>\nCc: Ding Hui <dinghui@sangfor.com.cn>\nCc: Tony Luck <tony.luck@intel.com>\nCc: \"Aneesh Kumar K.V\" <aneesh.kumar@linux.vnet.ibm.com>\nCc: Miaohe Lin <linmiaohe@huawei.com>\nCc: Peter Xu <peterx@redhat.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "author_name": "Naoya Horiguchi",
  "author_email": "naoya.horiguchi@nec.com",
  "author_date": "Fri Jan 14 14:09:09 2022 -0800",
  "author_date_iso": "2022-01-14T14:09:09-08:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Sat Jan 15 16:30:31 2022 +0200",
  "committer_date_iso": "2022-01-15T16:30:31+02:00",
  "files_changed": [
    "include/linux/mm.h",
    "include/linux/page-flags.h",
    "mm/memory-failure.c",
    "mm/page_alloc.c"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "include/linux/mm.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "include/linux/page-flags.h",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "mm/memory-failure.c",
      "insertions": 90,
      "deletions": 19
    },
    {
      "file": "mm/page_alloc.c",
      "insertions": 27,
      "deletions": 0
    }
  ],
  "total_insertions": 122,
  "total_deletions": 19,
  "total_changes": 141,
  "parents": [
    "c9fdc4d5487a16bd1f003fc8b66e91f88efb50e6"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/linux/mm.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/page-flags.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/memory-failure.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/page_alloc.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}