{
  "hash": "c236b6dd48dcf2ae6ed14b9068830eccc3e181e6",
  "hash_short": "c236b6dd",
  "subject": "Merge tag 'keys-request-20190626' of git://git.kernel.org/pub/scm/linux/kernel/git/dhowells/linux-fs",
  "body": "Pull request_key improvements from David Howells:\n \"These are all request_key()-related, including a fix and some improvements:\n\n   - Fix the lack of a Link permission check on a key found by\n     request_key(), thereby enabling request_key() to link keys that\n     don't grant this permission to the target keyring (which must still\n     grant Write permission).\n\n     Note that the key must be in the caller's keyrings already to be\n     found.\n\n   - Invalidate used request_key authentication keys rather than\n     revoking them, so that they get cleaned up immediately rather than\n     hanging around till the expiry time is passed.\n\n   - Move the RCU locks outwards from the keyring search functions so\n     that a request_key_rcu() can be provided. This can be called in RCU\n     mode, so it can't sleep and can't upcall - but it can be called\n     from LOOKUP_RCU pathwalk mode.\n\n   - Cache the latest positive result of request_key*() temporarily in\n     task_struct so that filesystems that make a lot of request_key()\n     calls during pathwalk can take advantage of it to avoid having to\n     redo the searching. This requires CONFIG_KEYS_REQUEST_CACHE=y.\n\n     It is assumed that the key just found is likely to be used multiple\n     times in each step in an RCU pathwalk, and is likely to be reused\n     for the next step too.\n\n     Note that the cleanup of the cache is done on TIF_NOTIFY_RESUME,\n     just before userspace resumes, and on exit\"\n\n* tag 'keys-request-20190626' of git://git.kernel.org/pub/scm/linux/kernel/git/dhowells/linux-fs:\n  keys: Kill off request_key_async{,_with_auxdata}\n  keys: Cache result of request_key*() temporarily in task_struct\n  keys: Provide request_key_rcu()\n  keys: Move the RCU locks outwards from the keyring search functions\n  keys: Invalidate used request_key authentication keys\n  keys: Fix request_key() lack of Link perm check on found key",
  "full_message": "Merge tag 'keys-request-20190626' of git://git.kernel.org/pub/scm/linux/kernel/git/dhowells/linux-fs\n\nPull request_key improvements from David Howells:\n \"These are all request_key()-related, including a fix and some improvements:\n\n   - Fix the lack of a Link permission check on a key found by\n     request_key(), thereby enabling request_key() to link keys that\n     don't grant this permission to the target keyring (which must still\n     grant Write permission).\n\n     Note that the key must be in the caller's keyrings already to be\n     found.\n\n   - Invalidate used request_key authentication keys rather than\n     revoking them, so that they get cleaned up immediately rather than\n     hanging around till the expiry time is passed.\n\n   - Move the RCU locks outwards from the keyring search functions so\n     that a request_key_rcu() can be provided. This can be called in RCU\n     mode, so it can't sleep and can't upcall - but it can be called\n     from LOOKUP_RCU pathwalk mode.\n\n   - Cache the latest positive result of request_key*() temporarily in\n     task_struct so that filesystems that make a lot of request_key()\n     calls during pathwalk can take advantage of it to avoid having to\n     redo the searching. This requires CONFIG_KEYS_REQUEST_CACHE=y.\n\n     It is assumed that the key just found is likely to be used multiple\n     times in each step in an RCU pathwalk, and is likely to be reused\n     for the next step too.\n\n     Note that the cleanup of the cache is done on TIF_NOTIFY_RESUME,\n     just before userspace resumes, and on exit\"\n\n* tag 'keys-request-20190626' of git://git.kernel.org/pub/scm/linux/kernel/git/dhowells/linux-fs:\n  keys: Kill off request_key_async{,_with_auxdata}\n  keys: Cache result of request_key*() temporarily in task_struct\n  keys: Provide request_key_rcu()\n  keys: Move the RCU locks outwards from the keyring search functions\n  keys: Invalidate used request_key authentication keys\n  keys: Fix request_key() lack of Link perm check on found key",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Mon Jul 8 19:19:37 2019 -0700",
  "author_date_iso": "2019-07-08T19:19:37-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Mon Jul 8 19:19:37 2019 -0700",
  "committer_date_iso": "2019-07-08T19:19:37-07:00",
  "files_changed": [
    "include/keys/request_key_auth-type.h",
    "include/linux/key.h",
    "include/linux/sched.h",
    "include/linux/tracehook.h",
    "kernel/cred.c",
    "security/keys/Kconfig",
    "security/keys/internal.h",
    "security/keys/key.c",
    "security/keys/keyring.c",
    "security/keys/proc.c",
    "security/keys/process_keys.c",
    "security/keys/request_key.c",
    "security/keys/request_key_auth.c"
  ],
  "files_changed_count": 13,
  "stats": [
    {
      "file": "Documentation/security/keys/core.rst",
      "insertions": 10,
      "deletions": 28
    },
    {
      "file": "Documentation/security/keys/request-key.rst",
      "insertions": 14,
      "deletions": 19
    },
    {
      "file": "include/keys/request_key_auth-type.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "include/linux/key.h",
      "insertions": 3,
      "deletions": 11
    },
    {
      "file": "include/linux/sched.h",
      "insertions": 5,
      "deletions": 0
    },
    {
      "file": "include/linux/tracehook.h",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "kernel/cred.c",
      "insertions": 9,
      "deletions": 0
    },
    {
      "file": "security/keys/Kconfig",
      "insertions": 18,
      "deletions": 0
    },
    {
      "file": "security/keys/internal.h",
      "insertions": 3,
      "deletions": 3
    },
    {
      "file": "security/keys/key.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "security/keys/keyring.c",
      "insertions": 9,
      "deletions": 7
    },
    {
      "file": "security/keys/proc.c",
      "insertions": 3,
      "deletions": 1
    },
    {
      "file": "security/keys/process_keys.c",
      "insertions": 18,
      "deletions": 23
    },
    {
      "file": "security/keys/request_key.c",
      "insertions": 91,
      "deletions": 46
    },
    {
      "file": "security/keys/request_key_auth.c",
      "insertions": 36,
      "deletions": 24
    }
  ],
  "total_insertions": 229,
  "total_deletions": 164,
  "total_changes": 393,
  "parents": [
    "d44a62742decca5ae5688a562584dc0fe9fc63f6",
    "3b8c4a08a471d56ecaaca939c972fdf5b8255629"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.3",
    "v5.3-rc1",
    "v5.3-rc2",
    "v5.3-rc3",
    "v5.3-rc4",
    "v5.3-rc5",
    "v5.3-rc6",
    "v5.3-rc7",
    "v5.3-rc8",
    "v5.4"
  ],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/keys/request_key_auth-type.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "security/keys/internal.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/tracehook.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/key.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/cred.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "security/keys/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "security/keys/proc.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "security/keys/process_keys.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "security/keys/keyring.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/sched.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "security/keys/key.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "security/keys/request_key.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "security/keys/request_key_auth.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}