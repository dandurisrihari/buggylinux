commit bf9095424d027e942e1d1ee74977e17b7df8e455
Merge: 98931dd95fd4 ffd1925a596c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu May 26 14:20:14 2022 -0700

    Merge tag 'for-linus' of git://git.kernel.org/pub/scm/virt/kvm/kvm
    
    Pull kvm updates from Paolo Bonzini:
     "S390:
    
       - ultravisor communication device driver
    
       - fix TEID on terminating storage key ops
    
      RISC-V:
    
       - Added Sv57x4 support for G-stage page table
    
       - Added range based local HFENCE functions
    
       - Added remote HFENCE functions based on VCPU requests
    
       - Added ISA extension registers in ONE_REG interface
    
       - Updated KVM RISC-V maintainers entry to cover selftests support
    
      ARM:
    
       - Add support for the ARMv8.6 WFxT extension
    
       - Guard pages for the EL2 stacks
    
       - Trap and emulate AArch32 ID registers to hide unsupported features
    
       - Ability to select and save/restore the set of hypercalls exposed to
         the guest
    
       - Support for PSCI-initiated suspend in collaboration with userspace
    
       - GICv3 register-based LPI invalidation support
    
       - Move host PMU event merging into the vcpu data structure
    
       - GICv3 ITS save/restore fixes
    
       - The usual set of small-scale cleanups and fixes
    
      x86:
    
       - New ioctls to get/set TSC frequency for a whole VM
    
       - Allow userspace to opt out of hypercall patching
    
       - Only do MSR filtering for MSRs accessed by rdmsr/wrmsr
    
      AMD SEV improvements:
    
       - Add KVM_EXIT_SHUTDOWN metadata for SEV-ES
    
       - V_TSC_AUX support
    
      Nested virtualization improvements for AMD:
    
       - Support for "nested nested" optimizations (nested vVMLOAD/VMSAVE,
         nested vGIF)
    
       - Allow AVIC to co-exist with a nested guest running
    
       - Fixes for LBR virtualizations when a nested guest is running, and
         nested LBR virtualization support
    
       - PAUSE filtering for nested hypervisors
    
      Guest support:
    
       - Decoupling of vcpu_is_preempted from PV spinlocks"
    
    * tag 'for-linus' of git://git.kernel.org/pub/scm/virt/kvm/kvm: (199 commits)
      KVM: x86: Fix the intel_pt PMI handling wrongly considered from guest
      KVM: selftests: x86: Sync the new name of the test case to .gitignore
      Documentation: kvm: reorder ARM-specific section about KVM_SYSTEM_EVENT_SUSPEND
      x86, kvm: use correct GFP flags for preemption disabled
      KVM: LAPIC: Drop pending LAPIC timer injection when canceling the timer
      x86/kvm: Alloc dummy async #PF token outside of raw spinlock
      KVM: x86: avoid calling x86 emulator without a decoded instruction
      KVM: SVM: Use kzalloc for sev ioctl interfaces to prevent kernel data leak
      x86/fpu: KVM: Set the base guest FPU uABI size to sizeof(struct kvm_xsave)
      s390/uv_uapi: depend on CONFIG_S390
      KVM: selftests: x86: Fix test failure on arch lbr capable platforms
      KVM: LAPIC: Trace LAPIC timer expiration on every vmentry
      KVM: s390: selftest: Test suppression indication on key prot exception
      KVM: s390: Don't indicate suppression on dirtying, failing memop
      selftests: drivers/s390x: Add uvdevice tests
      drivers/s390/char: Add Ultravisor io device
      MAINTAINERS: Update KVM RISC-V entry to cover selftests support
      RISC-V: KVM: Introduce ISA extension register
      RISC-V: KVM: Cleanup stale TLB entries when host CPU changes
      RISC-V: KVM: Add remote HFENCE functions based on VCPU requests
      ...

diff --cc arch/arm64/include/asm/esr.h
index 8f236de7359c,0bc9941b412e..15b34fbfca66
--- a/arch/arm64/include/asm/esr.h
+++ b/arch/arm64/include/asm/esr.h
@@@ -135,10 -135,13 +135,13 @@@
  #define ESR_ELx_CV		(UL(1) << 24)
  #define ESR_ELx_COND_SHIFT	(20)
  #define ESR_ELx_COND_MASK	(UL(0xF) << ESR_ELx_COND_SHIFT)
- #define ESR_ELx_WFx_ISS_TI	(UL(1) << 0)
+ #define ESR_ELx_WFx_ISS_RN	(UL(0x1F) << 5)
+ #define ESR_ELx_WFx_ISS_RV	(UL(1) << 2)
+ #define ESR_ELx_WFx_ISS_TI	(UL(3) << 0)
+ #define ESR_ELx_WFx_ISS_WFxT	(UL(2) << 0)
  #define ESR_ELx_WFx_ISS_WFI	(UL(0) << 0)
  #define ESR_ELx_WFx_ISS_WFE	(UL(1) << 0)
 -#define ESR_ELx_xVC_IMM_MASK	((1UL << 16) - 1)
 +#define ESR_ELx_xVC_IMM_MASK	((UL(1) << 16) - 1)
  
  #define DISR_EL1_IDS		(UL(1) << 24)
  /*