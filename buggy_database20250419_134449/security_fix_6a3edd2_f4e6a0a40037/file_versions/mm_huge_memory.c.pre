commit c8bb41631bc2ecc6434e93232c031c7a218ebe81
Author: Qi Zheng <zhengqi.arch@bytedance.com>
Date:   Thu Aug 18 16:27:48 2022 +0800

    mm: thp: remove redundant pgtable check in set_huge_zero_page()
    
    When the pgtable is NULL in the set_huge_zero_page(), we should not
    increment the count of PTE page table pages by calling mm_inc_nr_ptes().
    Otherwise we may receive the following warning when the mm exits:
    
            BUG: non-zero pgtables_bytes on freeing mm
    
    Now we can't observe the above warning since only
    do_huge_pmd_anonymous_page() invokes set_huge_zero_page() and the pgtable
    can not be NULL.
    
    Therefore, instead of moving mm_inc_nr_ptes() to the non-NULL branch of
    pgtable, it is better to remove the redundant pgtable check directly.
    
    Link: https://lkml.kernel.org/r/20220818082748.40021-1-zhengqi.arch@bytedance.com
    Signed-off-by: Qi Zheng <zhengqi.arch@bytedance.com>
    Cc: Mike Kravetz <mike.kravetz@oracle.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

diff --git a/mm/huge_memory.c b/mm/huge_memory.c
index 37105d9aa4d2..286a70c3d5de 100644
--- a/mm/huge_memory.c
+++ b/mm/huge_memory.c
@@ -770,8 +770,7 @@ static void set_huge_zero_page(pgtable_t pgtable, struct mm_struct *mm,
 		return;
 	entry = mk_pmd(zero_page, vma->vm_page_prot);
 	entry = pmd_mkhuge(entry);
-	if (pgtable)
-		pgtable_trans_huge_deposit(mm, pmd, pgtable);
+	pgtable_trans_huge_deposit(mm, pmd, pgtable);
 	set_pmd_at(mm, haddr, pmd, entry);
 	mm_inc_nr_ptes(mm);
 }