commit 67df411db3f0209e4bb5227d4dd9d41b21368b9d
Author: John Keeping <john@keeping.me.uk>
Date:   Tue Nov 29 13:00:59 2022 +0000

    ALSA: usb-audio: Add quirk for Tascam Model 12
    
    Tascam's Model 12 is a mixer which can also operate as a USB audio
    interface.  The audio interface uses explicit feedback but it seems that
    it does not correctly handle missing isochronous frames.
    
    When injecting an xrun (or doing anything else that pauses the playback
    stream) the feedback rate climbs (for example, at 44,100Hz nominal, I
    see a stable rate around 44,099 but xrun injection sees this peak at
    around 44,135 in most cases) and glitches are heard in the audio stream
    for several seconds - this is significantly worse than the single glitch
    expected for an underrun.
    
    While the stream does normally recover and the feedback rate returns to
    a stable value, I have seen some occurrences where this does not happen
    and the rate continues to increase while no audio is heard from the
    output.  I have not found a solid reproduction for this.
    
    This misbehaviour can be avoided by totally resetting the stream state
    by switching the interface to alt 0 and back before restarting the
    playback stream.
    
    Add a new quirk flag which forces the endpoint and interface to be
    reconfigured whenever the stream is stopped, and use this for the Tascam
    Model 12.
    
    Separate interfaces are used for the playback and capture endpoints, so
    resetting the playback interface here will not affect the capture stream
    if it is running.  While there are two endpoints on the interface,
    these are the OUT data endpoint and the IN explicit feedback endpoint
    corresponding to it and these are always stopped and started together.
    
    Signed-off-by: John Keeping <john@metanate.com>
    Link: https://lore.kernel.org/r/20221129130100.1257904-1-john@metanate.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

diff --git a/sound/usb/endpoint.c b/sound/usb/endpoint.c
index 310cd6fb0038..4aaf0784940b 100644
--- a/sound/usb/endpoint.c
+++ b/sound/usb/endpoint.c
@@ -1673,6 +1673,13 @@ void snd_usb_endpoint_stop(struct snd_usb_endpoint *ep, bool keep_pending)
 		stop_urbs(ep, false, keep_pending);
 		if (ep->clock_ref)
 			atomic_dec(&ep->clock_ref->locked);
+
+		if (ep->chip->quirk_flags & QUIRK_FLAG_FORCE_IFACE_RESET &&
+		    usb_pipeout(ep->pipe)) {
+			ep->need_prepare = true;
+			if (ep->iface_ref)
+				ep->iface_ref->need_setup = true;
+		}
 	}
 }