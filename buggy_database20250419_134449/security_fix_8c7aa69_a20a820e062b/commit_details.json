{
  "hash": "8c7aa698baca5e8f1ba9edb68081f1e7a1abf455",
  "hash_short": "8c7aa698",
  "subject": "x86_64, entry: Filter RFLAGS.NT on entry from userspace",
  "body": "The NT flag doesn't do anything in long mode other than causing IRET\nto #GP.  Oddly, CPL3 code can still set NT using popf.\n\nEntry via hardware or software interrupt clears NT automatically, so\nthe only relevant entries are fast syscalls.\n\nIf user code causes kernel code to run with NT set, then there's at\nleast some (small) chance that it could cause trouble.  For example,\nuser code could cause a call to EFI code with NT set, and who knows\nwhat would happen?  Apparently some games on Wine sometimes do\nthis (!), and, if an IRET return happens, they will segfault.  That\nsegfault cannot be handled, because signal delivery fails, too.\n\nThis patch programs the CPU to clear NT on entry via SYSCALL (both\n32-bit and 64-bit, by my reading of the AMD APM), and it clears NT\nin software on entry via SYSENTER.\n\nTo save a few cycles, this borrows a trick from Jan Beulich in Xen:\nit checks whether NT is set before trying to clear it.  As a result,\nit seems to have very little effect on SYSENTER performance on my\nmachine.\n\nThere's another minor bug fix in here: it looks like the CFI\nannotations were wrong if CONFIG_AUDITSYSCALL=n.\n\nTesters beware: on Xen, SYSENTER with NT set turns into a GPF.\n\nI haven't touched anything on 32-bit kernels.\n\nThe syscall mask change comes from a variant of this patch by Anish\nBhatt.\n\nNote to stable maintainers: there is no known security issue here.\nA misguided program can set NT and cause the kernel to try and fail\nto deliver SIGSEGV, crashing the program.  This patch fixes Far Cry\non Wine: https://bugs.winehq.org/show_bug.cgi?id=33275\n\nCc: <stable@vger.kernel.org>\nReported-by: Anish Bhatt <anish@chelsio.com>\nSigned-off-by: Andy Lutomirski <luto@amacapital.net>\nLink: http://lkml.kernel.org/r/395749a5d39a29bd3e4b35899cf3a3c1340e5595.1412189265.git.luto@amacapital.net\nSigned-off-by: H. Peter Anvin <hpa@zytor.com>",
  "full_message": "x86_64, entry: Filter RFLAGS.NT on entry from userspace\n\nThe NT flag doesn't do anything in long mode other than causing IRET\nto #GP.  Oddly, CPL3 code can still set NT using popf.\n\nEntry via hardware or software interrupt clears NT automatically, so\nthe only relevant entries are fast syscalls.\n\nIf user code causes kernel code to run with NT set, then there's at\nleast some (small) chance that it could cause trouble.  For example,\nuser code could cause a call to EFI code with NT set, and who knows\nwhat would happen?  Apparently some games on Wine sometimes do\nthis (!), and, if an IRET return happens, they will segfault.  That\nsegfault cannot be handled, because signal delivery fails, too.\n\nThis patch programs the CPU to clear NT on entry via SYSCALL (both\n32-bit and 64-bit, by my reading of the AMD APM), and it clears NT\nin software on entry via SYSENTER.\n\nTo save a few cycles, this borrows a trick from Jan Beulich in Xen:\nit checks whether NT is set before trying to clear it.  As a result,\nit seems to have very little effect on SYSENTER performance on my\nmachine.\n\nThere's another minor bug fix in here: it looks like the CFI\nannotations were wrong if CONFIG_AUDITSYSCALL=n.\n\nTesters beware: on Xen, SYSENTER with NT set turns into a GPF.\n\nI haven't touched anything on 32-bit kernels.\n\nThe syscall mask change comes from a variant of this patch by Anish\nBhatt.\n\nNote to stable maintainers: there is no known security issue here.\nA misguided program can set NT and cause the kernel to try and fail\nto deliver SIGSEGV, crashing the program.  This patch fixes Far Cry\non Wine: https://bugs.winehq.org/show_bug.cgi?id=33275\n\nCc: <stable@vger.kernel.org>\nReported-by: Anish Bhatt <anish@chelsio.com>\nSigned-off-by: Andy Lutomirski <luto@amacapital.net>\nLink: http://lkml.kernel.org/r/395749a5d39a29bd3e4b35899cf3a3c1340e5595.1412189265.git.luto@amacapital.net\nSigned-off-by: H. Peter Anvin <hpa@zytor.com>",
  "author_name": "Andy Lutomirski",
  "author_email": "luto@amacapital.net",
  "author_date": "Wed Oct 1 11:49:04 2014 -0700",
  "author_date_iso": "2014-10-01T11:49:04-07:00",
  "committer_name": "H. Peter Anvin",
  "committer_email": "hpa@zytor.com",
  "committer_date": "Mon Oct 6 10:53:26 2014 -0700",
  "committer_date_iso": "2014-10-06T10:53:26-07:00",
  "files_changed": [
    "arch/x86/ia32/ia32entry.S",
    "arch/x86/kernel/cpu/common.c"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "arch/x86/ia32/ia32entry.S",
      "insertions": 17,
      "deletions": 1
    },
    {
      "file": "arch/x86/kernel/cpu/common.c",
      "insertions": 1,
      "deletions": 1
    }
  ],
  "total_insertions": 18,
  "total_deletions": 2,
  "total_changes": 20,
  "parents": [
    "20cc28882bf4a8c9a2605a9a76a7952e696aaece"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v3.18",
    "v3.18-rc1",
    "v3.18-rc2",
    "v3.18-rc3",
    "v3.18-rc4",
    "v3.18-rc5",
    "v3.18-rc6",
    "v3.18-rc7",
    "v3.19",
    "v3.19-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "security issue"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/ia32/ia32entry.S",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/cpu/common.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}