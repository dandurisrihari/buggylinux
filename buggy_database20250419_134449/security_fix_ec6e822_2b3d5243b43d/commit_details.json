{
  "hash": "ec6e822d1a22d0eef1d1fa260dff751dba9a4258",
  "hash_short": "ec6e822d",
  "subject": "arm64: expose user PAC bit positions via ptrace",
  "body": "When pointer authentication is in use, data/instruction pointers have a\nnumber of PAC bits inserted into them. The number and position of these\nbits depends on the configured TCR_ELx.TxSZ and whether tagging is\nenabled. ARMv8.3 allows tagging to differ for instruction and data\npointers.\n\nFor userspace debuggers to unwind the stack and/or to follow pointer\nchains, they need to be able to remove the PAC bits before attempting to\nuse a pointer.\n\nThis patch adds a new structure with masks describing the location of\nthe PAC bits in userspace instruction and data pointers (i.e. those\naddressable via TTBR0), which userspace can query via PTRACE_GETREGSET.\nBy clearing these bits from pointers (and replacing them with the value\nof bit 55), userspace can acquire the PAC-less versions.\n\nThis new regset is exposed when the kernel is built with (user) pointer\nauthentication support, and the address authentication feature is\nenabled. Otherwise, the regset is hidden.\n\nReviewed-by: Richard Henderson <richard.henderson@linaro.org>\nSigned-off-by: Mark Rutland <mark.rutland@arm.com>\nSigned-off-by: Kristina Martsenko <kristina.martsenko@arm.com>\nCc: Catalin Marinas <catalin.marinas@arm.com>\nCc: Ramana Radhakrishnan <ramana.radhakrishnan@arm.com>\nCc: Will Deacon <will.deacon@arm.com>\n[will: Fix to use vabits_user instead of VA_BITS and rename macro]\nSigned-off-by: Will Deacon <will.deacon@arm.com>",
  "full_message": "arm64: expose user PAC bit positions via ptrace\n\nWhen pointer authentication is in use, data/instruction pointers have a\nnumber of PAC bits inserted into them. The number and position of these\nbits depends on the configured TCR_ELx.TxSZ and whether tagging is\nenabled. ARMv8.3 allows tagging to differ for instruction and data\npointers.\n\nFor userspace debuggers to unwind the stack and/or to follow pointer\nchains, they need to be able to remove the PAC bits before attempting to\nuse a pointer.\n\nThis patch adds a new structure with masks describing the location of\nthe PAC bits in userspace instruction and data pointers (i.e. those\naddressable via TTBR0), which userspace can query via PTRACE_GETREGSET.\nBy clearing these bits from pointers (and replacing them with the value\nof bit 55), userspace can acquire the PAC-less versions.\n\nThis new regset is exposed when the kernel is built with (user) pointer\nauthentication support, and the address authentication feature is\nenabled. Otherwise, the regset is hidden.\n\nReviewed-by: Richard Henderson <richard.henderson@linaro.org>\nSigned-off-by: Mark Rutland <mark.rutland@arm.com>\nSigned-off-by: Kristina Martsenko <kristina.martsenko@arm.com>\nCc: Catalin Marinas <catalin.marinas@arm.com>\nCc: Ramana Radhakrishnan <ramana.radhakrishnan@arm.com>\nCc: Will Deacon <will.deacon@arm.com>\n[will: Fix to use vabits_user instead of VA_BITS and rename macro]\nSigned-off-by: Will Deacon <will.deacon@arm.com>",
  "author_name": "Mark Rutland",
  "author_email": "mark.rutland@arm.com",
  "author_date": "Fri Dec 7 18:39:26 2018 +0000",
  "author_date_iso": "2018-12-07T18:39:26+00:00",
  "committer_name": "Will Deacon",
  "committer_email": "will.deacon@arm.com",
  "committer_date": "Thu Dec 13 16:42:46 2018 +0000",
  "committer_date_iso": "2018-12-13T16:42:46+00:00",
  "files_changed": [
    "arch/arm64/include/asm/memory.h",
    "arch/arm64/include/asm/pointer_auth.h",
    "arch/arm64/include/asm/processor.h",
    "arch/arm64/include/uapi/asm/ptrace.h",
    "arch/arm64/kernel/ptrace.c",
    "include/uapi/linux/elf.h"
  ],
  "files_changed_count": 6,
  "stats": [
    {
      "file": "arch/arm64/include/asm/memory.h",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/pointer_auth.h",
      "insertions": 8,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/processor.h",
      "insertions": 0,
      "deletions": 2
    },
    {
      "file": "arch/arm64/include/uapi/asm/ptrace.h",
      "insertions": 7,
      "deletions": 0
    },
    {
      "file": "arch/arm64/kernel/ptrace.c",
      "insertions": 38,
      "deletions": 0
    },
    {
      "file": "include/uapi/linux/elf.h",
      "insertions": 1,
      "deletions": 0
    }
  ],
  "total_insertions": 57,
  "total_deletions": 2,
  "total_changes": 59,
  "parents": [
    "7503197562567b57ec14feb3a9d5400ebc56812f"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.0",
    "v5.0-rc1",
    "v5.0-rc2",
    "v5.0-rc3",
    "v5.0-rc4",
    "v5.0-rc5",
    "v5.0-rc6",
    "v5.0-rc7",
    "v5.0-rc8",
    "v5.1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/arm64/include/asm/pointer_auth.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/asm/processor.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/asm/memory.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/uapi/asm/ptrace.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/ptrace.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/uapi/linux/elf.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}