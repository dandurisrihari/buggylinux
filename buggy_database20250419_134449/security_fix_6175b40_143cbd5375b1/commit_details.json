{
  "hash": "6175b407756b22e7fdc771181b7d832ebdedef5c",
  "hash_short": "6175b407",
  "subject": "x86/mce/inject: Clear test status value",
  "body": "AMD systems generally allow MCA \"simulation\" where MCA registers can be\nwritten with valid data and the full MCA handling flow can be tested by\nsoftware.\n\nHowever, the platform on Scalable MCA systems, can prevent software from\nwriting data to the MCA registers. There is no architectural way to\ndetermine this configuration. Therefore, the MCE injection module will\ncheck for this behavior by writing and reading back a test status value.\nThis is done during module init, and the check can run on any CPU with\nany valid MCA bank.\n\nIf MCA_STATUS writes are ignored by the platform, then there are no side\neffects on the hardware state.\n\nIf the writes are not ignored, then the test status value will remain in\nthe hardware MCA_STATUS register. It is likely that the value will not\nbe overwritten by hardware or software, since the tested CPU and bank\nare arbitrary. Therefore, the user may see a spurious, synthetic MCA\nerror reported whenever MCA is polled for this CPU.\n\nClear the test value immediately after writing it. It is very unlikely\nthat a valid MCA error is logged by hardware during the test. Errors\nthat cause an #MC won't be affected.\n\nFixes: 891e465a1bd8 (\"x86/mce: Check whether writes to MCA_STATUS are getting ignored\")\nSigned-off-by: Yazen Ghannam <yazen.ghannam@amd.com>\nSigned-off-by: Borislav Petkov (AMD) <bp@alien8.de>\nLink: https://lore.kernel.org/r/20231118193248.1296798-2-yazen.ghannam@amd.com",
  "full_message": "x86/mce/inject: Clear test status value\n\nAMD systems generally allow MCA \"simulation\" where MCA registers can be\nwritten with valid data and the full MCA handling flow can be tested by\nsoftware.\n\nHowever, the platform on Scalable MCA systems, can prevent software from\nwriting data to the MCA registers. There is no architectural way to\ndetermine this configuration. Therefore, the MCE injection module will\ncheck for this behavior by writing and reading back a test status value.\nThis is done during module init, and the check can run on any CPU with\nany valid MCA bank.\n\nIf MCA_STATUS writes are ignored by the platform, then there are no side\neffects on the hardware state.\n\nIf the writes are not ignored, then the test status value will remain in\nthe hardware MCA_STATUS register. It is likely that the value will not\nbe overwritten by hardware or software, since the tested CPU and bank\nare arbitrary. Therefore, the user may see a spurious, synthetic MCA\nerror reported whenever MCA is polled for this CPU.\n\nClear the test value immediately after writing it. It is very unlikely\nthat a valid MCA error is logged by hardware during the test. Errors\nthat cause an #MC won't be affected.\n\nFixes: 891e465a1bd8 (\"x86/mce: Check whether writes to MCA_STATUS are getting ignored\")\nSigned-off-by: Yazen Ghannam <yazen.ghannam@amd.com>\nSigned-off-by: Borislav Petkov (AMD) <bp@alien8.de>\nLink: https://lore.kernel.org/r/20231118193248.1296798-2-yazen.ghannam@amd.com",
  "author_name": "Yazen Ghannam",
  "author_email": "yazen.ghannam@amd.com",
  "author_date": "Sat Nov 18 13:32:29 2023 -0600",
  "author_date_iso": "2023-11-18T13:32:29-06:00",
  "committer_name": "Borislav Petkov (AMD)",
  "committer_email": "bp@alien8.de",
  "committer_date": "Wed Nov 22 19:13:38 2023 +0100",
  "committer_date_iso": "2023-11-22T19:13:38+01:00",
  "files_changed": [
    "arch/x86/kernel/cpu/mce/inject.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/x86/kernel/cpu/mce/inject.c",
      "insertions": 1,
      "deletions": 0
    }
  ],
  "total_insertions": 1,
  "total_deletions": 0,
  "total_changes": 1,
  "parents": [
    "612905e13b8769caca7ec4194a8aceb24efa4d5c"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "inject"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/kernel/cpu/mce/inject.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}