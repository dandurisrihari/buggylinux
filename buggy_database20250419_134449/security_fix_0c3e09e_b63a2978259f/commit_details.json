{
  "hash": "0c3e09e8854bcd3f7c45de85007ed283342b3464",
  "hash_short": "0c3e09e8",
  "subject": "block, bfq: correctly raise inject limit in bfq_choose_bfqq_for_injection",
  "body": "Function bfq_choose_bfqq_for_injection may temporarily raise inject limit\nto one request if current inject_limit is 0 before search of the source\nqueue for injection. However the search below will reset inject limit to\nbfqd->in_service_queue which is zero for raised inject limit. Then the\ntemporarily raised inject limit never works as expected.\nAssigment limit to bfqd->in_service_queue in search is needed as limit\nmaybe overwriten to min_t(unsigned int, 1, limit) for condition that\na large in-flight request is on non-rotational devices in found queue.\nSo we need to reset limit to bfqd->in_service_queue for normal case.\n\nActually, we have already make sure bfqd->rq_in_driver is < limit before\nsearch, then\n -Limit is >= 1 as bfqd->rq_in_driver is >= 0. Then min_t(unsigned int,\n1, limit) is always 1. So we can simply check bfqd->rq_in_driver with\n1 instead of result of min_t(unsigned int, 1, limit) for larget request in\nnon-rotational device case to avoid overwritting limit and the bug is gone.\n -For normal case, we have already check bfqd->rq_in_driver is < limit,\nso we can return found bfqq unconditionally to remove unncessary check.\n\nSigned-off-by: Kemeng Shi <shikemeng@huaweicloud.com>\nReviewed-by: Jan Kara <jack@suse.cz>\nLink: https://lore.kernel.org/r/20230116095153.3810101-2-shikemeng@huaweicloud.com\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
  "full_message": "block, bfq: correctly raise inject limit in bfq_choose_bfqq_for_injection\n\nFunction bfq_choose_bfqq_for_injection may temporarily raise inject limit\nto one request if current inject_limit is 0 before search of the source\nqueue for injection. However the search below will reset inject limit to\nbfqd->in_service_queue which is zero for raised inject limit. Then the\ntemporarily raised inject limit never works as expected.\nAssigment limit to bfqd->in_service_queue in search is needed as limit\nmaybe overwriten to min_t(unsigned int, 1, limit) for condition that\na large in-flight request is on non-rotational devices in found queue.\nSo we need to reset limit to bfqd->in_service_queue for normal case.\n\nActually, we have already make sure bfqd->rq_in_driver is < limit before\nsearch, then\n -Limit is >= 1 as bfqd->rq_in_driver is >= 0. Then min_t(unsigned int,\n1, limit) is always 1. So we can simply check bfqd->rq_in_driver with\n1 instead of result of min_t(unsigned int, 1, limit) for larget request in\nnon-rotational device case to avoid overwritting limit and the bug is gone.\n -For normal case, we have already check bfqd->rq_in_driver is < limit,\nso we can return found bfqq unconditionally to remove unncessary check.\n\nSigned-off-by: Kemeng Shi <shikemeng@huaweicloud.com>\nReviewed-by: Jan Kara <jack@suse.cz>\nLink: https://lore.kernel.org/r/20230116095153.3810101-2-shikemeng@huaweicloud.com\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
  "author_name": "Kemeng Shi",
  "author_email": "shikemeng@huaweicloud.com",
  "author_date": "Mon Jan 16 17:51:46 2023 +0800",
  "author_date_iso": "2023-01-16T17:51:46+08:00",
  "committer_name": "Jens Axboe",
  "committer_email": "axboe@kernel.dk",
  "committer_date": "Sun Jan 29 20:03:49 2023 -0700",
  "committer_date_iso": "2023-01-29T20:03:49-07:00",
  "files_changed": [
    "block/bfq-iosched.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "block/bfq-iosched.c",
      "insertions": 4,
      "deletions": 6
    }
  ],
  "total_insertions": 4,
  "total_deletions": 6,
  "total_changes": 10,
  "parents": [
    "b5fcf7871acb7f9a3a8ed341a68bd86aba3e254a"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "inject"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "block/bfq-iosched.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}