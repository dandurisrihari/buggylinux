{
  "hash": "c401cf1524153f9c2ede7ab8ece403513925770a",
  "hash_short": "c401cf15",
  "subject": "x86/KASLR: Add 'struct slot_area' to manage random_addr slots",
  "body": "In order to support KASLR moving the kernel anywhere in physical memory\n(which could be up to 64TB), we need to handle counting the potential\nrandomization locations in a more efficient manner.\n\nIn the worst case with 64TB, there could be roughly 32 * 1024 * 1024\nrandomization slots if CONFIG_PHYSICAL_ALIGN is 0x1000000. Currently\nthe starting address of candidate positions is stored into the slots[]\narray, one at a time. This method would cost too much memory and it's\nalso very inefficient to get and save the slot information into the slot\narray one by one.\n\nThis patch introduces 'struct slot_area' to manage each contiguous region\nof randomization slots. Each slot_area will contain the starting address\nand how many available slots are in this area. As with the original code,\nthe slot_areas[] will avoid the mem_avoid[] regions.\n\nSince setup_data is a linked list, it could contain an unknown number\nof memory regions to be avoided, which could cause us to fragment\nthe contiguous memory that the slot_area array is tracking. In normal\noperation this level of fragmentation will be extremely rare, but we\nchoose a suitably large value (100) for the array. If setup_data forces\nthe slot_area array to become highly fragmented and there are more\nslots available beyond the first 100 found, the rest will be ignored\nfor KASLR selection.\n\nThe function store_slot_info() is used to calculate the number of slots\navailable in the passed-in memory region and stores it into slot_areas[]\nafter adjusting for alignment and size requirements.\n\nSigned-off-by: Baoquan He <bhe@redhat.com>\n[ Rewrote changelog, squashed with new functions. ]\nSigned-off-by: Kees Cook <keescook@chromium.org>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Andy Lutomirski <luto@amacapital.net>\nCc: Andy Lutomirski <luto@kernel.org>\nCc: Borislav Petkov <bp@alien8.de>\nCc: Borislav Petkov <bp@suse.de>\nCc: Brian Gerst <brgerst@gmail.com>\nCc: Dave Young <dyoung@redhat.com>\nCc: Denys Vlasenko <dvlasenk@redhat.com>\nCc: H. Peter Anvin <hpa@zytor.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Vivek Goyal <vgoyal@redhat.com>\nCc: Yinghai Lu <yinghai@kernel.org>\nCc: kernel-hardening@lists.openwall.com\nCc: lasse.collin@tukaani.org\nLink: http://lkml.kernel.org/r/1462825332-10505-4-git-send-email-keescook@chromium.org\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "full_message": "x86/KASLR: Add 'struct slot_area' to manage random_addr slots\n\nIn order to support KASLR moving the kernel anywhere in physical memory\n(which could be up to 64TB), we need to handle counting the potential\nrandomization locations in a more efficient manner.\n\nIn the worst case with 64TB, there could be roughly 32 * 1024 * 1024\nrandomization slots if CONFIG_PHYSICAL_ALIGN is 0x1000000. Currently\nthe starting address of candidate positions is stored into the slots[]\narray, one at a time. This method would cost too much memory and it's\nalso very inefficient to get and save the slot information into the slot\narray one by one.\n\nThis patch introduces 'struct slot_area' to manage each contiguous region\nof randomization slots. Each slot_area will contain the starting address\nand how many available slots are in this area. As with the original code,\nthe slot_areas[] will avoid the mem_avoid[] regions.\n\nSince setup_data is a linked list, it could contain an unknown number\nof memory regions to be avoided, which could cause us to fragment\nthe contiguous memory that the slot_area array is tracking. In normal\noperation this level of fragmentation will be extremely rare, but we\nchoose a suitably large value (100) for the array. If setup_data forces\nthe slot_area array to become highly fragmented and there are more\nslots available beyond the first 100 found, the rest will be ignored\nfor KASLR selection.\n\nThe function store_slot_info() is used to calculate the number of slots\navailable in the passed-in memory region and stores it into slot_areas[]\nafter adjusting for alignment and size requirements.\n\nSigned-off-by: Baoquan He <bhe@redhat.com>\n[ Rewrote changelog, squashed with new functions. ]\nSigned-off-by: Kees Cook <keescook@chromium.org>\nCc: Andrew Morton <akpm@linux-foundation.org>\nCc: Andy Lutomirski <luto@amacapital.net>\nCc: Andy Lutomirski <luto@kernel.org>\nCc: Borislav Petkov <bp@alien8.de>\nCc: Borislav Petkov <bp@suse.de>\nCc: Brian Gerst <brgerst@gmail.com>\nCc: Dave Young <dyoung@redhat.com>\nCc: Denys Vlasenko <dvlasenk@redhat.com>\nCc: H. Peter Anvin <hpa@zytor.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Vivek Goyal <vgoyal@redhat.com>\nCc: Yinghai Lu <yinghai@kernel.org>\nCc: kernel-hardening@lists.openwall.com\nCc: lasse.collin@tukaani.org\nLink: http://lkml.kernel.org/r/1462825332-10505-4-git-send-email-keescook@chromium.org\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "author_name": "Baoquan He",
  "author_email": "bhe@redhat.com",
  "author_date": "Mon May 9 13:22:06 2016 -0700",
  "author_date_iso": "2016-05-09T13:22:06-07:00",
  "committer_name": "Ingo Molnar",
  "committer_email": "mingo@kernel.org",
  "committer_date": "Tue May 10 10:12:04 2016 +0200",
  "committer_date_iso": "2016-05-10T10:12:04+02:00",
  "files_changed": [
    "arch/x86/boot/compressed/kaslr.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/x86/boot/compressed/kaslr.c",
      "insertions": 29,
      "deletions": 0
    }
  ],
  "total_insertions": 29,
  "total_deletions": 0,
  "total_changes": 29,
  "parents": [
    "cb18ef0da259db611fbf52806592fde5f469ae67"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.10",
    "v4.10-rc1",
    "v4.10-rc2",
    "v4.10-rc3",
    "v4.10-rc4",
    "v4.10-rc5",
    "v4.10-rc6",
    "v4.10-rc7",
    "v4.10-rc8",
    "v4.11"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/boot/compressed/kaslr.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}