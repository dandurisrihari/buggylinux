{
  "hash": "4f6923fbb352d126659cabe34806cff75c7b5ea0",
  "hash_short": "4f6923fb",
  "subject": "mm: make should_failslab always available for fault injection",
  "body": "should_failslab() is a convenient function to hook into for directed\nerror injection into kmalloc().  However, it is only available if a\nconfig flag is set.\n\nThe following BCC script, for example, fails kmalloc() calls after a\nbtrfs umount:\n\n    from bcc import BPF\n\n    prog = r\"\"\"\n    BPF_HASH(flag);\n\n    #include <linux/mm.h>\n\n    int kprobe__btrfs_close_devices(void *ctx) {\n            u64 key = 1;\n            flag.update(&key, &key);\n            return 0;\n    }\n\n    int kprobe__should_failslab(struct pt_regs *ctx) {\n            u64 key = 1;\n            u64 *res;\n            res = flag.lookup(&key);\n            if (res != 0) {\n                bpf_override_return(ctx, -ENOMEM);\n            }\n            return 0;\n    }\n    \"\"\"\n    b = BPF(text=prog)\n\n    while 1:\n        b.kprobe_poll()\n\nThis patch refactors the should_failslab implementation so that the\nfunction is always available for error injection, independent of flags.\n\nThis change would be similar in nature to commit f5490d3ec921 (\"block:\nAdd should_fail_bio() for bpf error injection\").\n\nLink: http://lkml.kernel.org/r/20180222020320.6944-1-hmclauchlan@fb.com\nSigned-off-by: Howard McLauchlan <hmclauchlan@fb.com>\nReviewed-by: Andrew Morton <akpm@linux-foundation.org>\nCc: Akinobu Mita <akinobu.mita@gmail.com>\nCc: Christoph Lameter <cl@linux.com>\nCc: Pekka Enberg <penberg@kernel.org>\nCc: David Rientjes <rientjes@google.com>\nCc: Joonsoo Kim <iamjoonsoo.kim@lge.com>\nCc: Josef Bacik <jbacik@fb.com>\nCc: Johannes Weiner <jweiner@fb.com>\nCc: Alexei Starovoitov <ast@fb.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "full_message": "mm: make should_failslab always available for fault injection\n\nshould_failslab() is a convenient function to hook into for directed\nerror injection into kmalloc().  However, it is only available if a\nconfig flag is set.\n\nThe following BCC script, for example, fails kmalloc() calls after a\nbtrfs umount:\n\n    from bcc import BPF\n\n    prog = r\"\"\"\n    BPF_HASH(flag);\n\n    #include <linux/mm.h>\n\n    int kprobe__btrfs_close_devices(void *ctx) {\n            u64 key = 1;\n            flag.update(&key, &key);\n            return 0;\n    }\n\n    int kprobe__should_failslab(struct pt_regs *ctx) {\n            u64 key = 1;\n            u64 *res;\n            res = flag.lookup(&key);\n            if (res != 0) {\n                bpf_override_return(ctx, -ENOMEM);\n            }\n            return 0;\n    }\n    \"\"\"\n    b = BPF(text=prog)\n\n    while 1:\n        b.kprobe_poll()\n\nThis patch refactors the should_failslab implementation so that the\nfunction is always available for error injection, independent of flags.\n\nThis change would be similar in nature to commit f5490d3ec921 (\"block:\nAdd should_fail_bio() for bpf error injection\").\n\nLink: http://lkml.kernel.org/r/20180222020320.6944-1-hmclauchlan@fb.com\nSigned-off-by: Howard McLauchlan <hmclauchlan@fb.com>\nReviewed-by: Andrew Morton <akpm@linux-foundation.org>\nCc: Akinobu Mita <akinobu.mita@gmail.com>\nCc: Christoph Lameter <cl@linux.com>\nCc: Pekka Enberg <penberg@kernel.org>\nCc: David Rientjes <rientjes@google.com>\nCc: Joonsoo Kim <iamjoonsoo.kim@lge.com>\nCc: Josef Bacik <jbacik@fb.com>\nCc: Johannes Weiner <jweiner@fb.com>\nCc: Alexei Starovoitov <ast@fb.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "author_name": "Howard McLauchlan",
  "author_email": "hmclauchlan@fb.com",
  "author_date": "Thu Apr 5 16:23:57 2018 -0700",
  "author_date_iso": "2018-04-05T16:23:57-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Thu Apr 5 21:36:26 2018 -0700",
  "committer_date_iso": "2018-04-05T21:36:26-07:00",
  "files_changed": [
    "include/linux/fault-inject.h",
    "mm/failslab.c",
    "mm/slab_common.c"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "include/linux/fault-inject.h",
      "insertions": 3,
      "deletions": 2
    },
    {
      "file": "mm/failslab.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "mm/slab_common.c",
      "insertions": 8,
      "deletions": 0
    }
  ],
  "total_insertions": 12,
  "total_deletions": 3,
  "total_changes": 15,
  "parents": [
    "14298d3663e44705d3f9106343ac8298a5fdff99"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.17",
    "v4.17-rc1",
    "v4.17-rc2",
    "v4.17-rc3",
    "v4.17-rc4",
    "v4.17-rc5",
    "v4.17-rc6",
    "v4.17-rc7",
    "v4.18",
    "v4.18-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/linux/fault-inject.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/failslab.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/slab_common.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}