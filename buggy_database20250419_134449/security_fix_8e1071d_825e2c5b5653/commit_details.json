{
  "hash": "8e1071d0ad300fcce2e2b4e46cb15e41d0166bdc",
  "hash_short": "8e1071d0",
  "subject": "tools/kvm_stat: fix incorrect detection of debugfs",
  "body": "The first field in /proc/mounts can be influenced by unprivileged users\nthrough the widespread `fusermount` setuid-root program. Example:\n\n```\nuser$ mkdir ~/mydebugfs\nuser$ export _FUSE_COMMFD=0\nuser$ fusermount ~/mydebugfs -ononempty,fsname=debugfs\nuser$ grep debugfs /proc/mounts\ndebugfs /home/user/mydebugfs fuse rw,nosuid,nodev,relatime,user_id=1000,group_id=100 0 0\n```\n\nIf there is no debugfs already mounted in the system then this can be\nused by unprivileged users to trick kvm_stat into using a user\ncontrolled file system location for obtaining KVM statistics.\nEven though the root user is not allowed to access non-root FUSE mounts\nfor security reasons, the unprivileged user can unmount the FUSE mount\nbefore kvm_stat uses the mounted path.  If it wins the race, kvm_stat\nwill read from the location where the FUSE mount resided.\n\nNote that the files in debugfs are only opened for reading, so the\nattacker can cause very large data to be read in by kvm_stat, or fake\ndata to be processed, but there should be no viable way to turn this\ninto a privilege escalation.\n\nThe fix is simply to use the file system type field instead. Whitespace\nin the mount path is escaped in /proc/mounts thus no further safety\nmeasures in the parsing should be necessary to make this correct.\n\nMessage-Id: <20221103135927.13656-1-matthias.gerstner@suse.de>\nSigned-off-by: Matthias Gerstner <matthias.gerstner@suse.de>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
  "full_message": "tools/kvm_stat: fix incorrect detection of debugfs\n\nThe first field in /proc/mounts can be influenced by unprivileged users\nthrough the widespread `fusermount` setuid-root program. Example:\n\n```\nuser$ mkdir ~/mydebugfs\nuser$ export _FUSE_COMMFD=0\nuser$ fusermount ~/mydebugfs -ononempty,fsname=debugfs\nuser$ grep debugfs /proc/mounts\ndebugfs /home/user/mydebugfs fuse rw,nosuid,nodev,relatime,user_id=1000,group_id=100 0 0\n```\n\nIf there is no debugfs already mounted in the system then this can be\nused by unprivileged users to trick kvm_stat into using a user\ncontrolled file system location for obtaining KVM statistics.\nEven though the root user is not allowed to access non-root FUSE mounts\nfor security reasons, the unprivileged user can unmount the FUSE mount\nbefore kvm_stat uses the mounted path.  If it wins the race, kvm_stat\nwill read from the location where the FUSE mount resided.\n\nNote that the files in debugfs are only opened for reading, so the\nattacker can cause very large data to be read in by kvm_stat, or fake\ndata to be processed, but there should be no viable way to turn this\ninto a privilege escalation.\n\nThe fix is simply to use the file system type field instead. Whitespace\nin the mount path is escaped in /proc/mounts thus no further safety\nmeasures in the parsing should be necessary to make this correct.\n\nMessage-Id: <20221103135927.13656-1-matthias.gerstner@suse.de>\nSigned-off-by: Matthias Gerstner <matthias.gerstner@suse.de>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
  "author_name": "Matthias Gerstner",
  "author_email": "matthias.gerstner@suse.de",
  "author_date": "Thu Nov 3 14:59:27 2022 +0100",
  "author_date_iso": "2022-11-03T14:59:27+01:00",
  "committer_name": "Paolo Bonzini",
  "committer_email": "pbonzini@redhat.com",
  "committer_date": "Wed Nov 9 12:26:52 2022 -0500",
  "committer_date_iso": "2022-11-09T12:26:52-05:00",
  "files_changed": [
    "tools/kvm/kvm_stat/kvm_stat"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "tools/kvm/kvm_stat/kvm_stat",
      "insertions": 1,
      "deletions": 1
    }
  ],
  "total_insertions": 1,
  "total_deletions": 1,
  "total_changes": 2,
  "parents": [
    "bd3d394e367e66e773a6cb25a82c29b04464230b"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "privilege escalation"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "tools/kvm/kvm_stat/kvm_stat",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}