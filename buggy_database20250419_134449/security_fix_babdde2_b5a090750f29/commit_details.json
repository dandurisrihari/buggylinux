{
  "hash": "babdde2698d482b6c0de1eab4f697cf5856c5859",
  "hash_short": "babdde26",
  "subject": "x86: Implement array_index_mask_nospec",
  "body": "array_index_nospec() uses a mask to sanitize user controllable array\nindexes, i.e. generate a 0 mask if 'index' >= 'size', and a ~0 mask\notherwise. While the default array_index_mask_nospec() handles the\ncarry-bit from the (index - size) result in software.\n\nThe x86 array_index_mask_nospec() does the same, but the carry-bit is\nhandled in the processor CF flag without conditional instructions in the\ncontrol flow.\n\nSuggested-by: Linus Torvalds <torvalds@linux-foundation.org>\nSigned-off-by: Dan Williams <dan.j.williams@intel.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nCc: linux-arch@vger.kernel.org\nCc: kernel-hardening@lists.openwall.com\nCc: gregkh@linuxfoundation.org\nCc: alan@linux.intel.com\nLink: https://lkml.kernel.org/r/151727414808.33451.1873237130672785331.stgit@dwillia2-desk3.amr.corp.intel.com",
  "full_message": "x86: Implement array_index_mask_nospec\n\narray_index_nospec() uses a mask to sanitize user controllable array\nindexes, i.e. generate a 0 mask if 'index' >= 'size', and a ~0 mask\notherwise. While the default array_index_mask_nospec() handles the\ncarry-bit from the (index - size) result in software.\n\nThe x86 array_index_mask_nospec() does the same, but the carry-bit is\nhandled in the processor CF flag without conditional instructions in the\ncontrol flow.\n\nSuggested-by: Linus Torvalds <torvalds@linux-foundation.org>\nSigned-off-by: Dan Williams <dan.j.williams@intel.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nCc: linux-arch@vger.kernel.org\nCc: kernel-hardening@lists.openwall.com\nCc: gregkh@linuxfoundation.org\nCc: alan@linux.intel.com\nLink: https://lkml.kernel.org/r/151727414808.33451.1873237130672785331.stgit@dwillia2-desk3.amr.corp.intel.com",
  "author_name": "Dan Williams",
  "author_email": "dan.j.williams@intel.com",
  "author_date": "Mon Jan 29 17:02:28 2018 -0800",
  "author_date_iso": "2018-01-29T17:02:28-08:00",
  "committer_name": "Thomas Gleixner",
  "committer_email": "tglx@linutronix.de",
  "committer_date": "Tue Jan 30 21:54:29 2018 +0100",
  "committer_date_iso": "2018-01-30T21:54:29+01:00",
  "files_changed": [
    "arch/x86/include/asm/barrier.h"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/x86/include/asm/barrier.h",
      "insertions": 24,
      "deletions": 0
    }
  ],
  "total_insertions": 24,
  "total_deletions": 0,
  "total_changes": 24,
  "parents": [
    "f3804203306e098dae9ca51540fcd5eb700d7f40"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.16",
    "v4.16-rc1",
    "v4.16-rc2",
    "v4.16-rc3",
    "v4.16-rc4",
    "v4.16-rc5",
    "v4.16-rc6",
    "v4.16-rc7",
    "v4.17",
    "v4.17-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening",
      "sanitize"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/include/asm/barrier.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}