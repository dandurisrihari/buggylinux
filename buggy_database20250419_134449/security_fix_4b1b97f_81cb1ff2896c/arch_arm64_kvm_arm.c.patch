commit 4b1b97f0d7cfd3e29ae72f380996b8359200fd86
Author: Marc Zyngier <maz@kernel.org>
Date:   Tue Feb 25 17:29:23 2025 +0000

    KVM: arm64: nv: Handle L2->L1 transition on interrupt injection
    
    An interrupt being delivered to L1 while running L2 must result
    in the correct exception being delivered to L1.
    
    This means that if, on entry to L2, we found ourselves with pending
    interrupts in the L1 distributor, we need to take immediate action.
    This is done by posting a request which will prevent the entry in
    L2, and deliver an IRQ exception to L1, forcing the switch.
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20250225172930.1850838-10-maz@kernel.org
    Signed-off-by: Oliver Upton <oliver.upton@linux.dev>

diff --git a/arch/arm64/kvm/arm.c b/arch/arm64/kvm/arm.c
index 383aa4862234..0ec7099f4b63 100644
--- a/arch/arm64/kvm/arm.c
+++ b/arch/arm64/kvm/arm.c
@@ -1148,6 +1148,11 @@ int kvm_arch_vcpu_ioctl_run(struct kvm_vcpu *vcpu)
 		 * preserved on VMID roll-over if the task was preempted,
 		 * making a thread's VMID inactive. So we need to call
 		 * kvm_arm_vmid_update() in non-premptible context.
+		 *
+		 * Note that this must happen after the check_vcpu_request()
+		 * call to pick the correct s2_mmu structure, as a pending
+		 * nested exception (IRQ, for example) can trigger a change
+		 * in translation regime.
 		 */
 		if (kvm_arm_vmid_update(&vcpu->arch.hw_mmu->vmid) &&
 		    has_vhe())