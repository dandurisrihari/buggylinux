commit 5676e7b6db02b80eafc2e3ad316d5f2fee817ecb
Author: Robert Elliott <elliott@hp.com>
Date:   Tue Sep 2 11:38:44 2014 -0500

    blk-mq: cleanup after blk_mq_init_rq_map failures
    
    In blk-mq.c blk_mq_alloc_tag_set, if:
            set->tags = kmalloc_node()
    succeeds, but one of the blk_mq_init_rq_map() calls fails,
            goto out_unwind;
    needs to free set->tags so the caller is not obligated
    to do so.  None of the current callers (null_blk,
    virtio_blk, virtio_blk, or the forthcoming scsi-mq)
    do so.
    
    set->tags needs to be set to NULL after doing so,
    so other tag cleanup logic doesn't try to free
    a stale pointer later.  Also set it to NULL
    in blk_mq_free_tag_set.
    
    Tested with error injection on the forthcoming
    scsi-mq + hpsa combination.
    
    Signed-off-by: Robert Elliott <elliott@hp.com>
    Signed-off-by: Jens Axboe <axboe@fb.com>

diff --git a/block/blk-mq.c b/block/blk-mq.c
index 4aac82615a46..f9b85e83d9ba 100644
--- a/block/blk-mq.c
+++ b/block/blk-mq.c
@@ -1982,6 +1982,8 @@ int blk_mq_alloc_tag_set(struct blk_mq_tag_set *set)
 out_unwind:
 	while (--i >= 0)
 		blk_mq_free_rq_map(set, set->tags[i], i);
+	kfree(set->tags);
+	set->tags = NULL;
 out:
 	return -ENOMEM;
 }
@@ -1997,6 +1999,7 @@ void blk_mq_free_tag_set(struct blk_mq_tag_set *set)
 	}
 
 	kfree(set->tags);
+	set->tags = NULL;
 }
 EXPORT_SYMBOL(blk_mq_free_tag_set);