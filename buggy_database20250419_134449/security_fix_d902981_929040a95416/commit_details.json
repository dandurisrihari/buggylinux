{
  "hash": "d902981f09bf935f257953d227a7721e8e541052",
  "hash_short": "d902981f",
  "subject": "crypto: dh - introduce common code for built-in safe-prime group support",
  "body": "Recent work on NVME in-band authentication support ([1]) needs to invoke\nthe \"dh\" KPP with the FFDHE safe-prime group parameters as specified in\nRFC 7919 and generate ephemeral keys suitable for the respective group. By\ncoincidence, the requirements from NIST SP800-56Arev3,\nsec. 5.5.2 (\"Assurance of Domain-Parameter Validity\") basically boil down\nto disallowing any group parameters not among the approved safe-prime\ngroups specified in either RFC 7919 or RFC 3526 in FIPS mode. Furthermore,\nSP800-56Arev3 specifies the respective security strength for each of the\napproved safe-prime groups, which has a direct impact on the minimum key\nlengths.\n\nIn this light, it's desirable to introduce built-in support for the\nRFC 7919 safe-prime groups to the kernel's DH implementation, provide a\nSP800-56Arev3 conforming key generation primitive for those and render\nnon-approved group parameters unusable in FIPS mode on the way.\n\nAs suggested ([2]) in the course of discussion to previous iterations of\nthis patchset, the built-in support for ffdhe groups would be best made\navailable in the form of templates wrapping the existing \"dh\"\nimplementation, one for each group specified by RFC 7919: ffdhe2048(dh),\nffdhe3072(dh), ffdhe4096(dh), ffdhe6144(dh) and ffdhe8192(dh). As these\ntemplates differ only in the safe-prime constants they'd configure the\ninner \"dh\" transforms with, they can share almost all of their\n\"dh\"-wrapping template implementation code.\n\nIntroduce this common code to dh_generic. The actual dump of the RFC 7919\nsafe-prime constants will be deferred to the next patch in order to\nfacilitate review. The ephemeral key generation primitive mentioned above\nlikewise deserves a patch on its own, as does the mechanism by which\nunapproved groups are rendered unusable in FIPS mode.\n\nDefine a struct dh_safe_prime container for specifying the individual\ntemplates' associated safe-prime group constants. All ffdheXYZ(dh) template\ninstances will store a pointer to such a dh_safe_prime in their context\nareas each. Implement the common __dh_safe_prime_create() template\ninstantiation helper. The intention is that the individual ffdheXYZ(dh)\ncrypto_templates' ->create() implementations will simply forward any calls\nto __dh_safe_prime_create(), passing a suitable dh_safe_prime in addition\nto the received ->create() arguments. __dh_safe_prime_create() would then\ncreate and register a kpp_instance as appropriate, storing the given\ndh_safe_prime pointer alongside a crypto_kpp_spawn for the inner \"dh\"\nkpp_alg in the context area.\n\nAs the ffdheXYZ(dh) kpp_instances are supposed to act as proxies to the\ninner \"dh\" kpp_alg, make each of their associated crypto_kpp transforms to\nin turn own an inner \"dh\" transform, a pointer to which gets stored in the\ncontext area. Setup and teardown are getting handled from the outer\n->init_tfm() and ->exit_tfm() respectively.\n\nIn order to achieve the overall goal and let the ffdheXYZ(dh) kpp_instances\nconfigure the inner \"dh\" transforms with the respective group parameters,\nmake their common ->set_secret(), the new dh_safe_prime_set_secret(), fill\nin the P and G values before forwarding the call to the inner \"dh\"'s\n->set_secret(). Note that the outer ->set_secret() can obtain the P value\nassociated with the given ffdheXYZ(dh) kpp_instance by means of the\ndh_safe_prime referenced from the latter's context. The value of G OTOH\nalways equals constant 2 for the safe-prime groups.\n\nFinally, make the remaining two kpp_alg primitives both operating on\nkpp_requests, i.e. ->generate_public_key() and ->compute_shared_secret(),\nto merely forward any request to the inner \"dh\" implementation. However, a\nkpp_request instance received from the outside cannot get simply passed\non as-is, because its associated transform (crypto_kpp_reqtfm()) will have\nbeen set to the outer ffdheXYZ(dh) one. In order to handle this, reserve\nsome space in the outer ffdheXYZ(dh) kpp_requests' context areas for in\nturn storing an inner kpp_request suitable for \"dh\" each. Make the outer\n->generate_public_key() and ->compute_shared_secret() respectively to setup\nthis inner kpp_request by means of the new dh_safe_prime_prepare_dh_req()\nhelper before handing it over to the \"dh\" implementation for further\nprocessing. dh_safe_prime_prepare_dh_req() basically copies the outer\nkpp_request received from the outside over to the inner one, but installs\nthe inner transform and its own ->complete() proxy callback therein. This\ncompletion callback, the new dh_safe_prime_complete_req(), doesn't do\nanything beyond completing the outer request. Note that there exist some\nexamples in crypto/, which would simply install the completion handler\nfrom the outer request at the inner one in similar setups, e.g. seqiv.\nHowever, this would mean that the user-provided completion handler won't\nget called with the address of the outer kpp_request initially submitted\nand the handler might not be prepared for this. Users could certainly work\naround this by setting the callback ->data properly, but IMO it's cleaner\nthis way. Furthermore, it might make sense to extend\ndh_safe_prime_complete_req() in the future and move e.g. those\npost-computation FIPS checks from the generic \"dh\" implementation to the\nffdheXYZ(dh) templates.\n\n[1] https://lore.kernel.org/r/20211202152358.60116-1-hare@suse.de\n[2] https://lore.kernel.org/r/20211217055227.GA20698@gondor.apana.org.au\n\nSigned-off-by: Nicolai Stange <nstange@suse.de>\nReviewed-by: Hannes Reinecke <hare@suse.de>\nSigned-off-by: Herbert Xu <herbert@gondor.apana.org.au>",
  "full_message": "crypto: dh - introduce common code for built-in safe-prime group support\n\nRecent work on NVME in-band authentication support ([1]) needs to invoke\nthe \"dh\" KPP with the FFDHE safe-prime group parameters as specified in\nRFC 7919 and generate ephemeral keys suitable for the respective group. By\ncoincidence, the requirements from NIST SP800-56Arev3,\nsec. 5.5.2 (\"Assurance of Domain-Parameter Validity\") basically boil down\nto disallowing any group parameters not among the approved safe-prime\ngroups specified in either RFC 7919 or RFC 3526 in FIPS mode. Furthermore,\nSP800-56Arev3 specifies the respective security strength for each of the\napproved safe-prime groups, which has a direct impact on the minimum key\nlengths.\n\nIn this light, it's desirable to introduce built-in support for the\nRFC 7919 safe-prime groups to the kernel's DH implementation, provide a\nSP800-56Arev3 conforming key generation primitive for those and render\nnon-approved group parameters unusable in FIPS mode on the way.\n\nAs suggested ([2]) in the course of discussion to previous iterations of\nthis patchset, the built-in support for ffdhe groups would be best made\navailable in the form of templates wrapping the existing \"dh\"\nimplementation, one for each group specified by RFC 7919: ffdhe2048(dh),\nffdhe3072(dh), ffdhe4096(dh), ffdhe6144(dh) and ffdhe8192(dh). As these\ntemplates differ only in the safe-prime constants they'd configure the\ninner \"dh\" transforms with, they can share almost all of their\n\"dh\"-wrapping template implementation code.\n\nIntroduce this common code to dh_generic. The actual dump of the RFC 7919\nsafe-prime constants will be deferred to the next patch in order to\nfacilitate review. The ephemeral key generation primitive mentioned above\nlikewise deserves a patch on its own, as does the mechanism by which\nunapproved groups are rendered unusable in FIPS mode.\n\nDefine a struct dh_safe_prime container for specifying the individual\ntemplates' associated safe-prime group constants. All ffdheXYZ(dh) template\ninstances will store a pointer to such a dh_safe_prime in their context\nareas each. Implement the common __dh_safe_prime_create() template\ninstantiation helper. The intention is that the individual ffdheXYZ(dh)\ncrypto_templates' ->create() implementations will simply forward any calls\nto __dh_safe_prime_create(), passing a suitable dh_safe_prime in addition\nto the received ->create() arguments. __dh_safe_prime_create() would then\ncreate and register a kpp_instance as appropriate, storing the given\ndh_safe_prime pointer alongside a crypto_kpp_spawn for the inner \"dh\"\nkpp_alg in the context area.\n\nAs the ffdheXYZ(dh) kpp_instances are supposed to act as proxies to the\ninner \"dh\" kpp_alg, make each of their associated crypto_kpp transforms to\nin turn own an inner \"dh\" transform, a pointer to which gets stored in the\ncontext area. Setup and teardown are getting handled from the outer\n->init_tfm() and ->exit_tfm() respectively.\n\nIn order to achieve the overall goal and let the ffdheXYZ(dh) kpp_instances\nconfigure the inner \"dh\" transforms with the respective group parameters,\nmake their common ->set_secret(), the new dh_safe_prime_set_secret(), fill\nin the P and G values before forwarding the call to the inner \"dh\"'s\n->set_secret(). Note that the outer ->set_secret() can obtain the P value\nassociated with the given ffdheXYZ(dh) kpp_instance by means of the\ndh_safe_prime referenced from the latter's context. The value of G OTOH\nalways equals constant 2 for the safe-prime groups.\n\nFinally, make the remaining two kpp_alg primitives both operating on\nkpp_requests, i.e. ->generate_public_key() and ->compute_shared_secret(),\nto merely forward any request to the inner \"dh\" implementation. However, a\nkpp_request instance received from the outside cannot get simply passed\non as-is, because its associated transform (crypto_kpp_reqtfm()) will have\nbeen set to the outer ffdheXYZ(dh) one. In order to handle this, reserve\nsome space in the outer ffdheXYZ(dh) kpp_requests' context areas for in\nturn storing an inner kpp_request suitable for \"dh\" each. Make the outer\n->generate_public_key() and ->compute_shared_secret() respectively to setup\nthis inner kpp_request by means of the new dh_safe_prime_prepare_dh_req()\nhelper before handing it over to the \"dh\" implementation for further\nprocessing. dh_safe_prime_prepare_dh_req() basically copies the outer\nkpp_request received from the outside over to the inner one, but installs\nthe inner transform and its own ->complete() proxy callback therein. This\ncompletion callback, the new dh_safe_prime_complete_req(), doesn't do\nanything beyond completing the outer request. Note that there exist some\nexamples in crypto/, which would simply install the completion handler\nfrom the outer request at the inner one in similar setups, e.g. seqiv.\nHowever, this would mean that the user-provided completion handler won't\nget called with the address of the outer kpp_request initially submitted\nand the handler might not be prepared for this. Users could certainly work\naround this by setting the callback ->data properly, but IMO it's cleaner\nthis way. Furthermore, it might make sense to extend\ndh_safe_prime_complete_req() in the future and move e.g. those\npost-computation FIPS checks from the generic \"dh\" implementation to the\nffdheXYZ(dh) templates.\n\n[1] https://lore.kernel.org/r/20211202152358.60116-1-hare@suse.de\n[2] https://lore.kernel.org/r/20211217055227.GA20698@gondor.apana.org.au\n\nSigned-off-by: Nicolai Stange <nstange@suse.de>\nReviewed-by: Hannes Reinecke <hare@suse.de>\nSigned-off-by: Herbert Xu <herbert@gondor.apana.org.au>",
  "author_name": "Nicolai Stange",
  "author_email": "nstange@suse.de",
  "author_date": "Mon Feb 21 13:10:52 2022 +0100",
  "author_date_iso": "2022-02-21T13:10:52+01:00",
  "committer_name": "Herbert Xu",
  "committer_email": "herbert@gondor.apana.org.au",
  "committer_date": "Thu Mar 3 10:47:50 2022 +1200",
  "committer_date_iso": "2022-03-03T10:47:50+12:00",
  "files_changed": [
    "crypto/dh.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "crypto/dh.c",
      "insertions": 208,
      "deletions": 0
    }
  ],
  "total_insertions": 208,
  "total_deletions": 0,
  "total_changes": 208,
  "parents": [
    "fae198935c442e09afa3ecca197e144f732068d7"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "crypto/dh.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}