commit 92191dd1073088753821b862b791dcc83e558e07
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Jan 29 19:15:19 2025 -0800

    net: ipv6: fix dst ref loops in rpl, seg6 and ioam6 lwtunnels
    
    Some lwtunnels have a dst cache for post-transformation dst.
    If the packet destination did not change we may end up recording
    a reference to the lwtunnel in its own cache, and the lwtunnel
    state will never be freed.
    
    Discovered by the ioam6.sh test, kmemleak was recently fixed
    to catch per-cpu memory leaks. I'm not sure if rpl and seg6
    can actually hit this, but in principle I don't see why not.
    
    Fixes: 8cb3bf8bff3c ("ipv6: ioam: Add support for the ip6ip6 encapsulation")
    Fixes: 6c8702c60b88 ("ipv6: sr: add support for SRH encapsulation and injection with lwtunnels")
    Fixes: a7a29f9c361f ("net: ipv6: add rpl sr tunnel")
    Reviewed-by: Simon Horman <horms@kernel.org>
    Link: https://patch.msgid.link/20250130031519.2716843-2-kuba@kernel.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

diff --git a/net/ipv6/rpl_iptunnel.c b/net/ipv6/rpl_iptunnel.c
index 9b7d03563115..0ac4283acdf2 100644
--- a/net/ipv6/rpl_iptunnel.c
+++ b/net/ipv6/rpl_iptunnel.c
@@ -235,9 +235,12 @@ static int rpl_output(struct net *net, struct sock *sk, struct sk_buff *skb)
 			goto drop;
 		}
 
-		local_bh_disable();
-		dst_cache_set_ip6(&rlwt->cache, dst, &fl6.saddr);
-		local_bh_enable();
+		/* cache only if we don't create a dst reference loop */
+		if (orig_dst->lwtstate != dst->lwtstate) {
+			local_bh_disable();
+			dst_cache_set_ip6(&rlwt->cache, dst, &fl6.saddr);
+			local_bh_enable();
+		}
 
 		err = skb_cow_head(skb, LL_RESERVED_SPACE(dst->dev));
 		if (unlikely(err))