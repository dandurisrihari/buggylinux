{
  "hash": "765c4507af71c39aba21006bbd3ec809fe9714ff",
  "hash_short": "765c4507",
  "subject": "[PATCH] GFP_THISNODE for the slab allocator",
  "body": "This patch insures that the slab node lists in the NUMA case only contain\nslabs that belong to that specific node.  All slab allocations use\nGFP_THISNODE when calling into the page allocator.  If an allocation fails\nthen we fall back in the slab allocator according to the zonelists appropriate\nfor a certain context.\n\nThis allows a replication of the behavior of alloc_pages and alloc_pages node\nin the slab layer.\n\nCurrently allocations requested from the page allocator may be redirected via\ncpusets to other nodes.  This results in remote pages on nodelists and that in\nturn results in interrupt latency issues during cache draining.  Plus the slab\nis handing out memory as local when it is really remote.\n\nFallback for slab memory allocations will occur within the slab allocator and\nnot in the page allocator.  This is necessary in order to be able to use the\nexisting pools of objects on the nodes that we fall back to before adding more\npages to a slab.\n\nThe fallback function insures that the nodes we fall back to obey cpuset\nrestrictions of the current context.  We do not allocate objects from outside\nof the current cpuset context like before.\n\nNote that the implementation of locality constraints within the slab allocator\nrequires importing logic from the page allocator.  This is a mischmash that is\nnot that great.  Other allocators (uncached allocator, vmalloc, huge pages)\nface similar problems and have similar minimal reimplementations of the basic\nfallback logic of the page allocator.  There is another way of implementing a\nslab by avoiding per node lists (see modular slab) but this wont work within\nthe existing slab.\n\nV1->V2:\n- Use NUMA_BUILD to avoid #ifdef CONFIG_NUMA\n- Exploit GFP_THISNODE being 0 in the NON_NUMA case to avoid another\n  #ifdef\n\n[akpm@osdl.org: build fix]\nSigned-off-by: Christoph Lameter <clameter@sgi.com>\nSigned-off-by: Andrew Morton <akpm@osdl.org>\nSigned-off-by: Linus Torvalds <torvalds@osdl.org>",
  "full_message": "[PATCH] GFP_THISNODE for the slab allocator\n\nThis patch insures that the slab node lists in the NUMA case only contain\nslabs that belong to that specific node.  All slab allocations use\nGFP_THISNODE when calling into the page allocator.  If an allocation fails\nthen we fall back in the slab allocator according to the zonelists appropriate\nfor a certain context.\n\nThis allows a replication of the behavior of alloc_pages and alloc_pages node\nin the slab layer.\n\nCurrently allocations requested from the page allocator may be redirected via\ncpusets to other nodes.  This results in remote pages on nodelists and that in\nturn results in interrupt latency issues during cache draining.  Plus the slab\nis handing out memory as local when it is really remote.\n\nFallback for slab memory allocations will occur within the slab allocator and\nnot in the page allocator.  This is necessary in order to be able to use the\nexisting pools of objects on the nodes that we fall back to before adding more\npages to a slab.\n\nThe fallback function insures that the nodes we fall back to obey cpuset\nrestrictions of the current context.  We do not allocate objects from outside\nof the current cpuset context like before.\n\nNote that the implementation of locality constraints within the slab allocator\nrequires importing logic from the page allocator.  This is a mischmash that is\nnot that great.  Other allocators (uncached allocator, vmalloc, huge pages)\nface similar problems and have similar minimal reimplementations of the basic\nfallback logic of the page allocator.  There is another way of implementing a\nslab by avoiding per node lists (see modular slab) but this wont work within\nthe existing slab.\n\nV1->V2:\n- Use NUMA_BUILD to avoid #ifdef CONFIG_NUMA\n- Exploit GFP_THISNODE being 0 in the NON_NUMA case to avoid another\n  #ifdef\n\n[akpm@osdl.org: build fix]\nSigned-off-by: Christoph Lameter <clameter@sgi.com>\nSigned-off-by: Andrew Morton <akpm@osdl.org>\nSigned-off-by: Linus Torvalds <torvalds@osdl.org>",
  "author_name": "Christoph Lameter",
  "author_email": "clameter@sgi.com",
  "author_date": "Wed Sep 27 01:50:08 2006 -0700",
  "author_date_iso": "2006-09-27T01:50:08-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@g5.osdl.org",
  "committer_date": "Wed Sep 27 08:26:12 2006 -0700",
  "committer_date_iso": "2006-09-27T08:26:12-07:00",
  "files_changed": [
    "mm/mempolicy.c",
    "mm/slab.c"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "mm/mempolicy.c",
      "insertions": 3,
      "deletions": 1
    },
    {
      "file": "mm/slab.c",
      "insertions": 78,
      "deletions": 29
    }
  ],
  "total_insertions": 81,
  "total_deletions": 30,
  "total_changes": 111,
  "parents": [
    "77f700dab4c05f8ee17584ec869672796d7bcb87"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v2.6.19",
    "v2.6.19-rc1",
    "v2.6.19-rc2",
    "v2.6.19-rc3",
    "v2.6.19-rc4",
    "v2.6.19-rc5",
    "v2.6.19-rc6",
    "v2.6.20",
    "v2.6.20-rc1",
    "v2.6.20-rc2"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "Exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "mm/mempolicy.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/slab.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}