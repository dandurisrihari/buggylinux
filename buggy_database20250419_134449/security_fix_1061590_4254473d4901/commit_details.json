{
  "hash": "10615907e9b51c9ae92f3a6ecabd01c482f20f32",
  "hash_short": "10615907",
  "subject": "net: sparx5: switchdev: adding frame DMA functionality",
  "body": "This add frame DMA functionality to the Sparx5 platform.\n\nEthernet frames can be extracted or injected autonomously to or from the\ndevice\u2019s DDR3/DDR3L memory and/or PCIe memory space. Linked list data\nstructures in memory are used for injecting or extracting Ethernet frames.\nThe FDMA generates interrupts when frame extraction or injection is done\nand when the linked lists need updating.\n\nThe FDMA implements two extraction channels, one per switch core port\ntowards the VCore CPU system and a total of six injection channels.\nExtraction channels are mapped one-to-one to the CPU ports, while injection\nchannels can be individually assigned to any CPU port.\n\n- FDMA channel 0 through 5 corresponds to CPU port 0 injection direction\n  FDMA_CH_CFG[channel].CH_INJ_PORT is set to 0.\n- FDMA channel 0 through 5 corresponds to CPU port 1 injection direction when\n  FDMA_CH_CFG[channel].CH_INJ_PORT is set to 1.\n- FDMA channel 6 corresponds to CPU port 0 extraction direction.\n- FDMA channel 7 corresponds to CPU port 1 extraction direction.\n\nThe FDMA implements a strict priority scheme among channels. Extraction\nchannels are prioritized over injection channels and secondarily channels\nwith higher channel number are prioritized over channels with lower number.\nOn the other hand, ports are being served on an equal-bandwidth principle\nboth on injection and extraction directions.  The equal-bandwidth principle\nwill not force an equal bandwidth. Instead, it ensures that the ports\nperform at their best considering the operating conditions.\n\nWhen more than one injection channel is enabled for injection on the same\nCPU port, priority determines which channel can inject data. Ownership\nis re-arbitrated on frame boundaries.\n\nThe FDMA processes linked lists of DMA Control Block Structures (DCBs). The\nDCBs have the same basic structure for both injection and extraction. A DCB\nmust be placed on a 64-bit word-aligned address in memory. Each DCB has a\nper-channel configurable amount of associated data blocks in memory, where\nthe frame data is stored.\n\nThe data blocks that are used by extraction channels must be placed on\n64-bit word aligned addresses in memory, and their length must be a\nmultiple of 128 bytes.\n\nA DCB carries the pointer to the next DCB of the linked list, the INFO word\nwhich holds information for the DCB, and a pair of status word and memory\npointer for every data block that it is associated with.\n\nSigned-off-by: Steen Hegelund <steen.hegelund@microchip.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "full_message": "net: sparx5: switchdev: adding frame DMA functionality\n\nThis add frame DMA functionality to the Sparx5 platform.\n\nEthernet frames can be extracted or injected autonomously to or from the\ndevice\u2019s DDR3/DDR3L memory and/or PCIe memory space. Linked list data\nstructures in memory are used for injecting or extracting Ethernet frames.\nThe FDMA generates interrupts when frame extraction or injection is done\nand when the linked lists need updating.\n\nThe FDMA implements two extraction channels, one per switch core port\ntowards the VCore CPU system and a total of six injection channels.\nExtraction channels are mapped one-to-one to the CPU ports, while injection\nchannels can be individually assigned to any CPU port.\n\n- FDMA channel 0 through 5 corresponds to CPU port 0 injection direction\n  FDMA_CH_CFG[channel].CH_INJ_PORT is set to 0.\n- FDMA channel 0 through 5 corresponds to CPU port 1 injection direction when\n  FDMA_CH_CFG[channel].CH_INJ_PORT is set to 1.\n- FDMA channel 6 corresponds to CPU port 0 extraction direction.\n- FDMA channel 7 corresponds to CPU port 1 extraction direction.\n\nThe FDMA implements a strict priority scheme among channels. Extraction\nchannels are prioritized over injection channels and secondarily channels\nwith higher channel number are prioritized over channels with lower number.\nOn the other hand, ports are being served on an equal-bandwidth principle\nboth on injection and extraction directions.  The equal-bandwidth principle\nwill not force an equal bandwidth. Instead, it ensures that the ports\nperform at their best considering the operating conditions.\n\nWhen more than one injection channel is enabled for injection on the same\nCPU port, priority determines which channel can inject data. Ownership\nis re-arbitrated on frame boundaries.\n\nThe FDMA processes linked lists of DMA Control Block Structures (DCBs). The\nDCBs have the same basic structure for both injection and extraction. A DCB\nmust be placed on a 64-bit word-aligned address in memory. Each DCB has a\nper-channel configurable amount of associated data blocks in memory, where\nthe frame data is stored.\n\nThe data blocks that are used by extraction channels must be placed on\n64-bit word aligned addresses in memory, and their length must be a\nmultiple of 128 bytes.\n\nA DCB carries the pointer to the next DCB of the linked list, the INFO word\nwhich holds information for the DCB, and a pair of status word and memory\npointer for every data block that it is associated with.\n\nSigned-off-by: Steen Hegelund <steen.hegelund@microchip.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "author_name": "Steen Hegelund",
  "author_email": "steen.hegelund@microchip.com",
  "author_date": "Thu Aug 19 09:39:39 2021 +0200",
  "author_date_iso": "2021-08-19T09:39:39+02:00",
  "committer_name": "David S. Miller",
  "committer_email": "davem@davemloft.net",
  "committer_date": "Fri Aug 20 14:28:55 2021 +0100",
  "committer_date_iso": "2021-08-20T14:28:55+01:00",
  "files_changed": [
    "drivers/net/ethernet/microchip/sparx5/Makefile",
    "drivers/net/ethernet/microchip/sparx5/sparx5_fdma.c",
    "drivers/net/ethernet/microchip/sparx5/sparx5_main.c",
    "drivers/net/ethernet/microchip/sparx5/sparx5_main.h",
    "drivers/net/ethernet/microchip/sparx5/sparx5_packet.c",
    "drivers/net/ethernet/microchip/sparx5/sparx5_port.c",
    "drivers/net/ethernet/microchip/sparx5/sparx5_port.h"
  ],
  "files_changed_count": 7,
  "stats": [
    {
      "file": "drivers/net/ethernet/microchip/sparx5/Makefile",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "drivers/net/ethernet/microchip/sparx5/sparx5_fdma.c",
      "insertions": 593,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/microchip/sparx5/sparx5_main.c",
      "insertions": 22,
      "deletions": 1
    },
    {
      "file": "drivers/net/ethernet/microchip/sparx5/sparx5_main.h",
      "insertions": 69,
      "deletions": 0
    },
    {
      "file": "drivers/net/ethernet/microchip/sparx5/sparx5_packet.c",
      "insertions": 6,
      "deletions": 7
    },
    {
      "file": "drivers/net/ethernet/microchip/sparx5/sparx5_port.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "drivers/net/ethernet/microchip/sparx5/sparx5_port.h",
      "insertions": 1,
      "deletions": 0
    }
  ],
  "total_insertions": 693,
  "total_deletions": 10,
  "total_changes": 703,
  "parents": [
    "f402303ba3ecbcbd1ad1c61d33d144dfcbd0970f"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/net/ethernet/microchip/sparx5/sparx5_port.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/net/ethernet/microchip/sparx5/sparx5_fdma.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/net/ethernet/microchip/sparx5/Makefile",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/net/ethernet/microchip/sparx5/sparx5_port.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/net/ethernet/microchip/sparx5/sparx5_main.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/net/ethernet/microchip/sparx5/sparx5_packet.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/net/ethernet/microchip/sparx5/sparx5_main.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}