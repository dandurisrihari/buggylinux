commit e6584c3964f2ff76a9fb5a701e4a59997b35e547
Author: Kees Cook <kees@kernel.org>
Date:   Wed Sep 20 12:38:14 2023 -0700

    string: Allow 2-argument strscpy()
    
    Using sizeof(dst) for the "size" argument in strscpy() is the
    overwhelmingly common case. Instead of requiring this everywhere, allow a
    2-argument version to be used that will use the sizeof() internally. There
    are other functions in the kernel with optional arguments[1], so this
    isn't unprecedented, and improves readability. Update and relocate the
    kern-doc for strscpy() too, and drop __HAVE_ARCH_STRSCPY as it is unused.
    
    Adjust ARCH=um build to notice the changed export name, as it doesn't
    do full header includes for the string helpers.
    
    This could additionally let us save a few hundred lines of code:
     1177 files changed, 2455 insertions(+), 3026 deletions(-)
    with a treewide cleanup using Coccinelle:
    
    @needless_arg@
    expression DST, SRC;
    @@
    
            strscpy(DST, SRC
    -, sizeof(DST)
            )
    
    Link: https://elixir.bootlin.com/linux/v6.7/source/include/linux/pci.h#L1517 [1]
    Reviewed-by: Justin Stitt <justinstitt@google.com>
    Cc: Andy Shevchenko <andy@kernel.org>
    Cc: linux-hardening@vger.kernel.org
    Signed-off-by: Kees Cook <keescook@chromium.org>

diff --git a/include/linux/fortify-string.h b/include/linux/fortify-string.h
index 89a6888f2f9e..06b3aaa63724 100644
--- a/include/linux/fortify-string.h
+++ b/include/linux/fortify-string.h
@@ -215,26 +215,8 @@ __kernel_size_t __fortify_strlen(const char * const POS p)
 }
 
 /* Defined after fortified strnlen() to reuse it. */
-extern ssize_t __real_strscpy(char *, const char *, size_t) __RENAME(strscpy);
-/**
- * strscpy - Copy a C-string into a sized buffer
- *
- * @p: Where to copy the string to
- * @q: Where to copy the string from
- * @size: Size of destination buffer
- *
- * Copy the source string @q, or as much of it as fits, into the destination
- * @p buffer. The behavior is undefined if the string buffers overlap. The
- * destination @p buffer is always NUL terminated, unless it's zero-sized.
- *
- * Preferred to strncpy() since it always returns a valid string, and
- * doesn't unnecessarily force the tail of the destination buffer to be
- * zero padded. If padding is desired please use strscpy_pad().
- *
- * Returns the number of characters copied in @p (not including the
- * trailing %NUL) or -E2BIG if @size is 0 or the copy of @q was truncated.
- */
-__FORTIFY_INLINE ssize_t strscpy(char * const POS p, const char * const POS q, size_t size)
+extern ssize_t __real_strscpy(char *, const char *, size_t) __RENAME(sized_strscpy);
+__FORTIFY_INLINE ssize_t sized_strscpy(char * const POS p, const char * const POS q, size_t size)
 {
 	/* Use string size rather than possible enclosing struct size. */
 	const size_t p_size = __member_size(p);