{
  "hash": "4ce827b4cc58bec7952591b96cce2b28553e4d5b",
  "hash_short": "4ce827b4",
  "subject": "x86/power/64: Fix hibernation return address corruption",
  "body": "In kernel bug 150021, a kernel panic was reported when restoring a\nhibernate image.  Only a picture of the oops was reported, so I can't\npaste the whole thing here.  But here are the most interesting parts:\n\n  kernel tried to execute NX-protected page - exploit attempt? (uid: 0)\n  BUG: unable to handle kernel paging request at ffff8804615cfd78\n  ...\n  RIP: ffff8804615cfd78\n  RSP: ffff8804615f0000\n  RBP: ffff8804615cfdc0\n  ...\n  Call Trace:\n   do_signal+0x23\n   exit_to_usermode_loop+0x64\n   ...\n\nThe RIP is on the same page as RBP, so it apparently started executing\non the stack.\n\nThe bug was bisected to commit ef0f3ed5a4ac (x86/asm/power: Create\nstack frames in hibernate_asm_64.S), which in retrospect seems quite\ndangerous, since that code saves and restores the stack pointer from a\nglobal variable ('saved_context').\n\nThere are a lot of moving parts in the hibernate save and restore paths,\nso I don't know exactly what caused the panic.  Presumably, a FRAME_END\nwas executed without the corresponding FRAME_BEGIN, or vice versa.  That\nwould corrupt the return address on the stack and would be consistent\nwith the details of the above panic.\n\n[ rjw: One major problem is that by the time the FRAME_BEGIN in\n  restore_registers() is executed, the stack pointer value may not\n  be valid any more.  Namely, the stack area pointed to by it\n  previously may have been overwritten by some image memory contents\n  and that page frame may now be used for whatever different purpose\n  it had been allocated for before hibernation.  In that case, the\n  FRAME_BEGIN will corrupt that memory. ]\n\nInstead of doing the frame pointer save/restore around the bounds of the\naffected functions, just do it around the call to swsusp_save().\n\nThat has the same effect of ensuring that if swsusp_save() sleeps, the\nframe pointers will be correct.  It's also a much more obviously safe\nway to do it than the original patch.  And objtool still doesn't report\nany warnings.\n\nFixes: ef0f3ed5a4ac (x86/asm/power: Create stack frames in hibernate_asm_64.S)\nLink: https://bugzilla.kernel.org/show_bug.cgi?id=150021\nCc: 4.6+ <stable@vger.kernel.org> # 4.6+\nReported-by: Andre Reinke <andre.reinke@mailbox.org>\nTested-by: Andre Reinke <andre.reinke@mailbox.org>\nSigned-off-by: Josh Poimboeuf <jpoimboe@redhat.com>\nAcked-by: Ingo Molnar <mingo@kernel.org>\nSigned-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>",
  "full_message": "x86/power/64: Fix hibernation return address corruption\n\nIn kernel bug 150021, a kernel panic was reported when restoring a\nhibernate image.  Only a picture of the oops was reported, so I can't\npaste the whole thing here.  But here are the most interesting parts:\n\n  kernel tried to execute NX-protected page - exploit attempt? (uid: 0)\n  BUG: unable to handle kernel paging request at ffff8804615cfd78\n  ...\n  RIP: ffff8804615cfd78\n  RSP: ffff8804615f0000\n  RBP: ffff8804615cfdc0\n  ...\n  Call Trace:\n   do_signal+0x23\n   exit_to_usermode_loop+0x64\n   ...\n\nThe RIP is on the same page as RBP, so it apparently started executing\non the stack.\n\nThe bug was bisected to commit ef0f3ed5a4ac (x86/asm/power: Create\nstack frames in hibernate_asm_64.S), which in retrospect seems quite\ndangerous, since that code saves and restores the stack pointer from a\nglobal variable ('saved_context').\n\nThere are a lot of moving parts in the hibernate save and restore paths,\nso I don't know exactly what caused the panic.  Presumably, a FRAME_END\nwas executed without the corresponding FRAME_BEGIN, or vice versa.  That\nwould corrupt the return address on the stack and would be consistent\nwith the details of the above panic.\n\n[ rjw: One major problem is that by the time the FRAME_BEGIN in\n  restore_registers() is executed, the stack pointer value may not\n  be valid any more.  Namely, the stack area pointed to by it\n  previously may have been overwritten by some image memory contents\n  and that page frame may now be used for whatever different purpose\n  it had been allocated for before hibernation.  In that case, the\n  FRAME_BEGIN will corrupt that memory. ]\n\nInstead of doing the frame pointer save/restore around the bounds of the\naffected functions, just do it around the call to swsusp_save().\n\nThat has the same effect of ensuring that if swsusp_save() sleeps, the\nframe pointers will be correct.  It's also a much more obviously safe\nway to do it than the original patch.  And objtool still doesn't report\nany warnings.\n\nFixes: ef0f3ed5a4ac (x86/asm/power: Create stack frames in hibernate_asm_64.S)\nLink: https://bugzilla.kernel.org/show_bug.cgi?id=150021\nCc: 4.6+ <stable@vger.kernel.org> # 4.6+\nReported-by: Andre Reinke <andre.reinke@mailbox.org>\nTested-by: Andre Reinke <andre.reinke@mailbox.org>\nSigned-off-by: Josh Poimboeuf <jpoimboe@redhat.com>\nAcked-by: Ingo Molnar <mingo@kernel.org>\nSigned-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>",
  "author_name": "Josh Poimboeuf",
  "author_email": "jpoimboe@redhat.com",
  "author_date": "Thu Jul 28 23:15:21 2016 +0200",
  "author_date_iso": "2016-07-28T23:15:21+02:00",
  "committer_name": "Rafael J. Wysocki",
  "committer_email": "rafael.j.wysocki@intel.com",
  "committer_date": "Fri Jul 29 13:38:59 2016 +0200",
  "committer_date_iso": "2016-07-29T13:38:59+02:00",
  "files_changed": [
    "arch/x86/power/hibernate_asm_64.S"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/x86/power/hibernate_asm_64.S",
      "insertions": 1,
      "deletions": 3
    }
  ],
  "total_insertions": 1,
  "total_deletions": 3,
  "total_changes": 4,
  "parents": [
    "fe12c00d21bb4985fa8da282942250be21e7dd59"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.10",
    "v4.10-rc1",
    "v4.10-rc2",
    "v4.10-rc3",
    "v4.10-rc4",
    "v4.10-rc5",
    "v4.10-rc6",
    "v4.10-rc7",
    "v4.10-rc8",
    "v4.11"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/power/hibernate_asm_64.S",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}