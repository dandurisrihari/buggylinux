{
  "hash": "018ef8dcf3de5f62e2cc1a9273cc27e1c6ba8de5",
  "hash_short": "018ef8dc",
  "subject": "x86/vdso: Mark the vDSO code read-only after init",
  "body": "The vDSO does not need to be writable after __init, so mark it as\n__ro_after_init. The result kills the exploit method of writing to the\nvDSO from kernel space resulting in userspace executing the modified code,\nas shown here to bypass SMEP restrictions: http://itszn.com/blog/?p=21\n\nThe memory map (with added vDSO address reporting) shows the vDSO moving\ninto read-only memory:\n\nBefore:\n\t[    0.143067] vDSO @ ffffffff82004000\n\t[    0.143551] vDSO @ ffffffff82006000\n\t---[ High Kernel Mapping ]---\n\t0xffffffff80000000-0xffffffff81000000      16M                         pmd\n\t0xffffffff81000000-0xffffffff81800000       8M   ro     PSE     GLB x  pmd\n\t0xffffffff81800000-0xffffffff819f3000    1996K   ro             GLB x  pte\n\t0xffffffff819f3000-0xffffffff81a00000      52K   ro                 NX pte\n\t0xffffffff81a00000-0xffffffff81e00000       4M   ro     PSE     GLB NX pmd\n\t0xffffffff81e00000-0xffffffff81e05000      20K   ro             GLB NX pte\n\t0xffffffff81e05000-0xffffffff82000000    2028K   ro                 NX pte\n\t0xffffffff82000000-0xffffffff8214f000    1340K   RW             GLB NX pte\n\t0xffffffff8214f000-0xffffffff82281000    1224K   RW                 NX pte\n\t0xffffffff82281000-0xffffffff82400000    1532K   RW             GLB NX pte\n\t0xffffffff82400000-0xffffffff83200000      14M   RW     PSE     GLB NX pmd\n\t0xffffffff83200000-0xffffffffc0000000     974M                         pmd\n\nAfter:\n\t[    0.145062] vDSO @ ffffffff81da1000\n\t[    0.146057] vDSO @ ffffffff81da4000\n\t---[ High Kernel Mapping ]---\n\t0xffffffff80000000-0xffffffff81000000      16M                         pmd\n\t0xffffffff81000000-0xffffffff81800000       8M   ro     PSE     GLB x  pmd\n\t0xffffffff81800000-0xffffffff819f3000    1996K   ro             GLB x  pte\n\t0xffffffff819f3000-0xffffffff81a00000      52K   ro                 NX pte\n\t0xffffffff81a00000-0xffffffff81e00000       4M   ro     PSE     GLB NX pmd\n\t0xffffffff81e00000-0xffffffff81e0b000      44K   ro             GLB NX pte\n\t0xffffffff81e0b000-0xffffffff82000000    2004K   ro                 NX pte\n\t0xffffffff82000000-0xffffffff8214c000    1328K   RW             GLB NX pte\n\t0xffffffff8214c000-0xffffffff8227e000    1224K   RW                 NX pte\n\t0xffffffff8227e000-0xffffffff82400000    1544K   RW             GLB NX pte\n\t0xffffffff82400000-0xffffffff83200000      14M   RW     PSE     GLB NX pmd\n\t0xffffffff83200000-0xffffffffc0000000     974M                         pmd\n\nBased on work by PaX Team and Brad Spengler.\n\nSigned-off-by: Kees Cook <keescook@chromium.org>\nAcked-by: Andy Lutomirski <luto@kernel.org>\nAcked-by: H. Peter Anvin <hpa@linux.intel.com>\nCc: Andy Lutomirski <luto@amacapital.net>\nCc: Arnd Bergmann <arnd@arndb.de>\nCc: Borislav Petkov <bp@alien8.de>\nCc: Brad Spengler <spender@grsecurity.net>\nCc: Brian Gerst <brgerst@gmail.com>\nCc: David Brown <david.brown@linaro.org>\nCc: Denys Vlasenko <dvlasenk@redhat.com>\nCc: Emese Revfy <re.emese@gmail.com>\nCc: H. Peter Anvin <hpa@zytor.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Mathias Krause <minipli@googlemail.com>\nCc: Michael Ellerman <mpe@ellerman.id.au>\nCc: PaX Team <pageexec@freemail.hu>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: kernel-hardening@lists.openwall.com\nCc: linux-arch <linux-arch@vger.kernel.org>\nLink: http://lkml.kernel.org/r/1455748879-21872-7-git-send-email-keescook@chromium.org\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "full_message": "x86/vdso: Mark the vDSO code read-only after init\n\nThe vDSO does not need to be writable after __init, so mark it as\n__ro_after_init. The result kills the exploit method of writing to the\nvDSO from kernel space resulting in userspace executing the modified code,\nas shown here to bypass SMEP restrictions: http://itszn.com/blog/?p=21\n\nThe memory map (with added vDSO address reporting) shows the vDSO moving\ninto read-only memory:\n\nBefore:\n\t[    0.143067] vDSO @ ffffffff82004000\n\t[    0.143551] vDSO @ ffffffff82006000\n\t---[ High Kernel Mapping ]---\n\t0xffffffff80000000-0xffffffff81000000      16M                         pmd\n\t0xffffffff81000000-0xffffffff81800000       8M   ro     PSE     GLB x  pmd\n\t0xffffffff81800000-0xffffffff819f3000    1996K   ro             GLB x  pte\n\t0xffffffff819f3000-0xffffffff81a00000      52K   ro                 NX pte\n\t0xffffffff81a00000-0xffffffff81e00000       4M   ro     PSE     GLB NX pmd\n\t0xffffffff81e00000-0xffffffff81e05000      20K   ro             GLB NX pte\n\t0xffffffff81e05000-0xffffffff82000000    2028K   ro                 NX pte\n\t0xffffffff82000000-0xffffffff8214f000    1340K   RW             GLB NX pte\n\t0xffffffff8214f000-0xffffffff82281000    1224K   RW                 NX pte\n\t0xffffffff82281000-0xffffffff82400000    1532K   RW             GLB NX pte\n\t0xffffffff82400000-0xffffffff83200000      14M   RW     PSE     GLB NX pmd\n\t0xffffffff83200000-0xffffffffc0000000     974M                         pmd\n\nAfter:\n\t[    0.145062] vDSO @ ffffffff81da1000\n\t[    0.146057] vDSO @ ffffffff81da4000\n\t---[ High Kernel Mapping ]---\n\t0xffffffff80000000-0xffffffff81000000      16M                         pmd\n\t0xffffffff81000000-0xffffffff81800000       8M   ro     PSE     GLB x  pmd\n\t0xffffffff81800000-0xffffffff819f3000    1996K   ro             GLB x  pte\n\t0xffffffff819f3000-0xffffffff81a00000      52K   ro                 NX pte\n\t0xffffffff81a00000-0xffffffff81e00000       4M   ro     PSE     GLB NX pmd\n\t0xffffffff81e00000-0xffffffff81e0b000      44K   ro             GLB NX pte\n\t0xffffffff81e0b000-0xffffffff82000000    2004K   ro                 NX pte\n\t0xffffffff82000000-0xffffffff8214c000    1328K   RW             GLB NX pte\n\t0xffffffff8214c000-0xffffffff8227e000    1224K   RW                 NX pte\n\t0xffffffff8227e000-0xffffffff82400000    1544K   RW             GLB NX pte\n\t0xffffffff82400000-0xffffffff83200000      14M   RW     PSE     GLB NX pmd\n\t0xffffffff83200000-0xffffffffc0000000     974M                         pmd\n\nBased on work by PaX Team and Brad Spengler.\n\nSigned-off-by: Kees Cook <keescook@chromium.org>\nAcked-by: Andy Lutomirski <luto@kernel.org>\nAcked-by: H. Peter Anvin <hpa@linux.intel.com>\nCc: Andy Lutomirski <luto@amacapital.net>\nCc: Arnd Bergmann <arnd@arndb.de>\nCc: Borislav Petkov <bp@alien8.de>\nCc: Brad Spengler <spender@grsecurity.net>\nCc: Brian Gerst <brgerst@gmail.com>\nCc: David Brown <david.brown@linaro.org>\nCc: Denys Vlasenko <dvlasenk@redhat.com>\nCc: Emese Revfy <re.emese@gmail.com>\nCc: H. Peter Anvin <hpa@zytor.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Mathias Krause <minipli@googlemail.com>\nCc: Michael Ellerman <mpe@ellerman.id.au>\nCc: PaX Team <pageexec@freemail.hu>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: kernel-hardening@lists.openwall.com\nCc: linux-arch <linux-arch@vger.kernel.org>\nLink: http://lkml.kernel.org/r/1455748879-21872-7-git-send-email-keescook@chromium.org\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "author_name": "Kees Cook",
  "author_email": "keescook@chromium.org",
  "author_date": "Wed Feb 17 14:41:17 2016 -0800",
  "author_date_iso": "2016-02-17T14:41:17-08:00",
  "committer_name": "Ingo Molnar",
  "committer_email": "mingo@kernel.org",
  "committer_date": "Mon Feb 22 08:51:39 2016 +0100",
  "committer_date_iso": "2016-02-22T08:51:39+01:00",
  "files_changed": [
    "arch/x86/entry/vdso/vdso2c.h"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/x86/entry/vdso/vdso2c.h",
      "insertions": 1,
      "deletions": 1
    }
  ],
  "total_insertions": 1,
  "total_deletions": 1,
  "total_changes": 2,
  "parents": [
    "7cca071ccbd2a293ea69168ace6abbcdce53098e"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.10",
    "v4.10-rc1",
    "v4.10-rc2",
    "v4.10-rc3",
    "v4.10-rc4",
    "v4.10-rc5",
    "v4.10-rc6",
    "v4.10-rc7",
    "v4.10-rc8",
    "v4.11"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening",
      "exploit",
      "bypass"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/x86/entry/vdso/vdso2c.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}