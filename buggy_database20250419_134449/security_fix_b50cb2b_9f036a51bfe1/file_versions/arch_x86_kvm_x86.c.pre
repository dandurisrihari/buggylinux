commit 4fa0efb43a781055d146298a7ae886d529488d82
Author: Sean Christopherson <seanjc@google.com>
Date:   Fri Feb 14 17:06:09 2025 -0800

    KVM: x86: Rename and invert async #PF's send_user_only flag to send_always
    
    Rename send_user_only to avoid "user", because KVM's ABI is to not inject
    page faults into CPL0, whereas "user" in x86 is specifically CPL3.  Invert
    the polarity to keep the naming simple and unambiguous.  E.g. while KVM
    often refers to CPL0 as "kernel", that terminology isn't ubiquitous, and
    "send_kernel" could be misconstrued as "send only to kernel".
    
    Link: https://lore.kernel.org/r/20250215010609.1199982-3-seanjc@google.com
    Signed-off-by: Sean Christopherson <seanjc@google.com>

diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index 3d84a79583b1..a13e98f90a0e 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -3554,7 +3554,7 @@ static int kvm_pv_enable_async_pf(struct kvm_vcpu *vcpu, u64 data)
 					sizeof(u64)))
 		return 1;
 
-	vcpu->arch.apf.send_user_only = !(data & KVM_ASYNC_PF_SEND_ALWAYS);
+	vcpu->arch.apf.send_always = (data & KVM_ASYNC_PF_SEND_ALWAYS);
 	vcpu->arch.apf.delivery_as_pf_vmexit = data & KVM_ASYNC_PF_DELIVERY_AS_PF_VMEXIT;
 
 	kvm_async_pf_wakeup_all(vcpu);
@@ -13386,7 +13386,7 @@ static bool kvm_can_deliver_async_pf(struct kvm_vcpu *vcpu)
 	if (!kvm_pv_async_pf_enabled(vcpu))
 		return false;
 
-	if (vcpu->arch.apf.send_user_only &&
+	if (!vcpu->arch.apf.send_always &&
 	    (vcpu->arch.guest_state_protected || !kvm_x86_call(get_cpl)(vcpu)))
 		return false;