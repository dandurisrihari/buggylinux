{
  "hash": "1c756cd429d8f3da33d31f2a970284b9d5260534",
  "hash_short": "1c756cd4",
  "subject": "perf inject: Fix file corruption due to event deletion",
  "body": "\"perf inject\" can create corrupt files when synthesizing sample events from AUX\ndata. This happens when in the input file, the first event (for the AUX data)\nhas a different sample_type from the second event (generally dummy).\n\nSpecifically, they differ in the bits that indicate the standard fields\nappended to perf records in the mmap buffer. \"perf inject\" deletes the first\nevent and moves up the second event to first position.\n\nThe problem is with the synthetic PERF_RECORD_MMAP (etc.) events created\nby \"perf record\".\n\nSince these are synthetic versions of events which are normally produced\nby the kernel, they have to have the standard fields appended as\ndescribed by sample_type.\n\n\"perf record\" fills these in with zeroes, including the IDENTIFIER\nfield; perf readers interpret records with zero IDENTIFIER using the\ndescriptor for the first event in the file.\n\nSince \"perf inject\" changes the first event, these synthetic records are\nthen processed with the wrong value of sample_type, and the perf reader\nreads bad data, reports on incorrect length records etc.\n\nMismatching sample_types are seen with \"perf record -e cs_etm//\", where the AUX\nevent has TID|TIME|CPU|IDENTIFIER and the dummy event has TID|TIME|IDENTIFIER.\n\nPerhaps they could be the same, but it isn't normally a problem if they aren't\n- perf has no problems reading the file.\n\nThe sample_types have to agree on the position of IDENTIFIER, because\nthat's how perf finds the right event descriptor in the first place, but\nthey don't normally have to agree on other fields, and perf doesn't\ncheck that they do.\n\nThe problem is specific to the way \"perf inject\" reorganizes the events\nand the way synthetic MMAP events are recorded with a zero identifier. A\nsimple solution is to stop \"perf inject\" deleting the tracing event.\n\nCommitter testing\n\nRemoved the now unused 'evsel' variable, update the comment about the\nevsel removal not being performed anymore, and apply the patch manually\nas it failed with this warning:\n\n  warning: Patch sent with format=flowed; space at the end of lines might be lost.\n\nTesting it with:\n\n  $ perf bench internals inject-build-id\n  # Running 'internals/inject-build-id' benchmark:\n    Average build-id injection took: 8.543 msec (+- 0.130 msec)\n    Average time per event: 0.838 usec (+- 0.013 usec)\n    Average memory usage: 12717 KB (+- 9 KB)\n    Average build-id-all injection took: 5.710 msec (+- 0.058 msec)\n    Average time per event: 0.560 usec (+- 0.006 usec)\n    Average memory usage: 12079 KB (+- 7 KB)\n  $\n\nSigned-off-by: Al Grant <al.grant@arm.com>\nAcked-by: Adrian Hunter <adrian.hunter@intel.com>\nAcked-by: Namhyung Kim <namhyung@kernel.org>\nCc: Alexander Shishkin <alexander.shishkin@linux.intel.com>\nCc: Jiri Olsa <jolsa@redhat.com>\nCc: Mark Rutland <mark.rutland@arm.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nLPU-Reference: b9cf5611-daae-2390-3439-6617f8f0a34b@foss.arm.com\nSigned-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>",
  "full_message": "perf inject: Fix file corruption due to event deletion\n\n\"perf inject\" can create corrupt files when synthesizing sample events from AUX\ndata. This happens when in the input file, the first event (for the AUX data)\nhas a different sample_type from the second event (generally dummy).\n\nSpecifically, they differ in the bits that indicate the standard fields\nappended to perf records in the mmap buffer. \"perf inject\" deletes the first\nevent and moves up the second event to first position.\n\nThe problem is with the synthetic PERF_RECORD_MMAP (etc.) events created\nby \"perf record\".\n\nSince these are synthetic versions of events which are normally produced\nby the kernel, they have to have the standard fields appended as\ndescribed by sample_type.\n\n\"perf record\" fills these in with zeroes, including the IDENTIFIER\nfield; perf readers interpret records with zero IDENTIFIER using the\ndescriptor for the first event in the file.\n\nSince \"perf inject\" changes the first event, these synthetic records are\nthen processed with the wrong value of sample_type, and the perf reader\nreads bad data, reports on incorrect length records etc.\n\nMismatching sample_types are seen with \"perf record -e cs_etm//\", where the AUX\nevent has TID|TIME|CPU|IDENTIFIER and the dummy event has TID|TIME|IDENTIFIER.\n\nPerhaps they could be the same, but it isn't normally a problem if they aren't\n- perf has no problems reading the file.\n\nThe sample_types have to agree on the position of IDENTIFIER, because\nthat's how perf finds the right event descriptor in the first place, but\nthey don't normally have to agree on other fields, and perf doesn't\ncheck that they do.\n\nThe problem is specific to the way \"perf inject\" reorganizes the events\nand the way synthetic MMAP events are recorded with a zero identifier. A\nsimple solution is to stop \"perf inject\" deleting the tracing event.\n\nCommitter testing\n\nRemoved the now unused 'evsel' variable, update the comment about the\nevsel removal not being performed anymore, and apply the patch manually\nas it failed with this warning:\n\n  warning: Patch sent with format=flowed; space at the end of lines might be lost.\n\nTesting it with:\n\n  $ perf bench internals inject-build-id\n  # Running 'internals/inject-build-id' benchmark:\n    Average build-id injection took: 8.543 msec (+- 0.130 msec)\n    Average time per event: 0.838 usec (+- 0.013 usec)\n    Average memory usage: 12717 KB (+- 9 KB)\n    Average build-id-all injection took: 5.710 msec (+- 0.058 msec)\n    Average time per event: 0.560 usec (+- 0.006 usec)\n    Average memory usage: 12079 KB (+- 7 KB)\n  $\n\nSigned-off-by: Al Grant <al.grant@arm.com>\nAcked-by: Adrian Hunter <adrian.hunter@intel.com>\nAcked-by: Namhyung Kim <namhyung@kernel.org>\nCc: Alexander Shishkin <alexander.shishkin@linux.intel.com>\nCc: Jiri Olsa <jolsa@redhat.com>\nCc: Mark Rutland <mark.rutland@arm.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nLPU-Reference: b9cf5611-daae-2390-3439-6617f8f0a34b@foss.arm.com\nSigned-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>",
  "author_name": "Al Grant",
  "author_email": "al.grant@foss.arm.com",
  "author_date": "Fri Nov 13 20:38:26 2020 +0000",
  "author_date_iso": "2020-11-13T20:38:26+00:00",
  "committer_name": "Arnaldo Carvalho de Melo",
  "committer_email": "acme@redhat.com",
  "committer_date": "Mon Nov 16 13:59:17 2020 -0300",
  "committer_date_iso": "2020-11-16T13:59:17-03:00",
  "files_changed": [
    "tools/perf/builtin-inject.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "tools/perf/builtin-inject.c",
      "insertions": 1,
      "deletions": 11
    }
  ],
  "total_insertions": 1,
  "total_deletions": 11,
  "total_changes": 12,
  "parents": [
    "dd94ac807a5e10e0b25b68397c473276905cca73"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "inject"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "tools/perf/builtin-inject.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}