{
  "hash": "8f4fc071b1926d0b20336e2b3f8ab85c94c734c5",
  "hash_short": "8f4fc071",
  "subject": "gfp: add __GFP_NOACCOUNT",
  "body": "Not all kmem allocations should be accounted to memcg.  The following\npatch gives an example when accounting of a certain type of allocations to\nmemcg can effectively result in a memory leak.  This patch adds the\n__GFP_NOACCOUNT flag which if passed to kmalloc and friends will force the\nallocation to go through the root cgroup.  It will be used by the next\npatch.\n\nNote, since in case of kmemleak enabled each kmalloc implies yet another\nallocation from the kmemleak_object cache, we add __GFP_NOACCOUNT to\ngfp_kmemleak_mask.\n\nAlternatively, we could introduce a per kmem cache flag disabling\naccounting for all allocations of a particular kind, but (a) we would not\nbe able to bypass accounting for kmalloc then and (b) a kmem cache with\nthis flag set could not be merged with a kmem cache without this flag,\nwhich would increase the number of global caches and therefore\nfragmentation even if the memory cgroup controller is not used.\n\nDespite its generic name, currently __GFP_NOACCOUNT disables accounting\nonly for kmem allocations while user page allocations are always charged.\nTo catch abusing of this flag, a warning is issued on an attempt of\npassing it to mem_cgroup_try_charge.\n\nSigned-off-by: Vladimir Davydov <vdavydov@parallels.com>\nCc: Tejun Heo <tj@kernel.org>\nCc: Johannes Weiner <hannes@cmpxchg.org>\nCc: Michal Hocko <mhocko@suse.cz>\nCc: Christoph Lameter <cl@linux.com>\nCc: Pekka Enberg <penberg@kernel.org>\nCc: David Rientjes <rientjes@google.com>\nCc: Joonsoo Kim <iamjoonsoo.kim@lge.com>\nCc: Greg Thelen <gthelen@google.com>\nCc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>\nCc: <stable@vger.kernel.org>\t[4.0.x]\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "full_message": "gfp: add __GFP_NOACCOUNT\n\nNot all kmem allocations should be accounted to memcg.  The following\npatch gives an example when accounting of a certain type of allocations to\nmemcg can effectively result in a memory leak.  This patch adds the\n__GFP_NOACCOUNT flag which if passed to kmalloc and friends will force the\nallocation to go through the root cgroup.  It will be used by the next\npatch.\n\nNote, since in case of kmemleak enabled each kmalloc implies yet another\nallocation from the kmemleak_object cache, we add __GFP_NOACCOUNT to\ngfp_kmemleak_mask.\n\nAlternatively, we could introduce a per kmem cache flag disabling\naccounting for all allocations of a particular kind, but (a) we would not\nbe able to bypass accounting for kmalloc then and (b) a kmem cache with\nthis flag set could not be merged with a kmem cache without this flag,\nwhich would increase the number of global caches and therefore\nfragmentation even if the memory cgroup controller is not used.\n\nDespite its generic name, currently __GFP_NOACCOUNT disables accounting\nonly for kmem allocations while user page allocations are always charged.\nTo catch abusing of this flag, a warning is issued on an attempt of\npassing it to mem_cgroup_try_charge.\n\nSigned-off-by: Vladimir Davydov <vdavydov@parallels.com>\nCc: Tejun Heo <tj@kernel.org>\nCc: Johannes Weiner <hannes@cmpxchg.org>\nCc: Michal Hocko <mhocko@suse.cz>\nCc: Christoph Lameter <cl@linux.com>\nCc: Pekka Enberg <penberg@kernel.org>\nCc: David Rientjes <rientjes@google.com>\nCc: Joonsoo Kim <iamjoonsoo.kim@lge.com>\nCc: Greg Thelen <gthelen@google.com>\nCc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>\nCc: <stable@vger.kernel.org>\t[4.0.x]\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
  "author_name": "Vladimir Davydov",
  "author_email": "vdavydov@parallels.com",
  "author_date": "Thu May 14 15:16:55 2015 -0700",
  "author_date_iso": "2015-05-14T15:16:55-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Thu May 14 17:55:51 2015 -0700",
  "committer_date_iso": "2015-05-14T17:55:51-07:00",
  "files_changed": [
    "include/linux/gfp.h",
    "include/linux/memcontrol.h",
    "mm/kmemleak.c"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "include/linux/gfp.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "include/linux/memcontrol.h",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "mm/kmemleak.c",
      "insertions": 2,
      "deletions": 1
    }
  ],
  "total_insertions": 8,
  "total_deletions": 1,
  "total_changes": 9,
  "parents": [
    "4933f55fe72c86e57efc454dd6e673c7f17af5a3"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.1",
    "v4.1-rc4",
    "v4.1-rc5",
    "v4.1-rc6",
    "v4.1-rc7",
    "v4.1-rc8",
    "v4.10",
    "v4.10-rc1",
    "v4.10-rc2",
    "v4.10-rc3"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "bypass"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "include/linux/gfp.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/memcontrol.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "mm/kmemleak.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}