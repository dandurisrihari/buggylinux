{
  "hash": "7274a5c1bbec45f06f1fff4b8c8b5855b6cc189d",
  "hash_short": "7274a5c1",
  "subject": "sched/uclamp: Propagate system defaults to the root group",
  "body": "The clamp values are not tunable at the level of the root task group.\nThat's for two main reasons:\n\n - the root group represents \"system resources\" which are always\n   entirely available from the cgroup standpoint.\n\n - when tuning/restricting \"system resources\" makes sense, tuning must\n   be done using a system wide API which should also be available when\n   control groups are not.\n\nWhen a system wide restriction is available, cgroups should be aware of\nits value in order to know exactly how much \"system resources\" are\navailable for the subgroups.\n\nUtilization clamping supports already the concepts of:\n\n - system defaults: which define the maximum possible clamp values\n   usable by tasks.\n\n - effective clamps: which allows a parent cgroup to constraint (maybe\n   temporarily) its descendants without losing the information related\n   to the values \"requested\" from them.\n\nExploit these two concepts and bind them together in such a way that,\nwhenever system default are tuned, the new values are propagated to\n(possibly) restrict or relax the \"effective\" value of nested cgroups.\n\nWhen cgroups are in use, force an update of all the RUNNABLE tasks.\nOtherwise, keep things simple and do just a lazy update next time each\ntask will be enqueued.\nDo that since we assume a more strict resource control is required when\ncgroups are in use. This allows also to keep \"effective\" clamp values\nupdated in case we need to expose them to user-space.\n\nSigned-off-by: Patrick Bellasi <patrick.bellasi@arm.com>\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nReviewed-by: Michal Koutny <mkoutny@suse.com>\nAcked-by: Tejun Heo <tj@kernel.org>\nCc: Alessio Balsini <balsini@android.com>\nCc: Dietmar Eggemann <dietmar.eggemann@arm.com>\nCc: Joel Fernandes <joelaf@google.com>\nCc: Juri Lelli <juri.lelli@redhat.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Morten Rasmussen <morten.rasmussen@arm.com>\nCc: Paul Turner <pjt@google.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Quentin Perret <quentin.perret@arm.com>\nCc: Rafael J . Wysocki <rafael.j.wysocki@intel.com>\nCc: Steve Muckle <smuckle@google.com>\nCc: Suren Baghdasaryan <surenb@google.com>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Todd Kjos <tkjos@google.com>\nCc: Vincent Guittot <vincent.guittot@linaro.org>\nCc: Viresh Kumar <viresh.kumar@linaro.org>\nLink: https://lkml.kernel.org/r/20190822132811.31294-4-patrick.bellasi@arm.com\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "full_message": "sched/uclamp: Propagate system defaults to the root group\n\nThe clamp values are not tunable at the level of the root task group.\nThat's for two main reasons:\n\n - the root group represents \"system resources\" which are always\n   entirely available from the cgroup standpoint.\n\n - when tuning/restricting \"system resources\" makes sense, tuning must\n   be done using a system wide API which should also be available when\n   control groups are not.\n\nWhen a system wide restriction is available, cgroups should be aware of\nits value in order to know exactly how much \"system resources\" are\navailable for the subgroups.\n\nUtilization clamping supports already the concepts of:\n\n - system defaults: which define the maximum possible clamp values\n   usable by tasks.\n\n - effective clamps: which allows a parent cgroup to constraint (maybe\n   temporarily) its descendants without losing the information related\n   to the values \"requested\" from them.\n\nExploit these two concepts and bind them together in such a way that,\nwhenever system default are tuned, the new values are propagated to\n(possibly) restrict or relax the \"effective\" value of nested cgroups.\n\nWhen cgroups are in use, force an update of all the RUNNABLE tasks.\nOtherwise, keep things simple and do just a lazy update next time each\ntask will be enqueued.\nDo that since we assume a more strict resource control is required when\ncgroups are in use. This allows also to keep \"effective\" clamp values\nupdated in case we need to expose them to user-space.\n\nSigned-off-by: Patrick Bellasi <patrick.bellasi@arm.com>\nSigned-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>\nReviewed-by: Michal Koutny <mkoutny@suse.com>\nAcked-by: Tejun Heo <tj@kernel.org>\nCc: Alessio Balsini <balsini@android.com>\nCc: Dietmar Eggemann <dietmar.eggemann@arm.com>\nCc: Joel Fernandes <joelaf@google.com>\nCc: Juri Lelli <juri.lelli@redhat.com>\nCc: Linus Torvalds <torvalds@linux-foundation.org>\nCc: Morten Rasmussen <morten.rasmussen@arm.com>\nCc: Paul Turner <pjt@google.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc: Quentin Perret <quentin.perret@arm.com>\nCc: Rafael J . Wysocki <rafael.j.wysocki@intel.com>\nCc: Steve Muckle <smuckle@google.com>\nCc: Suren Baghdasaryan <surenb@google.com>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: Todd Kjos <tkjos@google.com>\nCc: Vincent Guittot <vincent.guittot@linaro.org>\nCc: Viresh Kumar <viresh.kumar@linaro.org>\nLink: https://lkml.kernel.org/r/20190822132811.31294-4-patrick.bellasi@arm.com\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
  "author_name": "Patrick Bellasi",
  "author_email": "patrick.bellasi@arm.com",
  "author_date": "Thu Aug 22 14:28:08 2019 +0100",
  "author_date_iso": "2019-08-22T14:28:08+01:00",
  "committer_name": "Ingo Molnar",
  "committer_email": "mingo@kernel.org",
  "committer_date": "Tue Sep 3 09:17:38 2019 +0200",
  "committer_date_iso": "2019-09-03T09:17:38+02:00",
  "files_changed": [
    "kernel/sched/core.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "kernel/sched/core.c",
      "insertions": 29,
      "deletions": 2
    }
  ],
  "total_insertions": 29,
  "total_deletions": 2,
  "total_changes": 31,
  "parents": [
    "0b60ba2dd342016e4e717dbaa4ca9af3a43f4434"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.4",
    "v5.4-rc1",
    "v5.4-rc2",
    "v5.4-rc3",
    "v5.4-rc4",
    "v5.4-rc5",
    "v5.4-rc6",
    "v5.4-rc7",
    "v5.4-rc8",
    "v5.5"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "Exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "kernel/sched/core.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}