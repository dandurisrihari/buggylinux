commit aa91c7e4ab9b0842b7d7a7cbf8cca18b20df89b5
Author: Suresh Jayaraman <sjayaraman@suse.de>
Date:   Fri Sep 17 18:56:39 2010 +0530

    cifs: fix broken oplock handling
    
    cifs_new_fileinfo() does not use the 'oplock' value from the callers. Instead,
    it sets it to REQ_OPLOCK which seems wrong. We should be using the oplock value
    obtained from the Server to set the inode's clientCanCacheAll or
    clientCanCacheRead flags. Fix this by passing oplock from the callers to
    cifs_new_fileinfo().
    
    This change dates back to commit a6ce4932 (2.6.30-rc3). So, all the affected
    versions will need this fix. Please Cc stable once reviewed and accepted.
    
    Cc: Stable <stable@kernel.org>
    Reviewed-by: Jeff Layton <jlayton@redhat.com>
    Signed-off-by: Suresh Jayaraman <sjayaraman@suse.de>
    Signed-off-by: Steve French <sfrench@us.ibm.com>

diff --git a/fs/cifs/cifsproto.h b/fs/cifs/cifsproto.h
index 1d60c655e3e0..f110e0e7e947 100644
--- a/fs/cifs/cifsproto.h
+++ b/fs/cifs/cifsproto.h
@@ -107,7 +107,8 @@ extern struct timespec cnvrtDosUnixTm(__le16 le_date, __le16 le_time,
 
 extern struct cifsFileInfo *cifs_new_fileinfo(struct inode *newinode,
 				__u16 fileHandle, struct file *file,
-				struct vfsmount *mnt, unsigned int oflags);
+				struct vfsmount *mnt, unsigned int oflags,
+				__u32 oplock);
 extern int cifs_posix_open(char *full_path, struct inode **pinode,
 				struct super_block *sb,
 				int mode, int oflags,