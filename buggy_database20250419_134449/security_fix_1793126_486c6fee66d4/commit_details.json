{
  "hash": "1793126fcebd7c18834f95d43b55e387a8803aa8",
  "hash_short": "1793126f",
  "subject": "drm: implement experimental render nodes",
  "body": "Render nodes provide an API for userspace to use non-privileged GPU\ncommands without any running DRM-Master. It is useful for offscreen\nrendering, GPGPU clients, and normal render clients which do not perform\nmodesetting.\n\nCompared to legacy clients, render clients no longer need any\nauthentication to perform client ioctls. Instead, user-space controls\nrender/client access to GPUs via filesystem access-modes on the\nrender-node. Once a render-node was opened, a client has full access to\nthe client/render operations on the GPU. However, no modesetting or ioctls\nthat affect global state are allowed on render nodes.\n\nTo prevent privilege-escalation, drivers must explicitly state that they\nsupport render nodes. They must mark their render-only ioctls as\nDRM_RENDER_ALLOW so render clients can use them. Furthermore, they must\nsupport clients without any attached master.\n\nIf filesystem access-modes are not enough for fine-grained access control\nto render nodes (very unlikely, considering the versaitlity of FS-ACLs),\nyou may still fall-back to fd-passing from server to client (which allows\narbitrary access-control). However, note that revoking access is\ncurrently impossible and unlikely to get implemented.\n\nNote: Render clients no longer have any associated DRM-Master as they are\nsupposed to be independent of any server state. DRM core highly depends on\nfile_priv->master to be non-NULL for modesetting/ctx/etc. commands.\nTherefore, drivers must be very careful to not require DRM-Master if they\nsupport DRIVER_RENDER.\n\nSo far render-nodes are protected by \"drm_rnodes\". As long as this\nmodule-parameter is not set to 1, a driver will not create render nodes.\nThis allows us to experiment with the API a bit before we stabilize it.\n\nv2: drop insecure GEM_FLINK to force use of dmabuf\n\nSigned-off-by: David Herrmann <dh.herrmann@gmail.com>\nSigned-off-by: Dave Airlie <airlied@redhat.com>",
  "full_message": "drm: implement experimental render nodes\n\nRender nodes provide an API for userspace to use non-privileged GPU\ncommands without any running DRM-Master. It is useful for offscreen\nrendering, GPGPU clients, and normal render clients which do not perform\nmodesetting.\n\nCompared to legacy clients, render clients no longer need any\nauthentication to perform client ioctls. Instead, user-space controls\nrender/client access to GPUs via filesystem access-modes on the\nrender-node. Once a render-node was opened, a client has full access to\nthe client/render operations on the GPU. However, no modesetting or ioctls\nthat affect global state are allowed on render nodes.\n\nTo prevent privilege-escalation, drivers must explicitly state that they\nsupport render nodes. They must mark their render-only ioctls as\nDRM_RENDER_ALLOW so render clients can use them. Furthermore, they must\nsupport clients without any attached master.\n\nIf filesystem access-modes are not enough for fine-grained access control\nto render nodes (very unlikely, considering the versaitlity of FS-ACLs),\nyou may still fall-back to fd-passing from server to client (which allows\narbitrary access-control). However, note that revoking access is\ncurrently impossible and unlikely to get implemented.\n\nNote: Render clients no longer have any associated DRM-Master as they are\nsupposed to be independent of any server state. DRM core highly depends on\nfile_priv->master to be non-NULL for modesetting/ctx/etc. commands.\nTherefore, drivers must be very careful to not require DRM-Master if they\nsupport DRIVER_RENDER.\n\nSo far render-nodes are protected by \"drm_rnodes\". As long as this\nmodule-parameter is not set to 1, a driver will not create render nodes.\nThis allows us to experiment with the API a bit before we stabilize it.\n\nv2: drop insecure GEM_FLINK to force use of dmabuf\n\nSigned-off-by: David Herrmann <dh.herrmann@gmail.com>\nSigned-off-by: Dave Airlie <airlied@redhat.com>",
  "author_name": "David Herrmann",
  "author_email": "dh.herrmann@gmail.com",
  "author_date": "Sun Aug 25 18:29:00 2013 +0200",
  "author_date_iso": "2013-08-25T18:29:00+02:00",
  "committer_name": "Dave Airlie",
  "committer_email": "airlied@gmail.com",
  "committer_date": "Fri Aug 30 08:43:57 2013 +1000",
  "committer_date_iso": "2013-08-30T08:43:57+10:00",
  "files_changed": [
    "Documentation/DocBook/drm.tmpl",
    "drivers/gpu/drm/drm_drv.c",
    "drivers/gpu/drm/drm_fops.c",
    "drivers/gpu/drm/drm_pci.c",
    "drivers/gpu/drm/drm_platform.c",
    "drivers/gpu/drm/drm_stub.c",
    "drivers/gpu/drm/drm_usb.c",
    "include/drm/drmP.h"
  ],
  "files_changed_count": 8,
  "stats": [
    {
      "file": "Documentation/DocBook/drm.tmpl",
      "insertions": 69,
      "deletions": 0
    },
    {
      "file": "drivers/gpu/drm/drm_drv.c",
      "insertions": 7,
      "deletions": 6
    },
    {
      "file": "drivers/gpu/drm/drm_fops.c",
      "insertions": 7,
      "deletions": 7
    },
    {
      "file": "drivers/gpu/drm/drm_pci.c",
      "insertions": 9,
      "deletions": 0
    },
    {
      "file": "drivers/gpu/drm/drm_platform.c",
      "insertions": 9,
      "deletions": 0
    },
    {
      "file": "drivers/gpu/drm/drm_stub.c",
      "insertions": 10,
      "deletions": 0
    },
    {
      "file": "drivers/gpu/drm/drm_usb.c",
      "insertions": 9,
      "deletions": 0
    },
    {
      "file": "include/drm/drmP.h",
      "insertions": 9,
      "deletions": 0
    }
  ],
  "total_insertions": 129,
  "total_deletions": 13,
  "total_changes": 142,
  "parents": [
    "6cb3b7f1c013fd4bea41e16ee557bcb2f1561787"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v3.12",
    "v3.12-rc1",
    "v3.12-rc2",
    "v3.12-rc3",
    "v3.12-rc4",
    "v3.12-rc5",
    "v3.12-rc6",
    "v3.12-rc7",
    "v3.13",
    "v3.13-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "drivers/gpu/drm/drm_drv.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/drm_pci.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "Documentation/DocBook/drm.tmpl",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/drm/drmP.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/drm_fops.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/drm_stub.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/drm_usb.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "drivers/gpu/drm/drm_platform.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}