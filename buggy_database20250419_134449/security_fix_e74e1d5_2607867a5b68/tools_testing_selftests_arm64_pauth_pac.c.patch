commit e74e1d55728509b352e4eec4283dd5b2781b2070
Author: Boyan Karatotev <boyan.karatotev@arm.com>
Date:   Fri Sep 18 11:47:12 2020 +0100

    kselftests/arm64: add a basic Pointer Authentication test
    
    PAuth signs and verifies return addresses on the stack. It does so by
    inserting a Pointer Authentication code (PAC) into some of the unused top
    bits of an address. This is achieved by adding paciasp/autiasp instructions
    at the beginning and end of a function.
    
    This feature is partially backwards compatible with earlier versions of the
    ARM architecture. To coerce the compiler into emitting fully backwards
    compatible code the main file is compiled to target an earlier ARM version.
    This allows the tests to check for the feature and print meaningful error
    messages instead of crashing.
    
    Add a test to verify that corrupting the return address results in a
    SIGSEGV on return.
    
    Signed-off-by: Boyan Karatotev <boyan.karatotev@arm.com>
    Reviewed-by: Vincenzo Frascino <Vincenzo.Frascino@arm.com>
    Reviewed-by: Amit Daniel Kachhap <amit.kachhap@arm.com>
    Acked-by: Shuah Khan <skhan@linuxfoundation.org>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Will Deacon <will@kernel.org>
    Link: https://lore.kernel.org/r/20200918104715.182310-2-boian4o1@gmail.com
    Signed-off-by: Will Deacon <will@kernel.org>

diff --git a/tools/testing/selftests/arm64/pauth/pac.c b/tools/testing/selftests/arm64/pauth/pac.c
new file mode 100644
index 000000000000..0293310ba70a
--- /dev/null
+++ b/tools/testing/selftests/arm64/pauth/pac.c
@@ -0,0 +1,44 @@
+// SPDX-License-Identifier: GPL-2.0
+// Copyright (C) 2020 ARM Limited
+
+#include <sys/auxv.h>
+#include <signal.h>
+#include <setjmp.h>
+
+#include "../../kselftest_harness.h"
+#include "helper.h"
+
+#define ASSERT_PAUTH_ENABLED() \
+do { \
+	unsigned long hwcaps = getauxval(AT_HWCAP); \
+	/* data key instructions are not in NOP space. This prevents a SIGILL */ \
+	ASSERT_NE(0, hwcaps & HWCAP_PACA) TH_LOG("PAUTH not enabled"); \
+} while (0)
+
+sigjmp_buf jmpbuf;
+void pac_signal_handler(int signum, siginfo_t *si, void *uc)
+{
+	if (signum == SIGSEGV || signum == SIGILL)
+		siglongjmp(jmpbuf, 1);
+}
+
+/* check that a corrupted PAC results in SIGSEGV or SIGILL */
+TEST(corrupt_pac)
+{
+	struct sigaction sa;
+
+	ASSERT_PAUTH_ENABLED();
+	if (sigsetjmp(jmpbuf, 1) == 0) {
+		sa.sa_sigaction = pac_signal_handler;
+		sa.sa_flags = SA_SIGINFO | SA_RESETHAND;
+		sigemptyset(&sa.sa_mask);
+
+		sigaction(SIGSEGV, &sa, NULL);
+		sigaction(SIGILL, &sa, NULL);
+
+		pac_corruptor();
+		ASSERT_TRUE(0) TH_LOG("SIGSEGV/SIGILL signal did not occur");
+	}
+}
+
+TEST_HARNESS_MAIN