commit 88763a5cf80ca59a7c3bea32681ce8f697d9995f
Author: Daniel Lezcano <daniel.lezcano@linaro.org>
Date:   Tue Jun 26 12:53:29 2018 +0200

    powercap / idle_inject: Add an idle injection framework
    
    Initially, the cpu_cooling device for ARM was changed by adding a new
    policy inserting idle cycles. The intel_powerclamp driver does a
    similar action.
    
    Instead of implementing idle injections privately in the cpu_cooling
    device, move the idle injection code in a dedicated framework and give
    the opportunity to other frameworks to make use of it.
    
    The framework relies on the smpboot kthreads which handles via its
    main loop the common code for hotplugging and [un]parking.
    
    This code was previously tested with the cpu cooling device and went
    through several iterations. It results now in split code and API
    exported in the header file. It was tested with the cpu cooling device
    with success.
    
    Signed-off-by: Daniel Lezcano <daniel.lezcano@linaro.org>
    Reviewed-by: Viresh Kumar <viresh.kumar@linaro.org>
    [ rjw: Rewrite of all comments ]
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

diff --git a/include/linux/idle_inject.h b/include/linux/idle_inject.h
new file mode 100644
index 000000000000..bdc0293fb6cb
--- /dev/null
+++ b/include/linux/idle_inject.h
@@ -0,0 +1,29 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (C) 2018 Linaro Ltd
+ *
+ * Author: Daniel Lezcano <daniel.lezcano@linaro.org>
+ *
+ */
+#ifndef __IDLE_INJECT_H__
+#define __IDLE_INJECT_H__
+
+/* private idle injection device structure */
+struct idle_inject_device;
+
+struct idle_inject_device *idle_inject_register(struct cpumask *cpumask);
+
+void idle_inject_unregister(struct idle_inject_device *ii_dev);
+
+int idle_inject_start(struct idle_inject_device *ii_dev);
+
+void idle_inject_stop(struct idle_inject_device *ii_dev);
+
+void idle_inject_set_duration(struct idle_inject_device *ii_dev,
+				 unsigned int run_duration_ms,
+				 unsigned int idle_duration_ms);
+
+void idle_inject_get_duration(struct idle_inject_device *ii_dev,
+				 unsigned int *run_duration_ms,
+				 unsigned int *idle_duration_ms);
+#endif /* __IDLE_INJECT_H__ */