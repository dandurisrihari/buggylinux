{
  "hash": "105bc1306e9b29c2aa2783b9524f7aec9b5a5b1f",
  "hash_short": "105bc130",
  "subject": "Merge git://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next",
  "body": "Daniel Borkmann says:\n\n====================\npull-request: bpf-next 2018-09-25\n\nThe following pull-request contains BPF updates for your *net-next* tree.\n\nThe main changes are:\n\n1) Allow for RX stack hardening by implementing the kernel's flow\n   dissector in BPF. Idea was originally presented at netconf 2017 [0].\n   Quote from merge commit:\n\n     [...] Because of the rigorous checks of the BPF verifier, this\n     provides significant security guarantees. In particular, the BPF\n     flow dissector cannot get inside of an infinite loop, as with\n     CVE-2013-4348, because BPF programs are guaranteed to terminate.\n     It cannot read outside of packet bounds, because all memory accesses\n     are checked. Also, with BPF the administrator can decide which\n     protocols to support, reducing potential attack surface. Rarely\n     encountered protocols can be excluded from dissection and the\n     program can be updated without kernel recompile or reboot if a\n     bug is discovered. [...]\n\n   Also, a sample flow dissector has been implemented in BPF as part\n   of this work, from Petar and Willem.\n\n   [0] http://vger.kernel.org/netconf2017_files/rx_hardening_and_udp_gso.pdf\n\n2) Add support for bpftool to list currently active attachment\n   points of BPF networking programs providing a quick overview\n   similar to bpftool's perf subcommand, from Yonghong.\n\n3) Fix a verifier pruning instability bug where a union member\n   from the register state was not cleared properly leading to\n   branches not being pruned despite them being valid candidates,\n   from Alexei.\n\n4) Various smaller fast-path optimizations in XDP's map redirect\n   code, from Jesper.\n\n5) Enable to recognize BPF_MAP_TYPE_REUSEPORT_SOCKARRAY maps\n   in bpftool, from Roman.\n\n6) Remove a duplicate check in libbpf that probes for function\n   storage, from Taeung.\n\n7) Fix an issue in test_progs by avoid checking for errno since\n   on success its value should not be checked, from Mauricio.\n\n8) Fix unused variable warning in bpf_getsockopt() helper when\n   CONFIG_INET is not configured, from Anders.\n\n9) Fix a compilation failure in the BPF sample code's use of\n   bpf_flow_keys, from Prashant.\n\n10) Minor cleanups in BPF code, from Yue and Zhong.\n====================\n\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "full_message": "Merge git://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next\n\nDaniel Borkmann says:\n\n====================\npull-request: bpf-next 2018-09-25\n\nThe following pull-request contains BPF updates for your *net-next* tree.\n\nThe main changes are:\n\n1) Allow for RX stack hardening by implementing the kernel's flow\n   dissector in BPF. Idea was originally presented at netconf 2017 [0].\n   Quote from merge commit:\n\n     [...] Because of the rigorous checks of the BPF verifier, this\n     provides significant security guarantees. In particular, the BPF\n     flow dissector cannot get inside of an infinite loop, as with\n     CVE-2013-4348, because BPF programs are guaranteed to terminate.\n     It cannot read outside of packet bounds, because all memory accesses\n     are checked. Also, with BPF the administrator can decide which\n     protocols to support, reducing potential attack surface. Rarely\n     encountered protocols can be excluded from dissection and the\n     program can be updated without kernel recompile or reboot if a\n     bug is discovered. [...]\n\n   Also, a sample flow dissector has been implemented in BPF as part\n   of this work, from Petar and Willem.\n\n   [0] http://vger.kernel.org/netconf2017_files/rx_hardening_and_udp_gso.pdf\n\n2) Add support for bpftool to list currently active attachment\n   points of BPF networking programs providing a quick overview\n   similar to bpftool's perf subcommand, from Yonghong.\n\n3) Fix a verifier pruning instability bug where a union member\n   from the register state was not cleared properly leading to\n   branches not being pruned despite them being valid candidates,\n   from Alexei.\n\n4) Various smaller fast-path optimizations in XDP's map redirect\n   code, from Jesper.\n\n5) Enable to recognize BPF_MAP_TYPE_REUSEPORT_SOCKARRAY maps\n   in bpftool, from Roman.\n\n6) Remove a duplicate check in libbpf that probes for function\n   storage, from Taeung.\n\n7) Fix an issue in test_progs by avoid checking for errno since\n   on success its value should not be checked, from Mauricio.\n\n8) Fix unused variable warning in bpf_getsockopt() helper when\n   CONFIG_INET is not configured, from Anders.\n\n9) Fix a compilation failure in the BPF sample code's use of\n   bpf_flow_keys, from Prashant.\n\n10) Minor cleanups in BPF code, from Yue and Zhong.\n====================\n\nSigned-off-by: David S. Miller <davem@davemloft.net>",
  "author_name": "David S. Miller",
  "author_email": "davem@davemloft.net",
  "author_date": "Tue Sep 25 20:29:38 2018 -0700",
  "author_date_iso": "2018-09-25T20:29:38-07:00",
  "committer_name": "David S. Miller",
  "committer_email": "davem@davemloft.net",
  "committer_date": "Tue Sep 25 20:29:38 2018 -0700",
  "committer_date_iso": "2018-09-25T20:29:38-07:00",
  "files_changed": [
    "include/linux/skbuff.h",
    "include/net/sch_generic.h",
    "kernel/bpf/sockmap.c",
    "kernel/bpf/verifier.c",
    "net/core/filter.c",
    "net/core/flow_dissector.c",
    "tools/lib/bpf/Build",
    "tools/lib/bpf/libbpf.c"
  ],
  "files_changed_count": 8,
  "stats": [
    {
      "file": "include/linux/bpf.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "include/linux/bpf_types.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "include/linux/skbuff.h",
      "insertions": 20,
      "deletions": 0
    },
    {
      "file": "include/net/net_namespace.h",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "include/net/sch_generic.h",
      "insertions": 9,
      "deletions": 3
    },
    {
      "file": "include/uapi/linux/bpf.h",
      "insertions": 26,
      "deletions": 0
    },
    {
      "file": "kernel/bpf/arraymap.c",
      "insertions": 24,
      "deletions": 1
    },
    {
      "file": "kernel/bpf/sockmap.c",
      "insertions": 2,
      "deletions": 4
    },
    {
      "file": "kernel/bpf/syscall.c",
      "insertions": 8,
      "deletions": 0
    },
    {
      "file": "kernel/bpf/verifier.c",
      "insertions": 40,
      "deletions": 8
    },
    {
      "file": "net/core/filter.c",
      "insertions": 109,
      "deletions": 30
    },
    {
      "file": "net/core/flow_dissector.c",
      "insertions": 140,
      "deletions": 0
    },
    {
      "file": "samples/bpf/bpf_load.c",
      "insertions": 0,
      "deletions": 1
    },
    {
      "file": "samples/bpf/sampleip_user.c",
      "insertions": 0,
      "deletions": 1
    },
    {
      "file": "samples/bpf/sockex2_kern.c",
      "insertions": 6,
      "deletions": 5
    },
    {
      "file": "samples/bpf/sockex3_kern.c",
      "insertions": 4,
      "deletions": 4
    },
    {
      "file": "samples/bpf/sockex3_user.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "samples/bpf/test_current_task_under_cgroup_user.c",
      "insertions": 0,
      "deletions": 1
    },
    {
      "file": "tools/bpf/bpftool/Documentation/bpftool-net.rst",
      "insertions": 139,
      "deletions": 0
    },
    {
      "file": "tools/bpf/bpftool/Documentation/bpftool.rst",
      "insertions": 4,
      "deletions": 2
    },
    {
      "file": "tools/bpf/bpftool/bash-completion/bpftool",
      "insertions": 13,
      "deletions": 4
    },
    {
      "file": "tools/bpf/bpftool/main.c",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "tools/bpf/bpftool/main.h",
      "insertions": 8,
      "deletions": 0
    },
    {
      "file": "tools/bpf/bpftool/map.c",
      "insertions": 4,
      "deletions": 8
    },
    {
      "file": "tools/bpf/bpftool/net.c",
      "insertions": 272,
      "deletions": 0
    },
    {
      "file": "tools/bpf/bpftool/netlink_dumper.c",
      "insertions": 174,
      "deletions": 0
    },
    {
      "file": "tools/bpf/bpftool/netlink_dumper.h",
      "insertions": 95,
      "deletions": 0
    },
    {
      "file": "tools/bpf/bpftool/prog.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "tools/include/uapi/linux/bpf.h",
      "insertions": 26,
      "deletions": 0
    },
    {
      "file": "tools/lib/bpf/Build",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "tools/lib/bpf/bpf.c",
      "insertions": 0,
      "deletions": 129
    },
    {
      "file": "tools/lib/bpf/libbpf.c",
      "insertions": 3,
      "deletions": 1
    },
    {
      "file": "tools/lib/bpf/libbpf.h",
      "insertions": 16,
      "deletions": 0
    },
    {
      "file": "tools/lib/bpf/libbpf_errno.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "tools/lib/bpf/netlink.c",
      "insertions": 331,
      "deletions": 0
    },
    {
      "file": "tools/lib/bpf/nlattr.c",
      "insertions": 21,
      "deletions": 12
    },
    {
      "file": "tools/lib/bpf/nlattr.h",
      "insertions": 38,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/.gitignore",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/Makefile",
      "insertions": 5,
      "deletions": 3
    },
    {
      "file": "tools/testing/selftests/bpf/bpf_flow.c",
      "insertions": 373,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/config",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/flow_dissector_load.c",
      "insertions": 140,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/test_flow_dissector.c",
      "insertions": 782,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/test_flow_dissector.sh",
      "insertions": 115,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/test_progs.c",
      "insertions": 10,
      "deletions": 10
    },
    {
      "file": "tools/testing/selftests/bpf/with_addr.sh",
      "insertions": 54,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/with_tunnels.sh",
      "insertions": 36,
      "deletions": 0
    }
  ],
  "total_insertions": 3066,
  "total_deletions": 231,
  "total_changes": 3297,
  "parents": [
    "3475372ff60e4181d3845ed605958daf71c3e3b8",
    "d0e13a1488ad30dc3c2c9347b931cb10f892e3a4"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.20",
    "v4.20-rc1",
    "v4.20-rc2",
    "v4.20-rc3",
    "v4.20-rc4",
    "v4.20-rc5",
    "v4.20-rc6",
    "v4.20-rc7",
    "v5.0",
    "v5.0-rc1"
  ],
  "is_merge": true,
  "security_info": {
    "cve_ids": [
      "CVE-2013-4348"
    ],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "kernel/bpf/sockmap.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "kernel/bpf/verifier.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "tools/lib/bpf/Build",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/net/sch_generic.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/skbuff.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/core/flow_dissector.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "net/core/filter.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "tools/lib/bpf/libbpf.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}