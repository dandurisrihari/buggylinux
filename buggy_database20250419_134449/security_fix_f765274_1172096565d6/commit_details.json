{
  "hash": "f765274d0c9436bc130911abbd97e52b1648d13c",
  "hash_short": "f765274d",
  "subject": "Merge branch 'harden-and-extend-elf-build-id-parsing-logic'",
  "body": "Andrii Nakryiko says:\n\n====================\nHarden and extend ELF build ID parsing logic\n\nThe goal of this patch set is to extend existing ELF build ID parsing logic,\ncurrently mostly used by BPF subsystem, with support for working in sleepable\nmode in which memory faults are allowed and can be relied upon to fetch\nrelevant parts of ELF file to find and fetch .note.gnu.build-id information.\n\nThis is useful and important for BPF subsystem itself, but also for\nPROCMAP_QUERY ioctl(), built atop of /proc/<pid>/maps functionality (see [0]),\nwhich makes use of the same build_id_parse() functionality. PROCMAP_QUERY is\nalways called from sleepable user process context, so it doesn't have to\nsuffer from current restrictions of build_id_parse() which are due to the NMI\ncontext assumption.\n\nAlong the way, we harden the logic to avoid TOCTOU, overflow, out-of-bounds\naccess problems.  This is the very first patch, which can be backported to\nolder releases, if necessary.\n\nWe also lift existing limitations of only working as long as ELF program\nheaders and build ID note section is contained strictly within the very first\npage of ELF file.\n\nWe achieve all of the above without duplication of logic between sleepable and\nnon-sleepable modes through freader abstraction that manages underlying folio\nfrom page cache (on demand) and gives a simple to use direct memory access\ninterface. With that, single page restrictions and adding sleepable mode\nsupport is rather straightforward.\n\nWe also extend existing set of BPF selftests with a few tests targeting build\nID logic across sleepable and non-sleepabe contexts (we utilize sleepable and\nnon-sleepable uprobes for that).\n\n   [0] https://lore.kernel.org/linux-mm/20240627170900.1672542-4-andrii@kernel.org/\n\nv6->v7:\n  - added filemap_invalidate_{lock,unlock}_shared() around read_cache_folio\n    and kept Eduard's Reviewed-by (Eduard);\nv5->v6:\n  - use local phnum variable in get_build_id_32() (Jann);\n  - switch memcmp() instead of strcmp() in parse_build_id() (Jann);\nv4->v5:\n  - pass proper file reference to read_cache_folio() (Shakeel);\n  - fix another potential overflow due to two u32 additions (Andi);\n  - add PageUptodate() check to patch #1 (Jann);\nv3->v4:\n  - fix few more potential overflow and out-of-bounds access issues (Andi);\n  - use purely folio-based implementation for freader (Matthew);\nv2->v3:\n  - remove unneeded READ_ONCE()s and force phoff to u64 for 32-bit mode (Andi);\n  - moved hardening fixes to the front for easier backporting (Jann);\n  - call freader_cleanup() from build_id_parse_buf() for consistency (Jiri);\nv1->v2:\n  - ensure MADV_PAGEOUT works reliably by paging data in first (Shakeel);\n  - to fix BPF CI build optionally define MADV_POPULATE_READ in selftest.\n====================\n\nLink: https://lore.kernel.org/r/20240829174232.3133883-1-andrii@kernel.org\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>",
  "full_message": "Merge branch 'harden-and-extend-elf-build-id-parsing-logic'\n\nAndrii Nakryiko says:\n\n====================\nHarden and extend ELF build ID parsing logic\n\nThe goal of this patch set is to extend existing ELF build ID parsing logic,\ncurrently mostly used by BPF subsystem, with support for working in sleepable\nmode in which memory faults are allowed and can be relied upon to fetch\nrelevant parts of ELF file to find and fetch .note.gnu.build-id information.\n\nThis is useful and important for BPF subsystem itself, but also for\nPROCMAP_QUERY ioctl(), built atop of /proc/<pid>/maps functionality (see [0]),\nwhich makes use of the same build_id_parse() functionality. PROCMAP_QUERY is\nalways called from sleepable user process context, so it doesn't have to\nsuffer from current restrictions of build_id_parse() which are due to the NMI\ncontext assumption.\n\nAlong the way, we harden the logic to avoid TOCTOU, overflow, out-of-bounds\naccess problems.  This is the very first patch, which can be backported to\nolder releases, if necessary.\n\nWe also lift existing limitations of only working as long as ELF program\nheaders and build ID note section is contained strictly within the very first\npage of ELF file.\n\nWe achieve all of the above without duplication of logic between sleepable and\nnon-sleepable modes through freader abstraction that manages underlying folio\nfrom page cache (on demand) and gives a simple to use direct memory access\ninterface. With that, single page restrictions and adding sleepable mode\nsupport is rather straightforward.\n\nWe also extend existing set of BPF selftests with a few tests targeting build\nID logic across sleepable and non-sleepabe contexts (we utilize sleepable and\nnon-sleepable uprobes for that).\n\n   [0] https://lore.kernel.org/linux-mm/20240627170900.1672542-4-andrii@kernel.org/\n\nv6->v7:\n  - added filemap_invalidate_{lock,unlock}_shared() around read_cache_folio\n    and kept Eduard's Reviewed-by (Eduard);\nv5->v6:\n  - use local phnum variable in get_build_id_32() (Jann);\n  - switch memcmp() instead of strcmp() in parse_build_id() (Jann);\nv4->v5:\n  - pass proper file reference to read_cache_folio() (Shakeel);\n  - fix another potential overflow due to two u32 additions (Andi);\n  - add PageUptodate() check to patch #1 (Jann);\nv3->v4:\n  - fix few more potential overflow and out-of-bounds access issues (Andi);\n  - use purely folio-based implementation for freader (Matthew);\nv2->v3:\n  - remove unneeded READ_ONCE()s and force phoff to u64 for 32-bit mode (Andi);\n  - moved hardening fixes to the front for easier backporting (Jann);\n  - call freader_cleanup() from build_id_parse_buf() for consistency (Jiri);\nv1->v2:\n  - ensure MADV_PAGEOUT works reliably by paging data in first (Shakeel);\n  - to fix BPF CI build optionally define MADV_POPULATE_READ in selftest.\n====================\n\nLink: https://lore.kernel.org/r/20240829174232.3133883-1-andrii@kernel.org\nSigned-off-by: Alexei Starovoitov <ast@kernel.org>",
  "author_name": "Alexei Starovoitov",
  "author_email": "ast@kernel.org",
  "author_date": "Wed Sep 11 09:58:31 2024 -0700",
  "author_date_iso": "2024-09-11T09:58:31-07:00",
  "committer_name": "Alexei Starovoitov",
  "committer_email": "ast@kernel.org",
  "committer_date": "Wed Sep 11 09:58:32 2024 -0700",
  "committer_date_iso": "2024-09-11T09:58:32-07:00",
  "files_changed": [],
  "files_changed_count": 0,
  "stats": [
    {
      "file": "include/linux/bpf.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "include/linux/buildid.h",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "kernel/bpf/stackmap.c",
      "insertions": 101,
      "deletions": 30
    },
    {
      "file": "kernel/events/core.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "kernel/trace/bpf_trace.c",
      "insertions": 3,
      "deletions": 2
    },
    {
      "file": "lib/buildid.c",
      "insertions": 292,
      "deletions": 105
    },
    {
      "file": "tools/testing/selftests/bpf/Makefile",
      "insertions": 3,
      "deletions": 2
    },
    {
      "file": "tools/testing/selftests/bpf/prog_tests/build_id.c",
      "insertions": 118,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/progs/test_build_id.c",
      "insertions": 31,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/uprobe_multi.c",
      "insertions": 41,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/uprobe_multi.ld",
      "insertions": 11,
      "deletions": 0
    }
  ],
  "total_insertions": 605,
  "total_deletions": 142,
  "total_changes": 747,
  "parents": [
    "58ff04e2e22319e63ea646d9a38890c17836a7f6",
    "3c217a182018e6c6d381b3fdc32626275eefbfb0"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": []
}