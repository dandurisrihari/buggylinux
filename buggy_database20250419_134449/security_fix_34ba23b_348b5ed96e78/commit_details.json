{
  "hash": "34ba23b44c664792a4308ec37b5788a3162944ec",
  "hash_short": "34ba23b4",
  "subject": "Merge https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next",
  "body": "Daniel Borkmann says:\n\n====================\npull-request: bpf-next 2022-04-09\n\nWe've added 63 non-merge commits during the last 9 day(s) which contain\na total of 68 files changed, 4852 insertions(+), 619 deletions(-).\n\nThe main changes are:\n\n1) Add libbpf support for USDT (User Statically-Defined Tracing) probes.\n   USDTs are an abstraction built on top of uprobes, critical for tracing\n   and BPF, and widely used in production applications, from Andrii Nakryiko.\n\n2) While Andrii was adding support for x86{-64}-specific logic of parsing\n   USDT argument specification, Ilya followed-up with USDT support for s390\n   architecture, from Ilya Leoshkevich.\n\n3) Support name-based attaching for uprobe BPF programs in libbpf. The format\n   supported is `u[ret]probe/binary_path:[raw_offset|function[+offset]]`, e.g.\n   attaching to libc malloc can be done in BPF via SEC(\"uprobe/libc.so.6:malloc\")\n   now, from Alan Maguire.\n\n4) Various load/store optimizations for the arm64 JIT to shrink the image\n   size by using arm64 str/ldr immediate instructions. Also enable pointer\n   authentication to verify return address for JITed code, from Xu Kuohai.\n\n5) BPF verifier fixes for write access checks to helper functions, e.g.\n   rd-only memory from bpf_*_cpu_ptr() must not be passed to helpers that\n   write into passed buffers, from Kumar Kartikeya Dwivedi.\n\n6) Fix overly excessive stack map allocation for its base map structure and\n   buckets which slipped-in from cleanups during the rlimit accounting removal\n   back then, from Yuntao Wang.\n\n7) Extend the unstable CT lookup helpers for XDP and tc/BPF to report netfilter\n   connection tracking tuple direction, from Lorenzo Bianconi.\n\n8) Improve bpftool dump to show BPF program/link type names, Milan Landaverde.\n\n9) Minor cleanups all over the place from various others.\n\n* https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next: (63 commits)\n  bpf: Fix excessive memory allocation in stack_map_alloc()\n  selftests/bpf: Fix return value checks in perf_event_stackmap test\n  selftests/bpf: Add CO-RE relos into linked_funcs selftests\n  libbpf: Use weak hidden modifier for USDT BPF-side API functions\n  libbpf: Don't error out on CO-RE relos for overriden weak subprogs\n  samples, bpf: Move routes monitor in xdp_router_ipv4 in a dedicated thread\n  libbpf: Allow WEAK and GLOBAL bindings during BTF fixup\n  libbpf: Use strlcpy() in path resolution fallback logic\n  libbpf: Add s390-specific USDT arg spec parsing logic\n  libbpf: Make BPF-side of USDT support work on big-endian machines\n  libbpf: Minor style improvements in USDT code\n  libbpf: Fix use #ifdef instead of #if to avoid compiler warning\n  libbpf: Potential NULL dereference in usdt_manager_attach_usdt()\n  selftests/bpf: Uprobe tests should verify param/return values\n  libbpf: Improve string parsing for uprobe auto-attach\n  libbpf: Improve library identification for uprobe binary path resolution\n  selftests/bpf: Test for writes to map key from BPF helpers\n  selftests/bpf: Test passing rdonly mem to global func\n  bpf: Reject writes for PTR_TO_MAP_KEY in check_helper_mem_access\n  bpf: Check PTR_TO_MEM | MEM_RDONLY in check_helper_mem_access\n  ...\n====================\n\nLink: https://lore.kernel.org/r/20220408231741.19116-1-daniel@iogearbox.net\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
  "full_message": "Merge https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next\n\nDaniel Borkmann says:\n\n====================\npull-request: bpf-next 2022-04-09\n\nWe've added 63 non-merge commits during the last 9 day(s) which contain\na total of 68 files changed, 4852 insertions(+), 619 deletions(-).\n\nThe main changes are:\n\n1) Add libbpf support for USDT (User Statically-Defined Tracing) probes.\n   USDTs are an abstraction built on top of uprobes, critical for tracing\n   and BPF, and widely used in production applications, from Andrii Nakryiko.\n\n2) While Andrii was adding support for x86{-64}-specific logic of parsing\n   USDT argument specification, Ilya followed-up with USDT support for s390\n   architecture, from Ilya Leoshkevich.\n\n3) Support name-based attaching for uprobe BPF programs in libbpf. The format\n   supported is `u[ret]probe/binary_path:[raw_offset|function[+offset]]`, e.g.\n   attaching to libc malloc can be done in BPF via SEC(\"uprobe/libc.so.6:malloc\")\n   now, from Alan Maguire.\n\n4) Various load/store optimizations for the arm64 JIT to shrink the image\n   size by using arm64 str/ldr immediate instructions. Also enable pointer\n   authentication to verify return address for JITed code, from Xu Kuohai.\n\n5) BPF verifier fixes for write access checks to helper functions, e.g.\n   rd-only memory from bpf_*_cpu_ptr() must not be passed to helpers that\n   write into passed buffers, from Kumar Kartikeya Dwivedi.\n\n6) Fix overly excessive stack map allocation for its base map structure and\n   buckets which slipped-in from cleanups during the rlimit accounting removal\n   back then, from Yuntao Wang.\n\n7) Extend the unstable CT lookup helpers for XDP and tc/BPF to report netfilter\n   connection tracking tuple direction, from Lorenzo Bianconi.\n\n8) Improve bpftool dump to show BPF program/link type names, Milan Landaverde.\n\n9) Minor cleanups all over the place from various others.\n\n* https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next: (63 commits)\n  bpf: Fix excessive memory allocation in stack_map_alloc()\n  selftests/bpf: Fix return value checks in perf_event_stackmap test\n  selftests/bpf: Add CO-RE relos into linked_funcs selftests\n  libbpf: Use weak hidden modifier for USDT BPF-side API functions\n  libbpf: Don't error out on CO-RE relos for overriden weak subprogs\n  samples, bpf: Move routes monitor in xdp_router_ipv4 in a dedicated thread\n  libbpf: Allow WEAK and GLOBAL bindings during BTF fixup\n  libbpf: Use strlcpy() in path resolution fallback logic\n  libbpf: Add s390-specific USDT arg spec parsing logic\n  libbpf: Make BPF-side of USDT support work on big-endian machines\n  libbpf: Minor style improvements in USDT code\n  libbpf: Fix use #ifdef instead of #if to avoid compiler warning\n  libbpf: Potential NULL dereference in usdt_manager_attach_usdt()\n  selftests/bpf: Uprobe tests should verify param/return values\n  libbpf: Improve string parsing for uprobe auto-attach\n  libbpf: Improve library identification for uprobe binary path resolution\n  selftests/bpf: Test for writes to map key from BPF helpers\n  selftests/bpf: Test passing rdonly mem to global func\n  bpf: Reject writes for PTR_TO_MAP_KEY in check_helper_mem_access\n  bpf: Check PTR_TO_MEM | MEM_RDONLY in check_helper_mem_access\n  ...\n====================\n\nLink: https://lore.kernel.org/r/20220408231741.19116-1-daniel@iogearbox.net\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>",
  "author_name": "Jakub Kicinski",
  "author_email": "kuba@kernel.org",
  "author_date": "Fri Apr 8 17:07:29 2022 -0700",
  "author_date_iso": "2022-04-08T17:07:29-07:00",
  "committer_name": "Jakub Kicinski",
  "committer_email": "kuba@kernel.org",
  "committer_date": "Fri Apr 8 17:07:29 2022 -0700",
  "committer_date_iso": "2022-04-08T17:07:29-07:00",
  "files_changed": [
    "kernel/trace/bpf_trace.c",
    "tools/lib/bpf/Makefile"
  ],
  "files_changed_count": 2,
  "stats": [
    {
      "file": "arch/arm64/include/asm/insn.h",
      "insertions": 9,
      "deletions": 0
    },
    {
      "file": "arch/arm64/lib/insn.c",
      "insertions": 53,
      "deletions": 14
    },
    {
      "file": "arch/arm64/net/bpf_jit.h",
      "insertions": 17,
      "deletions": 0
    },
    {
      "file": "arch/arm64/net/bpf_jit_comp.c",
      "insertions": 236,
      "deletions": 19
    },
    {
      "file": "include/uapi/linux/btf.h",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "kernel/bpf/bpf_iter.c",
      "insertions": 14,
      "deletions": 16
    },
    {
      "file": "kernel/bpf/stackmap.c",
      "insertions": 0,
      "deletions": 2
    },
    {
      "file": "kernel/bpf/verifier.c",
      "insertions": 45,
      "deletions": 16
    },
    {
      "file": "kernel/trace/bpf_trace.c",
      "insertions": 2,
      "deletions": 4
    },
    {
      "file": "lib/test_bpf.c",
      "insertions": 311,
      "deletions": 4
    },
    {
      "file": "net/netfilter/nf_conntrack_bpf.c",
      "insertions": 15,
      "deletions": 7
    },
    {
      "file": "samples/bpf/Makefile",
      "insertions": 7,
      "deletions": 3
    },
    {
      "file": "samples/bpf/syscall_tp_user.c",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "samples/bpf/xdp_router_ipv4.bpf.c",
      "insertions": 180,
      "deletions": 0
    },
    {
      "file": "samples/bpf/xdp_router_ipv4_kern.c",
      "insertions": 0,
      "deletions": 186
    },
    {
      "file": "samples/bpf/xdp_router_ipv4_user.c",
      "insertions": 201,
      "deletions": 254
    },
    {
      "file": "tools/bpf/bpftool/feature.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "tools/bpf/bpftool/link.c",
      "insertions": 3,
      "deletions": 0
    },
    {
      "file": "tools/bpf/bpftool/prog.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "tools/include/uapi/linux/btf.h",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "tools/lib/bpf/Build",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "tools/lib/bpf/Makefile",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "tools/lib/bpf/btf.c",
      "insertions": 2,
      "deletions": 4
    },
    {
      "file": "tools/lib/bpf/libbpf.c",
      "insertions": 471,
      "deletions": 17
    },
    {
      "file": "tools/lib/bpf/libbpf.h",
      "insertions": 40,
      "deletions": 1
    },
    {
      "file": "tools/lib/bpf/libbpf.map",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "tools/lib/bpf/libbpf_internal.h",
      "insertions": 30,
      "deletions": 0
    },
    {
      "file": "tools/lib/bpf/usdt.bpf.h",
      "insertions": 259,
      "deletions": 0
    },
    {
      "file": "tools/lib/bpf/usdt.c",
      "insertions": 1335,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/Makefile",
      "insertions": 17,
      "deletions": 8
    },
    {
      "file": "tools/testing/selftests/bpf/prog_tests/attach_probe.c",
      "insertions": 70,
      "deletions": 15
    },
    {
      "file": "tools/testing/selftests/bpf/prog_tests/for_each.c",
      "insertions": 12,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/prog_tests/ksyms_btf.c",
      "insertions": 12,
      "deletions": 5
    },
    {
      "file": "tools/testing/selftests/bpf/prog_tests/netcnt.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "tools/testing/selftests/bpf/prog_tests/test_global_funcs.c",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/prog_tests/uprobe_autoattach.c",
      "insertions": 49,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/prog_tests/usdt.c",
      "insertions": 421,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/progs/for_each_map_elem_write_key.c",
      "insertions": 27,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/progs/linked_funcs1.c",
      "insertions": 8,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/progs/linked_funcs2.c",
      "insertions": 8,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/progs/perf_event_stackmap.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "tools/testing/selftests/bpf/progs/profiler.inc.h",
      "insertions": 3,
      "deletions": 2
    },
    {
      "file": "tools/testing/selftests/bpf/progs/test_attach_probe.c",
      "insertions": 39,
      "deletions": 2
    },
    {
      "file": "tools/testing/selftests/bpf/progs/test_bpf_cookie.c",
      "insertions": 2,
      "deletions": 2
    },
    {
      "file": "tools/testing/selftests/bpf/progs/test_global_func17.c",
      "insertions": 16,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/progs/test_ksyms_btf_write_check.c",
      "insertions": 17,
      "deletions": 1
    },
    {
      "file": "tools/testing/selftests/bpf/progs/test_l4lb_noinline.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "tools/testing/selftests/bpf/progs/test_sk_assign.c",
      "insertions": 1,
      "deletions": 3
    },
    {
      "file": "tools/testing/selftests/bpf/progs/test_task_pt_regs.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "tools/testing/selftests/bpf/progs/test_uprobe_autoattach.c",
      "insertions": 73,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/progs/test_urandom_usdt.c",
      "insertions": 70,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/progs/test_usdt.c",
      "insertions": 96,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/progs/test_usdt_multispec.c",
      "insertions": 32,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/progs/test_xdp_noinline.c",
      "insertions": 6,
      "deletions": 6
    },
    {
      "file": "tools/testing/selftests/bpf/progs/trigger_bench.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "tools/testing/selftests/bpf/sdt-config.h",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/sdt.h",
      "insertions": 513,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/test_bpftool_synctypes.py",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "tools/testing/selftests/bpf/test_cgroup_storage.c",
      "insertions": 2,
      "deletions": 1
    },
    {
      "file": "tools/testing/selftests/bpf/test_offload.py",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "tools/testing/selftests/bpf/test_progs.c",
      "insertions": 4,
      "deletions": 2
    },
    {
      "file": "tools/testing/selftests/bpf/test_progs.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/testing_helpers.c",
      "insertions": 1,
      "deletions": 1
    },
    {
      "file": "tools/testing/selftests/bpf/trace_helpers.c",
      "insertions": 5,
      "deletions": 4
    },
    {
      "file": "tools/testing/selftests/bpf/urandom_read.c",
      "insertions": 58,
      "deletions": 5
    },
    {
      "file": "tools/testing/selftests/bpf/urandom_read_aux.c",
      "insertions": 9,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/urandom_read_lib1.c",
      "insertions": 13,
      "deletions": 0
    },
    {
      "file": "tools/testing/selftests/bpf/urandom_read_lib2.c",
      "insertions": 8,
      "deletions": 0
    }
  ],
  "total_insertions": 4852,
  "total_deletions": 619,
  "total_changes": 5471,
  "parents": [
    "bd4a2697e5e27a33d345827dfbdebb8f28f4aa87",
    "b45043192b3e481304062938a6561da2ceea46a6"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "kernel/trace/bpf_trace.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "tools/lib/bpf/Makefile",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}