{
  "hash": "0ef3a56b1c466629cd0bf482b09c7b0e5a085bb5",
  "hash_short": "0ef3a56b",
  "subject": "Merge branch 'CVE-2014-7975' of git://git.kernel.org/pub/scm/linux/kernel/git/luto/linux",
  "body": "Pull do_umount fix from Andy Lutomirski:\n \"This fix really ought to be safe.  Inside a mountns owned by a\n  non-root user namespace, the namespace root almost always has\n  MNT_LOCKED set (if it doesn't, then there's a bug, because rootfs\n  could be exposed).  In that case, calling umount on \"/\" will return\n  -EINVAL with or without this patch.\n\n  Outside a userns, this patch will have no effect.  may_mount, required\n  by umount, already checks\n     ns_capable(current->nsproxy->mnt_ns->user_ns, CAP_SYS_ADMIN)\n  so an additional capable(CAP_SYS_ADMIN) check will have no effect.\n\n  That leaves anything that calls umount on \"/\" in a non-root userns\n  while chrooted.  This is the case that is currently broken (it\n  remounts ro, which shouldn't be allowed) and that my patch changes to\n  -EPERM.  If anything relies on *that*, I'd be surprised\"\n\n* 'CVE-2014-7975' of git://git.kernel.org/pub/scm/linux/kernel/git/luto/linux:\n  fs: Add a missing permission check to do_umount",
  "full_message": "Merge branch 'CVE-2014-7975' of git://git.kernel.org/pub/scm/linux/kernel/git/luto/linux\n\nPull do_umount fix from Andy Lutomirski:\n \"This fix really ought to be safe.  Inside a mountns owned by a\n  non-root user namespace, the namespace root almost always has\n  MNT_LOCKED set (if it doesn't, then there's a bug, because rootfs\n  could be exposed).  In that case, calling umount on \"/\" will return\n  -EINVAL with or without this patch.\n\n  Outside a userns, this patch will have no effect.  may_mount, required\n  by umount, already checks\n     ns_capable(current->nsproxy->mnt_ns->user_ns, CAP_SYS_ADMIN)\n  so an additional capable(CAP_SYS_ADMIN) check will have no effect.\n\n  That leaves anything that calls umount on \"/\" in a non-root userns\n  while chrooted.  This is the case that is currently broken (it\n  remounts ro, which shouldn't be allowed) and that my patch changes to\n  -EPERM.  If anything relies on *that*, I'd be surprised\"\n\n* 'CVE-2014-7975' of git://git.kernel.org/pub/scm/linux/kernel/git/luto/linux:\n  fs: Add a missing permission check to do_umount",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Tue Oct 14 08:35:01 2014 +0200",
  "author_date_iso": "2014-10-14T08:35:01+02:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Tue Oct 14 08:35:01 2014 +0200",
  "committer_date_iso": "2014-10-14T08:35:01+02:00",
  "files_changed": [
    "fs/namespace.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "fs/namespace.c",
      "insertions": 2,
      "deletions": 0
    }
  ],
  "total_insertions": 2,
  "total_deletions": 0,
  "total_changes": 2,
  "parents": [
    "dfe2c6dcc8ca2cdc662d7c0473e9811b72ef3370",
    "a1480dcc3c706e309a88884723446f2e84fedd5b"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v3.18",
    "v3.18-rc1",
    "v3.18-rc2",
    "v3.18-rc3",
    "v3.18-rc4",
    "v3.18-rc5",
    "v3.18-rc6",
    "v3.18-rc7",
    "v3.19",
    "v3.19-rc1"
  ],
  "is_merge": true,
  "security_info": {
    "cve_ids": [
      "CVE-2014-7975",
      "CVE-2014-7975",
      "CVE-2014-7975"
    ],
    "security_keywords": []
  },
  "fix_type": "cve",
  "file_results": [
    {
      "file": "fs/namespace.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}