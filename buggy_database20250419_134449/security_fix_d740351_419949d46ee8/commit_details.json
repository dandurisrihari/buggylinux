{
  "hash": "d740351bf0960e89ce1aef45cfe00167cb0f9e5b",
  "hash_short": "d740351b",
  "subject": "NFS: add \"[no]resvport\" mount option",
  "body": "The standard default security setting for NFS is AUTH_SYS.  An NFS\nclient connects to NFS servers via a privileged source port and a\nfixed standard destination port (2049).  The client sends raw uid and\ngid numbers to identify users making NFS requests, and the server\nassumes an appropriate authority on the client has vetted these\nvalues because the source port is privileged.\n\nOn Linux, by default in-kernel RPC services use a privileged port in\nthe range between 650 and 1023 to avoid using source ports of well-\nknown IP services.  Using such a small range limits the number of NFS\nmount points and the number of unique NFS servers to which a client\ncan connect concurrently.\n\nAn NFS client can use unprivileged source ports to expand the range of\nsource port numbers, allowing more concurrent server connections and\nmore NFS mount points.  Servers must explicitly allow NFS connections\nfrom unprivileged ports for this to work.\n\nIn the past, bumping the value of the sunrpc.max_resvport sysctl on\nthe client would permit the NFS client to use unprivileged ports.\nBumping this setting also changes the maximum port number used by\nother in-kernel RPC services, some of which still required a port\nnumber less than 1023.\n\nThis is exacerbated by the way source port numbers are chosen by the\nLinux RPC client, which starts at the top of the range and works\ndownwards.  It means that bumping the maximum means all RPC services\nrequesting a source port will likely get an unprivileged port instead\nof a privileged one.\n\nChanging this setting effects all NFS mount points on a client.  A\nsysadmin could not selectively choose which mount points would use\nnon-privileged ports and which could not.\n\nLastly, this mechanism of expanding the limit on the number of NFS\nmount points was entirely undocumented.\n\nTo address the need for the NFS client to use a large range of source\nports without interfering with the activity of other in-kernel RPC\nservices, we introduce a new NFS mount option.  This option explicitly\ntells only the NFS client to use a non-privileged source port when\ncommunicating with the NFS server for one specific mount point.\n\nThis new mount option is called \"resvport,\" like the similar NFS mount\noption on FreeBSD and Mac OS X.  A sister patch for nfs-utils will be\nsubmitted that documents this new option in nfs(5).\n\nThe default setting for this new mount option requires the NFS client\nto use a privileged port, as before.  Explicitly specifying the\n\"noresvport\" mount option allows the NFS client to use an unprivileged\nsource port for this mount point when connecting to the NFS server\nport.\n\nThis mount option is supported only for text-based NFS mounts.\n\n[ Sidebar: it is widely known that security mechanisms based on the\n  use of privileged source ports are ineffective.  However, the NFS\n  client can combine the use of unprivileged ports with the use of\n  secure authentication mechanisms, such as Kerberos.  This allows a\n  large number of connections and mount points while ensuring a useful\n  level of security.\n\n  Eventually we may change the default setting for this option\n  depending on the security flavor used for the mount.  For example,\n  if the mount is using only AUTH_SYS, then the default setting will\n  be \"resvport;\" if the mount is using a strong security flavor such\n  as krb5, the default setting will be \"noresvport.\" ]\n\nSigned-off-by: Chuck Lever <chuck.lever@oracle.com>\n[Trond.Myklebust@netapp.com: Fixed a bug whereby nfs4_init_client()\nwas being called with incorrect arguments.]\nSigned-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>",
  "full_message": "NFS: add \"[no]resvport\" mount option\n\nThe standard default security setting for NFS is AUTH_SYS.  An NFS\nclient connects to NFS servers via a privileged source port and a\nfixed standard destination port (2049).  The client sends raw uid and\ngid numbers to identify users making NFS requests, and the server\nassumes an appropriate authority on the client has vetted these\nvalues because the source port is privileged.\n\nOn Linux, by default in-kernel RPC services use a privileged port in\nthe range between 650 and 1023 to avoid using source ports of well-\nknown IP services.  Using such a small range limits the number of NFS\nmount points and the number of unique NFS servers to which a client\ncan connect concurrently.\n\nAn NFS client can use unprivileged source ports to expand the range of\nsource port numbers, allowing more concurrent server connections and\nmore NFS mount points.  Servers must explicitly allow NFS connections\nfrom unprivileged ports for this to work.\n\nIn the past, bumping the value of the sunrpc.max_resvport sysctl on\nthe client would permit the NFS client to use unprivileged ports.\nBumping this setting also changes the maximum port number used by\nother in-kernel RPC services, some of which still required a port\nnumber less than 1023.\n\nThis is exacerbated by the way source port numbers are chosen by the\nLinux RPC client, which starts at the top of the range and works\ndownwards.  It means that bumping the maximum means all RPC services\nrequesting a source port will likely get an unprivileged port instead\nof a privileged one.\n\nChanging this setting effects all NFS mount points on a client.  A\nsysadmin could not selectively choose which mount points would use\nnon-privileged ports and which could not.\n\nLastly, this mechanism of expanding the limit on the number of NFS\nmount points was entirely undocumented.\n\nTo address the need for the NFS client to use a large range of source\nports without interfering with the activity of other in-kernel RPC\nservices, we introduce a new NFS mount option.  This option explicitly\ntells only the NFS client to use a non-privileged source port when\ncommunicating with the NFS server for one specific mount point.\n\nThis new mount option is called \"resvport,\" like the similar NFS mount\noption on FreeBSD and Mac OS X.  A sister patch for nfs-utils will be\nsubmitted that documents this new option in nfs(5).\n\nThe default setting for this new mount option requires the NFS client\nto use a privileged port, as before.  Explicitly specifying the\n\"noresvport\" mount option allows the NFS client to use an unprivileged\nsource port for this mount point when connecting to the NFS server\nport.\n\nThis mount option is supported only for text-based NFS mounts.\n\n[ Sidebar: it is widely known that security mechanisms based on the\n  use of privileged source ports are ineffective.  However, the NFS\n  client can combine the use of unprivileged ports with the use of\n  secure authentication mechanisms, such as Kerberos.  This allows a\n  large number of connections and mount points while ensuring a useful\n  level of security.\n\n  Eventually we may change the default setting for this option\n  depending on the security flavor used for the mount.  For example,\n  if the mount is using only AUTH_SYS, then the default setting will\n  be \"resvport;\" if the mount is using a strong security flavor such\n  as krb5, the default setting will be \"noresvport.\" ]\n\nSigned-off-by: Chuck Lever <chuck.lever@oracle.com>\n[Trond.Myklebust@netapp.com: Fixed a bug whereby nfs4_init_client()\nwas being called with incorrect arguments.]\nSigned-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>",
  "author_name": "Chuck Lever",
  "author_email": "chuck.lever@oracle.com",
  "author_date": "Tue Dec 23 15:21:37 2008 -0500",
  "author_date_iso": "2008-12-23T15:21:37-05:00",
  "committer_name": "Trond Myklebust",
  "committer_email": "Trond.Myklebust@netapp.com",
  "committer_date": "Tue Dec 23 15:21:37 2008 -0500",
  "committer_date_iso": "2008-12-23T15:21:37-05:00",
  "files_changed": [
    "fs/nfs/client.c",
    "fs/nfs/super.c",
    "include/linux/nfs_mount.h"
  ],
  "files_changed_count": 3,
  "stats": [
    {
      "file": "fs/nfs/client.c",
      "insertions": 7,
      "deletions": 4
    },
    {
      "file": "fs/nfs/super.c",
      "insertions": 11,
      "deletions": 1
    },
    {
      "file": "include/linux/nfs_mount.h",
      "insertions": 2,
      "deletions": 1
    }
  ],
  "total_insertions": 20,
  "total_deletions": 6,
  "total_changes": 26,
  "parents": [
    "542fcc334adfea36d407cbf698d549fcb2bf6b91"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v2.6.29",
    "v2.6.29-rc1",
    "v2.6.29-rc2",
    "v2.6.29-rc3",
    "v2.6.29-rc4",
    "v2.6.29-rc5",
    "v2.6.29-rc6",
    "v2.6.29-rc7",
    "v2.6.29-rc8",
    "v2.6.30"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/nfs/client.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "fs/nfs/super.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "include/linux/nfs_mount.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}