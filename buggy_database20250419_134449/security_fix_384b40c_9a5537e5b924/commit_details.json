{
  "hash": "384b40caa8afae44a54e8f69bd37097c0279fdce",
  "hash_short": "384b40ca",
  "subject": "KVM: arm/arm64: Context-switch ptrauth registers",
  "body": "When pointer authentication is supported, a guest may wish to use it.\nThis patch adds the necessary KVM infrastructure for this to work, with\na semi-lazy context switch of the pointer auth state.\n\nPointer authentication feature is only enabled when VHE is built\nin the kernel and present in the CPU implementation so only VHE code\npaths are modified.\n\nWhen we schedule a vcpu, we disable guest usage of pointer\nauthentication instructions and accesses to the keys. While these are\ndisabled, we avoid context-switching the keys. When we trap the guest\ntrying to use pointer authentication functionality, we change to eagerly\ncontext-switching the keys, and enable the feature. The next time the\nvcpu is scheduled out/in, we start again. However the host key save is\noptimized and implemented inside ptrauth instruction/register access\ntrap.\n\nPointer authentication consists of address authentication and generic\nauthentication, and CPUs in a system might have varied support for\neither. Where support for either feature is not uniform, it is hidden\nfrom guests via ID register emulation, as a result of the cpufeature\nframework in the host.\n\nUnfortunately, address authentication and generic authentication cannot\nbe trapped separately, as the architecture provides a single EL2 trap\ncovering both. If we wish to expose one without the other, we cannot\nprevent a (badly-written) guest from intermittently using a feature\nwhich is not uniformly supported (when scheduled on a physical CPU which\nsupports the relevant feature). Hence, this patch expects both type of\nauthentication to be present in a cpu.\n\nThis switch of key is done from guest enter/exit assembly as preparation\nfor the upcoming in-kernel pointer authentication support. Hence, these\nkey switching routines are not implemented in C code as they may cause\npointer authentication key signing error in some situations.\n\nSigned-off-by: Mark Rutland <mark.rutland@arm.com>\n[Only VHE, key switch in full assembly, vcpu_has_ptrauth checks\n, save host key in ptrauth exception trap]\nSigned-off-by: Amit Daniel Kachhap <amit.kachhap@arm.com>\nReviewed-by: Julien Thierry <julien.thierry@arm.com>\nCc: Christoffer Dall <christoffer.dall@arm.com>\nCc: kvmarm@lists.cs.columbia.edu\n[maz: various fixups]\nSigned-off-by: Marc Zyngier <marc.zyngier@arm.com>",
  "full_message": "KVM: arm/arm64: Context-switch ptrauth registers\n\nWhen pointer authentication is supported, a guest may wish to use it.\nThis patch adds the necessary KVM infrastructure for this to work, with\na semi-lazy context switch of the pointer auth state.\n\nPointer authentication feature is only enabled when VHE is built\nin the kernel and present in the CPU implementation so only VHE code\npaths are modified.\n\nWhen we schedule a vcpu, we disable guest usage of pointer\nauthentication instructions and accesses to the keys. While these are\ndisabled, we avoid context-switching the keys. When we trap the guest\ntrying to use pointer authentication functionality, we change to eagerly\ncontext-switching the keys, and enable the feature. The next time the\nvcpu is scheduled out/in, we start again. However the host key save is\noptimized and implemented inside ptrauth instruction/register access\ntrap.\n\nPointer authentication consists of address authentication and generic\nauthentication, and CPUs in a system might have varied support for\neither. Where support for either feature is not uniform, it is hidden\nfrom guests via ID register emulation, as a result of the cpufeature\nframework in the host.\n\nUnfortunately, address authentication and generic authentication cannot\nbe trapped separately, as the architecture provides a single EL2 trap\ncovering both. If we wish to expose one without the other, we cannot\nprevent a (badly-written) guest from intermittently using a feature\nwhich is not uniformly supported (when scheduled on a physical CPU which\nsupports the relevant feature). Hence, this patch expects both type of\nauthentication to be present in a cpu.\n\nThis switch of key is done from guest enter/exit assembly as preparation\nfor the upcoming in-kernel pointer authentication support. Hence, these\nkey switching routines are not implemented in C code as they may cause\npointer authentication key signing error in some situations.\n\nSigned-off-by: Mark Rutland <mark.rutland@arm.com>\n[Only VHE, key switch in full assembly, vcpu_has_ptrauth checks\n, save host key in ptrauth exception trap]\nSigned-off-by: Amit Daniel Kachhap <amit.kachhap@arm.com>\nReviewed-by: Julien Thierry <julien.thierry@arm.com>\nCc: Christoffer Dall <christoffer.dall@arm.com>\nCc: kvmarm@lists.cs.columbia.edu\n[maz: various fixups]\nSigned-off-by: Marc Zyngier <marc.zyngier@arm.com>",
  "author_name": "Mark Rutland",
  "author_email": "mark.rutland@arm.com",
  "author_date": "Tue Apr 23 10:12:35 2019 +0530",
  "author_date_iso": "2019-04-23T10:12:35+05:30",
  "committer_name": "Marc Zyngier",
  "committer_email": "marc.zyngier@arm.com",
  "committer_date": "Wed Apr 24 15:30:40 2019 +0100",
  "committer_date_iso": "2019-04-24T15:30:40+01:00",
  "files_changed": [
    "arch/arm/include/asm/kvm_emulate.h",
    "arch/arm64/Kconfig",
    "arch/arm64/include/asm/kvm_emulate.h",
    "arch/arm64/include/asm/kvm_host.h",
    "arch/arm64/include/asm/kvm_ptrauth.h",
    "arch/arm64/kernel/asm-offsets.c",
    "arch/arm64/kvm/handle_exit.c",
    "arch/arm64/kvm/hyp/entry.S",
    "arch/arm64/kvm/sys_regs.c",
    "virt/kvm/arm/arm.c"
  ],
  "files_changed_count": 10,
  "stats": [
    {
      "file": "arch/arm/include/asm/kvm_emulate.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "arch/arm64/Kconfig",
      "insertions": 4,
      "deletions": 2
    },
    {
      "file": "arch/arm64/include/asm/kvm_emulate.h",
      "insertions": 16,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/kvm_host.h",
      "insertions": 14,
      "deletions": 0
    },
    {
      "file": "arch/arm64/include/asm/kvm_ptrauth.h",
      "insertions": 111,
      "deletions": 0
    },
    {
      "file": "arch/arm64/kernel/asm-offsets.c",
      "insertions": 6,
      "deletions": 0
    },
    {
      "file": "arch/arm64/kvm/handle_exit.c",
      "insertions": 28,
      "deletions": 8
    },
    {
      "file": "arch/arm64/kvm/hyp/entry.S",
      "insertions": 15,
      "deletions": 0
    },
    {
      "file": "arch/arm64/kvm/sys_regs.c",
      "insertions": 42,
      "deletions": 8
    },
    {
      "file": "virt/kvm/arm/arm.c",
      "insertions": 2,
      "deletions": 0
    }
  ],
  "total_insertions": 240,
  "total_deletions": 18,
  "total_changes": 258,
  "parents": [
    "b890d75c4cdc963c96e7774b088120966c23ab8e"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.2",
    "v5.2-rc1",
    "v5.2-rc2",
    "v5.2-rc3",
    "v5.2-rc4",
    "v5.2-rc5",
    "v5.2-rc6",
    "v5.2-rc7",
    "v5.3",
    "v5.3-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "authentication"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/arm64/Kconfig",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/asm/kvm_ptrauth.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm/include/asm/kvm_emulate.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kvm/hyp/entry.S",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/asm/kvm_emulate.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/include/asm/kvm_host.h",
      "pre_version": true,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kernel/asm-offsets.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kvm/sys_regs.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "virt/kvm/arm/arm.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/arm64/kvm/handle_exit.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}