{
  "hash": "8f66b1a529047a972cb9602a919c53a95f3d7a2b",
  "hash_short": "8f66b1a5",
  "subject": "xprtrdma: Don't defer fencing an async RPC's chunks",
  "body": "In current kernels, waiting in xprt_release appears to be safe to\ndo. I had erroneously believed that for ASYNC RPCs, waiting of any\nkind in xprt_release->xprt_rdma_free would result in deadlock. I've\ndone injection testing and consulted with Trond to confirm that\nwaiting in the RPC release path is safe.\n\nFor the very few times where RPC resources haven't yet been released\nearlier by the reply handler, it is safe to wait synchronously in\nxprt_rdma_free for invalidation rather than defering it to MR\nrecovery.\n\nNote: When the QP is error state, posting a LocalInvalidate should\nflush and mark the MR as bad. There is no way the remote HCA can\naccess that MR via a QP in error state, so it is effectively already\ninaccessible and thus safe for the Upper Layer to access. The next\ntime the MR is used it should be recognized and cleaned up properly\nby frwr_op_map.\n\nSigned-off-by: Chuck Lever <chuck.lever@oracle.com>\nSigned-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>",
  "full_message": "xprtrdma: Don't defer fencing an async RPC's chunks\n\nIn current kernels, waiting in xprt_release appears to be safe to\ndo. I had erroneously believed that for ASYNC RPCs, waiting of any\nkind in xprt_release->xprt_rdma_free would result in deadlock. I've\ndone injection testing and consulted with Trond to confirm that\nwaiting in the RPC release path is safe.\n\nFor the very few times where RPC resources haven't yet been released\nearlier by the reply handler, it is safe to wait synchronously in\nxprt_rdma_free for invalidation rather than defering it to MR\nrecovery.\n\nNote: When the QP is error state, posting a LocalInvalidate should\nflush and mark the MR as bad. There is no way the remote HCA can\naccess that MR via a QP in error state, so it is effectively already\ninaccessible and thus safe for the Upper Layer to access. The next\ntime the MR is used it should be recognized and cleaned up properly\nby frwr_op_map.\n\nSigned-off-by: Chuck Lever <chuck.lever@oracle.com>\nSigned-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>",
  "author_name": "Chuck Lever",
  "author_email": "chuck.lever@oracle.com",
  "author_date": "Mon Oct 9 12:03:26 2017 -0400",
  "author_date_iso": "2017-10-09T12:03:26-04:00",
  "committer_name": "Anna Schumaker",
  "committer_email": "Anna.Schumaker@Netapp.com",
  "committer_date": "Mon Oct 16 13:51:27 2017 -0400",
  "committer_date_iso": "2017-10-16T13:51:27-04:00",
  "files_changed": [
    "net/sunrpc/xprtrdma/transport.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "net/sunrpc/xprtrdma/transport.c",
      "insertions": 1,
      "deletions": 1
    }
  ],
  "total_insertions": 1,
  "total_deletions": 1,
  "total_changes": 2,
  "parents": [
    "1fea73ac92f628538032ce746f7dd5d6f8dfcc32"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.15",
    "v4.15-rc1",
    "v4.15-rc2",
    "v4.15-rc3",
    "v4.15-rc4",
    "v4.15-rc5",
    "v4.15-rc6",
    "v4.15-rc7",
    "v4.15-rc8",
    "v4.15-rc9"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "net/sunrpc/xprtrdma/transport.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}