{
  "hash": "8b4d37db9a566deaf22065ba1ba9b19c9fb964b4",
  "hash_short": "8b4d37db",
  "subject": "Merge branch 'x86/srbds' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip",
  "body": "Pull x86 srbds fixes from Thomas Gleixner:\n \"The 9th episode of the dime novel \"The performance killer\" with the\n  subtitle \"Slow Randomizing Boosts Denial of Service\".\n\n  SRBDS is an MDS-like speculative side channel that can leak bits from\n  the random number generator (RNG) across cores and threads. New\n  microcode serializes the processor access during the execution of\n  RDRAND and RDSEED. This ensures that the shared buffer is overwritten\n  before it is released for reuse. This is equivalent to a full bus\n  lock, which means that many threads running the RNG instructions in\n  parallel have the same effect as the same amount of threads issuing a\n  locked instruction targeting an address which requires locking of two\n  cachelines at once.\n\n  The mitigation support comes with the usual pile of unpleasant\n  ingredients:\n\n   - command line options\n\n   - sysfs file\n\n   - microcode checks\n\n   - a list of vulnerable CPUs identified by model and stepping this\n     time which requires stepping match support for the cpu match logic.\n\n   - the inevitable slowdown of affected CPUs\"\n\n* branch 'x86/srbds' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:\n  x86/speculation: Add Ivy Bridge to affected list\n  x86/speculation: Add SRBDS vulnerability and mitigation documentation\n  x86/speculation: Add Special Register Buffer Data Sampling (SRBDS) mitigation\n  x86/cpu: Add 'table' argument to cpu_matches()",
  "full_message": "Merge branch 'x86/srbds' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip\n\nPull x86 srbds fixes from Thomas Gleixner:\n \"The 9th episode of the dime novel \"The performance killer\" with the\n  subtitle \"Slow Randomizing Boosts Denial of Service\".\n\n  SRBDS is an MDS-like speculative side channel that can leak bits from\n  the random number generator (RNG) across cores and threads. New\n  microcode serializes the processor access during the execution of\n  RDRAND and RDSEED. This ensures that the shared buffer is overwritten\n  before it is released for reuse. This is equivalent to a full bus\n  lock, which means that many threads running the RNG instructions in\n  parallel have the same effect as the same amount of threads issuing a\n  locked instruction targeting an address which requires locking of two\n  cachelines at once.\n\n  The mitigation support comes with the usual pile of unpleasant\n  ingredients:\n\n   - command line options\n\n   - sysfs file\n\n   - microcode checks\n\n   - a list of vulnerable CPUs identified by model and stepping this\n     time which requires stepping match support for the cpu match logic.\n\n   - the inevitable slowdown of affected CPUs\"\n\n* branch 'x86/srbds' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip:\n  x86/speculation: Add Ivy Bridge to affected list\n  x86/speculation: Add SRBDS vulnerability and mitigation documentation\n  x86/speculation: Add Special Register Buffer Data Sampling (SRBDS) mitigation\n  x86/cpu: Add 'table' argument to cpu_matches()",
  "author_name": "Linus Torvalds",
  "author_email": "torvalds@linux-foundation.org",
  "author_date": "Tue Jun 9 09:30:21 2020 -0700",
  "author_date_iso": "2020-06-09T09:30:21-07:00",
  "committer_name": "Linus Torvalds",
  "committer_email": "torvalds@linux-foundation.org",
  "committer_date": "Tue Jun 9 09:30:21 2020 -0700",
  "committer_date_iso": "2020-06-09T09:30:21-07:00",
  "files_changed": [
    "Documentation/ABI/testing/sysfs-devices-system-cpu",
    "Documentation/admin-guide/kernel-parameters.txt",
    "arch/x86/include/asm/msr-index.h",
    "arch/x86/kernel/cpu/common.c"
  ],
  "files_changed_count": 4,
  "stats": [
    {
      "file": "Documentation/ABI/testing/sysfs-devices-system-cpu",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "Documentation/admin-guide/hw-vuln/index.rst",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "Documentation/admin-guide/hw-vuln/special-register-buffer-data-sampling.rst",
      "insertions": 149,
      "deletions": 0
    },
    {
      "file": "Documentation/admin-guide/kernel-parameters.txt",
      "insertions": 20,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/cpufeatures.h",
      "insertions": 2,
      "deletions": 0
    },
    {
      "file": "arch/x86/include/asm/msr-index.h",
      "insertions": 4,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/cpu/bugs.c",
      "insertions": 106,
      "deletions": 0
    },
    {
      "file": "arch/x86/kernel/cpu/common.c",
      "insertions": 45,
      "deletions": 11
    },
    {
      "file": "arch/x86/kernel/cpu/cpu.h",
      "insertions": 1,
      "deletions": 0
    },
    {
      "file": "drivers/base/cpu.c",
      "insertions": 8,
      "deletions": 0
    }
  ],
  "total_insertions": 337,
  "total_deletions": 11,
  "total_changes": 348,
  "parents": [
    "abfbb29297c27e3f101f348dc9e467b0fe70f919",
    "3798cc4d106e91382bfe016caa2edada27c2bb3f"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": true,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "vulnerability"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "Documentation/ABI/testing/sysfs-devices-system-cpu",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "Documentation/admin-guide/kernel-parameters.txt",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/include/asm/msr-index.h",
      "pre_version": false,
      "post_version": true,
      "patch": true
    },
    {
      "file": "arch/x86/kernel/cpu/common.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}