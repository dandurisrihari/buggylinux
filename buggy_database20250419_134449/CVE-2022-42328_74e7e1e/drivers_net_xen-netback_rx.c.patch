commit 74e7e1efdad45580cc3839f2a155174cf158f9b5
Author: Juergen Gross <jgross@suse.com>
Date:   Tue Dec 6 08:54:24 2022 +0100

    xen/netback: don't call kfree_skb() with interrupts disabled
    
    It is not allowed to call kfree_skb() from hardware interrupt
    context or with interrupts being disabled. So remove kfree_skb()
    from the spin_lock_irqsave() section and use the already existing
    "drop" label in xenvif_start_xmit() for dropping the SKB. At the
    same time replace the dev_kfree_skb() call there with a call of
    dev_kfree_skb_any(), as xenvif_start_xmit() can be called with
    disabled interrupts.
    
    This is XSA-424 / CVE-2022-42328 / CVE-2022-42329.
    
    Fixes: be81992f9086 ("xen/netback: don't queue unlimited number of packages")
    Reported-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Juergen Gross <jgross@suse.com>

diff --git a/drivers/net/xen-netback/rx.c b/drivers/net/xen-netback/rx.c
index 932762177110..0ba754ebc5ba 100644
--- a/drivers/net/xen-netback/rx.c
+++ b/drivers/net/xen-netback/rx.c
@@ -82,9 +82,10 @@ static bool xenvif_rx_ring_slots_available(struct xenvif_queue *queue)
 	return false;
 }
 
-void xenvif_rx_queue_tail(struct xenvif_queue *queue, struct sk_buff *skb)
+bool xenvif_rx_queue_tail(struct xenvif_queue *queue, struct sk_buff *skb)
 {
 	unsigned long flags;
+	bool ret = true;
 
 	spin_lock_irqsave(&queue->rx_queue.lock, flags);
 
@@ -92,8 +93,7 @@ void xenvif_rx_queue_tail(struct xenvif_queue *queue, struct sk_buff *skb)
 		struct net_device *dev = queue->vif->dev;
 
 		netif_tx_stop_queue(netdev_get_tx_queue(dev, queue->id));
-		kfree_skb(skb);
-		queue->vif->dev->stats.rx_dropped++;
+		ret = false;
 	} else {
 		if (skb_queue_empty(&queue->rx_queue))
 			xenvif_update_needed_slots(queue, skb);
@@ -104,6 +104,8 @@ void xenvif_rx_queue_tail(struct xenvif_queue *queue, struct sk_buff *skb)
 	}
 
 	spin_unlock_irqrestore(&queue->rx_queue.lock, flags);
+
+	return ret;
 }
 
 static struct sk_buff *xenvif_rx_dequeue(struct xenvif_queue *queue)