{
  "hash": "22cda7c1680c1ddfe941adae45e7e7ef52d0e411",
  "hash_short": "22cda7c1",
  "subject": "powerpc/eeh: Add debugfs interface to run an EEH check",
  "body": "Detecting an frozen EEH PE usually occurs when an MMIO load returns a 0xFFs\nresponse. When performing EEH testing using the EEH error injection feature\navailable on some platforms there is no simple way to kick-off the kernel's\nrecovery process since any accesses from userspace (usually /dev/mem) will\nbypass the MMIO helpers in the kernel which check if a 0xFF response is due\nto an EEH freeze or not.\n\nIf a device contains a 0xFF byte in it's config space it's possible to\ntrigger the recovery process via config space read from userspace, but this\nis not a reliable method. If a driver is bound to the device an in use it\nwill frequently trigger the MMIO check, but this is also inconsistent.\n\nTo solve these problems this patch adds a debugfs file called\n\"eeh_dev_check\" which accepts a <domain>:<bus>:<dev>.<fn> string and runs\neeh_dev_check_failure() on it. This is the same check that's done when the\nkernel gets a 0xFF result from an config or MMIO read with the added\nbenifit that it can be reliably triggered from userspace.\n\nSigned-off-by: Oliver O'Halloran <oohall@gmail.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://lore.kernel.org/r/20190903101605.2890-13-oohall@gmail.com",
  "full_message": "powerpc/eeh: Add debugfs interface to run an EEH check\n\nDetecting an frozen EEH PE usually occurs when an MMIO load returns a 0xFFs\nresponse. When performing EEH testing using the EEH error injection feature\navailable on some platforms there is no simple way to kick-off the kernel's\nrecovery process since any accesses from userspace (usually /dev/mem) will\nbypass the MMIO helpers in the kernel which check if a 0xFF response is due\nto an EEH freeze or not.\n\nIf a device contains a 0xFF byte in it's config space it's possible to\ntrigger the recovery process via config space read from userspace, but this\nis not a reliable method. If a driver is bound to the device an in use it\nwill frequently trigger the MMIO check, but this is also inconsistent.\n\nTo solve these problems this patch adds a debugfs file called\n\"eeh_dev_check\" which accepts a <domain>:<bus>:<dev>.<fn> string and runs\neeh_dev_check_failure() on it. This is the same check that's done when the\nkernel gets a 0xFF result from an config or MMIO read with the added\nbenifit that it can be reliably triggered from userspace.\n\nSigned-off-by: Oliver O'Halloran <oohall@gmail.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://lore.kernel.org/r/20190903101605.2890-13-oohall@gmail.com",
  "author_name": "Oliver O'Halloran",
  "author_email": "oohall@gmail.com",
  "author_date": "Tue Sep 3 20:16:03 2019 +1000",
  "author_date_iso": "2019-09-03T20:16:03+10:00",
  "committer_name": "Michael Ellerman",
  "committer_email": "mpe@ellerman.id.au",
  "committer_date": "Thu Sep 5 14:22:39 2019 +1000",
  "committer_date_iso": "2019-09-05T14:22:39+10:00",
  "files_changed": [
    "arch/powerpc/kernel/eeh.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/powerpc/kernel/eeh.c",
      "insertions": 61,
      "deletions": 0
    }
  ],
  "total_insertions": 61,
  "total_deletions": 0,
  "total_changes": 61,
  "parents": [
    "aeff27c121ba7397c21a47c749e2b5be07f48c17"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.4",
    "v5.4-rc1",
    "v5.4-rc2",
    "v5.4-rc3",
    "v5.4-rc4",
    "v5.4-rc5",
    "v5.4-rc6",
    "v5.4-rc7",
    "v5.4-rc8",
    "v5.5"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection",
      "bypass"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/powerpc/kernel/eeh.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}