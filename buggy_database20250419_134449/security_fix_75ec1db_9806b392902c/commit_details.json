{
  "hash": "75ec1db8717a8f0a9d9c8d033e542fdaa7b73898",
  "hash_short": "75ec1db8",
  "subject": "btrfs: set update the uuid generation as soon as possible",
  "body": "In my EIO stress testing I noticed I was getting forced to rescan the\nuuid tree pretty often, which was weird.  This is because my error\ninjection stuff would sometimes inject an error after log replay but\nbefore we loaded the UUID tree.  If log replay committed the transaction\nit wouldn't have updated the uuid tree generation, but the tree was\nvalid and didn't change, so there's no reason to not update the\ngeneration here.\n\nFix this by setting the BTRFS_FS_UPDATE_UUID_TREE_GEN bit immediately\nafter reading all the fs roots if the uuid tree generation matches the\nfs generation.  Then any transaction commits that happen during mount\nwon't screw up our uuid tree state, forcing us to do needless uuid\nrescans.\n\nFixes: 70f801754728 (\"Btrfs: check UUID tree during mount if required\")\nCC: stable@vger.kernel.org # 4.19+\nSigned-off-by: Josef Bacik <josef@toxicpanda.com>\nReviewed-by: David Sterba <dsterba@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>",
  "full_message": "btrfs: set update the uuid generation as soon as possible\n\nIn my EIO stress testing I noticed I was getting forced to rescan the\nuuid tree pretty often, which was weird.  This is because my error\ninjection stuff would sometimes inject an error after log replay but\nbefore we loaded the UUID tree.  If log replay committed the transaction\nit wouldn't have updated the uuid tree generation, but the tree was\nvalid and didn't change, so there's no reason to not update the\ngeneration here.\n\nFix this by setting the BTRFS_FS_UPDATE_UUID_TREE_GEN bit immediately\nafter reading all the fs roots if the uuid tree generation matches the\nfs generation.  Then any transaction commits that happen during mount\nwon't screw up our uuid tree state, forcing us to do needless uuid\nrescans.\n\nFixes: 70f801754728 (\"Btrfs: check UUID tree during mount if required\")\nCC: stable@vger.kernel.org # 4.19+\nSigned-off-by: Josef Bacik <josef@toxicpanda.com>\nReviewed-by: David Sterba <dsterba@suse.com>\nSigned-off-by: David Sterba <dsterba@suse.com>",
  "author_name": "Josef Bacik",
  "author_email": "josef@toxicpanda.com",
  "author_date": "Fri Feb 14 15:22:06 2020 -0500",
  "author_date_iso": "2020-02-14T15:22:06-05:00",
  "committer_name": "David Sterba",
  "committer_email": "dsterba@suse.com",
  "committer_date": "Mon Mar 23 17:01:41 2020 +0100",
  "committer_date_iso": "2020-03-23T17:01:41+01:00",
  "files_changed": [
    "fs/btrfs/disk-io.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "fs/btrfs/disk-io.c",
      "insertions": 12,
      "deletions": 2
    }
  ],
  "total_insertions": 12,
  "total_deletions": 2,
  "total_changes": 14,
  "parents": [
    "c94bec2c6190a5d13f59c0f36a660be5e2d85644"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v5.7-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "injection"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/btrfs/disk-io.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}