{
  "hash": "aa30db060121f688d01f74f8d3fe603f7c4c731c",
  "hash_short": "aa30db06",
  "subject": "ALSA: pcm: Fix possible inconsistent appl_ptr update via mmap",
  "body": "The ALSA PCM core refers to the appl_ptr value stored on the mmapped\npage that is shared between kernel and user-space.  Although the\nreference is performed in the PCM stream lock, it doesn't guarantee\nthe atomic access when the value gets updated concurrently from the\nuser-space on another CPU.\n\nIn most of codes, this is no big problem, but still there are a few\nplaces that may result in slight inconsistencies because they access\nruntime->control->appl_ptr multiple times; that is, the second read\nmight be a different value from the first value.  It can be even\nbackward or jumping, as we have no control for it.  Hence, the\ncalculation may give an unexpected value.  Luckily, there is no\nsecurity vulnerability by that, as far as I've checked.  But still we\nshould address it.\n\nThis patch tries to reduce such possible cases.  The fix is simple --\nwe just read once, store it to a local variable and use it for the\nrest calculations.  The READ_ONCE() macro is used for it in order to\navoid the ill-effect by possible compiler optimizations.\n\nReviewed-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>\nSigned-off-by: Takashi Iwai <tiwai@suse.de>",
  "full_message": "ALSA: pcm: Fix possible inconsistent appl_ptr update via mmap\n\nThe ALSA PCM core refers to the appl_ptr value stored on the mmapped\npage that is shared between kernel and user-space.  Although the\nreference is performed in the PCM stream lock, it doesn't guarantee\nthe atomic access when the value gets updated concurrently from the\nuser-space on another CPU.\n\nIn most of codes, this is no big problem, but still there are a few\nplaces that may result in slight inconsistencies because they access\nruntime->control->appl_ptr multiple times; that is, the second read\nmight be a different value from the first value.  It can be even\nbackward or jumping, as we have no control for it.  Hence, the\ncalculation may give an unexpected value.  Luckily, there is no\nsecurity vulnerability by that, as far as I've checked.  But still we\nshould address it.\n\nThis patch tries to reduce such possible cases.  The fix is simple --\nwe just read once, store it to a local variable and use it for the\nrest calculations.  The READ_ONCE() macro is used for it in order to\navoid the ill-effect by possible compiler optimizations.\n\nReviewed-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>\nSigned-off-by: Takashi Iwai <tiwai@suse.de>",
  "author_name": "Takashi Iwai",
  "author_email": "tiwai@suse.de",
  "author_date": "Fri Jun 16 22:29:55 2017 +0200",
  "author_date_iso": "2017-06-16T22:29:55+02:00",
  "committer_name": "Takashi Iwai",
  "committer_email": "tiwai@suse.de",
  "committer_date": "Tue Jun 20 07:55:59 2017 +0200",
  "committer_date_iso": "2017-06-20T07:55:59+02:00",
  "files_changed": [
    "sound/core/pcm_lib.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "sound/core/pcm_lib.c",
      "insertions": 7,
      "deletions": 6
    }
  ],
  "total_insertions": 7,
  "total_deletions": 6,
  "total_changes": 13,
  "parents": [
    "eb8d0eaaf84b0398533a7c091a0b65663f2fd7ea"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.13",
    "v4.13-rc1",
    "v4.13-rc2",
    "v4.13-rc3",
    "v4.13-rc4",
    "v4.13-rc5",
    "v4.13-rc6",
    "v4.13-rc7",
    "v4.14",
    "v4.14-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "security vulnerability",
      "vulnerability"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "sound/core/pcm_lib.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}