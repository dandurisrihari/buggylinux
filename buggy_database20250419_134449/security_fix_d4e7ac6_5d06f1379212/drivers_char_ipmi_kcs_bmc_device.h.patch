commit d4e7ac68f771addc19352121706d8584eb0166cd
Author: Andrew Jeffery <andrew@aj.id.au>
Date:   Tue Jun 8 20:17:48 2021 +0930

    ipmi: kcs_bmc: Strip private client data from struct kcs_bmc
    
    Move all client-private data out of `struct kcs_bmc` into the KCS client
    implementation.
    
    With this change the KCS BMC core code now only concerns itself with
    abstract `struct kcs_bmc` and `struct kcs_bmc_client` types, achieving
    expected separation of concerns. Further, the change clears the path for
    implementation of alternative userspace interfaces.
    
    The chardev data-structures are rearranged in the same manner applied to
    the KCS device driver data-structures in an earlier patch - `struct
    kcs_bmc_client` is embedded in the client's private data and we exploit
    container_of() to translate as required.
    
    Finally, now that it is free of client data, `struct kcs_bmc` is renamed
    to `struct kcs_bmc_device` to contrast `struct kcs_bmc_client`.
    
    Signed-off-by: Andrew Jeffery <andrew@aj.id.au>
    Reviewed-by: Zev Weiss <zweiss@equinix.com>
    Message-Id: <20210608104757.582199-8-andrew@aj.id.au>
    Signed-off-by: Corey Minyard <cminyard@mvista.com>

diff --git a/drivers/char/ipmi/kcs_bmc_device.h b/drivers/char/ipmi/kcs_bmc_device.h
index dd8bf1307ad2..c9a4237bbf40 100644
--- a/drivers/char/ipmi/kcs_bmc_device.h
+++ b/drivers/char/ipmi/kcs_bmc_device.h
@@ -4,16 +4,18 @@
 #ifndef __KCS_BMC_DEVICE_H__
 #define __KCS_BMC_DEVICE_H__
 
+#include <linux/irqreturn.h>
+
 #include "kcs_bmc.h"
 
 struct kcs_bmc_device_ops {
-	u8 (*io_inputb)(struct kcs_bmc *kcs_bmc, u32 reg);
-	void (*io_outputb)(struct kcs_bmc *kcs_bmc, u32 reg, u8 b);
-	void (*io_updateb)(struct kcs_bmc *kcs_bmc, u32 reg, u8 mask, u8 b);
+	u8 (*io_inputb)(struct kcs_bmc_device *kcs_bmc, u32 reg);
+	void (*io_outputb)(struct kcs_bmc_device *kcs_bmc, u32 reg, u8 b);
+	void (*io_updateb)(struct kcs_bmc_device *kcs_bmc, u32 reg, u8 mask, u8 b);
 };
 
-irqreturn_t kcs_bmc_handle_event(struct kcs_bmc *kcs_bmc);
-int kcs_bmc_add_device(struct kcs_bmc *kcs_bmc);
-void kcs_bmc_remove_device(struct kcs_bmc *kcs_bmc);
+irqreturn_t kcs_bmc_handle_event(struct kcs_bmc_device *kcs_bmc);
+int kcs_bmc_add_device(struct kcs_bmc_device *kcs_bmc);
+void kcs_bmc_remove_device(struct kcs_bmc_device *kcs_bmc);
 
 #endif