commit df5f3cfc52fec828af92444bf02ad8fd4e4c59e3
Author: David Windsor <dave@nullcore.net>
Date:   Sat Jun 10 22:50:40 2017 -0400

    ufs: Define usercopy region in ufs_inode_cache slab cache
    
    The ufs symlink pathnames, stored in struct ufs_inode_info.i_u1.i_symlink
    and therefore contained in the ufs_inode_cache slab cache, need to be
    copied to/from userspace.
    
    cache object allocation:
        fs/ufs/super.c:
            ufs_alloc_inode(...):
                ...
                ei = kmem_cache_alloc(ufs_inode_cachep, GFP_NOFS);
                ...
                return &ei->vfs_inode;
    
        fs/ufs/ufs.h:
            UFS_I(struct inode *inode):
                return container_of(inode, struct ufs_inode_info, vfs_inode);
    
        fs/ufs/namei.c:
            ufs_symlink(...):
                ...
                inode->i_link = (char *)UFS_I(inode)->i_u1.i_symlink;
    
    example usage trace:
        readlink_copy+0x43/0x70
        vfs_readlink+0x62/0x110
        SyS_readlinkat+0x100/0x130
    
        fs/namei.c:
            readlink_copy(..., link):
                ...
                copy_to_user(..., link, len);
    
            (inlined in vfs_readlink)
            generic_readlink(dentry, ...):
                struct inode *inode = d_inode(dentry);
                const char *link = inode->i_link;
                ...
                readlink_copy(..., link);
    
    In support of usercopy hardening, this patch defines a region in the
    ufs_inode_cache slab cache in which userspace copy operations are allowed.
    
    This region is known as the slab cache's usercopy region. Slab caches
    can now check that each dynamically sized copy operation involving
    cache-managed memory falls entirely within the slab's usercopy region.
    
    This patch is modified from Brad Spengler/PaX Team's PAX_USERCOPY
    whitelisting code in the last public patch of grsecurity/PaX based on my
    understanding of the code. Changes or omissions from the original code are
    mine and don't reflect the original grsecurity/PaX code.
    
    Signed-off-by: David Windsor <dave@nullcore.net>
    [kees: adjust commit log, provide usage trace]
    Cc: Evgeniy Dushistov <dushistov@mail.ru>
    Signed-off-by: Kees Cook <keescook@chromium.org>

diff --git a/fs/ufs/super.c b/fs/ufs/super.c
index 4d497e9c6883..652a77702aec 100644
--- a/fs/ufs/super.c
+++ b/fs/ufs/super.c
@@ -1466,11 +1466,14 @@ static void init_once(void *foo)
 
 static int __init init_inodecache(void)
 {
-	ufs_inode_cachep = kmem_cache_create("ufs_inode_cache",
-					     sizeof(struct ufs_inode_info),
-					     0, (SLAB_RECLAIM_ACCOUNT|
-						SLAB_MEM_SPREAD|SLAB_ACCOUNT),
-					     init_once);
+	ufs_inode_cachep = kmem_cache_create_usercopy("ufs_inode_cache",
+				sizeof(struct ufs_inode_info), 0,
+				(SLAB_RECLAIM_ACCOUNT|SLAB_MEM_SPREAD|
+					SLAB_ACCOUNT),
+				offsetof(struct ufs_inode_info, i_u1.i_symlink),
+				sizeof_field(struct ufs_inode_info,
+					i_u1.i_symlink),
+				init_once);
 	if (ufs_inode_cachep == NULL)
 		return -ENOMEM;
 	return 0;