{
  "hash": "df5f3cfc52fec828af92444bf02ad8fd4e4c59e3",
  "hash_short": "df5f3cfc",
  "subject": "ufs: Define usercopy region in ufs_inode_cache slab cache",
  "body": "The ufs symlink pathnames, stored in struct ufs_inode_info.i_u1.i_symlink\nand therefore contained in the ufs_inode_cache slab cache, need to be\ncopied to/from userspace.\n\ncache object allocation:\n    fs/ufs/super.c:\n        ufs_alloc_inode(...):\n            ...\n            ei = kmem_cache_alloc(ufs_inode_cachep, GFP_NOFS);\n            ...\n            return &ei->vfs_inode;\n\n    fs/ufs/ufs.h:\n        UFS_I(struct inode *inode):\n            return container_of(inode, struct ufs_inode_info, vfs_inode);\n\n    fs/ufs/namei.c:\n        ufs_symlink(...):\n            ...\n            inode->i_link = (char *)UFS_I(inode)->i_u1.i_symlink;\n\nexample usage trace:\n    readlink_copy+0x43/0x70\n    vfs_readlink+0x62/0x110\n    SyS_readlinkat+0x100/0x130\n\n    fs/namei.c:\n        readlink_copy(..., link):\n            ...\n            copy_to_user(..., link, len);\n\n        (inlined in vfs_readlink)\n        generic_readlink(dentry, ...):\n            struct inode *inode = d_inode(dentry);\n            const char *link = inode->i_link;\n            ...\n            readlink_copy(..., link);\n\nIn support of usercopy hardening, this patch defines a region in the\nufs_inode_cache slab cache in which userspace copy operations are allowed.\n\nThis region is known as the slab cache's usercopy region. Slab caches\ncan now check that each dynamically sized copy operation involving\ncache-managed memory falls entirely within the slab's usercopy region.\n\nThis patch is modified from Brad Spengler/PaX Team's PAX_USERCOPY\nwhitelisting code in the last public patch of grsecurity/PaX based on my\nunderstanding of the code. Changes or omissions from the original code are\nmine and don't reflect the original grsecurity/PaX code.\n\nSigned-off-by: David Windsor <dave@nullcore.net>\n[kees: adjust commit log, provide usage trace]\nCc: Evgeniy Dushistov <dushistov@mail.ru>\nSigned-off-by: Kees Cook <keescook@chromium.org>",
  "full_message": "ufs: Define usercopy region in ufs_inode_cache slab cache\n\nThe ufs symlink pathnames, stored in struct ufs_inode_info.i_u1.i_symlink\nand therefore contained in the ufs_inode_cache slab cache, need to be\ncopied to/from userspace.\n\ncache object allocation:\n    fs/ufs/super.c:\n        ufs_alloc_inode(...):\n            ...\n            ei = kmem_cache_alloc(ufs_inode_cachep, GFP_NOFS);\n            ...\n            return &ei->vfs_inode;\n\n    fs/ufs/ufs.h:\n        UFS_I(struct inode *inode):\n            return container_of(inode, struct ufs_inode_info, vfs_inode);\n\n    fs/ufs/namei.c:\n        ufs_symlink(...):\n            ...\n            inode->i_link = (char *)UFS_I(inode)->i_u1.i_symlink;\n\nexample usage trace:\n    readlink_copy+0x43/0x70\n    vfs_readlink+0x62/0x110\n    SyS_readlinkat+0x100/0x130\n\n    fs/namei.c:\n        readlink_copy(..., link):\n            ...\n            copy_to_user(..., link, len);\n\n        (inlined in vfs_readlink)\n        generic_readlink(dentry, ...):\n            struct inode *inode = d_inode(dentry);\n            const char *link = inode->i_link;\n            ...\n            readlink_copy(..., link);\n\nIn support of usercopy hardening, this patch defines a region in the\nufs_inode_cache slab cache in which userspace copy operations are allowed.\n\nThis region is known as the slab cache's usercopy region. Slab caches\ncan now check that each dynamically sized copy operation involving\ncache-managed memory falls entirely within the slab's usercopy region.\n\nThis patch is modified from Brad Spengler/PaX Team's PAX_USERCOPY\nwhitelisting code in the last public patch of grsecurity/PaX based on my\nunderstanding of the code. Changes or omissions from the original code are\nmine and don't reflect the original grsecurity/PaX code.\n\nSigned-off-by: David Windsor <dave@nullcore.net>\n[kees: adjust commit log, provide usage trace]\nCc: Evgeniy Dushistov <dushistov@mail.ru>\nSigned-off-by: Kees Cook <keescook@chromium.org>",
  "author_name": "David Windsor",
  "author_email": "dave@nullcore.net",
  "author_date": "Sat Jun 10 22:50:40 2017 -0400",
  "author_date_iso": "2017-06-10T22:50:40-04:00",
  "committer_name": "Kees Cook",
  "committer_email": "keescook@chromium.org",
  "committer_date": "Mon Jan 15 12:07:56 2018 -0800",
  "committer_date_iso": "2018-01-15T12:07:56-08:00",
  "files_changed": [
    "fs/ufs/super.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "fs/ufs/super.c",
      "insertions": 8,
      "deletions": 5
    }
  ],
  "total_insertions": 8,
  "total_deletions": 5,
  "total_changes": 13,
  "parents": [
    "6b330623e56900db8db3634b782093289c8ad175"
  ],
  "branches": [
    "* development",
    "master",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [
    "v4.16",
    "v4.16-rc1",
    "v4.16-rc2",
    "v4.16-rc3",
    "v4.16-rc4",
    "v4.16-rc5",
    "v4.16-rc6",
    "v4.16-rc7",
    "v4.17",
    "v4.17-rc1"
  ],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "hardening"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "fs/ufs/super.c",
      "pre_version": false,
      "post_version": true,
      "patch": true
    }
  ]
}