{
  "hash": "9c70c7147ffec31de67d33243570a533b29f9759",
  "hash_short": "9c70c714",
  "subject": "bpf ppc64: Access only if addr is kernel address",
  "body": "On PPC64 with KUAP enabled, any kernel code which wants to\naccess userspace needs to be surrounded by disable-enable KUAP.\nBut that is not happening for BPF_PROBE_MEM load instruction.\nSo, when BPF program tries to access invalid userspace address,\npage-fault handler considers it as bad KUAP fault:\n\n  Kernel attempted to read user page (d0000000) - exploit attempt? (uid: 0)\n\nConsidering the fact that PTR_TO_BTF_ID (which uses BPF_PROBE_MEM\nmode) could either be a valid kernel pointer or NULL but should\nnever be a pointer to userspace address, execute BPF_PROBE_MEM load\nonly if addr is kernel address, otherwise set dst_reg=0 and move on.\n\nThis will catch NULL, valid or invalid userspace pointers. Only bad\nkernel pointer will be handled by BPF exception table.\n\n[Alexei suggested for x86]\n\nSuggested-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: Ravi Bangoria <ravi.bangoria@linux.ibm.com>\nSigned-off-by: Hari Bathini <hbathini@linux.ibm.com>\nReviewed-by: Christophe Leroy <christophe.leroy@csgroup.eu>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://lore.kernel.org/r/20211012123056.485795-7-hbathini@linux.ibm.com",
  "full_message": "bpf ppc64: Access only if addr is kernel address\n\nOn PPC64 with KUAP enabled, any kernel code which wants to\naccess userspace needs to be surrounded by disable-enable KUAP.\nBut that is not happening for BPF_PROBE_MEM load instruction.\nSo, when BPF program tries to access invalid userspace address,\npage-fault handler considers it as bad KUAP fault:\n\n  Kernel attempted to read user page (d0000000) - exploit attempt? (uid: 0)\n\nConsidering the fact that PTR_TO_BTF_ID (which uses BPF_PROBE_MEM\nmode) could either be a valid kernel pointer or NULL but should\nnever be a pointer to userspace address, execute BPF_PROBE_MEM load\nonly if addr is kernel address, otherwise set dst_reg=0 and move on.\n\nThis will catch NULL, valid or invalid userspace pointers. Only bad\nkernel pointer will be handled by BPF exception table.\n\n[Alexei suggested for x86]\n\nSuggested-by: Alexei Starovoitov <ast@kernel.org>\nSigned-off-by: Ravi Bangoria <ravi.bangoria@linux.ibm.com>\nSigned-off-by: Hari Bathini <hbathini@linux.ibm.com>\nReviewed-by: Christophe Leroy <christophe.leroy@csgroup.eu>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://lore.kernel.org/r/20211012123056.485795-7-hbathini@linux.ibm.com",
  "author_name": "Ravi Bangoria",
  "author_email": "ravi.bangoria@linux.ibm.com",
  "author_date": "Tue Oct 12 18:00:54 2021 +0530",
  "author_date_iso": "2021-10-12T18:00:54+05:30",
  "committer_name": "Michael Ellerman",
  "committer_email": "mpe@ellerman.id.au",
  "committer_date": "Thu Nov 25 11:25:32 2021 +1100",
  "committer_date_iso": "2021-11-25T11:25:32+11:00",
  "files_changed": [
    "arch/powerpc/net/bpf_jit_comp64.c"
  ],
  "files_changed_count": 1,
  "stats": [
    {
      "file": "arch/powerpc/net/bpf_jit_comp64.c",
      "insertions": 26,
      "deletions": 0
    }
  ],
  "total_insertions": 26,
  "total_deletions": 0,
  "total_changes": 26,
  "parents": [
    "983bdc0245a29cdefcd30d9d484d3edbc4b6d787"
  ],
  "branches": [
    "* development",
    "remotes/origin/HEAD -> origin/master",
    "remotes/origin/master"
  ],
  "tags": [],
  "is_merge": false,
  "security_info": {
    "cve_ids": [],
    "security_keywords": [
      "exploit"
    ]
  },
  "fix_type": "security",
  "file_results": [
    {
      "file": "arch/powerpc/net/bpf_jit_comp64.c",
      "pre_version": true,
      "post_version": true,
      "patch": true
    }
  ]
}