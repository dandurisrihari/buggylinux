commit 983bdc0245a29cdefcd30d9d484d3edbc4b6d787
Author: Ravi Bangoria <ravi.bangoria@linux.ibm.com>
Date:   Tue Oct 12 18:00:53 2021 +0530

    bpf ppc64: Add BPF_PROBE_MEM support for JIT
    
    BPF load instruction with BPF_PROBE_MEM mode can cause a fault
    inside kernel. Append exception table for such instructions
    within BPF program.
    
    Unlike other archs which uses extable 'fixup' field to pass dest_reg
    and nip, BPF exception table on PowerPC follows the generic PowerPC
    exception table design, where it populates both fixup and extable
    sections within BPF program. fixup section contains two instructions,
    first instruction clears dest_reg and 2nd jumps to next instruction
    in the BPF code. extable 'insn' field contains relative offset of
    the instruction and 'fixup' field contains relative offset of the
    fixup entry. Example layout of BPF program with extable present:
    
                 +------------------+
                 |                  |
                 |                  |
       0x4020 -->| ld   r27,4(r3)   |
                 |                  |
                 |                  |
       0x40ac -->| lwz  r3,0(r4)    |
                 |                  |
                 |                  |
                 |------------------|
       0x4280 -->| li  r27,0        |  \ fixup entry
                 | b   0x4024       |  /
       0x4288 -->| li  r3,0         |
                 | b   0x40b0       |
                 |------------------|
       0x4290 -->| insn=0xfffffd90  |  \ extable entry
                 | fixup=0xffffffec |  /
       0x4298 -->| insn=0xfffffe14  |
                 | fixup=0xffffffec |
                 +------------------+
    
       (Addresses shown here are chosen random, not real)
    
    Signed-off-by: Ravi Bangoria <ravi.bangoria@linux.ibm.com>
    Signed-off-by: Hari Bathini <hbathini@linux.ibm.com>
    Reviewed-by: Christophe Leroy <christophe.leroy@csgroup.eu>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20211012123056.485795-6-hbathini@linux.ibm.com

diff --git a/arch/powerpc/net/bpf_jit_comp64.c b/arch/powerpc/net/bpf_jit_comp64.c
index ad852f15ca61..ede8cb3e453f 100644
--- a/arch/powerpc/net/bpf_jit_comp64.c
+++ b/arch/powerpc/net/bpf_jit_comp64.c
@@ -297,7 +297,7 @@ asm (
 
 /* Assemble the body code between the prologue & epilogue */
 int bpf_jit_build_body(struct bpf_prog *fp, u32 *image, struct codegen_context *ctx,
-		       u32 *addrs)
+		       u32 *addrs, int pass)
 {
 	enum stf_barrier_type stf_barrier = stf_barrier_type_get();
 	const struct bpf_insn *insn = fp->insnsi;
@@ -779,12 +779,16 @@ int bpf_jit_build_body(struct bpf_prog *fp, u32 *image, struct codegen_context *
 		 */
 		/* dst = *(u8 *)(ul) (src + off) */
 		case BPF_LDX | BPF_MEM | BPF_B:
+		case BPF_LDX | BPF_PROBE_MEM | BPF_B:
 		/* dst = *(u16 *)(ul) (src + off) */
 		case BPF_LDX | BPF_MEM | BPF_H:
+		case BPF_LDX | BPF_PROBE_MEM | BPF_H:
 		/* dst = *(u32 *)(ul) (src + off) */
 		case BPF_LDX | BPF_MEM | BPF_W:
+		case BPF_LDX | BPF_PROBE_MEM | BPF_W:
 		/* dst = *(u64 *)(ul) (src + off) */
 		case BPF_LDX | BPF_MEM | BPF_DW:
+		case BPF_LDX | BPF_PROBE_MEM | BPF_DW:
 			switch (size) {
 			case BPF_B:
 				EMIT(PPC_RAW_LBZ(dst_reg, src_reg, off));
@@ -802,6 +806,13 @@ int bpf_jit_build_body(struct bpf_prog *fp, u32 *image, struct codegen_context *
 
 			if (size != BPF_DW && insn_is_zext(&insn[i + 1]))
 				addrs[++i] = ctx->idx * 4;
+
+			if (BPF_MODE(code) == BPF_PROBE_MEM) {
+				ret = bpf_add_extable_entry(fp, image, pass, ctx, ctx->idx - 1,
+							    4, dst_reg);
+				if (ret)
+					return ret;
+			}
 			break;
 
 		/*