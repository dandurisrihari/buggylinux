commit 8746f135bb01872ff412d408ea1aa9ebd328c1f5
Author: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
Date:   Wed May 20 14:20:14 2020 -0700

    Bluetooth: Disconnect if E0 is used for Level 4
    
    E0 is not allowed with Level 4:
    
    BLUETOOTH CORE SPECIFICATION Version 5.2 | Vol 3, Part C page 1319:
    
      '128-bit equivalent strength for link and encryption keys
       required using FIPS approved algorithms (E0 not allowed,
       SAFER+ not allowed, and P-192 not allowed; encryption key
       not shortened'
    
    SC enabled:
    
    > HCI Event: Read Remote Extended Features (0x23) plen 13
            Status: Success (0x00)
            Handle: 256
            Page: 1/2
            Features: 0x0b 0x00 0x00 0x00 0x00 0x00 0x00 0x00
              Secure Simple Pairing (Host Support)
              LE Supported (Host)
              Secure Connections (Host Support)
    > HCI Event: Encryption Change (0x08) plen 4
            Status: Success (0x00)
            Handle: 256
            Encryption: Enabled with AES-CCM (0x02)
    
    SC disabled:
    
    > HCI Event: Read Remote Extended Features (0x23) plen 13
            Status: Success (0x00)
            Handle: 256
            Page: 1/2
            Features: 0x03 0x00 0x00 0x00 0x00 0x00 0x00 0x00
              Secure Simple Pairing (Host Support)
              LE Supported (Host)
    > HCI Event: Encryption Change (0x08) plen 4
            Status: Success (0x00)
            Handle: 256
            Encryption: Enabled with E0 (0x01)
    [May 8 20:23] Bluetooth: hci0: Invalid security: expect AES but E0 was used
    < HCI Command: Disconnect (0x01|0x0006) plen 3
            Handle: 256
            Reason: Authentication Failure (0x05)
    
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>
    Signed-off-by: Marcel Holtmann <marcel@holtmann.org>

diff --git a/net/bluetooth/hci_event.c b/net/bluetooth/hci_event.c
index e08d4dd9a24e..e060fc9ebb18 100644
--- a/net/bluetooth/hci_event.c
+++ b/net/bluetooth/hci_event.c
@@ -3065,27 +3065,23 @@ static void hci_encrypt_change_evt(struct hci_dev *hdev, struct sk_buff *skb)
 
 	clear_bit(HCI_CONN_ENCRYPT_PEND, &conn->flags);
 
+	/* Check link security requirements are met */
+	if (!hci_conn_check_link_mode(conn))
+		ev->status = HCI_ERROR_AUTH_FAILURE;
+
 	if (ev->status && conn->state == BT_CONNECTED) {
 		if (ev->status == HCI_ERROR_PIN_OR_KEY_MISSING)
 			set_bit(HCI_CONN_AUTH_FAILURE, &conn->flags);
 
+		/* Notify upper layers so they can cleanup before
+		 * disconnecting.
+		 */
+		hci_encrypt_cfm(conn, ev->status);
 		hci_disconnect(conn, HCI_ERROR_AUTH_FAILURE);
 		hci_conn_drop(conn);
 		goto unlock;
 	}
 
-	/* In Secure Connections Only mode, do not allow any connections
-	 * that are not encrypted with AES-CCM using a P-256 authenticated
-	 * combination key.
-	 */
-	if (hci_dev_test_flag(hdev, HCI_SC_ONLY) &&
-	    (!test_bit(HCI_CONN_AES_CCM, &conn->flags) ||
-	     conn->key_type != HCI_LK_AUTH_COMBINATION_P256)) {
-		hci_connect_cfm(conn, HCI_ERROR_AUTH_FAILURE);
-		hci_conn_drop(conn);
-		goto unlock;
-	}
-
 	/* Try reading the encryption key size for encrypted ACL links */
 	if (!ev->status && ev->encrypt && conn->type == ACL_LINK) {
 		struct hci_cp_read_enc_key_size cp;